<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DigitalRune.Graphics.Content.Pipeline</name>
    </assembly>
    <members>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.AnimationMerger">
            <summary>
            Merges the animations of several animation files (e.g. .fbx) into a given NodeContent.
            </summary>
            <remarks>
            See http://blogs.msdn.com/b/shawnhar/archive/2010/06/18/merging-animation-files.aspx for more
            information.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.AnimationMerger.Merge(System.String,Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationContentDictionary,Microsoft.Xna.Framework.Content.Pipeline.ContentIdentity,Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext)">
            <summary>
            Merges the specified animation files to the specified animation dictionary.
            </summary>
            <param name="animationFiles">
            The animation files as a string separated by semicolon (relative to the folder of the model 
            file). For example: "run.fbx;jump.fbx;turn.fbx".
            </param>
            <param name="animationDictionary">The animation dictionary.</param>
            <param name="contentIdentity">The content identity.</param>
            <param name="context">The content processor context.</param>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.AnimationSplitDefinition">
            <summary>
            Defines a region in the original (merged) animation.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.Pipeline.AnimationSplitDefinition.Name">
            <summary>
            The name of the animation.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.Pipeline.AnimationSplitDefinition.StartTime">
            <summary>
            The start time.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.Pipeline.AnimationSplitDefinition.EndTime">
            <summary>
            The end time.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.AnimationSplitDefinition.AddLoopFrame">
            <summary>
            Gets or sets a value indicating whether to add a loop frame at the end of the animation.
            </summary>
            <value>
            <see langword="true"/> to add a loop frame; otherwise, <see langword="false"/>. The default
            value is <see langword="false"/>.
            </value>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.AnimationSplitter">
            <summary>
            Splits an animation into separate animations based on an XML file defining the splits.
            </summary>
            <remarks>
            <para>
            Some FBX exporters support only a single animation (take) per model. One solution to support 
            multiple animations per model is to concatenate all animations into a single long one. A 
            separate, manually created XML file defines the animation sections.
            </para>
            <example>
            The XML file allows to specify the start and end times in "seconds" or in "frames". The file 
            must use this format:
            <code lang="xml">
            <![CDATA[
            <?xml version="1.0" encoding="utf-8"?>
            <Animations Framerate="24">   <!-- Framerate only needed if you want to specify start and end in frames. -->
              <!-- Using time in seconds: -->
              <Animation Name="Walk" StartTime="0" EndTime="1.5"/>
            
              <!-- Or using frames: -->
              <Animation Name="Walk2" StartFrame="45" EndFrame="60"/>
            </Animations>
            ]]>
            </code>
            </example>
            <para>
            The method <see cref="M:DigitalRune.Graphics.Content.Pipeline.AnimationSplitter.Split(Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationContentDictionary,System.String,Microsoft.Xna.Framework.Content.Pipeline.ContentIdentity,Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext)"/> 
            parses the XML split definition file, removes the original animation and cuts it into separate
            animations.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.AnimationSplitter.Split(Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationContentDictionary,System.String,Microsoft.Xna.Framework.Content.Pipeline.ContentIdentity,Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext)">
            <overloads>
            <summary>
            Splits the animation in the specified animation dictionary into several separate animations.
            </summary>
            </overloads>
            <summary>
            Splits the animation in the specified animation dictionary into several separate animations.
            </summary>
            <param name="animationDictionary">The animation dictionary.</param>
            <param name="splitFile">
            The path of the XML file defining the splits. This path is relative to the folder of the 
            model file. Usually it is simply the filename, e.g. "Dude_AnimationSplits.xml".
            </param>
            <param name="contentIdentity">The content identity.</param>
            <param name="context">The content processor context.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="contentIdentity"/> or <paramref name="context"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.AnimationSplitter.Split(Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationContentDictionary,System.Collections.Generic.IList{DigitalRune.Graphics.Content.Pipeline.AnimationSplitDefinition},Microsoft.Xna.Framework.Content.Pipeline.ContentIdentity,Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext)">
            <summary>
            Splits the animation in the specified animation dictionary into several separate animations.
            </summary>
            <param name="animationDictionary">The animation dictionary.</param>
            <param name="splits">The animation split definitions.</param>
            <param name="contentIdentity">The content identity.</param>
            <param name="context">The content processor context.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="contentIdentity"/> or <paramref name="context"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.AnimationSplitter.ParseAnimationSplitDefinitions(System.Xml.Linq.XElement,Microsoft.Xna.Framework.Content.Pipeline.ContentIdentity,DigitalRune.Graphics.Content.Pipeline.ContentPipelineContext)">
            <summary>
            Parses the animation split definitions defined by the specified XML element.
            </summary>
            <param name="animationsElement">The XML element that defines the animation splits.</param>
            <param name="contentIdentity">The content identity.</param>
            <param name="context">The context.</param>
            <returns>The list of animation split definitions.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="animationsElement"/>, <paramref name="contentIdentity"/>, or 
            <paramref name="context"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.ContentHelper">
            <summary>
            Provides helper methods for content processing.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.ContentHelper.PrintContentTree(Microsoft.Xna.Framework.Content.Pipeline.Graphics.NodeContent,Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext)">
            <summary>
            Visualizes the tree structure of the specified content node.
            </summary>
            <param name="node">The content node.</param>
            <param name="context">Contains any required custom process parameters.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.ContentHelper.IsValidTypeForEffectParameter(System.Object)">
            <summary>
            Determines whether the type of the given object is a valid effect parameter type.
            </summary>
            <param name="effectParameter">The effect parameter.</param>
            <returns>
            <see langword="true"/> if the type is valid; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.ContentHelper.CopyContentItem(Microsoft.Xna.Framework.Content.Pipeline.ContentItem,Microsoft.Xna.Framework.Content.Pipeline.ContentItem)">
            <summary>
            Copies the properties of a <see cref="T:Microsoft.Xna.Framework.Content.Pipeline.ContentItem"/>.
            </summary>
            <param name="source">The source item.</param>
            <param name="target">The target item.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.ContentHelper.CopyMaterialContent(Microsoft.Xna.Framework.Content.Pipeline.Graphics.MaterialContent,Microsoft.Xna.Framework.Content.Pipeline.Graphics.MaterialContent)">
            <summary>
            Copies the properties of a <see cref="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MaterialContent"/>.
            </summary>
            <param name="source">The source item.</param>
            <param name="target">The target item.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.ContentHelper.FindFile(System.String,Microsoft.Xna.Framework.Content.Pipeline.ContentIdentity)">
            <summary>
            Tries to locate the specified file.
            </summary>
            <param name="path">
            The name of the file. May include a relative or absolute path.
            </param>
            <param name="identity">The content identity.</param>
            <returns>The full path and file name.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.ContentHelper.GetMonoGamePlatform">
            <summary>
            Gets the MonoGame platform identifier.
            </summary>
            <returns>
            The name of the MonoGame platform (e.g. "IOS"), or <see langword="null"/> or 
            <see cref="F:System.String.Empty"/> if this is an XNA project.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.ContentHelper.ParseSceneNodeName(System.String,System.String@,System.Nullable{System.Int32}@)">
            <summary>
            Parses the name of the scene node.
            </summary>
            <param name="originalName">
            The original name of the scene node. Example: "MeshXyz_LOD2".
            </param>
            <param name="name">The name of the scene node. Example: "MeshXyz"</param>
            <param name="lod">The LOD level. Example: 2</param>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.ContentHelper.IsMorphTarget(Microsoft.Xna.Framework.Content.Pipeline.Graphics.NodeContent)">
            <overloads>
            <summary>
            Determines whether the specified node represents a morph target.
            </summary>
            </overloads>
            
            <summary>
            Determines whether the specified node represents a morph target.
            </summary>
            <param name="node">The node.</param>
            <returns>
            <see langword="true"/> if the mesh represents a morph target; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.ContentHelper.IsMorphTarget(Microsoft.Xna.Framework.Content.Pipeline.Graphics.NodeContent,System.String@)">
            <summary>
            Determines whether the specified node represents a morph target.
            </summary>
            <param name="node">The node.</param>
            <param name="name">The name of the morph target.</param>
            <returns>
            <see langword="true"/> if the mesh represents a morph target; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.ContentHelper.IsOccluder(Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshContent)">
            <summary>
            Determines whether the specified mesh represents an occluder.
            </summary>
            <param name="mesh">The mesh.</param>
            <returns>
            <see langword="true"/> if the mesh represents an occluder; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.ContentHelper.IsSkinned(Microsoft.Xna.Framework.Content.Pipeline.Graphics.NodeContent)">
            <overloads>
            <summary>
            Determines whether the specified content is a skinned mesh.
            </summary>
            </overloads>
            
            <summary>
            Determines whether the specified node is a skinned mesh.
            </summary>
            <param name="node">The node.</param>
            <returns>
            <see langword="true"/> if <paramref name="node"/> is a skinned mesh; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.ContentHelper.IsSkinned(Microsoft.Xna.Framework.Content.Pipeline.Graphics.GeometryContent)">
            <summary>
            Determines whether the specified geometry is a skinned mesh.
            </summary>
            <param name="geometry">The <see cref="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.GeometryContent"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="geometry"/> is a skinned mesh; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.ContentHelper.ConvertToSkinnedMaterial(Microsoft.Xna.Framework.Content.Pipeline.Graphics.MaterialContent)">
            <summary>
            Converts a <see cref="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BasicMaterialContent"/> to an equivalent
            <see cref="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.SkinnedMaterialContent"/>.
            </summary>
            <param name="material">The <see cref="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BasicMaterialContent"/>.</param>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.SkinnedMaterialContent"/>.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.ContentPipelineContext">
            <summary>
            Wraps a <see cref="T:Microsoft.Xna.Framework.Content.Pipeline.ContentImporterContext"/> or a <see cref="T:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext"/> and
            provides a common API.
            </summary>
            <remarks>
            This is a workaround because <see cref="T:Microsoft.Xna.Framework.Content.Pipeline.ContentImporterContext"/> and
            <see cref="T:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext"/> do not have a shared base class.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.ContentPipelineContext.IntermediateDirectory">
            <summary>
            Gets the absolute path to the root of the build intermediate (object) directory.
            </summary>
            <value>The absolute path to the root of the build intermediate (object) directory.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.ContentPipelineContext.Logger">
            <summary>
            Gets the logger for the content importer or processor.
            </summary>
            <value>The logger for the content importer or processor.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.ContentPipelineContext.OutputDirectory">
            <summary>
            Gets the absolute path to the root of the build output (binaries) directory.
            </summary>
            <value>The absolute path to the root of the build output (binaries) directory.</value>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.ContentPipelineContext.#ctor(Microsoft.Xna.Framework.Content.Pipeline.ContentImporterContext)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Content.Pipeline.ContentPipelineContext"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Content.Pipeline.ContentPipelineContext"/> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.ContentPipelineContext.#ctor(Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Content.Pipeline.ContentPipelineContext"/> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.ContentPipelineContext.AddDependency(System.String)">
            <summary>
            Adds a dependency to the specified file. This causes a rebuild of the file, when modified,
            on subsequent incremental builds.
            </summary>
            <param name="filename">The name of an asset file.</param>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.DREffectBindingContent">
            <summary>
            Stores the processed data for an <strong>EffectBinding</strong> asset.
            </summary>  
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DREffectBindingContent.EffectType">
            <summary>
            Gets or sets the type of the effect.
            </summary>
            <value>The type of the effect.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DREffectBindingContent.EnvironmentMap">
            <summary>
            Gets or sets the current environment map texture.
            </summary>
            <value>The current environment map texture.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DREffectBindingContent.Texture">
            <summary>
            Gets or sets the current texture.
            </summary>
            <value>The current texture.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DREffectBindingContent.Texture2">
            <summary>
            Gets or sets the current overlay texture.
            </summary>
            <value>The current overlay texture.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DREffectBindingContent.Effect">
            <summary>
            Gets or sets the imported effect.
            </summary>
            <value>The imported effect.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DREffectBindingContent.CompiledEffect">
            <summary>
            Gets or sets the processed effect.
            </summary>
            <value>The processed effect.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DREffectBindingContent.EffectAsset">
            <summary>
            Gets or sets the name of the effect, if an external asset is referenced.
            </summary>
            <value>The name of the effect, if an external asset is referenced.</value>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.DREffectBindingWriter">
            <summary>
            Writes an <see cref="T:DigitalRune.Graphics.Content.Pipeline.DREffectBindingContent"/> to a binary format that can be read by the 
            <strong>EffectBindingReader</strong> to load an <strong>EffectBinding</strong>.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DREffectBindingWriter.GetRuntimeType(Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform)">
            <summary>
            Gets the assembly qualified name of the runtime target type.
            </summary>
            <param name="targetPlatform">The target platform.</param>
            <returns>The qualified name.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DREffectBindingWriter.GetRuntimeReader(Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform)">
            <summary>
            Gets the assembly qualified name of the runtime loader for this type.
            </summary>
            <param name="targetPlatform">Name of the platform.</param>
            <returns>Name of the runtime loader.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DREffectBindingWriter.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,DigitalRune.Graphics.Content.Pipeline.DREffectBindingContent)">
            <summary>
            Compiles a strongly typed object into binary format.
            </summary>
            <param name="output">The content writer serializing the value.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.DREffectType">
            <summary>
            Specifies the effect type.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.Pipeline.DREffectType.AlphaTestEffect">
            <summary>
            The predefined effect that supports alpha testing.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.Pipeline.DREffectType.BasicEffect">
            <summary>
            The predefined basic rendering effect.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.Pipeline.DREffectType.DualTextureEffect">
            <summary>
            The predefined effect that supports two-layer multitexturing.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.Pipeline.DREffectType.EnvironmentMapEffect">
            <summary>
            The predefined effect that supports environment mapping.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.Pipeline.DREffectType.SkinnedEffect">
            <summary>
            The predefined effect for rendering skinned models.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.Pipeline.DREffectType.CustomEffect">
            <summary>
            A custom effect.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.DRMaterialContent">
            <summary>
            Stores the processed data for a <strong>Material</strong> asset.
            </summary>  
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRMaterialContent.Definition">
            <summary>
            Gets or sets the imported material definition (XML file).
            </summary>
            <value>The imported material definition (XML file).</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRMaterialContent.Passes">
            <summary>
            Gets or sets the effect bindings per render pass.
            </summary>
            <value>The effect bindings per render pass.</value>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.DRMaterialImporter">
            <summary>
            Imports a material definition (.drmat file).
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRMaterialImporter.Import(System.String,Microsoft.Xna.Framework.Content.Pipeline.ContentImporterContext)">
            <summary>
            Called by the framework when importing a game asset. This is the method called by XNA when
            an asset is to be imported into an object that can be recognized by the Content Pipeline.
            </summary>
            <param name="filename">Name of a game asset file.</param>
            <param name="context">
            Contains information for importing a game asset, such as a logger interface.
            </param>
            <returns>Resulting game asset.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.DRMaterialProcessor">
            <summary>
            Builds a material, which can be used for rendering a model.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.Pipeline.DRMaterialProcessor.DefaultPass">
            <summary>
            The name of the default render pass.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRMaterialProcessor.ColorKeyColor">
            <summary>
            Gets or sets the color used when color keying for a texture is enabled. When color keying, 
            all pixels of a specified color are replaced with transparent black.
            </summary>
            <value>Color value of the material to replace with transparent black.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRMaterialProcessor.ColorKeyEnabled">
            <summary>
            Gets or sets a value indicating whether color keying of a model is enabled.
            </summary>
            <value>
            <see langword="true"/> if color keying is enabled; <see langword="false"/> otherwise.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRMaterialProcessor.GenerateMipmaps">
            <summary>
            Gets or sets a value indicating whether a full chain of mipmaps is generated from the source 
            material. Existing mipmaps of the material are not replaced.
            </summary>
            <value>
            <see langword="true"/> if mipmap generation is enabled; <see langword="false"/> otherwise.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRMaterialProcessor.InputTextureGamma">
            <summary>
            Gets or sets the gamma of the input textures.
            </summary>
            <value>The gamma of the input textures. The default value is 2.2.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRMaterialProcessor.OutputTextureGamma">
            <summary>
            Gets or sets the gamma of the output textures.
            </summary>
            <value>The gamma of the output textures. The default value is 2.2.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRMaterialProcessor.PremultiplyTextureAlpha">
            <summary>
            Gets or sets a value indicating whether alpha premultiply of textures is enabled.
            </summary>
            <value>
            <see langword="true"/> if alpha premultiply is enabled; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRMaterialProcessor.ResizeTexturesToPowerOfTwo">
            <summary>
            Gets or sets a value indicating whether resizing of textures are enabled.
            </summary>
            <value>
            <see langword="true"/> if resizing is enabled; <see langword="false"/> otherwise.
            </value>
            <remarks>
            Typically used to maximize compatibility with a graphics card because many graphics cards 
            do not support a material size that is not a power of two. If 
            <see cref="P:DigitalRune.Graphics.Content.Pipeline.DRMaterialProcessor.ResizeTexturesToPowerOfTwo"/> is enabled, textures are resized to the next 
            largest power of two.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRMaterialProcessor.TextureFormat">
            <summary>
            Gets or sets the texture format of output materials.
            </summary>
            <value>The texture format of the output.</value>
            <remarks>
            Materials can either be left unchanged from the source asset, converted to a corresponding 
            <see cref="T:Microsoft.Xna.Framework.Color"/>, or compressed using the appropriate 
            <see cref="F:DigitalRune.Graphics.Content.Pipeline.DRTextureFormat.Dxt"/> format.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRMaterialProcessor.ReferenceAlpha">
            <summary>
            Gets or sets the reference alpha value, which is used in the alpha test.
            </summary>
            <value>The reference alpha value, which is used in the alpha test.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRMaterialProcessor.ScaleTextureAlphaToCoverage">
            <summary>
            Gets or sets a value indicating whether the alpha of the textures should be scaled to 
            achieve the same alpha test coverage as in the source images.
            </summary>
            <value>
            <see langword="true"/> to scale the alpha values of the textures; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRMaterialProcessor.DefaultEffectType">
            <summary>
            Gets or sets the type of the default effect.
            </summary>
            <value>The type of the default effect.</value>
            <remarks>
            If the model does not contain effect code or reference a effect file, then the default 
            effect file will be used. If the type is <see cref="F:DigitalRune.Graphics.Content.Pipeline.DREffectType.CustomEffect"/>, then
            <see cref="P:DigitalRune.Graphics.Content.Pipeline.DRMaterialProcessor.DefaultEffectFile"/> must be set.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRMaterialProcessor.DefaultEffectFile">
            <summary>
            Gets or sets the path of the default DirectX effect file.
            </summary>
            <value>The path of the default DirectX effect file.</value>
            <remarks>
            If the model does not contain effect code or reference a effect file, then the default 
            effect file will be used. If <see cref="P:DigitalRune.Graphics.Content.Pipeline.DRMaterialProcessor.DefaultEffectType"/> is set to 
            <see cref="F:DigitalRune.Graphics.Content.Pipeline.DREffectType.CustomEffect"/>, then this property must specify a DirectX effect
            file. (The path of the filename is relative to the content root directory.)
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRMaterialProcessor.Process(Microsoft.Xna.Framework.Content.Pipeline.Graphics.MaterialContent,Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext)">
            <summary>
            Processes the specified input data and returns the result.
            </summary>
            <param name="input">Existing content object being processed.</param>
            <param name="context">Contains any required custom process parameters.</param>
            <returns>A typed object representing the processed input.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="input"/> or <paramref name="context"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRMaterialProcessor.OnBuildEffect(Microsoft.Xna.Framework.Content.Pipeline.ExternalReference{Microsoft.Xna.Framework.Content.Pipeline.Graphics.EffectContent},Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext)">
            <summary>
            Builds effect content.
            </summary>
            <param name="effect">An external reference to the effect content.</param>
            <param name="context">Context for the specified processor.</param>
            <returns>A platform-specific compiled binary effect.</returns>
            <remarks>
            If the input to process is of type <see cref="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.EffectMaterialContent"/>, this function will 
            be called to request that the <see cref="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.EffectContent"/> be built. The 
            <see cref="T:Microsoft.Xna.Framework.Content.Pipeline.Processors.EffectProcessor"/> is used to process the <see cref="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.EffectContent"/>. Subclasses 
            of <see cref="T:Microsoft.Xna.Framework.Content.Pipeline.Processors.MaterialProcessor"/> can override this function to modify the parameters used 
            to build <see cref="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.EffectContent"/>. For example, a different version of this function 
            could request a different processor for the <see cref="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.EffectContent"/>. 
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRMaterialProcessor.OnBuildTexture(System.String,Microsoft.Xna.Framework.Content.Pipeline.ExternalReference{Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureContent},Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext)">
            <summary>
            Builds texture content.
            </summary>
            <param name="textureName">
            The name of the texture. This should correspond to the key used to store the texture in
            <see cref="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MaterialContent.Textures"/>.
            </param>
            <param name="texture">
            The asset to build. This should be a member of <see cref="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MaterialContent.Textures"/>. The
            opaque data dictionary stored in <paramref name="texture"/> may contain parameters for the 
            <see cref="T:DigitalRune.Graphics.Content.Pipeline.DRTextureProcessor"/>.
            </param>
            <param name="context">Context for the specified processor.</param>
            <returns>The reference to the built texture.</returns>
            <remarks>
            <paramref name="textureName"/> can be used to determine which processor to use. For example,
            if a texture is being used as a normal map, the user may not want to use DXT compression.
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.DRMaterialWriter">
            <summary>
            Writes a <see cref="T:DigitalRune.Graphics.Content.Pipeline.DRMaterialContent"/> to binary format that can be read by the 
            <strong>MaterialReader</strong> to load a <strong>Material</strong>.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRMaterialWriter.GetRuntimeType(Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform)">
            <summary>
            Gets the assembly qualified name of the runtime target type.
            </summary>
            <param name="targetPlatform">The target platform.</param>
            <returns>The qualified name.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRMaterialWriter.GetRuntimeReader(Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform)">
            <summary>
            Gets the assembly qualified name of the runtime loader for this type.
            </summary>
            <param name="targetPlatform">Name of the platform.</param>
            <returns>Name of the runtime loader.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRMaterialWriter.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,DigitalRune.Graphics.Content.Pipeline.DRMaterialContent)">
            <summary>
            Compiles a strongly typed object into binary format.
            </summary>
            <param name="output">The content writer serializing the value.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.DRMeshContent">
            <summary>
            Stores the processed data for a <strong>Mesh</strong> asset.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRMeshContent.BoundingShape">
            <summary>
            Gets or sets the bounding shape for this mesh.
            </summary>
            <value>The bounding shape for this mesh.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRMeshContent.Submeshes">
            <summary>
            Gets or sets the submeshes associated with this mesh.
            </summary>
            <value>The submeshes associated with this mesh.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRMeshContent.Name">
            <summary>
            Gets or sets the mesh name.
            </summary>
            <value>The mesh name.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRMeshContent.Occluder">
            <summary>
            Gets or sets the occluder.
            </summary>
            <value>The occluder.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRMeshContent.Skeleton">
            <summary>
            Gets or sets the skeleton.
            </summary>
            <value>The skeleton.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRMeshContent.Animations">
            <summary>
            Gets or sets the animations.
            </summary>
            <value>The animations. Can be <see langword="null"/> if there are no animations.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRMeshContent.UserData">
            <summary>
            Gets or sets a user-defined object.
            </summary>
            <value>User-defined object.</value>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.DRMeshWriter">
            <summary>
            Writes a <see cref="T:DigitalRune.Graphics.Content.Pipeline.DRMeshContent"/> to binary format that can be read by the
            <strong>MeshReader</strong> to load a <strong>Mesh</strong>
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRMeshWriter.GetRuntimeType(Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform)">
            <summary>
            Gets the assembly qualified name of the runtime target type.
            </summary>
            <param name="targetPlatform">The target platform.</param>
            <returns>The qualified name.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRMeshWriter.GetRuntimeReader(Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform)">
            <summary>
            Gets the assembly qualified name of the runtime loader for this type.
            </summary>
            <param name="targetPlatform">Name of the platform.</param>
            <returns>Name of the runtime loader.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRMeshWriter.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,DigitalRune.Graphics.Content.Pipeline.DRMeshContent)">
            <summary>
            Compiles a strongly typed object into binary format.
            </summary>
            <param name="output">The content writer serializing the value.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.DRMorphTargetContent">
            <summary>
            Stores the processed data for a <strong>MorphTarget</strong>.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRMorphTargetContent.Name">
            <summary>
            Gets or sets the name of the morph target.
            </summary>
            <value>The name of the morph target.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRMorphTargetContent.VertexBuffer">
            <summary>
            Gets or sets the vertex buffer associated with this morph target.
            </summary>
            <value>The vertex buffer associated with this morph target.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRMorphTargetContent.StartVertex">
            <summary>
            Gets or sets the index of the first vertex in the vertex buffer that belongs to this morph
            target (a.k.a base vertex or vertex offset).
            </summary>
            <value>The index of the first vertex in the vertex buffer.</value>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.DRMorphTargetWriter">
            <summary>
            Writes a <see cref="T:DigitalRune.Graphics.Content.Pipeline.DRMorphTargetContent"/> to binary format that can be read by the
            <strong>MorphTargetReader</strong> to load a <strong>MorphTarget</strong>.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRMorphTargetWriter.GetRuntimeType(Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform)">
            <summary>
            Gets the assembly qualified name of the runtime target type.
            </summary>
            <param name="targetPlatform">The target platform.</param>
            <returns>The qualified name.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRMorphTargetWriter.GetRuntimeReader(Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform)">
            <summary>
            Gets the assembly qualified name of the runtime loader for this type.
            </summary>
            <param name="targetPlatform">Name of the platform.</param>
            <returns>Name of the runtime loader.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRMorphTargetWriter.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,DigitalRune.Graphics.Content.Pipeline.DRMorphTargetContent)">
            <summary>
            Compiles a strongly typed object into binary format.
            </summary>
            <param name="output">The content writer serializing the value.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.DRSubmeshContent">
            <summary>
            Stores the processed data for a <strong>Submesh</strong> asset.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRSubmeshContent.VertexBuffer">
            <summary>
            Gets or sets the vertex buffer associated with this submesh.
            </summary>
            <value>The vertex buffer associated with this submesh.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRSubmeshContent.StartVertex">
            <summary>
            Gets or sets the index of the first vertex in the vertex buffer that belongs to this submesh
            (a.k.a base vertex or vertex offset).
            </summary>
            <value>The index of the first vertex in the vertex buffer.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRSubmeshContent.VertexCount">
            <summary>
            Gets or sets the number of vertices used in this submesh.
            </summary>
            <value>The number of vertices used in this submesh.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRSubmeshContent.IndexBuffer">
            <summary>
            Gets or sets the index buffer associated with this submesh.
            </summary>
            <value>The index buffer associated with this submesh.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRSubmeshContent.StartIndex">
            <summary>
            Gets or sets the location in the index buffer at which to start reading vertices.
            </summary>
            <value>The location in the index buffer at which to start reading vertices.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRSubmeshContent.PrimitiveCount">
            <summary>
            Gets or sets the number of primitives to render for this submesh.
            </summary>
            <value>The number of primitives in this submesh.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRSubmeshContent.MorphTargets">
            <summary>
            Gets or sets the morph targets associated with this submesh.
            </summary>
            <value>The morph targets. The default value is <see langword="null"/>.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRSubmeshContent.ExternalMaterial">
            <summary>
            Gets or sets the external material of this submesh.
            </summary>
            <value>The external material of this submesh.</value>
            <remarks>
            The material is assigned to the submesh using the model description (XML file). The material
            is defined in an external material definition (XML file). Materials can be shared between
            models. If <see cref="P:DigitalRune.Graphics.Content.Pipeline.DRSubmeshContent.ExternalMaterial"/> is set, the property <see cref="P:DigitalRune.Graphics.Content.Pipeline.DRSubmeshContent.LocalMaterial"/>
            can be ignored.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRSubmeshContent.LocalMaterial">
            <summary>
            Gets or sets the local material of this submesh, which is used if the model description (XML
            file) is missing or incomplete.
            </summary>
            <value>
            The local material of this submesh, which is used if the model description (XML file) is 
            missing or incomplete.
            </value>
            <remarks>
            This property is only used, if <see cref="P:DigitalRune.Graphics.Content.Pipeline.DRSubmeshContent.ExternalMaterial"/> is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRSubmeshContent.UserData">
            <summary>
            Gets or sets a user-defined object.
            </summary>
            <value>A user-defined object.</value>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.DRSubmeshWriter">
            <summary>
            Writes a <see cref="T:DigitalRune.Graphics.Content.Pipeline.DRSubmeshContent"/> to binary format that can be read by the
            <strong>SubmeshReader</strong> to load a <strong>Submesh</strong>.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRSubmeshWriter.GetRuntimeType(Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform)">
            <summary>
            Gets the assembly qualified name of the runtime target type.
            </summary>
            <param name="targetPlatform">The target platform.</param>
            <returns>The qualified name.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRSubmeshWriter.GetRuntimeReader(Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform)">
            <summary>
            Gets the assembly qualified name of the runtime loader for this type.
            </summary>
            <param name="targetPlatform">Name of the platform.</param>
            <returns>Name of the runtime loader.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRSubmeshWriter.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,DigitalRune.Graphics.Content.Pipeline.DRSubmeshContent)">
            <summary>
            Compiles a strongly typed object into binary format.
            </summary>
            <param name="output">The content writer serializing the value.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Graphics.Content.Pipeline"/> namespace provides the content
            pipeline for DigitalRune Graphics. (Only available in XNA/MonoGame compatible builds.)
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.DROccluderContent">
            <summary>
            Stores the processed data for an <strong>Occluder</strong> asset.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DROccluderContent.Vertices">
            <summary>
            Gets or sets the triangle vertices.
            </summary>
            <value>The triangle vertices.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DROccluderContent.Indices">
            <summary>
            Gets or sets the triangle indices.
            </summary>
            <value>The triangle indices.</value>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.DROccluderWriter">
            <summary>
            Writes a <see cref="T:DigitalRune.Graphics.Content.Pipeline.DROccluderContent"/> to binary format that can be read by the
            <strong>OccluderReader</strong> to load an <strong>Occluder</strong>
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DROccluderWriter.GetRuntimeType(Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform)">
            <summary>
            Gets the assembly qualified name of the runtime target type.
            </summary>
            <param name="targetPlatform">The target platform.</param>
            <returns>The qualified name.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DROccluderWriter.GetRuntimeReader(Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform)">
            <summary>
            Gets the assembly qualified name of the runtime loader for this type.
            </summary>
            <param name="targetPlatform">Name of the platform.</param>
            <returns>Name of the runtime loader.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DROccluderWriter.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,DigitalRune.Graphics.Content.Pipeline.DROccluderContent)">
            <summary>
            Compiles a strongly typed object into binary format.
            </summary>
            <param name="output">The content writer serializing the value.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.Properties.Resources.DefaultModelDescription">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;!-- This file was generated automatically by the DigitalRune Model Content Processor. --&gt;
            
            &lt;Model File=&quot;{0}&quot;
                   GenerateTangentFrames=&quot;False&quot;
                   PremultiplyVertexColors=&quot;True&quot;
                   RotationX=&quot;0&quot; RotationY=&quot;0&quot; RotationZ=&quot;0&quot;
                   Scale=&quot;1&quot;
                   SwapWindingOrder=&quot;False&quot;&gt;
            
            &lt;!-- Optional: Assign materials to submeshes.
                 Without this info, the content processor assumes that the material definitions
                 (XML files) have the same name as the use [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.DRLodGroupNodeContent">
            <summary>
            Stores processing data for a <strong>LodGroupNode</strong>.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRLodGroupNodeContent.Levels">
            <summary>
            Gets or sets the levels of detail (LODs).
            </summary>
            <value>The levels of detail (LODs).</value>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRLodGroupNodeContent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Content.Pipeline.DRLodGroupNodeContent"/> class.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.DRLodGroupNodeWriter">
            <summary>
            Writes a <see cref="T:DigitalRune.Graphics.Content.Pipeline.DRLodGroupNodeContent"/> to binary format that can be read by the 
            <strong>LodGroupNodeReader</strong> to load a <strong>LodGroupNode</strong>.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRLodGroupNodeWriter.GetRuntimeType(Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform)">
            <summary>
            Gets the assembly qualified name of the runtime target type.
            </summary>
            <param name="targetPlatform">The target platform.</param>
            <returns>The qualified name.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRLodGroupNodeWriter.GetRuntimeReader(Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform)">
            <summary>
            Gets the assembly qualified name of the runtime loader for this type.
            </summary>
            <param name="targetPlatform">Name of the platform.</param>
            <returns>Name of the runtime loader.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRLodGroupNodeWriter.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,DigitalRune.Graphics.Content.Pipeline.DRLodGroupNodeContent)">
            <summary>
            Compiles a strongly typed object into binary format.
            </summary>
            <param name="output">The content writer serializing the value.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.DRMeshNodeContent">
            <summary>
            Stores processing data for a <strong>MeshNode</strong>.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRMeshNodeContent.InputMesh">
            <summary>
            Gets or sets the imported <see cref="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshContent"/>.
            </summary>
            <value>The imported <see cref="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshContent"/>.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRMeshNodeContent.InputMorphTargets">
            <summary>
            Gets or sets the morph targets associated with the <see cref="P:DigitalRune.Graphics.Content.Pipeline.DRMeshNodeContent.InputMesh"/>.
            </summary>
            <value>The morph targets of the <see cref="P:DigitalRune.Graphics.Content.Pipeline.DRMeshNodeContent.InputMesh"/>.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRMeshNodeContent.Mesh">
            <summary>
            Gets or sets the mesh.
            </summary>
            <value>The mesh.</value>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.DRMeshNodeWriter">
            <summary>
            Writes a <see cref="T:DigitalRune.Graphics.Content.Pipeline.DRMeshNodeContent"/> to binary format that can be read by the 
            <strong>MeshNodeReader</strong> to load a <strong>MeshNode</strong>.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRMeshNodeWriter.GetRuntimeType(Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform)">
            <summary>
            Gets the assembly qualified name of the runtime target type.
            </summary>
            <param name="targetPlatform">The target platform.</param>
            <returns>The qualified name.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRMeshNodeWriter.GetRuntimeReader(Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform)">
            <summary>
            Gets the assembly qualified name of the runtime loader for this type.
            </summary>
            <param name="targetPlatform">Name of the platform.</param>
            <returns>Name of the runtime loader.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRMeshNodeWriter.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,DigitalRune.Graphics.Content.Pipeline.DRMeshNodeContent)">
            <summary>
            Compiles a strongly typed object into binary format.
            </summary>
            <param name="output">The content writer serializing the value.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.DRModelImporter">
            <summary>
            Imports a model based on the model description (.drmdl file).
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRModelImporter.Import(System.String,Microsoft.Xna.Framework.Content.Pipeline.ContentImporterContext)">
            <summary>
            Called by the framework when importing a game asset. This is the method called by XNA when
            an asset is to be imported into an object that can be recognized by the Content Pipeline.
            </summary>
            <param name="filename">Name of a game asset file.</param>
            <param name="context">
            Contains information for importing a game asset, such as a logger interface.
            </param>
            <returns>Resulting game asset.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.DRModelNodeContent">
            <summary>
            Stores the processed data for a <strong>ModelNode</strong> asset.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.DRModelNodeWriter">
            <summary>
            Writes a <see cref="T:DigitalRune.Graphics.Content.Pipeline.DRModelNodeContent"/> to binary format that can be read by the
            <strong>ModelNodeReader</strong> to load a <strong>ModelNode</strong>.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRModelNodeWriter.GetRuntimeType(Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform)">
            <summary>
            Gets the assembly qualified name of the runtime target type.
            </summary>
            <param name="targetPlatform">The target platform.</param>
            <returns>The qualified name.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRModelNodeWriter.GetRuntimeReader(Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform)">
            <summary>
            Gets the assembly qualified name of the runtime loader for this type.
            </summary>
            <param name="targetPlatform">Name of the platform.</param>
            <returns>Name of the runtime loader.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRModelNodeWriter.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,DigitalRune.Graphics.Content.Pipeline.DRModelNodeContent)">
            <summary>
            Compiles a strongly typed object into binary format.
            </summary>
            <param name="output">The content writer serializing the value.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.DRModelProcessor">
            <summary>
            Processes a game asset mesh to a model content that is optimal for runtime.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRModelProcessor.CreateMissingModelDescription">
            <summary>
            Gets or sets the value of the <strong>Create Missing Model Description</strong> 
            processor parameter.
            </summary>
            <value>
            <see langword="true"/> if a default model description file (*.drmdl) should be created if no
            model description file could be found.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRModelProcessor.CreateMissingMaterialDefinition">
            <summary>
            Gets or sets the value of the <strong>Create Missing Material Definition</strong> 
            processor parameter.
            </summary>
            <value>
            <see langword="true"/> if material description file (*.drmat) should be created for
            submeshes if no material definition file could be found.
            </value>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRModelProcessor.Process(Microsoft.Xna.Framework.Content.Pipeline.Graphics.NodeContent,Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext)">
            <summary>
            Converts mesh content to model content.
            </summary>
            <param name="input">The root node content.</param>
            <param name="context">Contains any required custom process parameters.</param>
            <returns>The model content.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRModelProcessor.BakeTransforms(Microsoft.Xna.Framework.Content.Pipeline.Graphics.NodeContent)">
            <summary>
            Bakes all node transforms of all skinned meshes into the geometry so that each node's
            transform is Identity. (Only bones and morph targets keep their transforms.)
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRModelProcessor.BakeAllTransforms(Microsoft.Xna.Framework.Content.Pipeline.Graphics.NodeContent)">
            <summary>
            Bakes all node transforms in the specified subtree into the mesh geometry so that each
            node's transform is Identity. (Only bones and morph targets keep their transforms.)
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.DRModelProcessor.LodComparer">
            <summary>
            Compares scene nodes by LOD distance and LOD level.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRModelProcessor.CombineLodGroups">
            <summary>
            Traverses the scene graph and collapses all LODs into <strong>LodGroupNodes</strong>.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRModelProcessor.SetSkinnedMaterial">
            <summary>
            Sets a <see cref="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.SkinnedMaterialContent"/> for all skinned meshes.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRModelProcessor.CreateMaterialDefinition(Microsoft.Xna.Framework.Content.Pipeline.Graphics.MaterialContent)">
            <summary>
            Creates the missing material definition.
            </summary>
            <param name="material">The material.</param>
            <returns>
            <see langword="true"/> if the material definition was successfully created; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRModelProcessor.BuildMaterial(System.Object)">
            <summary>
            Builds the material.
            </summary>
            <param name="material">
            The external material (<see cref="T:System.String"/>) or the local material 
            (<see cref="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MaterialContent"/>).
            </param>
            <returns>
            The processed material.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRModelProcessor.OnBuildMaterial(Microsoft.Xna.Framework.Content.Pipeline.ExternalReference{DigitalRune.Graphics.Content.Pipeline.DRMaterialContent},Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext)">
            <summary>
            Called by the framework when a material asset needs to be built.
            </summary>
            <param name="material">The material asset.</param>
            <param name="context">The context of this processor.</param>
            <returns>A reference to the processed material.</returns>
            <remarks>
            This method is called when the model uses a material defined in an XML file. 
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRModelProcessor.OnConvertMaterial(Microsoft.Xna.Framework.Content.Pipeline.Graphics.MaterialContent,Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext)">
            <summary>
            Called by the framework when the <see cref="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MaterialContent"/> property of a 
            <see cref="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.GeometryContent"/> object is encountered in the input node collection.
            </summary>
            <param name="material">The input material content.</param>
            <param name="context">The context of this processor.</param>
            <returns>The converted material content.</returns>
            <remarks>
            This method is <strong>not</strong> called when the model uses a material defined in an 
            external XML file. The method <see cref="M:DigitalRune.Graphics.Content.Pipeline.DRModelProcessor.OnBuildMaterial(Microsoft.Xna.Framework.Content.Pipeline.ExternalReference{DigitalRune.Graphics.Content.Pipeline.DRMaterialContent},Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext)"/> is called for external 
            materials.
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.DROccluderNodeContent">
            <summary>
            Stores processing data for an <strong>OccluderNode</strong>.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DROccluderNodeContent.InputMesh">
            <summary>
            Gets or sets the imported <see cref="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshContent"/>.
            </summary>
            <value>The imported <see cref="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshContent"/>.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DROccluderNodeContent.Occluder">
            <summary>
            Gets or sets the occluder.
            </summary>
            <value>The occluder.</value>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.DROccluderNodeWriter">
            <summary>
            Writes a <see cref="T:DigitalRune.Graphics.Content.Pipeline.DROccluderNodeContent"/> to binary format that can be read by the 
            <strong>OccluderNodeReader</strong> to load an <strong>OccluderNode</strong>.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DROccluderNodeWriter.GetRuntimeType(Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform)">
            <summary>
            Gets the assembly qualified name of the runtime target type.
            </summary>
            <param name="targetPlatform">The target platform.</param>
            <returns>The qualified name.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DROccluderNodeWriter.GetRuntimeReader(Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform)">
            <summary>
            Gets the assembly qualified name of the runtime loader for this type.
            </summary>
            <param name="targetPlatform">Name of the platform.</param>
            <returns>Name of the runtime loader.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DROccluderNodeWriter.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,DigitalRune.Graphics.Content.Pipeline.DROccluderNodeContent)">
            <summary>
            Compiles a strongly typed object into binary format.
            </summary>
            <param name="output">The content writer serializing the value.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.DRSceneNodeContent">
            <summary>
            Stores the processed data for a <strong>SceneNode</strong> asset.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRSceneNodeContent.Parent">
            <summary>
            Gets or sets the parent of this node.
            </summary>
            <value>The parent of this node.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRSceneNodeContent.Children">
            <summary>
            Gets or sets the children of this node.
            </summary>
            <value>The children of this node.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRSceneNodeContent.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRSceneNodeContent.PoseLocal">
            <summary>
            Gets or sets the pose (position and orientation) relative to the parent node.
            </summary>
            <value>The pose (position and orientation) relative to the parent node.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRSceneNodeContent.ScaleLocal">
            <summary>
            Gets or sets the scale.
            </summary>
            <value>The scale.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRSceneNodeContent.PoseWorld">
            <summary>
            Gets or sets the pose (position and orientation) relative to world space.
            </summary>
            <value>The pose (position and orientation) relative to world space.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRSceneNodeContent.MaxDistance">
            <summary>
            Gets or sets the maximum distance up to which the scene node is rendered.
            </summary>
            <value>The <i>view-normalized</i> distance. The default value is 0 (= no limit).</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRSceneNodeContent.LodLevel">
            <summary>
            Gets or sets the LOD level.
            </summary>
            <value>The LOD level. The default value is 0.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRSceneNodeContent.LodDistance">
            <summary>
            Gets or sets the LOD distance.
            </summary>
            <value>The LOD distance. The default value is 0.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRSceneNodeContent.UserData">
            <summary>
            Gets or sets a user-defined tag object.
            </summary>
            <value>User-defined tag object.</value>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRSceneNodeContent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Content.Pipeline.DRSceneNodeContent"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRSceneNodeContent.GetChildren">
            <summary>
            Gets the children of the given scene node.
            </summary>
            <returns>
            The children of scene node or an empty <see cref="T:System.Collections.Generic.IEnumerable`1"/> if 
            <see cref="P:DigitalRune.Graphics.Content.Pipeline.DRSceneNodeContent.Children"/> is <see langword="null"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRSceneNodeContent.GetRoot">
            <summary>
            Gets the root node.
            </summary>
            <returns>The root node.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRSceneNodeContent.GetAncestors">
            <summary>
            Gets the ancestors of the given scene node.
            </summary>
            <returns>The ancestors of this scene node.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRSceneNodeContent.GetSelfAndAncestors">
            <summary>
            Gets the scene node and its ancestors scene.
            </summary>
            <returns>The scene node and its ancestors of the scene.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRSceneNodeContent.GetDescendants">
            <overloads>
            <summary>
            Gets the descendants of the given node.
            </summary>
            </overloads>
            <summary>
            Gets the descendants of the given node using a depth-first search.
            </summary>
            <returns>
            The descendants of this node in depth-first order.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRSceneNodeContent.GetDescendants(System.Boolean)">
            <summary>
            Gets the descendants of the given node using a depth-first or a breadth-first search.
            </summary>
            <param name="depthFirst">
            If set to <see langword="true"/> then a depth-first search for descendants will be made; 
            otherwise a breadth-first search will be made.
            </param>
            <returns>
            The descendants of this node.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRSceneNodeContent.GetSubtree">
            <overloads>
            <summary>
            Gets the subtree (the given node and all of its descendants).
            </summary>
            </overloads>
            <summary>
            Gets the subtree (the given node and all of its descendants) using a depth-first 
            search.
            </summary>
            <returns>
            The subtree (the given node and all of its descendants) in depth-first order.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRSceneNodeContent.GetSubtree(System.Boolean)">
            <summary>
            Gets the subtree (the given node and all of its descendants) using a depth-first or a 
            breadth-first search.
            </summary>
            <param name="depthFirst">
            If set to <see langword="true"/> then a depth-first search for descendants will be made; 
            otherwise a breadth-first search will be made.
            </param>
            <returns>
            The subtree (the given node and all of its descendants).
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRSceneNodeContent.GetLeaves">
            <summary>
            Gets the leaves of the scene node.
            </summary>
            <returns>The leaves of the scene node.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.DRSceneNodeWriter">
            <summary>
            Writes a <see cref="T:DigitalRune.Graphics.Content.Pipeline.DRSceneNodeContent"/> to binary format that can be read by 
            <strong>SceneNodeReader</strong> to load a <strong>SceneNode</strong>.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRSceneNodeWriter.GetRuntimeType(Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform)">
            <summary>
            Gets the assembly qualified name of the runtime target type.
            </summary>
            <param name="targetPlatform">The target platform.</param>
            <returns>The qualified name.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRSceneNodeWriter.GetRuntimeReader(Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform)">
            <summary>
            Gets the assembly qualified name of the runtime loader for this type.
            </summary>
            <param name="targetPlatform">Name of the platform.</param>
            <returns>Name of the runtime loader.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRSceneNodeWriter.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,DigitalRune.Graphics.Content.Pipeline.DRSceneNodeContent)">
            <summary>
            Compiles a strongly typed object into binary format.
            </summary>
            <param name="output">The content writer serializing the value.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.DeferredNodeContent">
            <summary>
            Represents a placeholder for a <see cref="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.NodeContent"/> which hasn't been imported yet.
            </summary>
            <remarks>
            Call <see cref="M:DigitalRune.Graphics.Content.Pipeline.DeferredNodeContent.Import(Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext)"/> to load the actual <see cref="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.NodeContent"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DeferredNodeContent.ModelDescription">
            <summary>
            Gets or sets the model description.
            </summary>
            <value>The model description.</value>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DeferredNodeContent.#ctor(DigitalRune.Graphics.Content.Pipeline.ModelDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Content.Pipeline.DeferredNodeContent"/> class.
            </summary>
            <param name="modelDescription">The model description.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="modelDescription"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DeferredNodeContent.Import(Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext)">
            <summary>
            Imports the asset.
            </summary>
            <param name="context">Contains any required custom process parameters.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.ModelDescription.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:DigitalRune.Graphics.Content.Pipeline.ModelDescription"/> class from being created.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.ModelDescription.Load(System.String,DigitalRune.Graphics.Content.Pipeline.ContentPipelineContext,System.Boolean)">
            <summary>
            Loads the model description (XML file).
            </summary>
            <param name="sourceFileName">The .</param>
            <param name="context">Contains any required custom process parameters.</param>
            <param name="createIfMissing">
            If set to <see langword="true"/> the model description (.drmdl file) will be created
            automatically if it is missing.
            </param>
            <returns>The model description, or <see langword="null"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sourceFileName"/> or <paramref name="context"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:Microsoft.Xna.Framework.Content.Pipeline.InvalidContentException">
            The model description (.drmdl file) is invalid.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.ModelDescription.Validate(Microsoft.Xna.Framework.Content.Pipeline.Graphics.NodeContent,Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext)">
            <summary>
            Checks whether the imported model matches the model description.
            </summary>
            <param name="input">The root node content.</param>
            <param name="context">Contains any required custom process parameters.</param>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.DRTextureFormat">
            <summary>
            Defines the texture format.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.Pipeline.DRTextureFormat.NoChange">
            <summary>
            The texture format of the input texture is not changed by the content processor.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.Pipeline.DRTextureFormat.Color">
            <summary>
            The texture format of the input texture is converted to <strong>SurfaceFormat.Color</strong>
            (32-bit ARGB format with alpha, 8 bits per channel) by the content processor.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.Pipeline.DRTextureFormat.Dxt">
            <summary>
            The texture format of the input texture is converted to an appropriate DXT compression by 
            the content processor. (If the input texture contains fractional alpha values, it is 
            converted to DXT5 format; otherwise it is converted to DXT1.)
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.Pipeline.DRTextureFormat.Normal">
            <summary>
            The texture format of the input texture is converted to DXT5nm by the content processor.
            (This format reduces compression artifacts when storing normal maps. The x-component of the
            normal is stored in the Alpha channel and the y-component is stored in the Green channel.
            The z-component needs to be reconstructed in the pixel shader.)
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.Pipeline.DRTextureFormat.NormalInvertY">
            <summary>
            The texture format of the input texture is converted to DXT5nm by the content processor.
            (This format reduces compression artifacts when storing normal maps. The x-component of the
            normal is stored in the Alpha channel and the <strong>inverted</strong> y-component is 
            stored in the Green channel. The z-component needs to be reconstructed in the pixel shader.)
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.DRTextureImporter">
            <summary>
            Provides methods for reading texture files for use in the Content Pipeline. 
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRTextureImporter.Import(System.String,Microsoft.Xna.Framework.Content.Pipeline.ContentImporterContext)">
            <summary>
            Called by the XNA Framework when importing an texture file to be used as a game asset. This
            is the method called by the XNA Framework when an asset is to be imported into an object
            that can be recognized by the Content Pipeline.
            </summary>
            <param name="filename">Name of a game asset file.</param>
            <param name="context">
            Contains information for importing a game asset, such as a logger interface.
            </param>
            <returns>Resulting game asset.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.DRTextureProcessor">
            <summary>
            Processes a model texture.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRTextureProcessor.ColorKeyColor">
            <summary>
            Gets or sets the color used when color keying for a texture is enabled. When color keying, 
            all pixels of a specified color are replaced with transparent black.
            </summary>
            <value>Color value of the material to replace with transparent black.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRTextureProcessor.ColorKeyEnabled">
            <summary>
            Gets or sets a value indicating whether color keying of a texture is enabled.
            </summary>
            <value>
            <see langword="true"/> if color keying is enabled; <see langword="false"/> otherwise.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRTextureProcessor.GenerateMipmaps">
            <summary>
            Gets or sets a value indicating whether a full chain of mipmaps is generated from the input 
            texture. Existing mipmaps of the texture are not replaced.
            </summary>
            <value>
            <see langword="true"/> if mipmap generation is enabled; <see langword="false"/> otherwise.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRTextureProcessor.InputGamma">
            <summary>
            Gets or sets the gamma of the input texture.
            </summary>
            <value>The gamma of the input texture. The default value is 2.2.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRTextureProcessor.OutputGamma">
            <summary>
            Gets or sets the gamma of the output texture.
            </summary>
            <value>The gamma of the output texture. The default value is 2.2f.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRTextureProcessor.PremultiplyAlpha">
            <summary>
            Gets or sets a value indicating whether the texture is converted to premultiplied alpha format.
            </summary>
            <value>
            <see langword="true"/> if alpha premultiply is enabled; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRTextureProcessor.ResizeToPowerOfTwo">
            <summary>
            Gets or sets a value indicating whether the texture is resized to the next largest power of 
            two.
            </summary>
            <value>
            <see langword="true"/> if resizing is enabled; <see langword="false"/> otherwise.
            </value>
            <remarks>
            Typically used to maximize compatibility with a graphics card because many graphics cards 
            do not support a material size that is not a power of two. If 
            <see cref="P:DigitalRune.Graphics.Content.Pipeline.DRTextureProcessor.ResizeToPowerOfTwo"/> is enabled, textures are resized to the next largest power 
            of two.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRTextureProcessor.Format">
            <summary>
            Gets or sets the texture format of output.
            </summary>
            <value>The texture format of the output.</value>
            <remarks>
            The input format can either be left unchanged from the source asset, converted to a 
            corresponding <see cref="T:Microsoft.Xna.Framework.Color"/>, or compressed using the appropriate 
            <see cref="F:DigitalRune.Graphics.Content.Pipeline.DRTextureFormat.Dxt"/> format.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRTextureProcessor.ReferenceAlpha">
            <summary>
            Gets or sets the reference alpha value, which is used in the alpha test.
            </summary>
            <value>The reference alpha value, which is used in the alpha test.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Pipeline.DRTextureProcessor.ScaleAlphaToCoverage">
            <summary>
            Gets or sets a value indicating whether the alpha of the lower mipmap levels should be 
            scaled to achieve the same alpha test coverage as in the source image.
            </summary>
            <value>
            <see langword="true"/> to scale the alpha values of the lower mipmap levels; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.DRTextureProcessor.Process(Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureContent,Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext)">
            <summary>
            Processes a texture.
            </summary>
            <param name="input">The texture content to process.</param>
            <param name="context">Context for the specified processor.</param>
            <returns>The converted texture content.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="input"/> or <paramref name="context"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Pipeline.XmlHelper">
            <summary>
            Provides helper methods for parsing XML.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.XmlHelper.GetMandatoryAttribute(System.Xml.Linq.XElement,System.String,Microsoft.Xna.Framework.Content.Pipeline.ContentIdentity)">
            <summary>
            Gets the mandatory attribute from the specified XML element.
            </summary>
            <param name="element">The XML element.</param>
            <param name="name">The name of the attribute.</param>
            <param name="identity">The content identity.</param>
            <returns>The attribute value.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> or <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is empty.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.XmlHelper.ToParameterValue(System.Xml.Linq.XAttribute,System.Object,Microsoft.Xna.Framework.Content.Pipeline.ContentIdentity)">
            <summary>
            Converts the specified <see cref="T:System.Xml.Linq.XAttribute"/> to an effect parameter value.
            </summary>
            <param name="attribute">The XML attribute to parse. Can be <see langword="null"/>.</param>
            <param name="defaultValue">
            The default value, used if <paramref name="attribute"/> is null or empty.
            </param>
            <param name="identity">The content identity.</param>
            <returns>The effect parameter value.</returns>
            <exception cref="T:Microsoft.Xna.Framework.Content.Pipeline.InvalidContentException">
            Error parsing <paramref name="attribute"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.XmlHelper.ToColor(System.Xml.Linq.XAttribute,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Content.Pipeline.ContentIdentity)">
            <summary>
            Converts the specified <see cref="T:System.Xml.Linq.XAttribute"/> to a color value.
            </summary>
            <param name="attribute">The XML attribute to parse. Can be <see langword="null"/>.</param>
            <param name="defaultValue">
            The default value, used if <paramref name="attribute"/> is null or empty.
            </param>
            <param name="identity">The content identity.</param>
            <returns>The color value.</returns>
            <exception cref="T:Microsoft.Xna.Framework.Content.Pipeline.InvalidContentException">
            Error parsing <paramref name="attribute"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.XmlHelper.ToVector3(System.Xml.Linq.XAttribute,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Content.Pipeline.ContentIdentity)">
            <summary>
            Converts to the specified <see cref="T:System.Xml.Linq.XAttribute"/> to a <see cref="T:Microsoft.Xna.Framework.Vector3"/>.
            </summary>
            <param name="attribute">The XML attribute to parse. Can be <see langword="null"/>.</param>
            <param name="defaultValue">
            The default value, used if <paramref name="attribute"/> is null or empty.
            </param>
            <param name="identity">The content identity.</param>
            <returns>The 3D vector.</returns>
            <exception cref="T:Microsoft.Xna.Framework.Content.Pipeline.InvalidContentException">
            Error parsing <paramref name="attribute"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.XmlHelper.ToTextureFormat(System.Xml.Linq.XAttribute,DigitalRune.Graphics.Content.Pipeline.DRTextureFormat,Microsoft.Xna.Framework.Content.Pipeline.ContentIdentity)">
            <summary>
            Converts the specified <see cref="T:System.Xml.Linq.XAttribute"/> to a <see cref="T:DigitalRune.Graphics.Content.Pipeline.DRTextureFormat"/> value.
            </summary>
            <param name="attribute">The XML attribute to parse. Can be <see langword="null"/>.</param>
            <param name="defaultValue">
            The default value, used if <paramref name="attribute"/> is null or empty.
            </param>
            <param name="identity">The content identity.</param>
            <returns>The texture format.</returns>
            <exception cref="T:Microsoft.Xna.Framework.Content.Pipeline.InvalidContentException">
            Error parsing <paramref name="attribute"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.XmlHelper.GetExceptionMessage(System.Xml.Linq.XAttribute,System.String,System.Object[])">
            <summary>
            Gets the message text including line info for exceptions that occur when parsing XML.
            </summary>
            <param name="attribute">The current attribute.</param>
            <param name="format">The format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>The exception message including line info.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Pipeline.XmlHelper.GetExceptionMessage(System.Xml.Linq.XElement,System.String,System.Object[])">
            <summary>
            Gets the message text including line info for exceptions that occur when parsing XML.
            </summary>
            <param name="element">The current element.</param>
            <param name="format">The format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>The exception message including line info.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.Content.VertexNormalAlgorithm">
            <summary>
            Defines the algorithm for calculating vertex normals.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.VertexNormalAlgorithm.WeightedByAngle">
            <summary>
            Compute normals using the <i>"mean weighted by angle"</i> algorithm (default).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.VertexNormalAlgorithm.WeightedByArea">
            <summary>
            Compute normals using <i>"mean weighted by areas of adjacent triangles"</i> algorithm.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.VertexNormalAlgorithm.WeightedEqually">
            <summary>
            Compute normals using <i>"mean weighted equally"</i> algorithm.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Content.MeshValidationOptions">
            <summary>
            Defines options for mesh validation.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.MeshValidationOptions.Default">
            <summary>
            Check for most basic problems such as invalid index entries. If adjacency information is
            provided, then that list is also validated.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.MeshValidationOptions.Backfacing">
            <summary>
            Check for duplicate neighbors which usually indicate inconsistent winding order. This
            requires adjacency information.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.MeshValidationOptions.Bowties">
            <summary>
            Check for two fans of triangles that use the same vertex, but are not adjacent. This
            requires adjacency information.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.MeshValidationOptions.Degenerate">
            <summary>Check for degenerate triangles.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.MeshValidationOptions.Unused">
            <summary>
            Check for issues with 'unused' triangles such as partial 'unused' faces. If adjacency is
            provided, it also validates that 'unused' faces are not neighbors of other faces.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.MeshValidationOptions.AsymmetricAdjacency">
            <summary>
            Check that every neighbor face links back to the original face. This requires adjacency.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Content.DirectXMesh">
            <summary>
            Provides various geometry processing functions.
            </summary>
            <remarks>
            <para>
            <see href="https://directxmesh.codeplex.com/">DirectXMesh</see>.
            Copyright (c) 2015 Microsoft Corp. Available under
            <see href="https://directxmesh.codeplex.com/license">MIT license</see>.
            </para>
            <para>
            This is a port of the D3DX geometry processing functions.
            </para>
            <para>
            <strong>Normals, tangents, and bi-tangents:</strong><br/>
            Geometric meshes often must include surface information for lighting computations.
            </para>
            <para>
            A <i>normal</i> is defined as surface normal perpendicular to the mesh. Triangular meshes
            imply a face normal defined by the winding order of the vertices of the triangles (typically
            counter-clockwise, although clockwise winding can also be used). For efficient rendering,
            vertex normals are used for rendering rather than face normals.
            </para>
            <para>
            A tangent and a bi-tangent are gradient direction vectors along the surface of a mesh.
            Together with the normal they describe a full 3-axis coordinate system useful for many
            advanced lighting techniques.
            </para>
            <para>
            See: <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.ComputeNormals(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector3F},System.Boolean,DigitalRune.Graphics.Content.VertexNormalAlgorithm)"/>, <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.ComputeTangentFrame(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector3F},System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector3F},System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector2F},DigitalRune.Mathematics.Algebra.Vector3F[]@,DigitalRune.Mathematics.Algebra.Vector3F[]@)"/>
            </para>
            <para>
            <strong>Adjacency computation:</strong><br/>
            A useful property of geometric meshes is the adjacency relationship between faces of the mesh 
            as defined by sharing triangle edges.
            </para>
            <para>
            The adjacency is represented as an array of <see cref="T:System.Int32"/> index values with 3 entries
            for each triangular face in the mesh. Each entry is the face index of the triangular face that
            is adjacent to one edge of the triangular face (hence as there are three edges, there can be
            up to 3 triangular faces that share an edge). If there is no adjacent face, the index is set
            to -1.
            </para>
            <para>
            The point representative (aka point rep) is an array of <see cref="T:System.Int32"/> index values with
            one entry for each vertex in the mesh. Each entry is the vertex index of a vertex with a
            unique position. If there are no vertices that share the same location, each entry of the
            <c>pointRep</c> array is the identity (i.e. <c>pointRep[i] == i</c>). If there are
            duplicated vertex positions in the mesh, then some entry will point to another
            'representative' vertex index.
            </para>
            <para>
            See: <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.GenerateAdjacencyAndPointReps(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector3F},System.Single,System.Int32[]@,System.Int32[]@)"/>, <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.ConvertPointRepToAdjacency(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector3F},System.Collections.Generic.IList{System.Int32},System.Int32[]@)"/>,
            <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.GenerateGSAdjacency(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Int32[]@)"/>
            </para>
            <para>
            <strong>Cleanup and validation:</strong><br/>
            Triangular mesh descriptions can contain a number of errors which result in invalid or failed
            geometric operations. There are also a number of cases where a triangular mesh description can
            cause mesh algorithms to fail. These functions can detect and resolve such issues.
            </para>
            <para>
            See: <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.Validate(System.Collections.Generic.IList{System.Int32},System.Int32,System.Collections.Generic.IList{System.Int32},DigitalRune.Graphics.Content.MeshValidationOptions,System.Collections.Generic.IList{System.String})"/>, <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.Clean(System.Collections.Generic.IList{System.Int32},System.Int32,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Boolean,System.Int32[]@)"/>
            </para>
            <para>
            <strong>Mesh optimization:</strong><br/>
            Direct3D can render valid meshes with the same visual results no matter how the data is
            ordered, but the efficiency of the rendering performance can be impacted by ordering that is
            well-matched to modern GPUs. Mesh optimization is a process for reordering faces and vertices
            to provide the same visual result, with improved utilization of hardware resources.
            </para>
            <para>
            See: <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.AttributeSort(System.Int32,System.Collections.Generic.IList{System.Int32},System.Int32[]@)"/>, <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.OptimizeFaces(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Int32[]@,System.Int32,System.Int32)"/>, <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.OptimizeVertices(System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32[]@)"/>,
            </para>
            <para>
            A complete mesh optimization includes
            <list type="number">
            <item>
            <description><see cref="M:DigitalRune.Graphics.Content.DirectXMesh.GenerateAdjacencyAndPointReps(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector3F},System.Single,System.Int32[]@,System.Int32[]@)"/></description>
            </item>
            <item>
            <description><see cref="M:DigitalRune.Graphics.Content.DirectXMesh.Clean(System.Collections.Generic.IList{System.Int32},System.Int32,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Boolean,System.Int32[]@)"/></description>
            </item>
            <item>
            <description><see cref="M:DigitalRune.Graphics.Content.DirectXMesh.AttributeSort(System.Int32,System.Collections.Generic.IList{System.Int32},System.Int32[]@)"/></description>
            </item>
            <item>
            <description><see cref="M:DigitalRune.Graphics.Content.DirectXMesh.ReorderIBAndAdjacency(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Int32[])"/></description>
            </item>
            <item>
            <description><see cref="M:DigitalRune.Graphics.Content.DirectXMesh.OptimizeFaces(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Int32[]@,System.Int32,System.Int32)"/></description>
            </item>
            <item>
            <description><see cref="M:DigitalRune.Graphics.Content.DirectXMesh.ReorderIB(System.Collections.Generic.IList{System.Int32},System.Int32[])"/></description>
            </item>
            <item>
            <description><see cref="M:DigitalRune.Graphics.Content.DirectXMesh.OptimizeVertices(System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32[]@)"/></description>
            </item>
            <item>
            <description><see cref="M:DigitalRune.Graphics.Content.DirectXMesh.FinalizeIB(System.Collections.Generic.IList{System.Int32},System.Int32[])"/></description>
            </item>
            <item>
            <description><see cref="M:DigitalRune.Graphics.Content.DirectXMesh.FinalizeVB(System.Byte[],System.Int32,System.Int32,System.Int32[])"/></description>
            </item>
            </list>
            </para>
             </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.Content.DirectXMesh.D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT">
            <summary>
            The maximum number of elements per vertex declaration.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.DirectXMesh.D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT">
            <summary>
            The maximum number input assembler vertex input resource slots.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.DirectXMesh.D3D11_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES">
            <summary>
            The maximum buffer structure size (multi-element).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.DirectXMesh.D3D11_APPEND_ALIGNED_ELEMENT">
            <summary>
            Constant for automatically calculating the <see cref="P:DigitalRune.Graphics.Content.VertexElement.AlignedByteOffset"/>.
            The current element is defined directly after the previous one, including any packing if
            necessary.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.DirectXMesh.OPTFACES_V_DEFAULT">
            <summary>
            The default vertex cache size which is considered 'device independent'.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.DirectXMesh.OPTFACES_R_DEFAULT">
            <summary>
            The default restart threshold which is considered 'device independent'.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.DirectXMesh.OPTFACES_V_STRIPORDER">
            <summary>
            Indicates no vertex cache optimization, only reordering into strips.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DirectXMesh.GenerateAdjacencyAndPointReps(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector3F},System.Single,System.Int32[]@,System.Int32[]@)">
            <summary>
            Generates the adjacency and/or point representatives for a mesh.
            </summary>
            <param name="indices">
            A 32-bit indexed description of the triangles in a mesh. This must have 3 * numberOfFaces
            entries, and every group of 3 describes the vertices for a triangle face. This is the index
            buffer data suited for use with D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST. An entry of -1 is
            reserved as 'unused' (Direct3D 11 interprets this special value as a strip restart). Any
            face containing one or more -1 entries is considered an 'unused' face.
            </param>
            <param name="positions">
            The vertex positions of the mesh as indexed by entries in indices. This must have
            numberOfVertices entries.
            </param>
            <param name="epsilon">
            The threshold to use when comparing positions for shared/duplicate positions. This value can
            be 0 for bit-wise identical vertex positions.
            </param>
            <param name="pointRep">
            A 32-bit index array with numberOfVertices entries containing the point representatives for
            each vertex in a mesh. Can be -1 to indicate an unused entry.
            </param>
            <param name="adjacency">
            A 32-bit index array with numberOfFaces * 3 entries containing the edge adjacencies for each
            face in a mesh. Can be -1 to indicate an unused entry.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indices"/> or <paramref name="positions"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of indices is 0 or not a multiple of 3.<br/>
            Or, the number of positions is 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DirectXMesh.ConvertPointRepToAdjacency(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector3F},System.Collections.Generic.IList{System.Int32},System.Int32[]@)">
            <summary>
            Converts a supplied point representatives array to mesh adjacency.
            </summary>
            <param name="indices">
            A 32-bit indexed description of the triangles in a mesh. This must have 3 * numberOfFaces
            entries, and every group of 3 describes the vertices for a triangle face. This is the index
            buffer data suited for use with D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST. An entry of -1 is
            reserved as 'unused' (Direct3D 11 interprets this special value as a strip restart). Any
            face containing one or more -1 entries is considered an 'unused' face.
            </param>
            <param name="positions">
            The vertex positions of the mesh as indexed by entries in indices. This must have
            numberOfVertices entries.
            </param>
            <param name="pointRep">
            <para>
            A 32-bit index array with numberOfVertices entries containing the point representatives for
            each vertex in a mesh. Can be -1 to indicate an unused entry.
            </para>
            <para>
            This parameter can be <see langword="null"/>, in which case identity is assumed (i.e.
            <c>pointRep[i] == i</c>).
            </para>
            </param>
            <param name="adjacency">
            A 32-bit index array with numberOfFaces * 3 entries containing the edge adjacencies for each
            face in a mesh. Can be -1 to indicate an unused entry.
            </param>
            <remarks>
            This operation is included as part of <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.GenerateAdjacencyAndPointReps(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector3F},System.Single,System.Int32[]@,System.Int32[]@)"/> where the
            <paramref name="pointRep"/> data is also generated. These conversion functions are provided
            for cases where you already have a <paramref name="pointRep"/> and need to convert to
            adjacency.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indices"/> or <paramref name="positions"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of indices is 0 or not a multiple of 3.<br/>
            Or, <paramref name="positions"/> is empty.<br/>
            Or, <paramref name="pointRep"/> does not match the number of vertices.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DirectXMesh.GenerateGSAdjacency(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Int32[]@)">
            <summary>
            Generates an index buffer suited for use with the Geometry Shader including adjacency
            information.
            </summary>
            <param name="indices">
            A 32-bit indexed description of the triangles in a mesh. This must have 3 * numberOfFaces
            entries, and every group of 3 describes the vertices for a triangle face. This is the index
            buffer data suited for use with D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST. An entry of -1 is
            reserved as 'unused' (Direct3D 11 interprets this special value as a strip restart). Any
            face containing one or more -1 entries is considered an 'unused' face.
            </param>
            <param name="pointRep">
            A 32-bit index array with numberOfVertices entries containing the point representatives for
            each vertex in a mesh. Can be -1 to indicate an unused entry.
            </param>
            <param name="adjacency">
            A 32-bit index array with numberOfFaces * 3 entries containing the edge adjacencies for each
            face in a mesh. Can be -1 to indicate an unused entry.
            </param>
            <param name="indicesAdj">
            The index buffer for use with Geometry Shader (D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ).
            </param>
            <remarks>
            This method generates an IB triangle list with adjacency
            (D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ). For more information, see
            <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/bb205124.aspx">Primitive
            Topologies</see>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indices"/>, <paramref name="pointRep"/> or <paramref name="adjacency"/> is
            <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of indices is 0 or not a multiple of 3.<br/>
            Or, <paramref name="pointRep"/> is empty.<br/>
            Or, the length of <paramref name="adjacency"/> does not match <paramref name="indices"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DirectXMesh.Clean(System.Collections.Generic.IList{System.Int32},System.Int32,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Boolean,System.Int32[]@)">
            <summary>
            Eliminates common problems by modifying mesh indices, adjacency, and/or duplicating
            vertices. (See <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.Validate(System.Collections.Generic.IList{System.Int32},System.Int32,System.Collections.Generic.IList{System.Int32},DigitalRune.Graphics.Content.MeshValidationOptions,System.Collections.Generic.IList{System.String})"/>.)
            </summary>
            <param name="indices">
            A 32-bit indexed description of the triangles in a mesh. This must have 3 * numberOfFaces
            entries, and every group of 3 describes the vertices for a triangle face. This is the index
            buffer data suited for use with D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST. An entry of -1 is
            reserved as 'unused' (Direct3D 11 interprets this special value as a strip restart). Any
            face containing one or more -1 entries is considered an 'unused' face.
            </param>
            <param name="numberOfVertices">The number of vertices in the mesh.</param>
            <param name="adjacency">
            <para>
            A 32-bit index array with numberOfFaces * 3 entries containing the edge adjacencies for each
            face in a mesh. Can be -1 to indicate an unused entry.
            </para>
            <para>
            If <paramref name="adjacency"/> is provided, then
            <see cref="F:DigitalRune.Graphics.Content.MeshValidationOptions.Backfacing"/> cleanup is performed. Any neighbor adjacency
            connections that are asymmetric are removed.
            </para>
            </param>
            <param name="attributes">
            A 32-bit index array with numberOfFaces entries which contains the attribute id for each
            face in the mesh. If <paramref name="attributes"/> is provided
            the cleanup ensure that each vertex is only used by one attribute.
            </param>
            <param name="breakBowties">
            <see langword="true"/> to break bowties by duplicating the vertex that connects the two
            triangle fans; <see langword="false"/> to ignore bowties.
            </param>
            <param name="duplicateVertices">
            The duplicated vertices that need to be added to the end of the vertex buffer.
            <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.Clean(System.Collections.Generic.IList{System.Int32},System.Int32,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Boolean,System.Int32[]@)"/> automatically updates <paramref name="indices"/> to reference these new
            vertices by the function. Each element of the <paramref name="duplicateVertices"/> array
            indicates the original vertex index to duplicate at that position at the end of the existing
            vertex buffer. See <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.FinalizeVB(System.Byte[],System.Int32,System.Int32,System.Int32[],System.Int32[],System.Byte[]@)"/> and
            <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.FinalizeVBAndPointReps(System.Byte[],System.Int32,System.Int32,System.Int32[],System.Int32[],System.Int32[],System.Byte[]@,System.Int32[]@)"/>
            for more details.
            </param>
            <returns>
            <see langword="true"/> if successful; otherwise, <see langword="false"/>. In case of failure
            call <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.Validate(System.Collections.Generic.IList{System.Int32},System.Int32,System.Collections.Generic.IList{System.Int32},DigitalRune.Graphics.Content.MeshValidationOptions,System.Collections.Generic.IList{System.String})"/>
            to get information about problems.
            </returns>
            <remarks>
            <para>
            Since that cleanup occurs in phases, so some changes may have already been applied to
            provided buffers even on an error result.
            </para>
            <para>
            This does not eliminate degenerate triangles, but if adjacency is provided it ensures that
            degenerate triangles are not neighbors of other faces.
            </para>
            <para>
            This method will ensure partial 'unused' faces are fully marked as unused, and if adjacency
            is provided it ensures that unused triangles are not neighbors of other faces.
            </para>
            <para>
            This is an initial step in performing full mesh optimization, particularly the attribute
            duplication. Use of <paramref name="breakBowties"/> is optional for mesh optimization.
             </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indices"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of indices is 0 or not a multiple of 3.<br/>
            Or, the length of <paramref name="adjacency"/> does not match <paramref name="indices"/>.<br/>
            Or, invalid number of attributes.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="numberOfVertices"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DirectXMesh.ComputeNormals(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector3F},System.Boolean,DigitalRune.Graphics.Content.VertexNormalAlgorithm)">
            <summary>
            Generates the vertex normals.
            </summary>
            <param name="indices">
            A 32-bit indexed description of the triangles in a mesh. This must have 3 * numberOfFaces
            entries, and every group of 3 describes the vertices for a triangle face. This is the index
            buffer data suited for use with D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST. An entry of -1 is
            reserved as 'unused' (Direct3D 11 interprets this special value as a strip restart). Any
            face containing one or more -1 entries is considered an 'unused' face.
            </param>
            <param name="positions">
            The vertex positions of the mesh as indexed by entries in indices. This must have
            numberOfVertices entries.
            </param>
            <param name="clockwiseOrder">
            <see langword="true"/> if vertices of a front face are ordered clockwise;
            <see langword="false"/> if counter-clockwise.
            </param>
            <param name="normalAlgorithm">The algorithm for calculating vertex normals.</param>
            <returns>The vertex normals. The resulting array has the same length as
            <paramref name="positions"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indices"/> or <paramref name="positions"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of indices is 0 or not a multiple of 3.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            A vertex index exceeds the number of vertices.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DirectXMesh.ComputeTangentFrame(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector3F},System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector3F},System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector2F},DigitalRune.Mathematics.Algebra.Vector3F[]@,DigitalRune.Mathematics.Algebra.Vector3F[]@)">
            <overloads>
            <summary>
            Generates per-vertex tangent and bi-tangent information.
            </summary>
            </overloads>
            
            <summary>
            Generates per-vertex tangent and bi-tangent information.
            </summary>
            <param name="indices">
            A 32-bit indexed description of the triangles in a mesh. This must have 3 * numberOfFaces
            entries, and every group of 3 describes the vertices for a triangle face. This is the index
            buffer data suited for use with D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST. An entry of -1 is
            reserved as 'unused' (Direct3D 11 interprets this special value as a strip restart). Any
            face containing one or more -1 entries is considered an 'unused' face.
            </param>
            <param name="positions">
            The vertex positions of the mesh as indexed by entries in indices. This must have
            numberOfVertices entries.
            </param>
            <param name="normals">The vertex normals.</param>
            <param name="textureCoordinates">
            The UV texture coordinates of the mesh as indexed by entries in indices. This must have
            numberOfVertices entries.
            </param>
            <param name="tangents">The vertex tangents.</param>
            <param name="bitangents">The vertex bitangents.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indices"/>, <paramref name="positions"/>, <paramref name="normals"/>, or
            <paramref name="textureCoordinates"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of indices is 0 or not a multiple of 3.<br/>
            Or, the number of positions is 0.<br/>
            Or, the length of <paramref name="normals"/> does not match <paramref name="positions"/>.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            A vertex index exceeds the number of vertices.
            </exception>
            <exception cref="T:System.IO.InvalidDataException">
            <paramref name="normals"/> contains an invalid normal (length = 0).
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DirectXMesh.ComputeTangentFrame(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector3F},System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector3F},System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector2F},DigitalRune.Mathematics.Algebra.Vector4F[]@)">
            <summary>
            Generates per-vertex tangent and handedness information.
            </summary>
            <param name="indices">
            A 32-bit indexed description of the triangles in a mesh. This must have 3 * numberOfFaces
            entries, and every group of 3 describes the vertices for a triangle face. This is the index
            buffer data suited for use with D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST. An entry of -1 is
            reserved as 'unused' (Direct3D 11 interprets this special value as a strip restart). Any
            face containing one or more -1 entries is considered an 'unused' face.
            </param>
            <param name="positions">
            The vertex positions of the mesh as indexed by entries in indices. This must have
            numberOfVertices entries.
            </param>
            <param name="normals">The vertex normals.</param>
            <param name="textureCoordinates">
            The UV texture coordinates of the mesh as indexed by entries in indices. This must have
            numberOfVertices entries.
            </param>
            <param name="tangentsAndHandedness">
            The vertex tangents + handedness (see remarks). Can be <see langword="null"/>.
            </param>
            <remarks>
            Instead of storing tangents + bi-tangents, the information can be stored as tangent +
            handedness: The tangents can be returned as a 4D vector where the W component indicates
            'handedness'. This allows for an easy reconstruction of the bi-tangent in the shader.
            <code lang="none">
            <![CDATA[
            float3 normal;
            float4 tangentAndHandedness;
            
            ...
            
            float3 tangent = tangentAndHandedness.xyz;
            float3 handedness = tangentAndHandedness.w;
            float3 bitangent = cross(normal, tangent) * handedness;
            ]]>
            </code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indices"/>, <paramref name="positions"/>, <paramref name="normals"/>, or
            <paramref name="textureCoordinates"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of indices is 0 or not a multiple of 3.<br/>
            Or, the number of positions is 0.<br/>
            Or, the length of <paramref name="normals"/> does not match <paramref name="positions"/>.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            A vertex index exceeds the number of vertices.
            </exception>
            <exception cref="T:System.IO.InvalidDataException">
            <paramref name="normals"/> contains an invalid normal (length = 0).
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DirectXMesh.AttributeSort(System.Int32,System.Collections.Generic.IList{System.Int32},System.Int32[]@)">
            <summary>
            Reorders the faces grouping together all those that use the same attribute id.
            </summary>
            <param name="numberOfFaces">The number of faces in the mesh.</param>
            <param name="attributes">
            A 32-bit index array with numberOfFaces entries which contains the attribute id for each
            face in the mesh. The array is sorted by this function.
            </param>
            <param name="faceRemap">
            The array describing the reordering. See <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.ReorderIB(System.Collections.Generic.IList{System.Int32},System.Int32[],System.Int32[]@)"/>
            and <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.ReorderIBAndAdjacency(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Int32[],System.Int32[]@,System.Int32[]@)"/> for
            details.
            </param>
            <remarks>
            This function does not duplicate any vertices. The ideal attribute sort for vertex
            pre-transform cache optimization ensures that each vertex is only used once for a given
            attribute. This can be accomplished by calling <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.Clean(System.Collections.Generic.IList{System.Int32},System.Int32,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Boolean,System.Int32[]@)"/> before doing this sort.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="attributes"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of attributes does not match the number of faces.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="numberOfFaces"/> is 0 or negative.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DirectXMesh.OptimizeFaces(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Int32[]@,System.Int32,System.Int32)">
            <summary>
            Reorders faces to improve post-transform vertex cache reuse.
            </summary>
            <param name="indices">
            A 32-bit indexed description of the triangles in a mesh. This must have 3 * numberOfFaces
            entries, and every group of 3 describes the vertices for a triangle face. This is the index
            buffer data suited for use with D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST. An entry of -1 is
            reserved as 'unused' (Direct3D 11 interprets this special value as a strip restart). Any
            face containing one or more -1 entries is considered an 'unused' face.
            </param>
            <param name="adjacency">
            A 32-bit index array with numberOfFaces * 3 entries containing the edge adjacencies for each
            face in a mesh. Can be -1 to indicate an unused entry.
            </param>
            <param name="attributes">
            A 32-bit index array with numberOfFaces entries which contains the attribute id for each
            face in the mesh. Can be <see langword="null"/>.
            </param>
            <param name="faceRemap">
            The array describing the reordering. See <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.ReorderIB(System.Collections.Generic.IList{System.Int32},System.Int32[],System.Int32[]@)"/>
            and <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.ReorderIBAndAdjacency(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Int32[],System.Int32[]@,System.Int32[]@)"/> for
            details.
            </param>
            <param name="vertexCache">
            The size of the vertex cache to assume for the optimization. If
            <see cref="F:DigitalRune.Graphics.Content.DirectXMesh.OPTFACES_V_STRIPORDER"/> is provided, then the vertex cache simulation is not
            used and the faces are put in "strip order". This number should typically range from 0 to
            32. The default value is <see cref="F:DigitalRune.Graphics.Content.DirectXMesh.OPTFACES_V_DEFAULT"/>.
            </param>
            <param name="restart">
            The threshold used to control when strips are restarted based. This number must be less than
            or equal to <paramref name="vertexCache"/>, and is ignored
            <see cref="F:DigitalRune.Graphics.Content.DirectXMesh.OPTFACES_V_STRIPORDER"/>. The default value is <see cref="F:DigitalRune.Graphics.Content.DirectXMesh.OPTFACES_R_DEFAULT"/>.
            </param>
            <remarks>
            <para>
            This implements the same algorithm as D3DX with explicit control over the simulated vertex
            cache size. OPTFACES_V_DEFAULT / OPTFACES_R_DEFAULT is the same value that D3DXOptimizeFaces
            used (i.e. D3DXMESHOPT_DEVICEINDEPENDENT).
            </para>
            <para>
            Some vendors support a Direct3D 9 query D3DQUERYTYPE_VCACHE that reports the vertex cache
            optimization settings that are device specific.
            </para>
            <para>
            Note that optimizing for a <paramref name="vertexCache"/> larger than is present on the
            hardware can result in poorer performance than the original mesh, so this value should be
            picked either for a known fixed device or conservatively.
            </para>
            <para>
            Degenerate and 'unused' faces are skipped by the optimization, so they do not appear in the
            remap order.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indices"/> or <paramref name="adjacency"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of indices is 0 or not a multiple of 3.<br/>
            Or, a validation option is specified that requires <paramref name="adjacency"/> which is
            missing.<br/>
            Or, the length of <paramref name="adjacency"/> does not match <paramref name="indices"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DirectXMesh.OptimizeVertices(System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32[]@)">
            <summary>
            Reorders vertices in order of use by the index buffer which optimizes for the vertex shader
            pre-transform cache.
            </summary>
            <param name="indices">
            A 32-bit indexed description of the triangles in a mesh. This must have 3 * numberOfFaces
            entries, and every group of 3 describes the vertices for a triangle face. This is the index
            buffer data suited for use with D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST. An entry of -1 is
            reserved as 'unused' (Direct3D 11 interprets this special value as a strip restart). Any
            face containing one or more -1 entries is considered an 'unused' face.
            </param>
            <param name="numberOfVertices">The number of vertices in the mesh.</param>
            <param name="vertexRemap">
            The array describing the reordering. See
            <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.FinalizeIB(System.Collections.Generic.IList{System.Int32},System.Int32[],System.Int32[]@)"/>,
            <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.FinalizeVB(System.Byte[],System.Int32,System.Int32,System.Int32[],System.Int32[],System.Byte[]@)"/>, and
            <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.FinalizeVBAndPointReps(System.Byte[],System.Int32,System.Int32,System.Int32[],System.Int32[],System.Int32[],System.Byte[]@,System.Int32[]@)"/>
            for details.
            </param>
            <remarks>
            Any 'unused' vertices are eliminated and the extra space is left at the end of the vertex
            buffer when applied.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indices"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of indices is 0 or not a multiple of 3.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="numberOfVertices"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DirectXMesh.ReorderIB(System.Collections.Generic.IList{System.Int32},System.Int32[],System.Int32[]@)">
            <overloads>
            <summary>
            Reorders a 32-bit index buffer based on a face remap array.
            </summary>
            </overloads>
            
            <summary>
            Reorders a 32-bit index buffer based on a face remap array.
            </summary>
            <param name="ibIn">The index buffer.</param>
            <param name="faceRemap">
            An array with one entry per face that describes how to reorder the faces of the original
            mesh. For each face in the optimized mesh, it provides the original location of that face.
            See <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.AttributeSort(System.Int32,System.Collections.Generic.IList{System.Int32},System.Int32[]@)"/> and <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.OptimizeFaces(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Int32[]@,System.Int32,System.Int32)"/>.
            </param>
            <param name="ibOut">The reordered index buffer.</param>
            <remarks>
            This is the pseudo-code of how to apply a face remap.
            <code lang="none">
            <![CDATA[
            for each j in nFaces
              origFace = faceRemap[ j ]
              if ( origFace != -1 )
                for each i in 0..2
                  newIndices[ j*3 + i ] = indices[ origFace*3 + i ]
            ]]>
            </code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="ibIn"/> or <paramref name="faceRemap"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of indices is 0 or not a multiple of 3.<br/>
            The length of <paramref name="faceRemap"/> does not match the number of faces.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DirectXMesh.ReorderIB(System.Collections.Generic.IList{System.Int32},System.Int32[])">
            <summary>
            Reorders a 32-bit index buffer in-place based on a face remap array.
            </summary>
            <param name="ib">The index buffer.</param>
            <param name="faceRemap">
            An array with one entry per face that describes how to reorder the faces of the original
            mesh. For each face in the optimized mesh, it provides the original location of that face.
            See <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.AttributeSort(System.Int32,System.Collections.Generic.IList{System.Int32},System.Int32[]@)"/> and <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.OptimizeFaces(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Int32[]@,System.Int32,System.Int32)"/>.
            </param>
            <remarks>
            This is the pseudo-code of how to apply a face remap.
            <code lang="none">
            <![CDATA[
            for each j in nFaces
              origFace = faceRemap[ j ]
              if ( origFace != -1 )
                for each i in 0..2
                  newIndices[ j*3 + i ] = indices[ origFace*3 + i ]
            ]]>
            </code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="ib"/> or <paramref name="faceRemap"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of indices is 0 or not a multiple of 3.<br/>
            The length of <paramref name="faceRemap"/> does not match the number of faces.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DirectXMesh.ReorderIBAndAdjacency(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Int32[],System.Int32[]@,System.Int32[]@)">
            <overloads>
            <summary> Reorders a 32-bit index buffer and adjacency based on a face remap array.
            </summary>
            </overloads>
            <summary>
            Reorders a 32-bit index buffer and adjacency based on a face remap array.
            </summary>
            <param name="ibIn">The index buffer.</param>
            <param name="adjacencyIn">
            A 32-bit index array with numberOfFaces * 3 entries containing the edge adjacencies for each
            face in a mesh. Can be -1 to indicate an unused entry.
            </param>
            <param name="faceRemap">
            An array with one entry per face that describes how to reorder the faces of the original
            mesh. For each face in the optimized mesh, it provides the original location of that face.
            See <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.AttributeSort(System.Int32,System.Collections.Generic.IList{System.Int32},System.Int32[]@)"/> and <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.OptimizeFaces(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Int32[]@,System.Int32,System.Int32)"/>.
            </param>
            <param name="ibOut">The reordered index buffer.</param>
            <param name="adjacencyOut">The reordered adjacency.</param>
            <remarks>
            This is the pseudo-code of how to apply a face remap.
            <code lang="none">
            <![CDATA[
            for each j in nFaces
              origFace = faceRemap[ j ]
              if (origFace != -1)
                for each i in 0..2
                  newAdjacency[ j*3 + i ] = adjacency[ origFace*3 + i ]
            ]]>
            </code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="ibIn"/>, <paramref name="adjacencyIn"/>, or <paramref name="faceRemap"/> is
            <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of indices is 0 or not a multiple of 3.<br/>
            Or, the length of <paramref name="adjacencyIn"/> does not match <paramref name="ibIn"/>.<br/>
            Or, the length of <paramref name="faceRemap"/> does not match the number of faces.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DirectXMesh.ReorderIBAndAdjacency(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Int32[])">
            <summary>
            Reorders a 32-bit index buffer and adjacency in-place based on a face remap array.
            </summary>
            <param name="ib">The index buffer.</param>
            <param name="adjacency">
            A 32-bit index array with numberOfFaces * 3 entries containing the edge adjacencies for each
            face in a mesh. Can be -1 to indicate an unused entry.
            </param>
            <param name="faceRemap">
            An array with one entry per face that describes how to reorder the faces of the original
            mesh. For each face in the optimized mesh, it provides the original location of that face.
            See <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.AttributeSort(System.Int32,System.Collections.Generic.IList{System.Int32},System.Int32[]@)"/> and <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.OptimizeFaces(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Int32[]@,System.Int32,System.Int32)"/>.
            </param>
            <remarks>
            This is the pseudo-code of how to apply a face remap.
            <code lang="none">
            <![CDATA[
            for each j in nFaces
              origFace = faceRemap[ j ]
              if (origFace != -1)
                for each i in 0..2
                  newAdjacency[ j*3 + i ] = adjacency[ origFace*3 + i ]
            ]]>
            </code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="ib"/>, <paramref name="adjacency"/>, or <paramref name="faceRemap"/> is
            <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of indices is 0 or not a multiple of 3.<br/>
            Or, the length of <paramref name="adjacency"/> does not match <paramref name="ib"/>.<br/>
            Or, the length of <paramref name="faceRemap"/> does not match the number of faces.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DirectXMesh.FinalizeIB(System.Collections.Generic.IList{System.Int32},System.Int32[],System.Int32[]@)">
            <overloads>
            <summary>
            Finishes mesh optimization by updating an index buffer based on a vertex remap.
            </summary>
            </overloads>
            
            <summary>
            Finishes mesh optimization by updating an index buffer based on a vertex remap.
            </summary>
            <param name="ibIn">The index buffer.</param>
            <param name="vertexRemap">
            An array with one entry per vertex that describes how to reorder the vertices of the original
            mesh. This maps the original vertex location to the optimized location. See
            <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.OptimizeVertices(System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32[]@)"/>.
            </param>
            <param name="ibOut">The finalized index buffer.</param>
            <remarks>
            <para>
            This should be done after all required face reordering. See
            <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.ReorderIB(System.Collections.Generic.IList{System.Int32},System.Int32[],System.Int32[]@)"/> and
            <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.ReorderIBAndAdjacency(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Int32[],System.Int32[]@,System.Int32[]@)"/>.
            </para>
            <para>
            This is the pseudo-code for how to apply a vertex remap to an index buffer:
            </para>
            <code lang="none">
            <![CDATA[
            for each i in ( nFaces * 3 )
              newIndices[ i ] = vertexRemap[ indices[ i ] ]
             ]]>
             </code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="ibIn"/> or <paramref name="vertexRemap"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of indices is 0 or not a multiple of 3.<br/>
            <paramref name="vertexRemap"/> is empty.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DirectXMesh.FinalizeIB(System.Collections.Generic.IList{System.Int32},System.Int32[])">
            <summary>
            Finishes mesh optimization by updating an index buffer in-place based on a vertex remap.
            </summary>
            <param name="ib">The index buffer.</param>
            <param name="vertexRemap">
            An array with one entry per vertex that describes how to reorder the vertices of the original
            mesh. This maps the original vertex location to the optimized location. See
            <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.OptimizeVertices(System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32[]@)"/>.
            </param>
            <remarks>
            <para>
            This should be done after all required face reordering. See
            <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.ReorderIB(System.Collections.Generic.IList{System.Int32},System.Int32[],System.Int32[]@)"/> and
            <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.ReorderIBAndAdjacency(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Int32[],System.Int32[]@,System.Int32[]@)"/>.
            </para>
            <para>
            This is the pseudo-code for how to apply a vertex remap to an index buffer:
            </para>
            <code lang="none">
            <![CDATA[
            for each i in ( nFaces * 3 )
              newIndices[ i ] = vertexRemap[ indices[ i ] ]
            ]]>
            </code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="ib"/> or <paramref name="vertexRemap"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of indices is 0 or not a multiple of 3.<br/>
            <paramref name="vertexRemap"/> is empty.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DirectXMesh.FinalizeVB(System.Byte[],System.Int32,System.Int32,System.Int32[],System.Int32[],System.Byte[]@)">
            <overloads>
            <summary>
            Finishes mesh optimization by reordering vertices and/or adding duplicated
            vertices for the vertex buffer.
            </summary>
            </overloads>
            
            <summary>
            Finishes mesh optimization by reordering vertices and/or adding duplicated vertices for the
            vertex buffer.
            </summary>
            <param name="vbIn">The vertex buffer.</param>
            <param name="stride">The vertex stride (= size of a vertex) in bytes.</param>
            <param name="numberOfVertices">The number of vertices in the mesh.</param>
            <param name="duplicateVertices">
            An array containing an entry for each vertex that needs duplicating. Each entry indicates
            the index of the original vertex buffer to duplicate. The <paramref name="vertexRemap"/>
            array also indicates reorder information for the duplicated vertices.
            </param>
            <param name="vertexRemap">
            An array with one entry per vertex that describes how to reorder the vertices of the
            original mesh. This maps the original vertex location to the optimized location. See
            <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.OptimizeVertices(System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32[]@)"/>.
            </param>
            <param name="vbOut">The finalized vertex buffer.</param>
            <remarks>
            <para>
            This is the pseudo-code for applying a vertex remap to a vertex buffer:
            </para>
            <code lang="none">
            <![CDATA[
            for each j in nVerts
              newIndex = vertexRemap[j]
              if (newIndex != -1)
                memcpy(newVB + newIndex * stride,
                       oldVB + j * stride,
                       stride)
            
            for each j in nDupVerts
              newIndex = vertexRemap[j + nVerts]
              if (newIndex != -1)
                memcpy(newVB + newIndex * stride,
                       oldVB + dup[j] * stride,
                       stride)
            ]]>
            </code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vbIn"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="vbIn"/> does not match <paramref name="stride"/> and
            <paramref name="numberOfVertices"/>.<br/>
            Or, <paramref name="duplicateVertices"/> is provided but is empty.<br/>
            Or, <paramref name="duplicateVertices"/> and <paramref name="vertexRemap"/> are both
            <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="stride"/> or <paramref name="numberOfVertices"/> is 0 or negative.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DirectXMesh.FinalizeVB(System.Byte[],System.Int32,System.Int32,System.Int32[])">
            <summary>
            Finishes mesh optimization by reordering vertices and/or adding duplicated vertices for the
            vertex buffer in-place.
            </summary>
            <param name="vb">The vertex buffer.</param>
            <param name="stride">The vertex stride (= size of a vertex) in bytes.</param>
            <param name="numberOfVertices">The number of vertices in the mesh.</param>
            <param name="vertexRemap">
            An array with one entry per vertex that describes how to reorder the vertices of the
            original mesh. This maps the original vertex location to the optimized location. See
            <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.OptimizeVertices(System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32[]@)"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vb"/> or <paramref name="vertexRemap"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="vb"/> does not match <paramref name="stride"/> and
            <paramref name="numberOfVertices"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="stride"/> or <paramref name="numberOfVertices"/> is 0 or negative.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DirectXMesh.FinalizeVBAndPointReps(System.Byte[],System.Int32,System.Int32,System.Int32[],System.Int32[],System.Int32[],System.Byte[]@,System.Int32[]@)">
            <overloads>
            <summary>
            Finishes mesh optimization by reordering vertices and/or adding duplicated vertices for the
            vertex buffer, and the point representatives.
            </summary>
            </overloads>
            
            <summary>
            Finishes mesh optimization by reordering vertices and/or adding duplicated vertices for the
            vertex buffer, and the point representatives.
            </summary>
            <param name="vbIn">The vertex buffer.</param>
            <param name="stride">The vertex stride (= size of a vertex) in bytes.</param>
            <param name="numberOfVertices">The number of vertices in the mesh.</param>
            <param name="pointRepIn">
            A 32-bit index array with numberOfVertices entries containing the point representatives for
            each vertex in a mesh. Can be -1 to indicate an unused entry.
            </param>
            <param name="duplicateVertices">
            An array containing an entry for each vertex that needs duplicating. Each entry indicates
            the index of the original vertex buffer to duplicate. The <paramref name="vertexRemap"/>
            array also indicates reorder information for the duplicated vertices.
            </param>
            <param name="vertexRemap">
            An array with one entry per vertex that describes how to reorder the vertices of the
            original mesh. This maps the original vertex location to the optimized location. See
            <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.OptimizeVertices(System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32[]@)"/>.
            </param>
            <param name="vbOut">The finalized vertex buffer.</param>
            <param name="pointRepOut">The finalized point representation.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vbIn"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="vbIn"/> does not match <paramref name="stride"/> and
            <paramref name="numberOfVertices"/>.<br/>
            Or, <paramref name="pointRepIn"/> does not match the number of vertices.<br/>
            Or, <paramref name="duplicateVertices"/> is provided but is empty.<br/>
            Or, <paramref name="duplicateVertices"/> and <paramref name="vertexRemap"/> are both
            <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="stride"/> or <paramref name="numberOfVertices"/> is 0 or negative.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DirectXMesh.FinalizeVBAndPointReps(System.Byte[],System.Int32,System.Int32,System.Int32[],System.Int32[])">
            <summary>
            Finishes mesh optimization by reordering vertices and/or adding duplicated vertices for the
            vertex buffer, and the point representatives in-place.
            </summary>
            <param name="vb">The vertex buffer.</param>
            <param name="stride">The vertex stride (= size of a vertex) in bytes.</param>
            <param name="numberOfVertices">The number of vertices in the mesh.</param>
            <param name="pointRep">
            A 32-bit index array with numberOfVertices entries containing the point representatives for
            each vertex in a mesh. Can be -1 to indicate an unused entry.
            </param>
            <param name="vertexRemap">
            An array with one entry per vertex that describes how to reorder the vertices of the
            original mesh. This maps the original vertex location to the optimized location. See
            <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.OptimizeVertices(System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32[]@)"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vb"/>, <paramref name="pointRep"/>, or <paramref name="vertexRemap"/> is
            <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="vb"/> does not match <paramref name="stride"/> and
            <paramref name="numberOfVertices"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="stride"/> or <paramref name="numberOfVertices"/> is 0 or negative.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DirectXMesh.Validate(System.Collections.Generic.IList{System.Int32},System.Int32,System.Collections.Generic.IList{System.Int32},DigitalRune.Graphics.Content.MeshValidationOptions,System.Collections.Generic.IList{System.String})">
            <summary>
            Checks whether the mesh is valid. Optionally includes diagnostic messages describing the
            problem(s) encountered.
            </summary>
            <param name="indices">
            A 32-bit indexed description of the triangles in a mesh. This must have 3 * numberOfFaces
            entries, and every group of 3 describes the vertices for a triangle face. This is the index
            buffer data suited for use with D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST. An entry of -1 is
            reserved as 'unused' (Direct3D 11 interprets this special value as a strip restart). Any
            face containing one or more -1 entries is considered an 'unused' face.
            </param>
            <param name="numberOfVertices">The number of vertices in the mesh.</param>
            <param name="adjacency">
            A 32-bit index array with numberOfFaces * 3 entries containing the edge adjacencies for each
            face in a mesh. Can be -1 to indicate an unused entry.
            </param>
            <param name="options">The validation options.</param>
            <param name="messages">
            The list to which diagnostic messages are added. Can be <see langword="null"/>.
            </param>
            <returns>
            <see langword="true"/> if mesh is valid; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            Use <see cref="M:DigitalRune.Graphics.Content.DirectXMesh.Clean(System.Collections.Generic.IList{System.Int32},System.Int32,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Boolean,System.Int32[]@)"/> to fix most of these issues!
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indices"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of indices is 0 or not a multiple of 3.<br/>
            Or, a validation option is specified that requires <paramref name="adjacency"/> which is
            missing.<br/>
            Or, the length of <paramref name="adjacency"/> does not match <paramref name="indices"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="numberOfVertices"/> is out of range.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.Content.DirectXMesh.OrbitIterator">
            <summary>
            Iterates over all triangles connected to a specific vertex.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Content.DirectXMesh.OrbitIterator.Done">
            <summary>
            Gets a value indicating whether all triangles connected to the vertex have been visited.
            </summary>
            <value>
            <see langword="true"/> if all triangles have been visited; otherwise,
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.DirectXMesh.OrbitIterator.Point">
            <summary>
            Gets the point of the current triangle.
            </summary>
            <value>The point (0, 1, or 2) of the current triangle.</value>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DirectXMesh.OrbitIterator.#ctor(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Content.DirectXMesh.OrbitIterator"/> class.
            </summary>
            <param name="indices">
            A 32-bit indexed description of the triangles in a mesh. This must have 3 * numberOfFaces
            entries, and every group of 3 describes the vertices for a triangle face. This is the
            index buffer data suited for use with D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST. An entry of
            -1 is reserved as 'unused' (Direct3D 11 interprets this special value as a strip restart).
            Any face containing one or more -1 entries is considered an 'unused' face.
            </param>
            <param name="adjacency">
            A 32-bit index array with numberOfFaces * 3 entries containing the edge adjacencies for
            each face in a mesh. Can be -1 to indicate an unused entry.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DirectXMesh.OrbitIterator.Initialize(System.Int32,System.Int32,DigitalRune.Graphics.Content.DirectXMesh.WalkType)">
            <summary>
            Resets the iterator and positions it at the specified vertex.
            </summary>
            <param name="face">The index of the triangle.</param>
            <param name="vertexIndex">The index of the vertex.</param>
            <param name="walkType">Type of the walk.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DirectXMesh.OrbitIterator.NextFace">
            <summary>
            Moves to the next face.
            </summary>
            <returns>The current face.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DirectXMesh.OrbitIterator.MoveToCounterClockwise">
            <summary>
            Moves counter-clockwise around the vertex until a boundary is reached or the start face is
            reached again.
            </summary>
            <returns>
            <see langword="true"/> if a boundary was reached; otherwise; <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DirectXMesh.FindEdge(System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32)">
            <summary>
            Walks the edges of a triangles and searches for the specified value.
            </summary>
            <param name="indicesOrAdjacency">The indices list or adjacency information.</param>
            <param name="start">The start index in the list.</param>
            <param name="match">The index (indices) or triangle (adjacency) to find.</param>
            <returns>
            The edge at which the value was found. Returns 3 if the value was not found.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DirectXMesh.ComputeSubsets(System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
            Returns a list of face offsets and counts based on the input attributes id array.
            </summary>
            <param name="attributes">
            A 32-bit index array with numberOfFaces entries which contains the attribute id for each
            face in the mesh.
            </param>
            <param name="numberOfFaces">The number of faces in the mesh.</param>
            <returns>
            A list of value pairs where each first value is the offset in the faces array for the start
            of the attribute subset, and second is the number of faces in that attribute subset.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DirectXMesh.IsValidVB(DigitalRune.Graphics.Content.DataFormat)">
            <summary>
            Determines whether the specified format is valid for use in a vertex buffer input layout.
            </summary>
            <param name="format">The resource data format.</param>
            <returns>
            <see langword="true"/> if <paramref name="format"/> is valid for use in a vertex buffer
            input layout; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DirectXMesh.IsValidIB(DigitalRune.Graphics.Content.DataFormat)">
            <summary>
            Determines whether the specified format is valid for use as an index buffer format.
            </summary>
            <param name="format">The resource data format.</param>
            <returns>
            <see langword="true"/> if <paramref name="format"/> is valid for use as an index buffer
            format; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DirectXMesh.BytesPerElement(DigitalRune.Graphics.Content.DataFormat)">
            <summary>
            Gets the byte per element.
            </summary>
            <param name="format">The vertex element format.</param>
            <returns>The bytes per element. Returns 0 on failure.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DirectXMesh.Validate(System.Collections.Generic.IList{DigitalRune.Graphics.Content.VertexElement})">
            <summary>
            Throws an exception if the specified input layout description is valid.
            </summary>
            <param name="vertexDeclaration">The input layout description.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vertexDeclaration"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="vertexDeclaration"/> is invalid.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DirectXMesh.ComputeInputLayout(System.Collections.Generic.IList{DigitalRune.Graphics.Content.VertexElement},System.Int32[]@,System.Int32[]@)">
            <summary>
            Calculates the byte offsets for each element of an input layout and the implied vertex
            stride from a given Direct3D 11 input layout description.
            </summary>
            <param name="vbDecl">The input layout description.</param>
            <param name="offsets">The offsets per element.</param>
            <param name="strides">The vertex strides per resource slot.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DirectXMesh.ComputeVertexCacheMissRate(System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32,System.Single@,System.Single@)">
            <summary>
            Calculates the average cache miss ratio (ACMR) and average triangle vertex re-use (ATVR) for
            the post-transform vertex cache.
            </summary>
            <param name="indices">
            A 32-bit indexed description of the triangles in a mesh. This must have 3 * numberOfFaces
            entries, and every group of 3 describes the vertices for a triangle face. This is the index
            buffer data suited for use with D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST. An entry of -1 is
            reserved as 'unused' (Direct3D 11 interprets this special value as a strip restart). Any
            face containing one or more -1 entries is considered an 'unused' face.
            </param>
            <param name="numberOfVertices">The number of vertices in the mesh.</param>
            <param name="cacheSize">
            The size of the cache. Pass OPTFACES_V_DEFAULT as the cache size to evaluate the 'device
            independent' optimization.
            </param>
            <param name="acmr">The average cache miss ratio (ACMR).</param>
            <param name="atvr">The average triangle vertex re-use (ATVR).</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indices"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of indices is 0 or not a multiple of 3.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="numberOfVertices"/> or <paramref name="cacheSize"/> is 0 or negative.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.Content.VertexBufferAccessor">
            <summary>
            Reads or writes elements from/to vertex buffer(s) based on a vertex declaration.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.VertexBufferAccessor.#ctor(System.Collections.Generic.IList{DigitalRune.Graphics.Content.VertexElement})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Content.VertexBufferAccessor"/> class.
            </summary>
            <param name="vertexDeclaration">The vertex declaration.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vertexDeclaration"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="vertexDeclaration"/> is invalid.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.VertexBufferAccessor.SetStream(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the specified vertex buffer.
            </summary>
            <param name="inputSlot">The input slot. The default slot is 0.</param>
            <param name="vertexBuffer">The vertex buffer.</param>
            <param name="numberOfVertices">The number of vertices.</param>
            <param name="stride">The vertex stride. Can be 0 to use the default stride.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vertexBuffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="numberOfVertices"/> is negative.<br/>
            Or, <paramref name="inputSlot"/> is invalid.<br/>
            Or, <paramref name="stride"/> is invalid.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.VertexBufferAccessor.GetStream(System.Int32,System.Byte[]@,System.Int32@,System.Int32@)">
            <summary>
            Gets the specified vertex buffer. (Creates a new vertex buffer if necessary.)
            </summary>
            <param name="inputSlot">The input slot. The default slot is 0.</param>
            <param name="vertexBuffer">The vertex buffer.</param>
            <param name="numberOfVertices">The number of vertices.</param>
            <param name="stride">The vertex stride. Can be 0 to use the default stride.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vertexBuffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="numberOfVertices"/> is negative.<br/>
            Or, <paramref name="inputSlot"/> is invalid.<br/>
            Or, <paramref name="stride"/> is invalid.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.VertexBufferAccessor.SetElements(System.Single[],DigitalRune.Graphics.Content.VertexElementSemantic,System.Int32)">
            <overloads>
            <summary>
            Writes the specified elements to the vertex buffer.
            </summary>
            </overloads>
            
            <summary>
            Writes the specified elements to the vertex buffer.
            </summary>
            <param name="buffer">The elements to write to the vertex buffer.</param>
            <param name="semantic">The semantic.</param>
            <param name="semanticIndex">The Index of the semantic.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="semantic"/> and <paramref name="semanticIndex"/> are invalid.<br/>
            Or, the number of elements in <paramref name="buffer"/> exceeds the number of vertices.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Format conversion to/from <see cref="F:DigitalRune.Graphics.Content.DataFormat.R11G11B10_FLOAT"/> is not supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.VertexBufferAccessor.SetElements(DigitalRune.Mathematics.Algebra.Vector2F[],DigitalRune.Graphics.Content.VertexElementSemantic,System.Int32)">
            <summary>
            Writes the specified elements to the vertex buffer.
            </summary>
            <param name="buffer">The elements to write to the vertex buffer.</param>
            <param name="semantic">The semantic.</param>
            <param name="semanticIndex">The Index of the semantic.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="semantic"/> and <paramref name="semanticIndex"/> are invalid.<br/>
            Or, the number of elements in <paramref name="buffer"/> exceeds the number of vertices.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Format conversion to/from <see cref="F:DigitalRune.Graphics.Content.DataFormat.R11G11B10_FLOAT"/> is not supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.VertexBufferAccessor.SetElements(DigitalRune.Mathematics.Algebra.Vector3F[],DigitalRune.Graphics.Content.VertexElementSemantic,System.Int32)">
            <summary>
            Writes the specified elements to the vertex buffer.
            </summary>
            <param name="buffer">The elements to write to the vertex buffer.</param>
            <param name="semantic">The semantic.</param>
            <param name="semanticIndex">The Index of the semantic.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="semantic"/> and <paramref name="semanticIndex"/> are invalid.<br/>
            Or, the number of elements in <paramref name="buffer"/> exceeds the number of vertices.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Format conversion to/from <see cref="F:DigitalRune.Graphics.Content.DataFormat.R11G11B10_FLOAT"/> is not supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.VertexBufferAccessor.SetElements(DigitalRune.Mathematics.Algebra.Vector4F[],DigitalRune.Graphics.Content.VertexElementSemantic,System.Int32)">
            <summary>
            Writes the specified elements to the vertex buffer.
            </summary>
            <param name="buffer">The elements to write to the vertex buffer.</param>
            <param name="semantic">The semantic.</param>
            <param name="semanticIndex">The Index of the semantic.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="semantic"/> and <paramref name="semanticIndex"/> are invalid.<br/>
            Or, the number of elements in <paramref name="buffer"/> exceeds the number of vertices.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Format conversion to/from <see cref="F:DigitalRune.Graphics.Content.DataFormat.R11G11B10_FLOAT"/> is not supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.VertexBufferAccessor.GetElements(System.Single[],DigitalRune.Graphics.Content.VertexElementSemantic,System.Int32)">
            <overloads>
            <summary>
            Reads the specified elements from the vertex buffer.
            </summary>
            </overloads>
            
            <summary>
            Reads the specified elements to the vertex buffer.
            </summary>
            <param name="buffer">The elements extracted from the vertex buffer.</param>
            <param name="semantic">The semantic.</param>
            <param name="semanticIndex">The Index of the semantic.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="semantic"/> and <paramref name="semanticIndex"/> are invalid.<br/>
            Or, the number of elements in <paramref name="buffer"/> exceeds the number of vertices.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Format conversion to/from <see cref="F:DigitalRune.Graphics.Content.DataFormat.R11G11B10_FLOAT"/> is not supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.VertexBufferAccessor.GetElements(DigitalRune.Mathematics.Algebra.Vector2F[],DigitalRune.Graphics.Content.VertexElementSemantic,System.Int32)">
            <summary>
            Reads the specified elements to the vertex buffer.
            </summary>
            <param name="buffer">The elements extracted from the vertex buffer.</param>
            <param name="semantic">The semantic.</param>
            <param name="semanticIndex">The Index of the semantic.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="semantic"/> and <paramref name="semanticIndex"/> are invalid.<br/>
            Or, the number of elements in <paramref name="buffer"/> exceeds the number of vertices.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Format conversion to/from <see cref="F:DigitalRune.Graphics.Content.DataFormat.R11G11B10_FLOAT"/> is not supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.VertexBufferAccessor.GetElements(DigitalRune.Mathematics.Algebra.Vector3F[],DigitalRune.Graphics.Content.VertexElementSemantic,System.Int32)">
            <summary>
            Reads the specified elements to the vertex buffer.
            </summary>
            <param name="buffer">The elements extracted from the vertex buffer.</param>
            <param name="semantic">The semantic.</param>
            <param name="semanticIndex">The Index of the semantic.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="semantic"/> and <paramref name="semanticIndex"/> are invalid.<br/>
            Or, the number of elements in <paramref name="buffer"/> exceeds the number of vertices.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Format conversion to/from <see cref="F:DigitalRune.Graphics.Content.DataFormat.R11G11B10_FLOAT"/> is not supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.VertexBufferAccessor.GetElements(DigitalRune.Mathematics.Algebra.Vector4F[],DigitalRune.Graphics.Content.VertexElementSemantic,System.Int32)">
            <summary>
            Reads the specified elements to the vertex buffer.
            </summary>
            <param name="buffer">The elements extracted from the vertex buffer.</param>
            <param name="semantic">The semantic.</param>
            <param name="semanticIndex">The Index of the semantic.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="semantic"/> and <paramref name="semanticIndex"/> are invalid.<br/>
            Or, the number of elements in <paramref name="buffer"/> exceeds the number of vertices.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Format conversion to/from <see cref="F:DigitalRune.Graphics.Content.DataFormat.R11G11B10_FLOAT"/> is not supported.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.Content.VertexElement">
            <summary>
            Defines a single element for the input-assembler stage.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Content.VertexElement.Semantic">
            <summary>
            Gets or sets the HLSL semantic of the element in a shader input-signature.
            </summary>
            <value>The HLSL semantic of the element in a shader input-signature.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.VertexElement.SemanticIndex">
            <summary>
            Gets or sets the index of the semantic.
            </summary>
            <value>
            The (zero-based) index of the semantic. The semantic index is an integer number that
            modifies the semantic. It is required when there are more than one element with the same
            semantic in the input stream. The default value is 0.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.VertexElement.Format">
            <summary>
            Gets or sets the data type of the element.
            </summary>
            <value>The data type of the element.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.VertexElement.AlignedByteOffset">
            <summary>
            Gets or sets the aligned offset in bytes from the beginning of the stream to the beginning
            of the element.
            </summary>
            <value>
            The aligned offset in bytes from the beginning of the stream to the beginning of the
            element. Use -1 for convenience to define the current element directly after the previous
            one, including any packing if necessary.
            </value>
        </member>
        <member name="M:DigitalRune.Graphics.Content.VertexElement.#ctor(DigitalRune.Graphics.Content.VertexElementSemantic,System.Int32,DigitalRune.Graphics.Content.DataFormat,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Content.VertexElement"/> struct.
            </summary>
            <param name="semantic">The HLSL semantic of the element in a shader input-signature.</param>
            <param name="semanticIndex">The (zero-based) index of the semantic.</param>
            <param name="format">The data type of the element.</param>
            <param name="alignedByteOffset">
            The aligned offset in bytes from the beginning of the stream to the beginning of the
            element. Use -1 for convenience to define the current element directly after the previous
            one, including any packing if necessary.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.Content.VertexElement.Equals(DigitalRune.Graphics.Content.VertexElement)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the <paramref name="other"/>
            parameter; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.VertexElement.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to this instance;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.VertexElement.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures
            like a hash table.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.VertexElement.op_Equality(DigitalRune.Graphics.Content.VertexElement,DigitalRune.Graphics.Content.VertexElement)">
            <summary>
            Compares two <see cref="T:DigitalRune.Graphics.Content.VertexElement"/> objects to determine whether they are the same.
            </summary>
            <param name="left">The first element.</param>
            <param name="right">The second element.</param>
            <returns>
            <see langword="true"/> if the <paramref name="left"/> and <paramref name="right"/> are the
            same; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.VertexElement.op_Inequality(DigitalRune.Graphics.Content.VertexElement,DigitalRune.Graphics.Content.VertexElement)">
            <summary>
            Compares two <see cref="T:DigitalRune.Graphics.Content.VertexElement"/> objects to determine whether they are different.
            </summary>
            <param name="left">The first element.</param>
            <param name="right">The second element.</param>
            <returns>
            <see langword="true"/> if the <paramref name="left"/> and <paramref name="right"/> are
            different; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.VertexElement.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.Content.VertexElementSemantic">
            <summary>
            Defines the HLSL semantic of an input element.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.VertexElementSemantic.Binormal">
            <summary>Binormal ("BINORMAL")</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.VertexElementSemantic.BlendIndices">
            <summary>Blend indices ("BLENDINDICES")</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.VertexElementSemantic.BlendWeight">
            <summary>Blend weights ("BLENDWEIGHT") </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.VertexElementSemantic.Color">
            <summary>Diffuse and specular color ("COLOR")</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.VertexElementSemantic.Normal">
            <summary>Normal vector ("NORMAL")</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.VertexElementSemantic.Position">
            <summary>Vertex position in object space ("POSITION")</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.VertexElementSemantic.PositionTransformed">
            <summary>Transformed vertex position ("POSITIONT")</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.VertexElementSemantic.PointSize">
            <summary>Point size ("PSIZE")</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.VertexElementSemantic.Tangent">
            <summary>Tangent ("TANGENT")</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.VertexElementSemantic.TextureCoordinate">
            <summary>Texture coordinates ("TEXCOORD")</summary>
        </member>
        <member name="T:DigitalRune.Graphics.Content.DataFormat">
            <summary>
            Defines a graphics resource data format.
            </summary>
            <remarks>
            <para>
            The first constants (<see cref="F:DigitalRune.Graphics.Content.DataFormat.Unknown"/> to <see cref="F:DigitalRune.Graphics.Content.DataFormat.B4G4R4A4_UNORM"/>) match the
            Direct3D 11 constants (DXGI_FORMAT_*). It is possible to cast this values to/from
            <strong>SharpDX.DXGI.Format</strong>.
            </para>
            <para>
            The constants above <see cref="F:DigitalRune.Graphics.Content.DataFormat.B4G4R4A4_UNORM"/> are platform-specific and may not be
            supported in Direct3D.
            </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.Content.DdsFlags">
            <summary>
            Additional options for <see cref="T:DigitalRune.Graphics.Content.DdsHelper"/>.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.DdsFlags.None">
            <summary>None.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.DdsFlags.LegacyDword">
            <summary>Assume pitch is DWORD aligned instead of BYTE aligned (used by some legacy DDS files).</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.DdsFlags.NoLegacyExpansion">
            <summary>Do not implicitly convert legacy formats that result in larger pixel sizes (24 bpp, 3:3:2, A8L8, A4L4, P8, A8P8).</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.DdsFlags.NoR10B10G10A2Fixup">
            <summary>Do not use work-around for long-standing D3DX DDS file format issue which reversed the 10:10:10:2 color order masks.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.DdsFlags.ForceRgb">
            <summary>Convert DXGI 1.1 BGR formats to R8G8B8A8_UNORM to avoid use of optional WDDM 1.1 formats.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.DdsFlags.No16Bpp">
            <summary>Conversions avoid use of 565, 5551, and 4444 formats and instead expand to 8888 to avoid use of optional WDDM 1.2 formats.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.DdsFlags.ExpandLuminance">
            <summary>When loading legacy luminance formats expand replicating the color channels rather than leaving them packed (L8, L16, A8L8).</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.DdsFlags.ForceDX10Ext">
            <summary>Always use the 'DX10' header extension for DDS writer (i.e. don't try to write DX9 compatible DDS files).</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.DdsFlags.ForceDX10ExtMisc2">
            <summary>DDS_FLAGS_FORCE_DX10_EXT including miscFlags2 information (result may not be compatible with D3DX10 or D3DX11).</summary>
        </member>
        <member name="T:DigitalRune.Graphics.Content.DdsHelper">
            <summary>
            Provides methods for loading/saving Direct Draw Surfaces (.DDS files).
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Content.DdsHelper.ResourceDimension">
            <summary>
            Identifies the type of resource being used (D3D11_RESOURCE_DIMENSION).
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Content.DdsHelper.ResourceOptionFlags">
            <summary>
            Identifies options for resources (D3D11_RESOURCE_MISC_FLAG).
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Content.DdsHelper.PixelFormat">
            <summary>
            Describe a DDS pixel format.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Content.DdsHelper.PixelFormatFlags">
            <summary>
            The pixel format flags.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Content.DdsHelper.HeaderFlags">
            <summary>
            The DDS header flags.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Content.DdsHelper.SurfaceFlags">
            <summary>
            The DDS surface flags.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Content.DdsHelper.CubemapFlags">
            <summary>
            The DDS cube map flags.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DdsHelper.LegacyMap.#ctor(DigitalRune.Graphics.Content.DataFormat,DigitalRune.Graphics.Content.DdsHelper.ConversionFlags,DigitalRune.Graphics.Content.DdsHelper.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Content.DdsHelper.LegacyMap" /> struct.
            </summary>
            <param name="format">The format.</param>
            <param name="conversionFlags">The conversion flags.</param>
            <param name="pixelFormat">The pixel format.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DdsHelper.DecodeDDSHeader(System.IO.BinaryReader,DigitalRune.Graphics.Content.DdsFlags,DigitalRune.Graphics.Content.DdsHelper.ConversionFlags@)">
            <summary>
            Decodes DDS header including optional DX10 extended header
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DdsHelper.EncodeDDSHeader(System.IO.BinaryWriter,DigitalRune.Graphics.Content.TextureDescription,DigitalRune.Graphics.Content.DdsFlags)">
            <summary>
            Encodes DDS file header (magic value, header, optional DX10 extended header).
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DdsHelper.LegacyExpandScanline(System.IO.BinaryReader,System.Int32,DigitalRune.Graphics.Content.DdsHelper.LegacyFormat,System.IO.BinaryWriter,System.Int32,DigitalRune.Graphics.Content.DataFormat,System.UInt32[],DigitalRune.Graphics.Content.ScanlineFlags)">
            <summary>
            Converts an image row with optional clearing of alpha value to 1.0.
            </summary>
            <returns>
            <see langword="true"/> if supported; otherwise, <see langword="false"/> if expansion case is not supported.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DdsHelper.Load(System.IO.Stream,DigitalRune.Graphics.Content.DdsFlags)">
            <summary>
            Loads the specified DDS texture.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="flags">Additional options.</param>
            <returns>The <see cref="T:DigitalRune.Graphics.Content.Texture"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DdsHelper.Save(DigitalRune.Graphics.Content.Texture,System.IO.Stream,DigitalRune.Graphics.Content.DdsFlags)">
            <summary>
            Saves the specified texture in DDS format.
            </summary>
            <param name="texture">The texture.</param>
            <param name="stream">The stream to write to.</param>
            <param name="flags">Additional options.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="texture"/> or <paramref name="stream"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.Content.FourCC">
            <summary>
            Represents a FourCC descriptor.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.FourCC.Empty">
            <summary>Empty FourCC.</summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.FourCC.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Content.FourCC" /> struct.
            </summary>
            <param name="fourCC">The fourCC value as a string .</param>
        </member>
        <member name="M:DigitalRune.Graphics.Content.FourCC.#ctor(System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Content.FourCC" /> struct.
            </summary>
            <param name="byte1">The byte1.</param>
            <param name="byte2">The byte2.</param>
            <param name="byte3">The byte3.</param>
            <param name="byte4">The byte4.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Content.FourCC.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Content.FourCC" /> struct.
            </summary>
            <param name="fourCC">The fourCC value as an uint.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Content.FourCC.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Content.FourCC" /> struct.
            </summary>
            <param name="fourCC">The fourCC value as an int.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Content.FourCC.op_Implicit(DigitalRune.Graphics.Content.FourCC)~System.UInt32">
            <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Graphics.Content.FourCC"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="descriptor">The descriptor.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.FourCC.op_Implicit(DigitalRune.Graphics.Content.FourCC)~System.Int32">
            <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Graphics.Content.FourCC"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="descriptor">The descriptor.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.FourCC.op_Implicit(System.UInt32)~DigitalRune.Graphics.Content.FourCC">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:DigitalRune.Graphics.Content.FourCC"/>.
            </summary>
            <param name="descriptor">The descriptor.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.FourCC.op_Implicit(System.Int32)~DigitalRune.Graphics.Content.FourCC">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:DigitalRune.Graphics.Content.FourCC"/>.
            </summary>
            <param name="descriptor">The descriptor.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.FourCC.op_Implicit(DigitalRune.Graphics.Content.FourCC)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Graphics.Content.FourCC"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="descriptor">The descriptor.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.FourCC.op_Implicit(System.String)~DigitalRune.Graphics.Content.FourCC">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:DigitalRune.Graphics.Content.FourCC"/>.
            </summary>
            <param name="descriptor">The descriptor.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.FourCC.Equals(DigitalRune.Graphics.Content.FourCC)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the <paramref name="other" />
            parameter; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.FourCC.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object" /> is equal to this instance;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.FourCC.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures
            like a hash table.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.FourCC.op_Equality(DigitalRune.Graphics.Content.FourCC,DigitalRune.Graphics.Content.FourCC)">
            <summary>
            Compares two <see cref="T:DigitalRune.Graphics.Content.FourCC"/> descriptors to determine whether they are the
            same.
            </summary>
            <param name="left">The first descriptor.</param>
            <param name="right">The second descriptor.</param>
            <returns>
            <see langword="true"/> if the <paramref name="left"/> and <paramref name="right"/> are the
            same; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.FourCC.op_Inequality(DigitalRune.Graphics.Content.FourCC,DigitalRune.Graphics.Content.FourCC)">
            <summary>
            Compares two <see cref="T:DigitalRune.Graphics.Content.FourCC"/> descriptors to determine whether they are different.
            </summary>
            <param name="left">The first descriptor.</param>
            <param name="right">The second descriptor.</param>
            <returns>
            <see langword="true"/> if the <paramref name="left"/> and <paramref name="right"/> are the
            different; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.FourCC.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.Content.HalfHelper">
            <summary>
            Converts between Half and Float values.
            </summary>
            <remarks>
            Reference: 
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Content.HalfHelper.#cctor">
            <summary>
            Initializes static members of the <see cref="T:DigitalRune.Graphics.Content.HalfHelper"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.HalfHelper.Unpack(System.UInt16)">
            <summary>
            Converts the specified 16-bit Half value to a 32-bit Float value.
            </summary>
            <param name="h">The 16-bit Half value.</param>
            <returns>The 32-bit Float value.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.HalfHelper.Pack(System.Single)">
            <summary>
            Converts the specified 32-bit Float value to a 16-bit Half value.
            </summary>
            <param name="f">The 32-bit Float value.</param>
            <returns>The 16-bit Half value.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Image">
            <summary>
            Represents a bitmap image.
            </summary>
            <seealso cref="T:DigitalRune.Graphics.Content.Texture"/>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Image.Width">
            <summary>
            Gets the width of the image in pixels.
            </summary>
            <value>The width of the image in pixels.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Image.Height">
            <summary>
            Gets the height of the image in pixels.
            </summary>
            <value>The height of the image in pixels.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Image.Format">
            <summary>
            Gets the format the pixels are stored in.
            </summary>
            <value>The format the pixels are stored in.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Image.RowPitch">
            <summary>
            Gets the row pitch (= size of a row in bytes).
            </summary>
            <value>The row pitch (= size of a row in bytes).</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Image.Data">
            <summary>
            Gets or sets the image data.
            </summary>
            <value>The image data.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The size of the specified buffer does not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Image.#ctor(System.Int32,System.Int32,DigitalRune.Graphics.Content.DataFormat)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Content.Image"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new, empty instance of the <see cref="T:DigitalRune.Graphics.Content.Image"/> class.
            </summary>
            <param name="width">The width in pixels.</param>
            <param name="height">The height in pixels.</param>
            <param name="format">The texture format.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> or <paramref name="height"/> is 0 or negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="format"/> is invalid.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Image.#ctor(System.Int32,System.Int32,DigitalRune.Graphics.Content.DataFormat,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Content.Image"/> class with the specified data.
            </summary>
            <param name="width">The width in pixels.</param>
            <param name="height">The height in pixels.</param>
            <param name="format">The texture format.</param>
            <param name="data">The contents of the image.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="format"/> is invalid, or <paramref name="data"/> has wrong size.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> or <paramref name="height"/>is 0 or negative.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.Content.ImageAccessor">
            <summary>
            Wraps a floating-point image (format <see cref="F:DigitalRune.Graphics.Content.DataFormat.R32G32B32A32_FLOAT"/>) for easy
            manipulation. (Wrapper needs to be disposed after use!)
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Content.ImageAccessor.Width">
            <summary>
            Gets the width of the image in pixels.
            </summary>
            <value>The width of the image in pixels.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.ImageAccessor.Height">
            <summary>
            Gets the height of the image in pixels.
            </summary>
            <value>The height of the image in pixels.</value>
        </member>
        <member name="M:DigitalRune.Graphics.Content.ImageAccessor.#ctor(DigitalRune.Graphics.Content.Image)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Content.ImageAccessor"/> struct.
            </summary>
            <param name="image">
            The floating-point image (format <see cref="F:DigitalRune.Graphics.Content.DataFormat.R32G32B32A32_FLOAT"/>).
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.Content.ImageAccessor.Dispose">
            <summary>
            Disposes this instance and unlocks the memory.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.ImageAccessor.GetPixel(System.Int32)">
            <summary>
            Gets the pixel at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The pixel color.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.ImageAccessor.SetPixel(System.Int32,DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Sets the pixel at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="color">The pixel color.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Content.ImageAccessor.GetPixel(System.Int32,System.Int32)">
            <summary>
            Gets the pixel at the specified position.
            </summary>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
            <returns>The pixel color.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.ImageAccessor.GetPixel(System.Int32,System.Int32,DigitalRune.Graphics.Content.TextureAddressMode)">
            <summary>
            Gets the pixel at the specified position.
            </summary>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
            <param name="wrapMode">The wrap mode.</param>
            <returns>The pixel color.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.ImageAccessor.SetPixel(System.Int32,System.Int32,DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Gets the pixel at the specified position.
            </summary>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
            <param name="color">The pixel color.</param>
        </member>
        <member name="T:DigitalRune.Graphics.Content.VolumeAccessor">
            <summary>
            Wraps a floating-point volume (format <see cref="F:DigitalRune.Graphics.Content.DataFormat.R32G32B32A32_FLOAT"/>) for easy
            manipulation. (Wrapper needs to be disposed after use!)
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Content.VolumeAccessor.Width">
            <summary>
            Gets the width of the volume in pixels.
            </summary>
            <value>The width of the volume in pixels.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.VolumeAccessor.Height">
            <summary>
            Gets the height of the volume in pixels.
            </summary>
            <value>The height of the volume in pixels.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.VolumeAccessor.Depth">
            <summary>
            Gets the depth of the volume in pixels.
            </summary>
            <value>The depth of the volume in pixels.</value>
        </member>
        <member name="M:DigitalRune.Graphics.Content.VolumeAccessor.#ctor(DigitalRune.Graphics.Content.Texture,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Content.VolumeAccessor"/> struct.
            </summary>
            <param name="texture">The volume texture.</param>
            <param name="mipIndex">The mipmap level.</param>
            <param name="arrayOrFaceIndex">
            The array index for texture arrays, or the face index for cube maps. Must be 0 for volume
            textures.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.Content.VolumeAccessor.Dispose">
            <summary>
            Disposes this instance and unlocks the memory.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.VolumeAccessor.GetPixel(System.Int32,System.Int32,System.Int32,DigitalRune.Graphics.Content.TextureAddressMode)">
            <summary>
            Gets the pixel at the specified position.
            </summary>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
            <param name="z">The z position.</param>
            <param name="wrapMode">The wrap mode.</param>
            <returns>The pixel color.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.VolumeAccessor.SetPixel(System.Int32,System.Int32,System.Int32,DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Gets the pixel at the specified position.
            </summary>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
            <param name="z">The z position.</param>
            <param name="color">The pixel color.</param>
        </member>
        <member name="T:DigitalRune.Graphics.Content.ImageCollection">
            <summary>
            Manages the images of a texture.
            </summary>
            <remarks>
            The collection has a fixed length, which is determined when the collection is created.
            Images in the collection can be replaced - but only with an image with equal size and format.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Content.ImageCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:DigitalRune.Graphics.Content.ImageCollection" />.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Content.ImageCollection.System#Collections#Generic#ICollection{DigitalRune#Graphics#Content#Image}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:DigitalRune.Graphics.Content.ImageCollection" /> is read-only.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Content.ImageCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:DigitalRune.Graphics.Content.Image"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <value>The <see cref="T:DigitalRune.Graphics.Content.Image"/>.</value>
            <returns>The <see cref="T:DigitalRune.Graphics.Content.Image"/>.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.ImageCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Content.ImageCollection"/> class.
            </summary>
            <param name="numberOfImages">The number of images.</param>
            <remarks>
            The constructor reserves space for <paramref name="numberOfImages"/> entries in the
            collection. The entries are <see langword="null"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Content.ImageCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.ImageCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.ImageCollection.Contains(DigitalRune.Graphics.Content.Image)">
            <summary>
            Determines whether the <see cref="T:DigitalRune.Graphics.Content.ImageCollection" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:DigitalRune.Graphics.Content.ImageCollection" />.</param>
            <returns>
            <see langword="true"/> if <paramref name="item" /> is found in the
            <see cref="T:DigitalRune.Graphics.Content.ImageCollection" />; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.ImageCollection.CopyTo(DigitalRune.Graphics.Content.Image[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:DigitalRune.Graphics.Content.ImageCollection"/> to an <see cref="T:System.Array"/>, 
            starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements 
            copied from <see cref="T:DigitalRune.Graphics.Content.ImageCollection"/>. The <see cref="T:System.Array"/> must have
            zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional. Or <paramref name="arrayIndex"/> is equal to 
            or greater than the length of <paramref name="array"/>. Or the number of elements in the 
            source <see cref="T:DigitalRune.Graphics.Content.ImageCollection"/> is greater than the available space from 
            <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.ImageCollection.IndexOf(DigitalRune.Graphics.Content.Image)">
            <summary>
            Determines the index of a specific item in the <see cref="T:DigitalRune.Graphics.Content.ImageCollection" />.
            </summary>
            <param name="item">The object to locate in the <see cref="T:DigitalRune.Graphics.Content.ImageCollection" />.</param>
            <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.ImageCollection.System#Collections#Generic#ICollection{DigitalRune#Graphics#Content#Image}#Add(DigitalRune.Graphics.Content.Image)">
            <summary>
            Not supported.
            </summary>
            <param name="item">-</param>
        </member>
        <member name="M:DigitalRune.Graphics.Content.ImageCollection.System#Collections#Generic#ICollection{DigitalRune#Graphics#Content#Image}#Clear">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.ImageCollection.System#Collections#Generic#IList{DigitalRune#Graphics#Content#Image}#Insert(System.Int32,DigitalRune.Graphics.Content.Image)">
            <summary>
            Not supported.
            </summary>
            <param name="index">-</param>
            <param name="item">- </param>
        </member>
        <member name="M:DigitalRune.Graphics.Content.ImageCollection.System#Collections#Generic#ICollection{DigitalRune#Graphics#Content#Image}#Remove(DigitalRune.Graphics.Content.Image)">
            <summary>
            Not supported.
            </summary>
            <param name="item">-</param>
            <returns>-</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.ImageCollection.System#Collections#Generic#IList{DigitalRune#Graphics#Content#Image}#RemoveAt(System.Int32)">
            <summary>
            Not supported.
            </summary>
            <param name="index">-</param>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Texture">
            <summary>
            Represents a texture resource. (For use in content pipeline. Not intended to be used at
            runtime.)
            </summary>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Graphics.Content.Texture"/> can represent 1D, 2D, 3D (volume) textures, cube maps, and texture
            arrays. The implementation is API-independent and is used for processing assets in the content
            pipeline.
            </para>
            <para>
            A texture consists of one or more images (see <see cref="P:DigitalRune.Graphics.Content.Texture.Images"/>). The order of the images
            is the same as Direct3D uses for texture subresources. Use <see cref="M:DigitalRune.Graphics.Content.Texture.GetImageIndex(System.Int32,System.Int32,System.Int32)"/> to
            find the index of a specific image.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Texture.Description">
            <summary>
            Gets the texture description.
            </summary>
            <value>The texture description.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.Texture.Images">
            <summary>
            Gets the images.
            </summary>
            <value>The images.</value>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Texture.#ctor(DigitalRune.Graphics.Content.TextureDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Content.Texture"/> class.
            </summary>
            <param name="description">The description.</param>
            <exception cref="T:System.ArgumentException">
            The <paramref name="description"/> is invalid.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Texture.ValidateTexture(DigitalRune.Graphics.Content.TextureDescription)">
            <summary>
            Validates the texture.
            </summary>
            <param name="description">The texture description.</param>
            <exception cref="T:System.ArgumentException">
            The <paramref name="description"/> is invalid.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The specified format is not supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Texture.DetermineImages(DigitalRune.Graphics.Content.TextureDescription,System.Int32@,System.Int32@)">
            <summary>
            Determines the number of image array entries and pixel size.
            </summary>
            <param name="description">The texture description.</param>
            <param name="nImages">The number of entries in the image array.</param>
            <param name="pixelSize">The total pixel size.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Texture.GetData">
            <summary>
            Gets the content of the texture.
            </summary>
            <returns>The content of the texture.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Texture.GetImageIndex(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the index of a specific image.
            </summary>
            <param name="mipIndex">The mipmap level, where 0 is the most detailed level.</param>
            <param name="arrayOrFaceIndex">
            The array index for texture arrays, or the face index for cube maps. Must be 0 for volume
            textures.
            </param>
            <param name="zIndex">The z index for volume textures.</param>
            <returns>
            The index of the specified image in the <see cref="P:DigitalRune.Graphics.Content.Texture.Images"/> collection.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="mipIndex"/>, <paramref name="arrayOrFaceIndex"/>, or <paramref name="zIndex"/> is
            out of range.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Invalid texture dimension.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Texture.GetDepth(System.Int32)">
            <summary>
            Gets the depth of the specified mipmap level.
            </summary>
            <param name="mipLevel">The mipmap level, where 0 is the most detailed level.</param>
            <returns>The depth of texture.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="mipLevel"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Texture.CanConvertTo(DigitalRune.Graphics.Content.DataFormat)">
            <summary>
            Determines whether conversion to the specified texture format is supported.
            </summary>
            <param name="format">The desired texture format.</param>
            <returns>
            <see langword="true"/> if the conversion from the current format to <paramref name="format"/>
            is supported; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Texture.ConvertTo(DigitalRune.Graphics.Content.DataFormat)">
            <summary>
            Converts the specified texture to another format.
            </summary>
            <param name="format">The desired texture format.</param>
            <returns>
            The texture using <paramref name="format" />. Does nothing (returns <c>this</c>) if texture
            already has the desired format.
            </returns>
            <exception cref="T:System.NotSupportedException">
            Texture conversion to the specified format is not supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Texture.GenerateMipmaps(DigitalRune.Graphics.Content.ResizeFilter,System.Boolean,DigitalRune.Graphics.Content.TextureAddressMode)">
            <summary>
            (Re-)Generates all mipmap levels.
            </summary>
            <param name="filter">The filter to use for resizing.</param>
            <param name="alphaTransparency">
            <see langword="true"/> if the image contains uses non-premultiplied alpha; otherwise,
            <see langword="false"/> if the image uses premultiplied alpha or has no alpha.
            </param>
            <param name="wrapMode">
            The texture address mode that will be used for sampling the at runtime.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Texture.Resize(System.Int32,System.Int32,System.Int32,DigitalRune.Graphics.Content.ResizeFilter,System.Boolean,DigitalRune.Graphics.Content.TextureAddressMode)">
            <summary>
            Resizes the texture. (If original texture has mipmaps, all mipmap levels are automatically
            recreated.)
            </summary>
            <param name="width">The new width.</param>
            <param name="height">The new height.</param>
            <param name="depth">The new depth. Must be 1 for 2D textures and cube map textures.</param>
            <param name="filter">The filter to use for resizing.</param>
            <param name="alphaTransparency">
            <see langword="true"/> if the image contains uses non-premultiplied alpha; otherwise,
            <see langword="false"/> if the image uses premultiplied alpha or has no alpha.
            </param>
            <param name="wrapMode">
            The texture address mode that will be used for sampling the at runtime.
            </param>
            <returns>The resized texture.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.Content.TextureDescription">
            <summary>
            Describes a texture resource.
            </summary>
            <seealso cref="T:DigitalRune.Graphics.Content.Texture"/>
        </member>
        <member name="P:DigitalRune.Graphics.Content.TextureDescription.Dimension">
            <summary>
            Gets or sets the dimension of the texture.
            </summary>
            <value>The dimension of the texture.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.TextureDescription.Width">
            <summary>
            Gets or sets the width of the texture.
            </summary>
            <value>The width of the texture.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.TextureDescription.Height">
            <summary>
            Gets or sets the height of the texture.
            </summary>
            <value>The height of the texture.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.TextureDescription.Depth">
            <summary>
            Gets or sets the depth of the texture.
            </summary>
            <value>The depth of the texture.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.TextureDescription.MipLevels">
            <summary>
            Gets or sets the number of mipmap levels in the texture.
            </summary>
            <value>The number of mipmap levels in the texture.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.TextureDescription.ArraySize">
            <summary>
            Gets or sets the number of textures in the texture array.
            </summary>
            <value>The number of texture in the texture array.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.TextureDescription.Format">
            <summary>
            Gets or sets the texture format.
            </summary>
            <value>The texture format.</value>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureDescription.Equals(DigitalRune.Graphics.Content.TextureDescription)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the <paramref name="other" />
            parameter; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureDescription.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object" /> is equal to this
            instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureDescription.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures
            like a hash table.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureDescription.op_Equality(DigitalRune.Graphics.Content.TextureDescription,DigitalRune.Graphics.Content.TextureDescription)">
            <summary>
            Compares two <see cref="T:DigitalRune.Graphics.Content.TextureDescription"/> objects to determine whether they are the 
            same.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
            <see langword="true"/> if the <paramref name="left"/> and <paramref name="right"/> are the
            same; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureDescription.op_Inequality(DigitalRune.Graphics.Content.TextureDescription,DigitalRune.Graphics.Content.TextureDescription)">
            <summary>
            Compares two <see cref="T:DigitalRune.Graphics.Content.TextureDescription"/> objects to determine whether they are the 
            different.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
            <see langword="true"/> if the <paramref name="left"/> and <paramref name="right"/> are the
            different; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureDescription.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:DigitalRune.Graphics.Content.TextureDimension">
            <summary>
            Defines the dimension of a texture.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.TextureDimension.Texture1D">
            <summary>A 1-dimensional texture.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.TextureDimension.Texture2D">
            <summary>A 2-dimensional texture.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.TextureDimension.Texture3D">
            <summary>A 3-dimensional (volume) texture.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.TextureDimension.TextureCube">
            <summary>A cube map texture.</summary>
        </member>
        <member name="T:DigitalRune.Graphics.Content.DataFormatHelper">
            <summary>
            Provides methods for converting data formats.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DataFormatHelper.Bgr565ToRgba8888(System.UInt16)">
            <summary>
            Converts a <see cref="F:DigitalRune.Graphics.Content.DataFormat.B5G6R5_UNORM"/> to <see cref="F:DigitalRune.Graphics.Content.DataFormat.R8G8B8A8_UNORM"/>.
            </summary>
            <param name="color">The color as <see cref="F:DigitalRune.Graphics.Content.DataFormat.B5G6R5_UNORM"/>.</param>
            <returns>
            The color as <see cref="F:DigitalRune.Graphics.Content.DataFormat.R8G8B8A8_UNORM"/>. Alpha is set to 1.0 (opaque).
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DataFormatHelper.Bgr565ToRgb888(System.UInt16,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Converts a <see cref="F:DigitalRune.Graphics.Content.DataFormat.B5G6R5_UNORM"/> to 8-bit RGB components.
            </summary>
            <param name="color">The color as <see cref="F:DigitalRune.Graphics.Content.DataFormat.B5G6R5_UNORM"/>.</param>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DataFormatHelper.Bgra5551ToRgba8888(System.UInt16,System.Boolean)">
            <summary>
            Converts a <see cref="F:DigitalRune.Graphics.Content.DataFormat.B5G5R5A1_UNORM"/> to <see cref="F:DigitalRune.Graphics.Content.DataFormat.R8G8B8A8_UNORM"/>.
            </summary>
            <param name="color">The color as <see cref="F:DigitalRune.Graphics.Content.DataFormat.B5G5R5A1_UNORM"/>.</param>
            <param name="setAlpha">
            If set to <see langword="true"/> the alpha value is set to 1.0 (opaque).
            </param>
            <returns>The color as <see cref="F:DigitalRune.Graphics.Content.DataFormat.R8G8B8A8_UNORM"/>.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DataFormatHelper.Bgra4444ToRgba8888(System.UInt16,System.Boolean)">
            <summary>
            Converts a <see cref="F:DigitalRune.Graphics.Content.DataFormat.B4G4R4A4_UNORM"/> to <see cref="F:DigitalRune.Graphics.Content.DataFormat.R8G8B8A8_UNORM"/>.
            </summary>
            <param name="color">The color as <see cref="F:DigitalRune.Graphics.Content.DataFormat.B4G4R4A4_UNORM"/>.</param>
            <param name="setAlpha">
            If set to <see langword="true"/> the alpha value is set to 1.0 (opaque).
            </param>
            <returns>The color as <see cref="F:DigitalRune.Graphics.Content.DataFormat.R8G8B8A8_UNORM"/>.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DataFormatHelper.FloatToSInt(System.Single,System.UInt32)">
            <summary>
            Converts a floating point value to a signed integer value.
            </summary>
            <param name="value">The floating point value.</param>
            <param name="bitmask">The bitmask of the integer value.</param>
            <returns>The signed integer value.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DataFormatHelper.SIntToFloat(System.UInt32,System.UInt32)">
            <summary>
            Converts a signed integer value to a floating point value.
            </summary>
            <param name="value">The signed integer value.</param>
            <param name="bitmask">The bitmask of the integer value.</param>
            <returns>The floating point value.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DataFormatHelper.FloatToUInt(System.Single,System.UInt32)">
            <summary>
            Converts a floating point value to an unsigned integer value.
            </summary>
            <param name="value">The floating point value.</param>
            <param name="bitmask">The bitmask of the integer value.</param>
            <returns>The unsigned integer value.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DataFormatHelper.UIntToFloat(System.UInt32,System.UInt32)">
            <summary>
            Converts an unsigned integer value to a floating point value.
            </summary>
            <param name="value">The unsigned integer value.</param>
            <param name="bitmask">The bitmask of the integer value.</param>
            <returns>The floating point value.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DataFormatHelper.FloatToSNorm(System.Single,System.UInt32)">
            <summary>
            Converts a floating point value to a signed normalized integer value.
            </summary>
            <param name="value">The floating point value.</param>
            <param name="bitmask">The bitmask of the integer value.</param>
            <returns>The signed normalized integer value.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DataFormatHelper.SNormToFloat(System.UInt32,System.UInt32)">
            <summary>
            Converts an signed normalized integer value to a floating point value.
            </summary>
            <param name="value">The signed normalized integer value.</param>
            <param name="bitmask">The bitmask of the integer value.</param>
            <returns>The floating point value.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DataFormatHelper.FloatToUNorm(System.Single,System.UInt32)">
            <summary>
            Converts a floating point value to an unsigned normalized integer value.
            </summary>
            <param name="value">The floating point value.</param>
            <param name="bitmask">The bitmask of the integer value.</param>
            <returns>The unsigned normalized integer value.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DataFormatHelper.UNormToFloat(System.UInt32,System.UInt32)">
            <summary>
            Converts an unsigned normalized integer value to a floating point value.
            </summary>
            <param name="value">The unsigned normalized integer value.</param>
            <param name="bitmask">The bitmask of the integer value.</param>
            <returns>The floating point value.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.DataFormatHelper.ClampAndRound(System.Single,System.Single,System.Single,System.MidpointRounding)">
            <summary>
            Converts a floating point value to an integer value.
            </summary>
            <param name="value">The floating point value.</param>
            <param name="min">The min integer value.</param>
            <param name="max">The max integer value.</param>
            <param name="mode">The rounding mode </param>
            <returns>The closest integer representation of <paramref name="value"/>.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.Content.TextureAddressMode">
            <summary>
            Defines the texture address mode.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.TextureAddressMode.Clamp">
            <summary>Texture coordinates are clamped to [0.0, 1.0].</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.TextureAddressMode.Repeat">
            <summary>Texture coordinates repeat beyond [0.0, 1.0]</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.TextureAddressMode.Mirror">
            <summary>Similar to <see cref="F:DigitalRune.Graphics.Content.TextureAddressMode.Repeat"/>, except that the texture is flipped with each repetition.</summary>
        </member>
        <member name="T:DigitalRune.Graphics.Content.TextureHelper">
            <summary>
            Provides helper methods for processing textures.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.GetDepth(DigitalRune.Graphics.Content.TextureDescription,System.Int32)">
            <summary>
            Gets the depth of the specified mipmap level.
            </summary>
            <param name="description">The texture description.</param>
            <param name="mipLevel">The mipmap level, where 0 is the most detailed level.</param>
            <returns>The depth of texture.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="mipLevel"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.GetImageIndex(DigitalRune.Graphics.Content.TextureDescription,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the index of a specific image in the <see cref="P:DigitalRune.Graphics.Content.Texture.Images"/> collection.
            </summary>
            <param name="description">The texture description.</param>
            <param name="mipIndex">The mipmap level, where 0 is the most detailed level.</param>
            <param name="arrayOrFaceIndex">
            The array index for texture arrays, or the face index for cube maps. Must be 0 for volume
            textures.
            </param>
            <param name="zIndex">The z index for volume textures.</param>
            <returns>
            The index of the specified image in the <see cref="P:DigitalRune.Graphics.Content.Texture.Images"/> collection.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="mipIndex"/>, <paramref name="arrayOrFaceIndex"/>, or <paramref name="zIndex"/> is
            out of range.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Invalid texture dimension.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.CalculateMipLevels(System.Int32,System.Int32)">
            <overloads>
            <summary>
            Calculates the number of mipmap levels in the full mipmap chain.
            </summary>
            </overloads>
            
            <summary>
            Calculates the number of mipmap levels in the full mipmap chain of a 2D texture.
            </summary>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <returns>The number of mipmap levels in the full mipmap chain.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.CalculateMipLevels(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the number of mipmap levels in the full mipmap chain of a volume texture.
            </summary>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="depth">The depth of the texture.</param>
            <returns>The number of mipmap levels in the full mipmap chain.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.ValidateMipLevels(System.Int32,System.Int32,System.Int32)">
            <overloads>
            <summary>
            Checks whether the specified number of mipmap levels is valid.
            </summary>
            </overloads>
            
            <summary>
            Checks whether the specified number of mipmap levels is valid for certain 2D texture.
            </summary>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="mipLevels">The number of mipmap levels.</param>
            <returns>
            <see langword="true"/> if <paramref name="mipLevels"/> is a valid number of mipmap levels;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.ValidateMipLevels(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks whether the specified number of mipmap levels is valid for certain volume texture.
            </summary>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="depth">The depth of the texture.</param>
            <param name="mipLevels">The number of mipmap levels.</param>
            <returns>
            <see langword="true"/> if <paramref name="mipLevels"/> is a valid number of mipmap levels;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.WrapClamp(System.Int32,System.Int32)">
            <summary>
            Wraps the specified index to [0, width - 1] using CLAMP.
            </summary>
            <param name="x">The x texture coordinate.</param>
            <param name="width">The width.</param>
            <returns>The index in [0, width - 1].</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.WrapRepeat(System.Int32,System.Int32)">
            <summary>
            Wraps the specified index to [0, width - 1] using REPEAT.
            </summary>
            <param name="x">The x texture coordinate.</param>
            <param name="width">The width.</param>
            <returns>The texture coordinate in [0, 1].</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.WrapMirror(System.Int32,System.Int32)">
            <summary>
            Wraps the specified index to [0, width - 1] using MIRROR.
            </summary>
            <param name="x">The x texture coordinate.</param>
            <param name="width">The width.</param>
            <returns>The texture coordinate in [0, 1].</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.CanConvert(DigitalRune.Graphics.Content.DataFormat,DigitalRune.Graphics.Content.DataFormat)">
            <summary>
            Determines whether a specific format conversion is supported.
            </summary>
            <param name="srcFormat">The source format.</param>
            <param name="dstFormat">The destination format.</param>
            <returns>
            <see langword="true"/> if the conversion from <paramref name="srcFormat"/> to
            <paramref name="dstFormat"/> is supported; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.Convert(DigitalRune.Graphics.Content.Image,DigitalRune.Graphics.Content.Image)">
            <summary>
            Converts the content of an image to another format.
            </summary>
            <param name="srcImage">The source image.</param>
            <param name="dstImage">The destination image.</param>
            <exception cref="T:System.NotSupportedException">
            Format conversion to the specified format is not supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.DecompressBc1(System.Byte[],System.Int32,System.Int32,System.Byte[]@)">
            <overloads>
            <summary>
            Decompresses a buffer using BC1 (DXT1) block compression.
            </summary>
            </overloads>
            
            <summary>
            Decompresses a buffer using BC1 (DXT1) block compression.
            </summary>
            <param name="compressedData">The buffer using BC1 (DXT1) block compression.</param>
            <param name="width">The width of the uncompressed image in pixels.</param>
            <param name="height">The height of the uncompressed image in pixels.</param>
            <param name="uncompressedData">The uncompressed image data (RGBA 8:8:8:8).</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="compressedData" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width" /> or <paramref name="height" /> is out of range.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="uncompressedData"/> has wrong size.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.DecompressBc1(System.IO.Stream,System.Int32,System.Int32,System.Byte[]@)">
            <summary>
            Decompresses a buffer using BC1 (DXT1) block compression.
            </summary>
            <param name="stream">The buffer using BC1 (DXT1) block compression.</param>
            <param name="width">The width of the uncompressed image in pixels.</param>
            <param name="height">The height of the uncompressed image in pixels.</param>
            <param name="uncompressedData">The uncompressed image data (RGBA 8:8:8:8).</param>
            <returns>The image data (uncompressed RGBA 8:8:8:8).</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> or <paramref name="height"/> is out of range.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="uncompressedData"/> has wrong size.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.DecompressBc2(System.Byte[],System.Int32,System.Int32,System.Byte[]@)">
            <overloads>
            <summary>
            Decompresses a buffer using BC2 (DXT3) block compression.
            </summary>
            </overloads>
            
            <summary>
            Decompresses a buffer using BC2 (DXT3) block compression.
            </summary>
            <param name="compressedData">The buffer using BC2 (DXT3) block compression.</param>
            <param name="width">The width of the uncompressed image in pixels.</param>
            <param name="height">The height of the uncompressed image in pixels.</param>
            <param name="uncompressedData">The uncompressed image data (RGBA 8:8:8:8).</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="compressedData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> or <paramref name="height"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.DecompressBc2(System.IO.Stream,System.Int32,System.Int32,System.Byte[]@)">
            <summary>
            Decompresses a buffer using BC2 (DXT3) block compression.
            </summary>
            <param name="stream">The buffer using BC2 (DXT3) block compression.</param>
            <param name="width">The width of the uncompressed image in pixels.</param>
            <param name="height">The height of the uncompressed image in pixels.</param>
            <param name="uncompressedData">The uncompressed image data (RGBA 8:8:8:8).</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> or <paramref name="height"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.DecompressBc3(System.Byte[],System.Int32,System.Int32,System.Byte[]@)">
            <overloads>
            <summary>
            Decompresses a buffer using BC3 (DXT5) block compression.
            </summary>
            </overloads>
            
            <summary>
            Decompresses a buffer using BC3 (DXT5) block compression.
            </summary>
            <param name="compressedData">The buffer using BC3 (DXT5) block compression.</param>
            <param name="width">The width of the uncompressed image in pixels.</param>
            <param name="height">The height of the uncompressed image in pixels.</param>
            <param name="uncompressedData">The uncompressed image data (RGBA 8:8:8:8).</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="compressedData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> or <paramref name="height"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.DecompressBc3(System.IO.Stream,System.Int32,System.Int32,System.Byte[]@)">
            <summary>
            Decompresses a buffer using BC3 (DXT5) block compression.
            </summary>
            <param name="stream">The buffer using BC3 (DXT5) block compression.</param>
            <param name="width">The width of the uncompressed image in pixels.</param>
            <param name="height">The height of the uncompressed image in pixels.</param>
            <param name="uncompressedData">The uncompressed image data (RGBA 8:8:8:8).</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> or <paramref name="height"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.FlipX(DigitalRune.Graphics.Content.Texture)">
            <overloads>
            <summary>
            Mirrors the texture/image horizontally.
            </summary>
            </overloads>
            
            <summary>
            Mirrors the texture horizontally.
            </summary>
            <param name="texture">The texture.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="texture"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.FlipX(DigitalRune.Graphics.Content.Image)">
            <summary>
            Mirrors the image horizontally.
            </summary>
            <param name="image">The image.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="image"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.FlipY(DigitalRune.Graphics.Content.Texture)">
            <overloads>
            <summary>
            Mirrors the texture/image vertically.
            </summary>
            </overloads>
            
            <summary>
            Mirrors the texture vertically.
            </summary>
            <param name="texture">The texture.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="texture"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.FlipY(DigitalRune.Graphics.Content.Image)">
            <summary>
            Mirrors the image vertically.
            </summary>
            <param name="image">The image.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="image"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.FlipZ(DigitalRune.Graphics.Content.Texture)">
            <summary>
            Mirrors the volume texture along the z-axis.
            </summary>
            <param name="texture">The texture.</param>
            <remarks>
            The method does nothing if <paramref name="texture"/> is not a volume texture.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="texture"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.Rotate(DigitalRune.Graphics.Content.Texture,System.Int32)">
            <overloads>
            <summary>
            Rotates the texture/image counter-clockwise 0°, 90°, 180°, or 270°.
            </summary>
            </overloads>
            
            <summary>
            Rotates the specified texture counter-clockwise 0°, 90°, 180°, or 270°.
            </summary>
            <param name="texture">The texture.</param>
            <param name="degrees">
            The rotation angle in degrees. Allowed values: -360, -270, -180, -90, 0, 90, 180, 270, 360
            </param>
            <returns>The rotated texture.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="texture" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
            Invalid rotation angle. Allowed values are -360, -270, -180, -90, 0, 90, 180, 270, 360.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.Rotate(DigitalRune.Graphics.Content.Image,DigitalRune.Graphics.Content.Image,System.Int32)">
            <summary>
            Rotates the image counter-clockwise 0°, 90°, 180°, or 270°.
            </summary>
            <param name="srcImage">The unrotated image.</param>
            <param name="dstImage">The rotated image.</param>
            <param name="degrees">
            The angle in degrees. Allowed values: -270, -180, -90, 0, 90, 180, 270
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.GammaToLinear(DigitalRune.Graphics.Content.Texture,System.Single)">
            <overloads>
            <summary>
            Converts the specified texture/image from gamma space to linear space.
            </summary>
            </overloads>
            
            <summary>
            Converts the specified texture from gamma space to linear space.
            </summary>
            <param name="texture">The texture (<see cref="F:DigitalRune.Graphics.Content.DataFormat.R32G32B32A32_FLOAT"/>).</param>
            <param name="gamma">The gamma value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="texture"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.GammaToLinear(DigitalRune.Graphics.Content.Image,System.Single)">
            <summary>
            Converts the specified image from gamma space to linear space.
            </summary>
            <param name="image">The image (<see cref="F:DigitalRune.Graphics.Content.DataFormat.R32G32B32A32_FLOAT"/>).</param>
            <param name="gamma">The gamma value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="image"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.LinearToGamma(DigitalRune.Graphics.Content.Texture,System.Single)">
            <overloads>
            <summary>
            Converts the specified texture/image from linear space to gamma space.
            </summary>
            </overloads>
            
            <summary>
            Converts the specified texture from linear space to gamma space.
            </summary>
            <param name="texture">The texture (<see cref="F:DigitalRune.Graphics.Content.DataFormat.R32G32B32A32_FLOAT"/>).</param>
            <param name="gamma">The gamma value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="texture"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.LinearToGamma(DigitalRune.Graphics.Content.Image,System.Single)">
            <summary>
            Converts the specified image from linear space to gamma space.
            </summary>
            <param name="image">The image (<see cref="F:DigitalRune.Graphics.Content.DataFormat.R32G32B32A32_FLOAT"/>).</param>
            <param name="gamma">The gamma value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="image"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.ApplyColorKey(DigitalRune.Graphics.Content.Texture,System.Byte,System.Byte,System.Byte,System.Byte)">
            <overloads>
            <summary>
            Applies color keying to the specified texture/image.
            </summary>
            </overloads>
            
            <summary>
            Applies color keying to the specified texture (<see cref="F:DigitalRune.Graphics.Content.DataFormat.R8G8B8A8_UNORM"/>).
            </summary>
            <param name="texture">The texture (<see cref="F:DigitalRune.Graphics.Content.DataFormat.R8G8B8A8_UNORM"/>).</param>
            <param name="r">The red component of the color key.</param>
            <param name="g">The green component of the color key.</param>
            <param name="b">The blue component of the color key.</param>
            <param name="a">The alpha component of the color key.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="texture"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.ApplyColorKey(DigitalRune.Graphics.Content.Image,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Applies color keying to the specified image (<see cref="F:DigitalRune.Graphics.Content.DataFormat.R8G8B8A8_UNORM"/>).
            </summary>
            <param name="image">The image (<see cref="F:DigitalRune.Graphics.Content.DataFormat.R8G8B8A8_UNORM"/>).</param>
            <param name="r">The red component of the color key.</param>
            <param name="g">The green component of the color key.</param>
            <param name="b">The blue component of the color key.</param>
            <param name="a">The alpha component of the color key.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="image"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.ApplyColorKey(DigitalRune.Graphics.Content.Texture,DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Applies color keying to the specified texture (<see cref="F:DigitalRune.Graphics.Content.DataFormat.R32G32B32A32_FLOAT"/>).
            </summary>
            <param name="texture">The texture (<see cref="F:DigitalRune.Graphics.Content.DataFormat.R32G32B32A32_FLOAT"/>).</param>
            <param name="colorKey">Color of the color key.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="texture"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.ApplyColorKey(DigitalRune.Graphics.Content.Image,DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Applies color keying to the specified image (<see cref="F:DigitalRune.Graphics.Content.DataFormat.R32G32B32A32_FLOAT"/>).
            </summary>
            <param name="image">The image (<see cref="F:DigitalRune.Graphics.Content.DataFormat.R32G32B32A32_FLOAT"/>).</param>
            <param name="colorKey">Color of the color key.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="image"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.PremultiplyAlpha(DigitalRune.Graphics.Content.Texture)">
            <overloads>
            <summary>
            Premultiplies the alpha value of the specified texture/image.
            </summary>
            </overloads>
            
            <summary>
            Premultiplies the alpha value of the specified texture.
            </summary>
            <param name="texture">The texture (<see cref="F:DigitalRune.Graphics.Content.DataFormat.R32G32B32A32_FLOAT"/>).</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="texture"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.PremultiplyAlpha(DigitalRune.Graphics.Content.Image)">
            <summary>
            Premultiplies the alpha value of the specified image.
            </summary>
            <param name="image">The image (<see cref="F:DigitalRune.Graphics.Content.DataFormat.R32G32B32A32_FLOAT"/>).</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="image"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.HasAlpha(DigitalRune.Graphics.Content.Texture,System.Boolean@,System.Boolean@)">
            <overloads>
            <summary>
            Determines whether the specified texture/image uses the alpha channel.
            </summary>
            </overloads>
            
            <summary>
            Determines whether the specified texture uses the alpha channel.
            </summary>
            <param name="texture">The texture.</param>
            <param name="hasAlpha">
            <see langword="true"/> if <paramref name="texture"/> requires an alpha channel; otherwise,
            <see langword="false"/> if <paramref name="texture"/> is opaque.
            </param>
            <param name="hasFractionalAlpha">
            <see langword="true"/> if <paramref name="texture"/> contains fractional alpha values;
            otherwise, <see langword="false"/> if <paramref name="texture"/> is opaque or contains only
            binary alpha.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="texture"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.HasAlpha(DigitalRune.Graphics.Content.Image,System.Boolean@,System.Boolean@)">
            <summary>
            Determines whether the specified image uses the alpha channel.
            </summary>
            <param name="image">The image.</param>
            <param name="hasAlpha">
            <see langword="true"/> if <paramref name="image"/> requires an alpha channel; otherwise,
            <see langword="false"/> if <paramref name="image"/> is opaque.
            </param>
            <param name="hasFractionalAlpha">
            <see langword="true"/> if <paramref name="image"/> contains fractional alpha values;
            otherwise, <see langword="false"/> if <paramref name="image"/> is opaque or contains only
            binary alpha.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="image"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.GetAlphaTestCoverage(DigitalRune.Graphics.Content.Image,System.Single,System.Single)">
            <summary>
            Determines the alpha test coverage of the specified image.
            </summary>
            <param name="image">The image (<see cref="F:DigitalRune.Graphics.Content.DataFormat.R32G32B32A32_FLOAT"/>).</param>
            <param name="referenceAlpha">The reference value used in the alpha test.</param>
            <param name="alphaScale">A scale factor applied to the alpha value.</param>
            <returns>The alpha test coverage of the highest mipmap level.</returns>
            <remarks>
            The alpha test coverage is the relative amount of pixel that pass the alpha test. This
            method assumes that pixels with an alpha value greater or equal to
            <paramref name="referenceAlpha" /> pass the alpha test.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="image"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.ScaleAlphaToCoverage(DigitalRune.Graphics.Content.Texture,System.Single,System.Boolean)">
            <overloads>
            <summary>
            Scales the alpha values to create an equal alpha test coverage across all mipmap levels.
            </summary>
            </overloads>
            
            <summary>
            Scales the alpha values to create an equal alpha test coverage across all mipmap levels.
            </summary>
            <param name="texture">The texture (<see cref="F:DigitalRune.Graphics.Content.DataFormat.R32G32B32A32_FLOAT"/>).</param>
            <param name="referenceAlpha">The reference alpha.</param>
            <param name="premultipliedAlpha">
            <see langword="true"/> if texture uses premultiplied alpha.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="texture"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.ScaleAlphaToCoverage(DigitalRune.Graphics.Content.Image,System.Single,System.Single,System.Boolean)">
            <summary>
            Scales the alpha values of the image to create the desired alpha test coverage.
            </summary>
            <param name="image">The image (<see cref="F:DigitalRune.Graphics.Content.DataFormat.R32G32B32A32_FLOAT"/>).</param>
            <param name="referenceAlpha">The reference alpha.</param>
            <param name="desiredCoverage">The desired alpha test coverage.</param>
            <param name="premultipliedAlpha">
            <see langword="true"/> if texture uses premultiplied alpha.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="image"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.UnpackNormals(DigitalRune.Graphics.Content.Texture)">
            <overloads>
            <summary>
            Expands the texture/image from unsigned normalized values [0, 1] to signed normalized values
            [-1, 1]. (Assumes input data is normal map!)
            </summary>
            </overloads>
            
            <summary>
            Expands the texture from unsigned normalized values [0, 1] to signed normalized values
            [-1, 1]. (Assumes input data is normal map!)
            </summary>
            <param name="texture">The texture (<see cref="F:DigitalRune.Graphics.Content.DataFormat.R32G32B32A32_FLOAT"/>).</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="texture"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.UnpackNormals(DigitalRune.Graphics.Content.Image)">
            <summary>
            Expands the image from unsigned normalized values [0, 1] to signed normalized values
            [-1, 1]. (Assumes input data is normal map!)
            </summary>
            <param name="image">The image (<see cref="F:DigitalRune.Graphics.Content.DataFormat.R32G32B32A32_FLOAT"/>).</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="image"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.ProcessNormals(DigitalRune.Graphics.Content.Texture,System.Boolean)">
            <overloads>
            <summary>
            Prepares a normal map for compression using DXT5 (a.k.a. DXT5nm).
            </summary>
            </overloads>
            
            <summary>
            Prepares a normal map for compression using DXT5 (a.k.a. DXT5nm).
            </summary>
            <param name="texture">The texture (<see cref="F:DigitalRune.Graphics.Content.DataFormat.R32G32B32A32_FLOAT"/>).</param>
            <param name="invertY"><see langword="true"/> to invert the y component.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="texture"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.ProcessNormals(DigitalRune.Graphics.Content.Image,System.Boolean)">
            <summary>
            Prepares a normal map for compression using DXT5 (a.k.a. DXT5nm).
            </summary>
            <param name="image">The image (<see cref="F:DigitalRune.Graphics.Content.DataFormat.R32G32B32A32_FLOAT"/>).</param>
            <param name="invertY"><see langword="true"/> to invert the y component.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="image"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.ToTexture(Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureContent)">
            <summary>
            Converts an XNA <see cref="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureContent"/> to a DigitalRune <see cref="T:DigitalRune.Graphics.Content.Texture"/>.
            </summary>
            <param name="textureContent">The <see cref="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureContent"/>.</param>
            <returns>The <see cref="T:DigitalRune.Graphics.Content.Texture"/>.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.ToContent(DigitalRune.Graphics.Content.Texture,Microsoft.Xna.Framework.Content.Pipeline.ContentIdentity)">
            <summary>
            Converts a DigitalRune <see cref="T:DigitalRune.Graphics.Content.Texture"/> to an XNA <see cref="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureContent"/>.
            </summary>
            <param name="texture">The <see cref="T:DigitalRune.Graphics.Content.Texture"/>.</param>
            <param name="identity">The content identity.</param>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureContent"/>.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.ToContent(DigitalRune.Graphics.Content.Image)">
            <summary>
            Converts a DigitalRune <see cref="T:DigitalRune.Graphics.Content.Image"/> to an XNA <see cref="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent"/>.
            </summary>
            <param name="image">The <see cref="T:DigitalRune.Graphics.Content.Image"/>.</param>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent"/>.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.IsValid(DigitalRune.Graphics.Content.DataFormat)">
            <summary>
            Determines whether the specified texture format is valid.
            </summary>
            <param name="format">The texture format.</param>
            <returns>
            <see langword="true"/> if the <paramref name="format"/> is valid; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.IsValidDds(DigitalRune.Graphics.Content.DataFormat)">
            <summary>
            Determines whether the specified texture format is a valid DirectDraw surface (DDS) format.
            </summary>
            <param name="format">The texture format.</param>
            <returns>
            <see langword="true"/> if the <paramref name="format"/> is a valid DDS format; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.IsPalettized(DigitalRune.Graphics.Content.DataFormat)">
            <summary>
            Determines whether the specified texture format uses a color palette.
            </summary>
            <param name="format">The texture format.</param>
            <returns>
            <see langword="true"/> if <paramref name="format"/> uses a color palette; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.IsCompressed(DigitalRune.Graphics.Content.DataFormat)">
            <summary>
            Determines whether the specified texture format is a compressed format.
            </summary>
            <param name="format">The texture format.</param>
            <returns>
            <see langword="true"/> if <paramref name="format"/> is a compressed format; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.IsBCn(DigitalRune.Graphics.Content.DataFormat)">
            <summary>
            Determines whether the specified texture format is a block compressed (BC<i>n</i>) format.
            </summary>
            <param name="format">The texture format.</param>
            <returns>
            <see langword="true"/> if <paramref name="format"/> is a block compressed (BC<i>n</i>)
            format; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.IsPvrtc(DigitalRune.Graphics.Content.DataFormat)">
            <summary>
            Determines whether the specified texture format is a PowerVR texture compression (PVRTC)
            format.
            </summary>
            <param name="format">The texture format.</param>
            <returns>
            <see langword="true"/> if <paramref name="format"/> is a PowerVR texture compression (PVRTC)
            format; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.IsEtc(DigitalRune.Graphics.Content.DataFormat)">
            <summary>
            Determines whether the specified texture format is an Ericcson texture compression (ETC)
            format.
            </summary>
            <param name="format">The texture format.</param>
            <returns>
            <see langword="true"/> if <paramref name="format"/> is an Ericcson texture compression (ETC)
            format; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.IsAtc(DigitalRune.Graphics.Content.DataFormat)">
            <summary>
            Determines whether the specified texture format is an AMD texture compression (ATC/ATITC)
            format.
            </summary>
            <param name="format">The texture format.</param>
            <returns>
            <see langword="true"/> if <paramref name="format"/> is an AMD texture compression
            (ATC/ATITC) format; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.IsPacked(DigitalRune.Graphics.Content.DataFormat)">
            <summary>
            Determines whether the specified texture format is a packed format.
            </summary>
            <param name="format">The texture format.</param>
            <returns>
            <see langword="true"/> if the <paramref name="format"/> is packed; otherwise,
            <see langword="false"/>.
            </returns>
            <remarks>
            YUV formats are divided into packed formats and planar formats. In a packed format, the Y,
            U, and V components are stored in a single array. Pixels are organized into groups of
            macropixels, whose layout depends on the format. In a planar format, the Y, U, and V
            components are stored as three separate planes.
            (Source: <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd206750.aspx">Recommended 8-Bit YUV Formats for Video Rendering</see>)
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.IsPlanar(DigitalRune.Graphics.Content.DataFormat)">
            <summary>
            Determines whether the specified texture format is a planar format.
            </summary>
            <param name="format">The texture format.</param>
            <returns>
            <see langword="true"/> if the <paramref name="format"/> is planar; otherwise,
            <see langword="false"/>.
            </returns>
            <remarks>
            YUV formats are divided into packed formats and planar formats. In a packed format, the Y,
            U, and V components are stored in a single array. Pixels are organized into groups of
            macropixels, whose layout depends on the format. In a planar format, the Y, U, and V
            components are stored as three separate planes.
            (Source: <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd206750.aspx">Recommended 8-Bit YUV Formats for Video Rendering</see>)
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.IsVideo(DigitalRune.Graphics.Content.DataFormat)">
            <summary>
            Determines whether the specified texture format is a video format.
            </summary>
            <param name="format">The texture format.</param>
            <returns>
            <see langword="true"/> if <paramref name="format"/> is a video format; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.BitsPerPixel(DigitalRune.Graphics.Content.DataFormat)">
            <summary>
            Gets the bits per pixel for the specified texture format.
            </summary>
            <param name="format">The texture format.</param>
            <returns>The bits per pixel. Returns 0 on failure.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.BitsPerColor(DigitalRune.Graphics.Content.DataFormat)">
            <summary>
            Gets the bits per color channel for the specified texture format.
            </summary>
            <param name="format">The texture format.</param>
            <returns>
            The bits per color channel. For mixed formats, it returns the largest color-depth in the
            format. Returns 0 on failure.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.IsDepthStencil(DigitalRune.Graphics.Content.DataFormat)">
            <summary>
            Determines whether the specified texture format is a depth-stencil format.
            </summary>
            <param name="format">The texture format.</param>
            <returns>
            <see langword="true"/> if <paramref name="format"/> is a depth-stencil format; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.IsSRgb(DigitalRune.Graphics.Content.DataFormat)">
            <summary>
            Determines whether the specified texture format is sRGB.
            </summary>
            <param name="format">The texture format.</param>
            <returns>
            <see langword="true"/> if <paramref name="format"/> is sRGB; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.IsTypeless(DigitalRune.Graphics.Content.DataFormat,System.Boolean)">
            <summary>
            Determines whether the specified texture format is typeless.
            </summary>
            <param name="format">The texture format.</param>
            <param name="partialTypeless">
            <see langword="true"/> to check for partial typeless formats.</param>
            <returns>
            <see langword="true"/> if <paramref name="format"/> is typeless; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.HasAlpha(DigitalRune.Graphics.Content.DataFormat)">
            <summary>
            Determines whether the specified texture format stores an alpha channel.
            </summary>
            <param name="format">The texture format.</param>
            <returns>
            <see langword="true"/> if the <paramref name="format"/> contains an alpha channel;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.MakeSRgb(DigitalRune.Graphics.Content.DataFormat)">
            <summary>
            Converts the specified texture format to an sRGB equivalent type if available.
            </summary>
            <param name="format">The texture format.</param>
            <returns>The sRGB equivalent type if available.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.MakeTypeless(DigitalRune.Graphics.Content.DataFormat)">
            <summary>
            Converts to a format to an equivalent TYPELESS format if available.
            </summary>
            <param name="format">The texture format.</param>
            <returns>The equivalent TYPELESS format if available.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.MakeTypelessUNorm(DigitalRune.Graphics.Content.DataFormat)">
            <summary>
            Converts to a TYPELESS format to an equivalent UNORM format if available.
            </summary>
            <param name="format">The texture format.</param>
            <returns>The equivalent UNORM format if available.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.MakeTypelessFloat(DigitalRune.Graphics.Content.DataFormat)">
            <summary>
            Converts to a TYPELESS format to an equivalent FLOAT format if available.
            </summary>
            <param name="format">The texture format.</param>
            <returns>The equivalent FLOAT format if available.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.ComputeScanlines(DigitalRune.Graphics.Content.DataFormat,System.Int32)">
            <summary>
            Gets the number of scanlines used publicly by the specified texture format.
            </summary>
            <param name="format">The texture format.</param>
            <param name="height">The height in pixels.</param>
            <returns>The number of scanlines.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.ComputePitch(DigitalRune.Graphics.Content.DataFormat,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <overloads>
            <summary>
            Gets the image row pitch (in bytes) and the slice pitch (size of the image in bytes) based
            on format, width, and height.
            </summary>
            </overloads>
            
            <summary>
            Gets the image row pitch (in bytes) and the slice pitch (size of the image in bytes) based
            on format, width, and height.
            </summary>
            <param name="format">The texture format.</param>
            <param name="width">The image width in pixels.</param>
            <param name="height">The image height in pixels.</param>
            <param name="rowPitch">The row pitch in bytes.</param>
            <param name="slicePitch">The image size in bytes.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.ComputePitch(DigitalRune.Graphics.Content.DataFormat,System.Int32,System.Int32,System.Int32@,System.Int32@,DigitalRune.Graphics.Content.ComputePitchFlags)">
            <summary>
            Gets the image row pitch (in bytes) and the slice pitch (size of the image in bytes) based
            on format, width, height and additional options.
            </summary>
            <param name="format">The texture format.</param>
            <param name="width">The image width in pixels.</param>
            <param name="height">The image height in pixels.</param>
            <param name="rowPitch">The row pitch in bytes.</param>
            <param name="slicePitch">The image size in bytes.</param>
            <param name="flags">Additional options.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.CopyScanline(System.IO.BinaryReader,System.Int32,System.IO.BinaryWriter,System.Int32,DigitalRune.Graphics.Content.DataFormat,DigitalRune.Graphics.Content.ScanlineFlags)">
            <summary>
            Copies an image row with optional clearing of alpha value to 1.0.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.SwizzleScanline(System.IO.BinaryReader,System.Int32,System.IO.BinaryWriter,System.Int32,DigitalRune.Graphics.Content.DataFormat,DigitalRune.Graphics.Content.ScanlineFlags)">
            <summary>
            Swizzles (RGB &lt;-&gt; BGR) an image row with optional clearing of alpha value to 1.0.
            (Can be used in place as well; otherwise copies the image row unmodified.)
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.ExpandScanline(System.IO.BinaryReader,System.Int32,DigitalRune.Graphics.Content.DataFormat,System.IO.BinaryWriter,System.Int32,DigitalRune.Graphics.Content.DataFormat,DigitalRune.Graphics.Content.ScanlineFlags)">
            <summary>
            Converts an image row with optional clearing of alpha value to 1.0.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Content.TextureHelper.Filter">
            <summary>
            Defines a filter function f(x).
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Content.TextureHelper.Filter.Width">
            <summary>
            Gets or sets the width of the filter.
            </summary>
            <value>
            The width of the filter. The width is relative to the output image. The total filter range
            is [-Width, +Width].
            </value>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.Filter.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Content.TextureHelper.Filter"/> class.
            </summary>
            <param name="width">The width of the filter.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.Filter.SampleBox(System.Single,System.Single,System.Int32)">
            <summary>
            Samples the function using a box filter.
            </summary>
            <param name="x">The start position of the kernel sample.</param>
            <param name="scale">The scale factor that is applied to the filter kernel.</param>
            <param name="numberOfSamples">The number of samples.</param>
            <returns>The filter weight for sample <paramref name="x"/>.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.Filter.SampleTriangle(System.Single,System.Single,System.Int32)">
            <summary>
            Samples the function using a triangle filter.
            </summary>
            <param name="x">The start position of the kernel sample.</param>
            <param name="scale">The scale factor that is applied to the filter kernel.</param>
            <param name="numberOfSamples">The number of samples.</param>
            <returns>The filter weight for sample <paramref name="x"/>.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.Filter.Evaluate(System.Single)">
            <summary>
            Evaluates the function f(x).
            </summary>
            <param name="x">The function argument x.</param>
            <returns>The function value f(x).</returns>
        </member>
        <member name="T:DigitalRune.Graphics.Content.TextureHelper.BoxFilter">
            <summary>
            Defines a box filer.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.BoxFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Content.TextureHelper.BoxFilter"/> class with a default width of 0.5.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.BoxFilter.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Content.TextureHelper.BoxFilter"/> class with the specified width.
            </summary>
            <param name="width">The width of the filter.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.BoxFilter.Evaluate(System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Content.TextureHelper.TriangleFilter">
            <summary>
            Defines a triangle filter.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.TriangleFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Content.TextureHelper.TriangleFilter"/> class with a default width of 1.0.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.TriangleFilter.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Content.TextureHelper.TriangleFilter"/> class with the specified width.
            </summary>
            <param name="width">The width of the filter.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.TriangleFilter.Evaluate(System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Content.TextureHelper.CubicFilter">
            <summary>
            Defines a cubic filter.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.CubicFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Content.TextureHelper.CubicFilter"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.CubicFilter.Evaluate(System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Content.TextureHelper.QuadricFilter">
            <summary>
            Defines a quadric filter.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.QuadricFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Content.TextureHelper.QuadricFilter"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.QuadricFilter.Evaluate(System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Content.TextureHelper.BSplineFilter">
            <summary>
            Defines a B-spline filter.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.BSplineFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Content.TextureHelper.BSplineFilter"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.BSplineFilter.Evaluate(System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Content.TextureHelper.MitchellFilter">
            <summary>
            Defines Mitchell &amp; Netravali's filter.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.MitchellFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Content.TextureHelper.MitchellFilter"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.MitchellFilter.SetParameters(System.Single,System.Single)">
            <summary>
            Sets the cubic filter parameters.
            </summary>
            <param name="b">The parameter B.</param>
            <param name="c">The parameter C.</param>
            <remarks>
            <para>
            Some values (B, C) correspond to well-known cubic splines. (1, 0) is the cubic B-spline.
            (0, C) is the family of cardinal cubics. (0, 0.5) is the Catmull-Rom spline. (B, 0) are
            Duff's tensioned B-splines.
            </para>
            <para>
            The default values for Mitchell &amp; Netravali's filter are (1/3, 1/3).
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.MitchellFilter.Evaluate(System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Content.TextureHelper.LanczosFilter">
            <summary>
            Defines the Lanczos filter.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.LanczosFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Content.TextureHelper.LanczosFilter"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.LanczosFilter.Evaluate(System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Content.TextureHelper.SincFilter">
            <summary>
            Defines the Sinc filter.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.SincFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Content.TextureHelper.SincFilter"/> class with a default width of 3.0.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.SincFilter.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Content.TextureHelper.SincFilter"/> class with the specified width.
            </summary>
            <param name="width">The width of the filter.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.SincFilter.Evaluate(System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Content.TextureHelper.KaiserFilter">
            <summary>
            Defines the Kaiser filter.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.KaiserFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Content.TextureHelper.KaiserFilter"/> class with a default width of 3.0.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.KaiserFilter.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Content.TextureHelper.KaiserFilter"/> class with the specified width.
            </summary>
            <param name="width">The width of the filter.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.KaiserFilter.SetParameters(System.Single,System.Single)">
            <summary>
            Sets the parameters of the Kaiser filter.
            </summary>
            <param name="alpha">The alpha value.</param>
            <param name="stretch">The stretch value.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.KaiserFilter.Evaluate(System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Content.TextureHelper.GaussianFilter">
            <summary>
            Defines a Gaussian filter.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.GaussianFilter.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Content.TextureHelper.GaussianFilter"/> class.
            </summary>
            <param name="width">The width of the filter.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.GaussianFilter.SetParameters(System.Single)">
            <summary>
            Sets the parameters of the Gaussian filter.
            </summary>
            <param name="variance">The variance.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.GaussianFilter.Evaluate(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.Convolve(DigitalRune.Graphics.Content.Image,System.Single[0:,0:],DigitalRune.Graphics.Content.TextureAddressMode)">
            <summary>
            Applies the a filter kernel to the specified image.
            </summary>
            <param name="image">The image.</param>
            <param name="kernel">The filter kernel. (Needs to be square.)</param>
            <param name="wrapMode">The texture address mode.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="image"/> or <paramref name="kernel"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="kernel"/> is non-square.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.Content.TextureHelper.PolyphaseKernel">
            <summary>
            Defines a 1D polyphase kernel.
            </summary>
            <remarks>
            <para>
            A polyphase kernel uses different filter weights for each pixel of the output image.
            </para>
            <para>
            See <see href="https://developer.nvidia.com/content/non-power-two-mipmapping">Stephen Guthe,
            Paul Heckbert: "Non-Power-of-Two Mipmapping", NVIDIA</see>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Content.TextureHelper.PolyphaseKernel.Weights">
            <summary>
            Gets the filter weights.
            </summary>
            <value>The filter weights.</value>
            <remarks>
            <c>Weights[i, ]</c> provides the filter weights for pixel <c>i</c> in the output image.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Content.TextureHelper.PolyphaseKernel.WindowSize">
            <summary>
            Gets the window size.
            </summary>
            <value>The window size.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.TextureHelper.PolyphaseKernel.Length">
            <summary>
            Gets the length of the output image.
            </summary>
            <value>The length of the output image.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Content.TextureHelper.PolyphaseKernel.Width">
            <summary>
            Gets the filter width in the input image.
            </summary>
            <value>The filter width in the input image.</value>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.PolyphaseKernel.#ctor(DigitalRune.Graphics.Content.TextureHelper.Filter,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Content.TextureHelper.PolyphaseKernel"/> class.
            </summary>
            <param name="filter">The filter function.</param>
            <param name="srcLength">The length of the input image.</param>
            <param name="dstLength">The length of the output image.</param>
            <param name="numberOfSamples">The number of samples.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="filter"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="srcLength"/>, <paramref name="dstLength"/>, or
            <paramref name="numberOfSamples"/> is invalid.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.GetFilter(DigitalRune.Graphics.Content.ResizeFilter)">
            <summary>
            Create a filter with default settings.
            </summary>
            <param name="filter">The filter type.</param>
            <returns>The <see cref="T:DigitalRune.Graphics.Content.TextureHelper.Filter"/> instance.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="filter"/> is invalid.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.Resize(DigitalRune.Graphics.Content.Texture,System.Int32,System.Int32,DigitalRune.Graphics.Content.Texture,System.Int32,System.Int32,DigitalRune.Graphics.Content.ResizeFilter,System.Boolean,DigitalRune.Graphics.Content.TextureAddressMode)">
            <overloads>
            <summary>
            Resizes a texture/image.
            </summary>
            </overloads>
            
            <summary>
            Resizes a 2D texture or 3D (volume) texture.
            </summary>
            <param name="srcTexture">The input texture.</param>
            <param name="srcMipIndex">The mipmap level of the input image.</param>
            <param name="srcArrayOrFaceIndex">
            The array index (or the face index for cube maps) of the input image. Must be 0 for volume
            textures.
            </param>
            <param name="dstTexture">The output texture.</param>
            <param name="dstMipIndex">The mipmap level of the output image.</param>
            <param name="dstArrayOrFaceIndex">
            The array index (or the face index for cube maps) of the output image. Must be 0 for volume
            textures.
            </param>
            <param name="filter">The filter to use for resizing.</param>
            <param name="alphaTransparency">
            <see langword="true"/> if the image contains uses non-premultiplied alpha; otherwise,
            <see langword="false"/> if the image uses premultiplied alpha or has no alpha.
            </param>
            <param name="wrapMode">
            The texture address mode that will be used for sampling the at runtime.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TextureHelper.Resize(DigitalRune.Graphics.Content.Image,DigitalRune.Graphics.Content.Image,DigitalRune.Graphics.Content.ResizeFilter,System.Boolean,DigitalRune.Graphics.Content.TextureAddressMode)">
            <summary>
            Resizes a 2D image.
            </summary>
            <param name="srcImage">The input image.</param>
            <param name="dstImage">The output image.</param>
            <param name="filter">The filter to use for resizing.</param>
            <param name="alphaTransparency">
            <see langword="true"/> if the image contains uses non-premultiplied alpha; otherwise,
            <see langword="false"/> if the image uses premultiplied alpha or has no alpha.
            </param>
            <param name="wrapMode">
            The texture address mode that will be used for sampling the at runtime.
            </param>
        </member>
        <member name="T:DigitalRune.Graphics.Content.ComputePitchFlags">
            <summary>
            Additional options for <see cref="M:DigitalRune.Graphics.Content.TextureHelper.ComputePitch(DigitalRune.Graphics.Content.DataFormat,System.Int32,System.Int32,System.Int32@,System.Int32@,DigitalRune.Graphics.Content.ComputePitchFlags)"/>.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.ComputePitchFlags.None">
            <summary>Normal operation.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.ComputePitchFlags.LegacyDword">
            <summary>Assume pitch is DWORD aligned instead of BYTE aligned.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.ComputePitchFlags.Paragraph">
            <summary>Assume pitch is 16-byte aligned instead of BYTE aligned.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.ComputePitchFlags.Ymm">
            <summary>Assume pitch is 32-byte aligned instead of BYTE aligned.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.ComputePitchFlags.Zmm">
            <summary>Assume pitch is 64-byte aligned instead of BYTE aligned.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.ComputePitchFlags.Page4K">
            <summary>Assume pitch is 4096-byte aligned instead of BYTE aligned.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.ComputePitchFlags.Bpp24">
            <summary>Override with a legacy 24 bits-per-pixel format size.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.ComputePitchFlags.Bpp16">
            <summary>Override with a legacy 16 bits-per-pixel format size.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.ComputePitchFlags.Bpp8">
            <summary>Override with a legacy 8 bits-per-pixel format size.</summary>
        </member>
        <member name="T:DigitalRune.Graphics.Content.ScanlineFlags">
            <summary>
            Additional options for scanline operations in <see cref="T:DigitalRune.Graphics.Content.TextureHelper"/>.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.ScanlineFlags.None">
            <summary>Normal operation.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.ScanlineFlags.SetAlpha">
            <summary>Set alpha channel to known opaque value.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.ScanlineFlags.Legacy">
            <summary>Enables specific legacy format conversion cases.</summary>
        </member>
        <member name="T:DigitalRune.Graphics.Content.ResizeFilter">
            <summary>
            Defines a filter for image resizing.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.ResizeFilter.Box">
            <summary>Box filter.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.ResizeFilter.Triangle">
            <summary>Triangle (bilinear/tent) filter.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.ResizeFilter.Cubic">
            <summary>Cubic filter.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.ResizeFilter.Quadric">
            <summary>Quadric (bell) filter.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.ResizeFilter.BSpline">
            <summary>Cubic b-spline filter.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.ResizeFilter.Mitchell">
            <summary>Mitchell &amp; Netravali's two-param cubic filter. (Source: "Reconstruction Filters in Computer Graphics", SIGGRAPH 88)</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.ResizeFilter.Lanczos">
            <summary>Lanczos3 filter.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.ResizeFilter.Sinc">
            <summary>Sinc filter.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.ResizeFilter.Kaiser">
            <summary>Kaiser filter.</summary>
        </member>
        <member name="T:DigitalRune.Graphics.Content.SquishFlags">
            <summary>
            Defines the options for DXT texture compression using <see cref="T:DigitalRune.Graphics.Content.Squish"/>.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.SquishFlags.Dxt1">
            <summary>Use DXT1 compression.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.SquishFlags.Dxt3">
            <summary>Use DXT3 compression.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.SquishFlags.Dxt5">
            <summary>Use DXT5 compression.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.SquishFlags.ColourIterativeClusterFit">
            <summary>Use a very slow but very high quality colour compressor.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.SquishFlags.ColourClusterFit">
            <summary>Use a slow but high quality colour compressor (the default).</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.SquishFlags.ColourRangeFit">
            <summary>Use a fast but low quality colour compressor.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Content.SquishFlags.WeightColourByAlpha">
            <summary>Weight the colour by alpha during cluster fit (disabled by default).</summary>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Squish">
            <summary>
            Provides support for DXT1/3/5 texture compression.
            </summary>
            <remarks>
            <see href="https://code.google.com/p/libsquish/">libSquish</see>.
            Copyright (c) 2006 Simon Brown. Available under MIT license.
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.Content.Squish.ColourSet">
            <summary>
            Represents a set of block colours.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Squish.CompressMasked(System.Byte*,System.Int32,System.Byte*,DigitalRune.Graphics.Content.SquishFlags,System.Nullable{DigitalRune.Mathematics.Algebra.Vector3F},DigitalRune.Graphics.Content.Squish.Context)">
            <summary>
            Compresses a 4x4 block of pixels.
            </summary>
            <param name="rgba">The rgba values of the 16 source pixels.</param>
            <param name="mask">The valid pixel mask.</param>
            <param name="block">Storage for the compressed DXT block.</param>
            <param name="flags">Compression flags.</param>
            <param name="metric">An optional perceptual metric.</param>
            <param name="context">Context per thread.</param>
            <remarks>
            <para>
            The source pixels should be presented as a contiguous array of 16 rgba
            values, with each component as 1 byte each. In memory this should be:
            </para>
            <para>
              { r1, g1, b1, a1, .... , r16, g16, b16, a16 }
            </para>
            <para>
            The mask parameter enables only certain pixels within the block. The lowest
            bit enables the first pixel and so on up to the 16th bit. Bits beyond the
            16th bit are ignored. Pixels that are not enabled are allowed to take
            arbitrary colours in the output block. An example of how this can be used
            is in the CompressImage function to disable pixels outside the bounds of
            the image when the width or height is not divisible by 4.
            </para>
            <para>
            The flags parameter should specify either <see cref="F:DigitalRune.Graphics.Content.SquishFlags.Dxt1"/>, 
            <see cref="F:DigitalRune.Graphics.Content.SquishFlags.Dxt3"/> or <see cref="F:DigitalRune.Graphics.Content.SquishFlags.Dxt5"/> compression, 
            however, DXT1 will be used by default if none is specified. When using DXT1 
            compression, 8 bytes of storage are required for the compressed DXT block. 
            DXT3 and DXT5 compression require 16 bytes of storage per block.
            </para>
            <para>
            The flags parameter can also specify a preferred colour compressor to use 
            when fitting the RGB components of the data. Possible colour compressors 
            are: <see cref="F:DigitalRune.Graphics.Content.SquishFlags.ColourClusterFit"/> (the default), 
            <see cref="F:DigitalRune.Graphics.Content.SquishFlags.ColourRangeFit"/> (very fast, low quality) or 
            <see cref="F:DigitalRune.Graphics.Content.SquishFlags.ColourIterativeClusterFit"/> (slowest, best quality).
            </para>
            <para>
            When using <see cref="F:DigitalRune.Graphics.Content.SquishFlags.ColourClusterFit"/> or 
            <see cref="F:DigitalRune.Graphics.Content.SquishFlags.ColourIterativeClusterFit"/>, an additional 
            flag can be specified to weight the importance of each pixel by its alpha 
            value. For images that are rendered using alpha blending, this can 
            significantly increase the perceived quality.
            </para>
            <para>
            <paramref name="metric"/> can be used to weight the relative importance
            of each colour channel, or pass <see langword="null"/> to use the default
            uniform weight of (1.0, 1.0, 1.0). This replaces the previous flag-based
            control that allowed either uniform or "perceptual" weights with the fixed
            values (0.2126, 0.7152, 0.0722).
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Squish.Decompress(System.Byte*,System.Byte*,DigitalRune.Graphics.Content.SquishFlags)">
            <summary>
            Compresses a 4x4 block of pixels.
            </summary>
            <param name="block">Storage for the compressed DXT block.</param>
            <param name="rgba">The rgba values of the 16 source pixels.</param>
            <param name="flags">Compression flags.</param>
            <remarks>
            <para>
            The decompressed pixels will be written as a contiguous array of 16 rgba
            values, with each component as 1 byte each. In memory this is:
            </para>
            <para>
            { r1, g1, b1, a1, .... , r16, g16, b16, a16 }
            </para>
            <para>
            The flags parameter should specify either kDxt1, kDxt3 or kDxt5 compression, 
            however, DXT1 will be used by default if none is specified. All other flags 
            are ignored.
             </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Squish.GetStorageRequirements(System.Int32,System.Int32,DigitalRune.Graphics.Content.SquishFlags)">
            <summary>
            Computes the amount of compressed storage required.
            </summary>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
            <param name="flags">Compression flags.</param>
            <returns>The memory (in bytes) required to store the compressed image.</returns>
            <remarks>
            <para>
            The flags parameter should specify either <see cref="F:DigitalRune.Graphics.Content.SquishFlags.Dxt1"/>, 
            <see cref="F:DigitalRune.Graphics.Content.SquishFlags.Dxt3"/> or <see cref="F:DigitalRune.Graphics.Content.SquishFlags.Dxt5"/> compression, 
            however, DXT1 will be used by default if none is specified. All other flags 
            are ignored.
            </para>
            <para>
            Most DXT images will be a multiple of 4 in each dimension, but this 
            function supports arbitrary size images by allowing the outer blocks to
            be only partially used.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Squish.CompressImage(System.Byte[],System.Int32,System.Int32,System.Byte[],DigitalRune.Graphics.Content.SquishFlags,System.Nullable{DigitalRune.Mathematics.Algebra.Vector3F})">
            <summary>
            Compresses an image in memory.
            </summary>
            <param name="rgba">The pixels of the source.</param>
            <param name="width">The width of the source image.</param>
            <param name="height">The height of the source image.</param>
            <param name="blocks">Storage for the compressed output.</param>
            <param name="flags">Compression flags.</param>
            <param name="metric">An optional perceptual metric.</param>
            <remarks>
            <para>
            The source pixels should be presented as a contiguous array of 16 rgba
            values, with each component as 1 byte each. In memory this should be:
            </para>
            <para>
              { r1, g1, b1, a1, .... , r16, g16, b16, a16 }
            </para>
            <para>
            The flags parameter should specify either <see cref="F:DigitalRune.Graphics.Content.SquishFlags.Dxt1"/>, 
            <see cref="F:DigitalRune.Graphics.Content.SquishFlags.Dxt3"/> or <see cref="F:DigitalRune.Graphics.Content.SquishFlags.Dxt5"/> compression, 
            however, DXT1 will be used by default if none is specified. When using DXT1 
            compression, 8 bytes of storage are required for the compressed DXT block. 
            DXT3 and DXT5 compression require 16 bytes of storage per block.
            </para>
            <para>
            The flags parameter can also specify a preferred colour compressor to use 
            when fitting the RGB components of the data. Possible colour compressors 
            are: <see cref="F:DigitalRune.Graphics.Content.SquishFlags.ColourClusterFit"/> (the default), 
            <see cref="F:DigitalRune.Graphics.Content.SquishFlags.ColourRangeFit"/> (very fast, low quality) or 
            <see cref="F:DigitalRune.Graphics.Content.SquishFlags.ColourIterativeClusterFit"/> (slowest, best quality).
            </para>
            <para>
            When using <see cref="F:DigitalRune.Graphics.Content.SquishFlags.ColourClusterFit"/> or 
            <see cref="F:DigitalRune.Graphics.Content.SquishFlags.ColourIterativeClusterFit"/>, an additional 
            flag can be specified to weight the importance of each pixel by its alpha 
            value. For images that are rendered using alpha blending, this can 
            significantly increase the perceived quality.
            </para>
            <para>
            <paramref name="metric"/> can be used to weight the relative importance
            of each colour channel, or pass <see langword="null"/> to use the default
            uniform weight of (1.0, 1.0, 1.0). This replaces the previous flag-based
            control that allowed either uniform or "perceptual" weights with the fixed
            values (0.2126, 0.7152, 0.0722).
            </para>
            <para>
            Internally this function calls <see cref="M:DigitalRune.Graphics.Content.Squish.CompressMasked(System.Byte*,System.Int32,System.Byte*,DigitalRune.Graphics.Content.SquishFlags,System.Nullable{DigitalRune.Mathematics.Algebra.Vector3F},DigitalRune.Graphics.Content.Squish.Context)"/> for each block, 
            which allows for pixels outside the image to take arbitrary values. The function 
            <see cref="M:DigitalRune.Graphics.Content.Squish.GetStorageRequirements(System.Int32,System.Int32,DigitalRune.Graphics.Content.SquishFlags)"/> can be called to compute the amount of memory
            to allocate for the compressed output.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Content.Squish.DecompressImage(System.Byte[],System.Int32,System.Int32,System.Byte[],DigitalRune.Graphics.Content.SquishFlags)">
            <summary>
            Decompresses an image in memory.
            </summary>
            <param name="blocks">The compressed DXT blocks.</param>
            <param name="width">The width of the source image.</param>
            <param name="height">The height of the source image.</param>
            <param name="rgba">Storage for the decompressed pixels.</param>
            <param name="flags">Compression flags.</param>
            <remarks>
            <para>
            The decompressed pixels will be written as a contiguous array of 
            <paramref name="width"/> * <paramref name="height"/> rgba values,
            with each component as 1 byte each. In memory this is:
            </para>
            <para>
            { r1, g1, b1, a1, .... , rn, gn, bn, an } for n = width * height
            </para>
            <para>
            The flags parameter should specify either <see cref="F:DigitalRune.Graphics.Content.SquishFlags.Dxt1"/>, 
            <see cref="F:DigitalRune.Graphics.Content.SquishFlags.Dxt3"/> or <see cref="F:DigitalRune.Graphics.Content.SquishFlags.Dxt5"/> compression, 
            however, DXT1 will be used by default if none is specified. All other flags 
            are ignored.
            </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.Content.TgaHelper">
            <summary>
            Provides methods for loading/saving Truevision TARGA images (.TGA files).
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TgaHelper.DecodeTGAHeader(System.IO.Stream,System.Int32@,DigitalRune.Graphics.Content.TgaHelper.ConversionFlags@)">
            <summary>
            Decodes the TGA file header.
            </summary>
            <param name="stream">The stream.</param>
            <param name="offset">The offset in the stream at which the data starts.</param>
            <param name="convFlags">The conversion flags.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.IO.InvalidDataException">
            Invalid data.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The specified format is not supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TgaHelper.UncompressPixels(System.IO.BinaryReader,DigitalRune.Graphics.Content.Image,DigitalRune.Graphics.Content.DataFormat,DigitalRune.Graphics.Content.TgaHelper.ConversionFlags)">
            <summary>
            Uncompresses the pixel data from a TGA file into the target image.
            </summary>
            <param name="reader">The input reader.</param>
            <param name="image">The image.</param>
            <param name="format">The texture format.</param>
            <param name="convFlags">The conversion flags.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="reader"/> or <paramref name="image"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TgaHelper.Load(System.IO.Stream)">
            <summary>
            Loads the specified TGA image.
            </summary>
            <param name="stream">The stream to read from.</param>
            <returns>The <see cref="T:DigitalRune.Graphics.Content.Texture"/> representing the TGA image.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.TgaHelper.Save(DigitalRune.Graphics.Content.Image,System.IO.Stream)">
            <summary>
            Saves the specified image in TGA format.
            </summary>
            <param name="image">The image.</param>
            <param name="stream">The stream to write to.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="image"/> or <paramref name="stream"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.Content.XnaHelper">
            <summary>
            Provides methods for converting types from/to XNA.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.XnaHelper.ToVertexElementFormat(DigitalRune.Graphics.Content.DataFormat)">
            <summary>
            Converts the specified DigitalRune <see cref="T:DigitalRune.Graphics.Content.DataFormat"/> to the XNA
            <see cref="T:Microsoft.Xna.Framework.Graphics.VertexElementFormat"/>.
            </summary>
            <param name="format">The <see cref="T:DigitalRune.Graphics.Content.DataFormat"/>.</param>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Graphics.VertexElementFormat"/>.</returns>
            <exception cref="T:System.NotSupportedException">
            The format is not supported in XNA or MonoGame.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.XnaHelper.ToDataFormat(Microsoft.Xna.Framework.Graphics.VertexElementFormat)">
            <summary>
            Converts the specified XNA <see cref="T:Microsoft.Xna.Framework.Graphics.VertexElementFormat"/> to a DigitalRune
            <see cref="T:DigitalRune.Graphics.Content.DataFormat"/>.
            </summary>
            <param name="format">The <see cref="T:Microsoft.Xna.Framework.Graphics.VertexElementFormat"/>.</param>
            <returns>The <see cref="T:DigitalRune.Graphics.Content.DataFormat"/>.</returns>
            <exception cref="T:System.NotSupportedException">
            The format cannot be converted to <see cref="T:DigitalRune.Graphics.Content.DataFormat"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.XnaHelper.ToVertexElementUsage(DigitalRune.Graphics.Content.VertexElementSemantic)">
            <summary>
            Converts the specified DigitalRune <see cref="T:DigitalRune.Graphics.Content.VertexElementSemantic"/> to the XNA
            <see cref="T:Microsoft.Xna.Framework.Graphics.VertexElementUsage"/>.
            </summary>
            <param name="semantic">The <see cref="T:DigitalRune.Graphics.Content.VertexElementSemantic"/>.</param>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Graphics.VertexElementUsage"/>.</returns>
            <exception cref="T:System.NotSupportedException">
            The semantic is not supported in XNA or MonoGame.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.XnaHelper.ToVertexElementSemantic(Microsoft.Xna.Framework.Graphics.VertexElementUsage)">
            <summary>
            Converts the specified XNA <see cref="T:Microsoft.Xna.Framework.Graphics.VertexElementUsage"/> to the DigitalRune
            <see cref="T:DigitalRune.Graphics.Content.VertexElementSemantic"/>.
            </summary>
            <param name="usage">The <see cref="T:Microsoft.Xna.Framework.Graphics.VertexElementUsage"/>.</param>
            <returns>The <see cref="T:DigitalRune.Graphics.Content.VertexElementSemantic"/>.</returns>
            <exception cref="T:System.NotSupportedException">
            The usage cannot be converted to <see cref="T:DigitalRune.Graphics.Content.VertexElementSemantic"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.XnaHelper.ToXna(DigitalRune.Graphics.Content.VertexElement)">
            <summary>
            Converts the specified DigitalRune <see cref="T:DigitalRune.Graphics.Content.VertexElement"/> to the XNA
            <see cref="T:Microsoft.Xna.Framework.Graphics.VertexElement"/>.
            </summary>
            <param name="element">The <see cref="T:DigitalRune.Graphics.Content.VertexElement"/>.</param>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Graphics.VertexElement"/>.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.XnaHelper.ToDR(Microsoft.Xna.Framework.Graphics.VertexElement)">
            <summary>
            Converts the specified XNA <see cref="T:Microsoft.Xna.Framework.Graphics.VertexElement"/> to
            the DigitalRune <see cref="T:DigitalRune.Graphics.Content.VertexElement"/>.
            </summary>
            <param name="element">
            The <see cref="T:Microsoft.Xna.Framework.Graphics.VertexElement"/>.
            </param>
            <returns>The <see cref="T:DigitalRune.Graphics.Content.VertexElement"/>.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.XnaHelper.ToSurfaceFormat(DigitalRune.Graphics.Content.DataFormat)">
            <summary>
            Converts the specified DigitalRune <see cref="T:DigitalRune.Graphics.Content.DataFormat"/> to the XNA
            <see cref="T:Microsoft.Xna.Framework.Graphics.SurfaceFormat"/>.
            </summary>
            <param name="format">The <see cref="T:DigitalRune.Graphics.Content.DataFormat"/>.</param>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Graphics.SurfaceFormat"/>.</returns>
            <exception cref="T:System.NotSupportedException">
            The format is not supported in XNA or MonoGame.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.XnaHelper.ToDataFormat(Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
            <summary>
            Converts the specified XNA <see cref="T:Microsoft.Xna.Framework.Graphics.SurfaceFormat"/> to the DigitalRune
            <see cref="T:DigitalRune.Graphics.Content.DataFormat"/>.
            </summary>
            <param name="format">The <see cref="T:Microsoft.Xna.Framework.Graphics.SurfaceFormat"/>.</param>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Graphics.SurfaceFormat"/>.</returns>
            <exception cref="T:System.NotSupportedException">
            The format cannot be converted to <see cref="T:DigitalRune.Graphics.Content.DataFormat"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.MarshalHelper">
            <summary>
            Provides helper methods for working with unmanaged and managed memory blocks.
            </summary>
        </member>
        <member name="M:DigitalRune.MarshalHelper.Convert``1(System.Byte[])">
            <summary>
            Converts a block of memory to a managed object of the specified type.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="buffer">The buffer.</param>
            <returns>The managed object of type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentException">
            The layout of <typeparamref name="T"/> is not sequential or explicit.<br/>
            Or, <typeparamref name="T"/> is a generic type.
            </exception>
        </member>
        <member name="M:DigitalRune.MarshalHelper.Convert``1(``0)">
            <summary>
            Converts a managed object to a block of memory.
            </summary>
            <typeparam name="T">The source type.</typeparam>
            <param name="t">The managed object.</param>
            <returns>
            A block of memory containing a copy of <paramref name="t"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            The layout of <typeparamref name="T"/> is not sequential or explicit.
            </exception>
        </member>
        <member name="M:DigitalRune.MarshalHelper.ReadStruct``1(System.IO.Stream)">
            <summary>
            Reads specified value from a stream.
            </summary>
            <typeparam name="T">The type to read.</typeparam>
            <param name="stream">The input stream.</param>
            <returns>The value read from the stream.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The layout of <typeparamref name="T"/> is not sequential or explicit.<br/>
            Or, <typeparamref name="T"/> is a generic type.
            </exception>
        </member>
        <member name="M:DigitalRune.MarshalHelper.WriteStruct``1(System.IO.Stream,``0)">
            <summary>
            Writes the specified value to a stream.
            </summary>
            <typeparam name="T">The type to write</typeparam>
            <param name="stream">The output stream.</param>
            <param name="t">The value to write.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The layout of <typeparamref name="T"/> is not sequential or explicit.
            </exception>
        </member>
    </members>
</doc>
