<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DigitalRune.Graphics</name>
    </assembly>
    <members>
        <member name="T:DigitalRune.Graphics.Content.AssetLoadHelper">
            <summary>
            Helps to determine when an asset with shared resources is fully loaded.
            </summary>
            <remarks>
            <para>
            Shared resources (see <see cref="M:Microsoft.Xna.Framework.Content.ContentReader.ReadSharedResource``1(System.Action{``0})"/>) are loaded deferred.
            When the <see cref="M:Microsoft.Xna.Framework.Content.ContentTypeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,System.Object)"/> method returns, shared resources might not yet
            be loaded. An <see cref="T:DigitalRune.Graphics.Content.AssetLoadHelper"/> keeps track of the loading of shared resources for
            a specific asset. An <see cref="T:DigitalRune.Graphics.Content.AssetLoadHelper"/> raises an event 
            <see cref="E:DigitalRune.Graphics.Content.AssetLoadHelper.AssetLoaded"/> when all fix-up actions have been executed and all 
            shared resources have been loaded. This event can be used to initialize an asset as soon as it 
            is loaded including all shared resources.
            </para>
            <para>
            Each asset has a certain <see cref="T:DigitalRune.Graphics.Content.AssetLoadHelper"/> which can be retrieved by calling 
            <see cref="M:DigitalRune.Graphics.Content.AssetLoadHelper.Get(System.String)"/>. Any fixup actions of the asset must be wrapped using <see cref="M:DigitalRune.Graphics.Content.AssetLoadHelper.Fixup``1(System.Action{``0})"/>
            (see example below).
            </para>
            <para>
            <strong>WARNING:</strong> The <see cref="T:DigitalRune.Graphics.Content.AssetLoadHelper"/> can only be used to track shared 
            resources when it is guaranteed that they have a value that is not <see langword="null"/>.
            This is a limitation by the XNA Framework. (When a shared resource is loaded by calling 
            <see cref="M:Microsoft.Xna.Framework.Content.ContentReader.ReadSharedResource``1(System.Action{``0})"/> the fix-up action only gets executed, when 
            it has a value other than <see langword="null"/>. When the value is <see langword="null"/> the 
            fix-up action will never get executed and the <see cref="T:DigitalRune.Graphics.Content.AssetLoadHelper"/> will never realize 
            that the loading of the asset has finished.)
            </para>
            </remarks>
            <example>
            In the <see cref="T:Microsoft.Xna.Framework.Content.ContentTypeReader`1"/> of a certain resource, the following code is called
            to load the shared resource. The method <c>myAsset.OnAssetLoaded</c> is called automatically
            once all shared resource have been loaded. <c>myAsset.OnAssetLoaded</c> can be used to 
            initialize the asset.
            <code lang="csharp">
            <![CDATA[
            internal class MyAssetReader : ContentTypeReader<MyAsset>
            {
              protected override MyAsset Read(ContentReader input, MyAsset existingInstance)
              {
                if (existingInstance == null)
                  existingInstance = new MyAsset();
            
                ... load properties of MyAsset ...
                
                // Load shared resources:
                // Use AssetLoadHelper to receive an event when the asset (including 
                // all shared resources) is loaded.
                using (var helper = AssetLoadHelper.Get(input.AssetName))
                {
                  // When loading the shared resource, use AssetLoadHelper.Fixup() to 
                  // wrap the fix-up action.
                  input.ReadSharedResource(helper.Fixup<MyResource>(res => existingInstance.Resource = res));
            
                  helper.AssetLoaded += existingInstance.OnAssetLoaded;
                }
            
                return existingInstance;
              }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:DigitalRune.Graphics.Content.AssetLoadHelper.AssetName">
            <summary>
            Gets or sets the name of the asset.
            </summary>
            <value>The name of the asset. (See <see cref="P:Microsoft.Xna.Framework.Content.ContentReader.AssetName"/>.)</value>
        </member>
        <member name="E:DigitalRune.Graphics.Content.AssetLoadHelper.AssetLoaded">
            <summary>
            Occurs after all fix-up actions were executed and the asset is fully loaded.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.AssetLoadHelper.#ctor(System.String)">
            <summary>
            Prevents a default instance of the <see cref="T:DigitalRune.Graphics.Content.AssetLoadHelper"/> class from being created.
            </summary>
            <param name="assetName">The name of the asset.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Content.AssetLoadHelper.Dispose">
            <summary>
            Releases the <see cref="T:DigitalRune.Graphics.Content.AssetLoadHelper"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.AssetLoadHelper.Get(System.String)">
            <summary>
            Gets the <see cref="T:DigitalRune.Graphics.Content.AssetLoadHelper"/> for a specific asset.
            </summary>
            <param name="assetName">
            The name of the asset. (See <see cref="P:Microsoft.Xna.Framework.Content.ContentReader.AssetName"/>.)
            </param>
            <returns>The <see cref="T:DigitalRune.Graphics.Content.AssetLoadHelper"/> for the given asset.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="assetName"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="assetName"/> is empty.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Content.AssetLoadHelper.Fixup``1(System.Action{``0})">
            <summary>
            Wraps and registers a fix-up action.
            </summary>
            <typeparam name="T">The type of the shared resource.</typeparam>
            <param name="fixup">The fix-up action.</param>
            <returns>A new action that will call the fix-up action.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Content.AssetLoadHelper.OnAssetLoaded(System.EventArgs)">
            <summary>
            Raises the <see cref="E:DigitalRune.Graphics.Content.AssetLoadHelper.AssetLoaded"/> event.
            </summary>
            <param name="eventArgs">
            <see cref="T:System.EventArgs"/> object that provides the arguments for the event.
            </param>
            <remarks>
            <strong>Notes to Inheritors:</strong> When overriding <see cref="M:DigitalRune.Graphics.Content.AssetLoadHelper.OnAssetLoaded(System.EventArgs)"/> in a 
            derived class, be sure to call the base class's <see cref="M:DigitalRune.Graphics.Content.AssetLoadHelper.OnAssetLoaded(System.EventArgs)"/> method so that 
            registered delegates receive the event.
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.Content.EffectBindingReader">
            <summary>
            Reads an <see cref="T:DigitalRune.Graphics.Effects.EffectBinding"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.EffectBindingReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Graphics.Effects.EffectBinding)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.Content.LodGroupNodeReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Graphics.SceneGraph.LodGroupNode"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.LodGroupNodeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Graphics.SceneGraph.LodGroupNode)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.Content.MaterialReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Graphics.Material"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.MaterialReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Graphics.Material)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.Content.MeshNodeReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.MeshNodeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Graphics.SceneGraph.MeshNode)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.Content.MeshReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Graphics.Mesh"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.MeshReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Graphics.Mesh)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.Content.ModelNodeReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Graphics.SceneGraph.ModelNode"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.ModelNodeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Graphics.SceneGraph.ModelNode)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.Content.MorphTargetReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Graphics.MorphTarget"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.MorphTargetReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Graphics.MorphTarget)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.Content.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Graphics.Content"/> namespace contains the run-time components of
            the content pipeline. (Only available in XNA/MonoGame compatible builds.)
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Content.OccluderNodeReader">
            <summary>
            Reads an <see cref="T:DigitalRune.Graphics.SceneGraph.OccluderNode"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.OccluderNodeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Graphics.SceneGraph.OccluderNode)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.Content.OccluderReader">
            <summary>
            Reads an <see cref="T:DigitalRune.Graphics.Occluder"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.OccluderReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Graphics.Occluder)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.Content.SceneNodeReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.SceneNodeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Graphics.SceneGraph.SceneNode)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.Content.SubmeshReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Graphics.Submesh"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Content.SubmeshReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Graphics.Submesh)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.Billboard">
            <summary>
            Represents an oriented, textured quad used for drawing impostors, particles, text, and other 
            effects.
            </summary>
            <remarks>
            <para>
            DigitalRune Graphics supports two types of billboards:
            </para>
            <list type="bullet">
            <item>
            <description><see cref="T:DigitalRune.Graphics.ImageBillboard"/> ... static or animated bitmap</description>
            </item>
            <item>
            <description><see cref="T:DigitalRune.Graphics.TextBillboard"/> ... text using a bitmap font</description>
            </item>
            </list>
            <para>
            A billboard can be positioned by adding a <see cref="T:DigitalRune.Graphics.SceneGraph.BillboardNode"/> to a 3D scene. The 
            billboard orientation can be set using the <see cref="P:DigitalRune.Graphics.Billboard.Orientation"/> property. See class
            <see cref="T:DigitalRune.Graphics.BillboardOrientation"/> for more information.
            </para>
            <para>
            <strong>Billboard Size:</strong>
            To resize an <see cref="T:DigitalRune.Graphics.ImageBillboard"/> change the <see cref="P:DigitalRune.Graphics.ImageBillboard.Size"/> 
            property or change the <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.ScaleLocal"/> of the associated scene node.
            To resize a <see cref="T:DigitalRune.Graphics.TextBillboard"/> change the <see cref="P:DigitalRune.Graphics.TextBillboard.Font"/> or change 
            the <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.ScaleLocal"/> of the associated scene node. (The font size is 
            measured directly in world space unit, i.e. a 12 pt font is 12 units in world space.)
            </para>
            <para>
            <strong>Cloning:</strong><br/>
            <see cref="T:DigitalRune.Graphics.Billboard"/>s are cloneable. <see cref="M:DigitalRune.Graphics.Billboard.Clone"/> creates a copy of the current 
            sprite. The <see cref="P:DigitalRune.Graphics.ImageBillboard.Texture"/> of a <see cref="T:DigitalRune.Graphics.ImageBillboard"/> or the 
            <see cref="P:DigitalRune.Graphics.TextBillboard.Text"/> of a <see cref="T:DigitalRune.Graphics.TextBillboard"/> is copied by reference (no 
            deep copy).
            </para>
            </remarks>
            <seealso cref="T:DigitalRune.Graphics.ImageBillboard"/>
            <seealso cref="T:DigitalRune.Graphics.TextBillboard"/>
            <seealso cref="T:DigitalRune.Graphics.SceneGraph.BillboardNode"/>
            <seealso cref="T:DigitalRune.Graphics.BillboardNormal"/>
            <seealso cref="T:DigitalRune.Graphics.BillboardOrientation"/>
        </member>
        <member name="P:DigitalRune.Graphics.Billboard.Shape">
            <summary>
            Gets the bounding shape.
            </summary>
            <value>The bounding shape.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Billboard.Name">
            <summary>
            Gets or sets the name of this billboard.
            </summary>
            <value>The name of this billboard. The default value <see langword="null"/>.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Billboard.Orientation">
            <summary>
            Gets or sets the orientation of the billboard.
            </summary>
            <value>
            The billboard orientation. The default value is 
            <see cref="F:DigitalRune.Graphics.BillboardOrientation.ViewPlaneAligned"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Billboard.Color">
            <summary>
            Gets or sets the tint color of the billboard.
            </summary>
            <value>The tint color (non-premultiplied). The default value is white (1, 1, 1).</value>
        </member>
        <member name="P:DigitalRune.Graphics.Billboard.Alpha">
            <summary>
            Gets or sets the opacity of the billboard.
            </summary>
            <value>The opacity. The default value is 1 (opaque).</value>
        </member>
        <member name="M:DigitalRune.Graphics.Billboard.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Billboard" /> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Billboard.Clone">
            <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.Billboard"/> that is a clone (deep copy) of the current instance.
            </summary>
            <returns>
            A new <see cref="T:DigitalRune.Graphics.Billboard"/> that is a clone (deep copy) of the current instance.
            </returns>
            <remarks>
            <para>
            See class documentation of <see cref="T:DigitalRune.Graphics.Billboard"/> (Section "Cloning") for more information 
            about cloning.
            </para>
            <para>
            <strong>Notes to Inheritors:</strong> The method <see cref="M:DigitalRune.Graphics.Billboard.Clone"/> calls 
            <see cref="M:DigitalRune.Graphics.Billboard.CreateInstanceCore"/> which is responsible for creating a new instance of the 
            <see cref="T:DigitalRune.Graphics.Billboard"/> derived class and <see cref="M:DigitalRune.Graphics.Billboard.CloneCore(DigitalRune.Graphics.Billboard)"/> to create a copy of the 
            current instance. Classes that derive from <see cref="T:DigitalRune.Graphics.Billboard"/> need to implement 
            <see cref="M:DigitalRune.Graphics.Billboard.CreateInstanceCore"/> and <see cref="M:DigitalRune.Graphics.Billboard.CloneCore(DigitalRune.Graphics.Billboard)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Billboard.CreateInstance">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Billboard"/> class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            This is a private method, and the actual object-specific implementations for the behavior 
            are dependent on the override implementation of the <see cref="M:DigitalRune.Graphics.Billboard.CreateInstanceCore"/> method,
            which this method calls internally. 
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cannot clone <see cref="T:DigitalRune.Graphics.Billboard"/>. A derived class does not implement 
            <see cref="M:DigitalRune.Graphics.Billboard.CreateInstanceCore"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Billboard.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Graphics.Billboard"/>
            derived class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            <para>
            Do not call this method directly (except when calling base in an implementation). This 
            method is called internally by the <see cref="M:DigitalRune.Graphics.Billboard.Clone"/> method whenever a new instance of the
            <see cref="T:DigitalRune.Graphics.Billboard"/> is created. 
            </para>
            <para>
            <strong>Notes to Inheritors:</strong> Every <see cref="T:DigitalRune.Graphics.Billboard"/> derived class must 
            implement this method. A typical implementation is to simply call the default constructor 
            and return the result. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Billboard.CloneCore(DigitalRune.Graphics.Billboard)">
            <summary>
            Makes the instance a clone (deep copy) of the specified 
            <see cref="T:DigitalRune.Graphics.Billboard"/>.
            </summary>
            <param name="source">The object to clone.</param>
            <remarks>
            <strong>Notes to Inheritors:</strong> Every <see cref="T:DigitalRune.Graphics.Billboard"/> derived class must 
            implement this method. A typical implementation is to call <c>base.CloneCore(this)</c> to 
            copy all properties of the base class and then copy all properties of the derived class.
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.BillboardNormal">
            <summary>
            Defines the normal vector of a billboard.
            </summary>
            <remarks>
            Billboards are oriented, textured polygons. The billboard orientation is usually defined by 
            two vectors: the normal vector and the axis vector. The normal vector of a billboard is the 
            vector that points away from the billboard plane, usually towards the viewpoint (camera). The 
            <see cref="T:DigitalRune.Graphics.BillboardNormal"/> enumeration defines which normal vector is used for rendering.
            </remarks>
            <seealso cref="T:DigitalRune.Graphics.Billboard"/>
            <seealso cref="T:DigitalRune.Graphics.BillboardOrientation"/>
        </member>
        <member name="F:DigitalRune.Graphics.BillboardNormal.ViewPlaneAligned">
            <summary>
            The billboard normal is parallel to the view vector of the camera, but points in the 
            opposite direction (= towards the camera). The billboard is always parallel to the view
            plane (screen) and rotates when the orientation of the camera changes.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.BillboardNormal.ViewpointOriented">
            <summary>
            The billboard normal vector points from the center of the billboard towards the camera 
            (viewpoint). The billboard always faces the camera and rotates when the position of the
            camera changes.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.BillboardNormal.Custom">
            <summary>
            <para>
            The billboard normal is specified explicitly.
            </para>
            <para>
            The billboard normal is specified differently depending on the type of billboard:
            </para>
            <list type="bullet">
            <item>
            <term>Billboards</term>
            <description>
            The normal vector of a regular billboard is given by the <see cref="T:DigitalRune.Graphics.SceneGraph.BillboardNode"/>. The
            normal vector is the local z-axis (0, 0, 1) of the scene node.
            </description>
            </item>
            <item>
            <term>Particles</term>
            <description>
            The normal vector of particles is defined by a particle parameter. The 
            <see cref="T:DigitalRune.Particles.ParticleSystem"/> needs to have a uniform or varying particle parameter called 
            "Normal".
            </description>
            </item>
            </list>
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.BillboardOrientation">
            <summary>
            Defines the orientation of a billboard.
            </summary>
            <remarks>
            <para>
            Billboards are oriented, textured polygons (usually quads) used for drawing particles and 
            other effects. Billboards can have various orientations depending on the type of effect.
            </para>
            <para>
            The <see cref="T:DigitalRune.Graphics.BillboardOrientation"/> class defines various standard orientations, but can 
            also be used to define custom billboard orientations.
            </para>
            <para>
            The orientation of a billboard is defined by two vectors: the normal vector and the axis 
            vector. 
            </para>
            <list type="bullet">
            <item>
            <term>Billboard Normal</term>
            <description>
            <para>
            The normal vector of a billboard is the vector that points away from the billboard plane, 
            usually towards the viewpoint (camera). The property <see cref="P:DigitalRune.Graphics.BillboardOrientation.Normal"/> is an enumeration 
            that defines how the normal vector is chosen.
            </para>
            <para>
            If not chosen automatically, the normal vector of a regular <see cref="T:DigitalRune.Graphics.Billboard"/> is given
            by the <see cref="T:DigitalRune.Graphics.SceneGraph.BillboardNode"/>. The normal vector is defined by the local z-axis 
            (0, 0, 1) of the scene node.
            </para>
            <para>
            The normal vector of particles is defined by a particle parameter. The 
            <see cref="T:DigitalRune.Particles.ParticleSystem"/> needs to have a uniform or varying particle parameter called 
            "Normal".
            </para>
            </description>
            </item>
            <item>
            <term>Billboard Axis</term>
            <description>
            <para>
            The axis vector of a billboard is a vector that lies in the billboard plane. All billboard
            rotations are relative to this vector. Normally, the up-vector in world space or view space is
            used. Different axis vectors must be used for effects that have a direction (e.g. laser 
            beams). <see cref="P:DigitalRune.Graphics.BillboardOrientation.IsAxisInViewSpace"/> determines if this vectors is interpreted as a vector
            in view space or in world space.
            </para>
            <para>
            The axis vector of a regular <see cref="T:DigitalRune.Graphics.Billboard"/> is set in defined by the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.BillboardNode"/>. The axis vector is given by the local up direction (0, 1, 0) of 
            the scene node.
            </para>
            <para>
            The axis vector of particles is defined by a particle parameter. The 
            <see cref="T:DigitalRune.Particles.ParticleSystem"/> needs to have a uniform or varying particle parameter called 
            "Axis".
            </para>
            </description>
            </item>
            </list>
            <para>
            If the normal and the axis vectors are not perpendicular, then one vector is kept constant and
            the second vector is made orthonormal to the first vector. For most effects, the normal vector
            should be the fixed axis (e.g. fire, smoke). For billboards with a fixed direction in world 
            space (e.g. distant trees), the axis vector should be the fixed vector. The property 
            <see cref="P:DigitalRune.Graphics.BillboardOrientation.IsAxisFixed"/> determines, which axis is fixed.
            </para>
            </remarks>
            <seealso cref="T:DigitalRune.Graphics.Billboard"/>
            <seealso cref="T:DigitalRune.Graphics.BillboardNormal"/>
        </member>
        <member name="F:DigitalRune.Graphics.BillboardOrientation.ScreenAligned">
            <summary>
            Settings for screen-aligned billboards.
            </summary>
            <remarks>
            <para>
            Screen-aligned billboards have the same orientation as the screen: They are always parallel 
            to the view plane and the axis vector matches the up-axis of the screen. 
            </para>
            <para>
            Examples using <see cref="F:DigitalRune.Graphics.BillboardOrientation.ScreenAligned"/>: Text labels, which should always be readable and
            therefore need to have the same orientation as the screen.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.BillboardOrientation.ViewPlaneAligned">
            <summary>
            Settings for view plane-aligned billboards.
            </summary>
            <remarks>
            <para>
            View plane-aligned billboards are used to render most particle effects: The billboards are 
            always parallel to the view plane (screen) and rotate with the camera. If not specified 
            explicitly, the billboard axis is the up vector (0, 1, 0) in world space.
            </para>
            <para>
            Examples using <see cref="F:DigitalRune.Graphics.BillboardOrientation.ViewPlaneAligned"/>: Fire, smoke, etc.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.BillboardOrientation.ViewpointOriented">
            <summary>
            Settings for viewpoint-oriented billboards.
            </summary>
            <remarks>
            <para>
            </para>
            Viewpoint-oriented billboards are always oriented to face the viewpoint (camera position).
            If not specified explicitly, the billboard axis is the up vector (0, 1, 0) in world space.
            <para>
            Examples using <see cref="F:DigitalRune.Graphics.BillboardOrientation.ViewpointOriented"/>: Impostors for large, distant objects 
            such clouds.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.BillboardOrientation.WorldOriented">
            <summary>
            Settings for billboards with a free orientation in world space.
            </summary>
            <remarks>
            <para>
            </para>
            The orientation is defined by the normal vector and the axis vector. These two billboard
            vectors define a fixed orientation in world space.
            <para>
            Examples using <see cref="F:DigitalRune.Graphics.BillboardOrientation.WorldOriented"/>: foliage with a fixed orientation, or decals.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.BillboardOrientation.AxialViewPlaneAligned">
            <summary>
            Settings for axial billboards parallel to the view plane.
            </summary>
            <remarks>
            <para>
            Axial billboards are also known as constrained billboards or cylindrical billboards. The 
            billboard axis is given in world space. Billboards are rotated around the billboard axis to 
            face the view plane. If not specified explicitly, the billboard axis is the up vector 
            (0, 1, 0) in world space.
            </para>
            <para>
            Examples using <see cref="F:DigitalRune.Graphics.BillboardOrientation.AxialViewPlaneAligned"/>: Impostors close to the camera such as 
            grass.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.BillboardOrientation.AxialViewpointOriented">
            <summary>
            Settings for axial billboards oriented towards the viewer.
            </summary>
            <remarks>
            <para>
            Axial billboards are also known as constrained billboards or cylindrical billboards. The 
            billboard axis is the up-axis in world space. Billboards are rotated around the billboard 
            axis towards the viewpoint. If not specified explicitly, the billboard axis is the up vector 
            (0, 1, 0) in world space.
            </para>
            <para>
            Examples using <see cref="F:DigitalRune.Graphics.BillboardOrientation.AxialViewpointOriented"/>: Impostors far away from the camera such
            as distant trees.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.BillboardOrientation.Normal">
            <summary>
            Gets a value indicating which normal vector is used for rendering the billboard.
            </summary>
            <value>The normal vector that is used for rendering the billboard.</value>
        </member>
        <member name="P:DigitalRune.Graphics.BillboardOrientation.IsAxisInViewSpace">
            <summary>
            Gets a value indicating whether the billboard axis is given in view space.
            </summary>
            <value>
            <see langword="true"/> if the axis vector is given in view space; otherwise, 
            <see langword="false"/> if the axis vector is given in world space.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.BillboardOrientation.IsAxisFixed">
            <summary>
            Gets a value indicating whether the billboard normal or the billboard axis is the fixed 
            axis.
            </summary>
            <value>
            <see langword="true"/> if the billboard axis vector is the fixed axis and the normal vector 
            is adjusted; otherwise, <see langword="false"/> if the normal vector is fixed and the axis
            vector is adjusted.
            </value>
            <remarks>
            To orient a billboard two vectors, the axis vector and the normal vector, are required. If 
            these two vectors are not perpendicular, then one vector is kept constant and the second 
            vector is made orthonormal to the first vector. For most particle effects, the normal should 
            be the fixed axis (e.g. for fire, smoke). For billboards with a fixed direction in world 
            space (e.g. for tree billboards or laser beams), the axis vector should be the fixed vector.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.BillboardOrientation.#ctor(DigitalRune.Graphics.BillboardNormal,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.BillboardOrientation" /> struct.
            </summary>
            <param name="normal">The normal vector that is used for rendering the billboard.</param>
            <param name="isAxisInViewSpace">
            <see langword="true"/> if the axis vector is given in view space; otherwise, 
            <see langword="false"/> if the axis vector is given in world space.
            </param>
            <param name="isAxisFixed">
            <see langword="true"/> if the billboard axis vector is the fixed axis and the normal vector 
            is adjusted; otherwise, <see langword="false"/> if the normal vector is fixed and the axis
            vector is adjusted.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.BillboardOrientation.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures 
            like a hash table. 
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.BillboardOrientation.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object" /> is equal to this instance; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.BillboardOrientation.Equals(DigitalRune.Graphics.BillboardOrientation)">
            <summary>
            Determines whether the specified <see cref="T:DigitalRune.Graphics.BillboardOrientation"/> is equal to this 
            instance.
            </summary>
            <param name="other">
            The <see cref="T:DigitalRune.Graphics.BillboardOrientation"/> to compare with this instance.
            </param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:DigitalRune.Graphics.BillboardOrientation"/> is equal to this 
            instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.BillboardOrientation.op_Equality(DigitalRune.Graphics.BillboardOrientation,DigitalRune.Graphics.BillboardOrientation)">
            <summary>
            Compares two objects to determine whether they are the same. 
            </summary>
            <param name="left">Object to the left of the equality operator.</param>
            <param name="right">Object to the right of the equality operator.</param>
            <returns>
            <see langword="true"/> if the objects are the same; <see langword="false"/> otherwise. 
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.BillboardOrientation.op_Inequality(DigitalRune.Graphics.BillboardOrientation,DigitalRune.Graphics.BillboardOrientation)">
            <summary>
            Compares two objects to determine whether they are different. 
            </summary>
            <param name="left">Object to the left of the inequality operator.</param>
            <param name="right">Object to the right of the inequality operator.</param>
            <returns>
            <see langword="true"/> if the objects are different; <see langword="false"/> otherwise. 
            </returns>
        </member>
        <member name="T:DigitalRune.Graphics.ImageBillboard">
            <summary>
            Represents an oriented, textured quad used for drawing impostors, particles, and other 
            effects.
            </summary>
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Graphics.ImageBillboard.Texture">
            <summary>
            Gets or sets the billboard texture (with premultiplied alpha).
            </summary>
            <value>The billboard texture (with premultiplied alpha).</value>
        </member>
        <member name="P:DigitalRune.Graphics.ImageBillboard.Size">
            <summary>
            Gets or sets the size of the billboard in world space.
            </summary>
            <value>The size of the billboard in world space. The default value is (1, 1).</value>
        </member>
        <member name="P:DigitalRune.Graphics.ImageBillboard.AnimationTime">
            <summary>
            Gets or sets the normalized animation time.
            </summary>
            <value>
            The normalized animation time where 0 marks the start of the animation and 1 marks the end 
            of the animation. The default value is 0.
            </value>
            <remarks>
            The <see cref="P:DigitalRune.Graphics.ImageBillboard.Texture"/> can contain multiple animation frames. The normalized animation 
            time determines the current frame. (See <see cref="T:DigitalRune.Graphics.PackedTexture"/> for more information.)
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative or greater than 1.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.ImageBillboard.AlphaTest">
            <summary>
            Gets or sets a reference value for alpha testing.
            </summary>
            <value>
            The reference value used in the alpha test. The reference value is a value in the range
            [0, 1]. If the alpha of a pixel is less than the reference alpha, the pixel is discarded. 
            The default value is 0 (= alpha test disabled).
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative or greater than 1.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.ImageBillboard.BlendMode">
            <summary>
            Gets or sets the blend mode.
            </summary>
            <value>
            The blend mode of the billboard: 0 = additive blending, 1 = alpha blending. Intermediate 
            values between 0 and 1 are allowed. The default value is 1 (alpha blending).
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative or greater than 1.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.ImageBillboard.Softness">
            <summary>
            Gets or sets the softness - see remarks.
            </summary>
            <value>
            <para>
            The softness of the billboard:<br/>
            0 ... Disabled: The billboard is rendered with hard edges.<br/>
            -1 or NaN ... Automatic: The thickness of the billboard is determined automatically.<br/>
            &gt;0 ... Manual: The value defines the thickness of the billboard (= soft particle distance
            threshold).
            </para>
            <para>
            The default value is 0.
            </para>
            </value>
            <remarks>
            A regular billboard is rendered using a textured quad, which creates hard edges when it
            intersects with other geometry in the scene. A soft billboard (same as "soft particles") 
            has a volume and creates soft transitions when it intersects with other geometry.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.ImageBillboard.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.ImageBillboard"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.ImageBillboard"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.ImageBillboard.#ctor(DigitalRune.Graphics.PackedTexture)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.ImageBillboard"/> class.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:DigitalRune.Graphics.ImageBillboard.Clone">
            <inheritdoc cref="M:DigitalRune.Graphics.Billboard.Clone"/>
        </member>
        <member name="M:DigitalRune.Graphics.ImageBillboard.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.ImageBillboard.CloneCore(DigitalRune.Graphics.Billboard)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.ParticleType">
            <summary>
            Defines the type of particles in a particle system.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.ParticleType.Billboard">
            <summary>
            All particles in the particle system are rendered as individual billboards (quads).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.ParticleType.Ribbon">
            <summary>
            Subsequent living particles in the particle system are rendered as connected ribbons 
            (quad strips). At least two living particles are required to create a ribbon. Dead particles 
            ("NormalizedAge" ≥ 1) can be used as delimiters to terminate one ribbon and start the next 
            ribbon.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.TextBillboard">
            <summary>
            Represents a text, which is rendered as billboard.
            </summary>
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Graphics.TextBillboard.Text">
            <summary>
            Gets or sets the text. See remarks.
            </summary>
            <value>The text - see remarks. The default value is <see langword="null"/>.</value>
            <remarks>
            <para>
            The value can be set as a <see cref="T:System.String"/>, a <see cref="T:System.Text.StringBuilder"/>, or a general
            <see cref="T:System.Object"/>. If it is a general object, the value is converted to its string 
            representation by calling <see cref="M:System.Object.ToString"/> immediately. (The property 
            internally stores either a <see cref="T:System.String"/> or <see cref="T:System.Text.StringBuilder"/>.)
            </para>
            <para>
            Depending on the value that was set, the get accessor returns either <see langword="null"/>,
            a <see cref="T:System.String"/>, or a <see cref="T:System.Text.StringBuilder"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TextBillboard.Font">
            <summary>
            Gets or sets the font.
            </summary>
            <value>The font. Can be <see langword="null"/>.</value>
        </member>
        <member name="M:DigitalRune.Graphics.TextBillboard.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TextBillboard"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TextBillboard"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.TextBillboard.#ctor(System.Object,Microsoft.Xna.Framework.Graphics.SpriteFont)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TextBillboard"/> class.
            </summary>
            <param name="text">The text. See <see cref="P:DigitalRune.Graphics.TextBillboard.Text"/> for more information.</param>
            <param name="font">The font.</param>
        </member>
        <member name="M:DigitalRune.Graphics.TextBillboard.Clone">
            <inheritdoc cref="M:DigitalRune.Graphics.Sprite.Clone"/>
        </member>
        <member name="M:DigitalRune.Graphics.TextBillboard.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.TextBillboard.CloneCore(DigitalRune.Graphics.Billboard)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.TextBillboard.Invalidate">
            <summary>
            Invalidates the text billboard. See remarks.
            </summary>
            <remarks>
            This method needs to be called when the text is specified using a 
            <see cref="T:System.Text.StringBuilder"/> and the contents of the <see cref="T:System.Text.StringBuilder"/> has changed.
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.Camera">
            <summary>
            Represents a camera that defines a view into the 3D scene.
            </summary>
            <remarks>
            <para>
            This class has a <see cref="P:DigitalRune.Graphics.Camera.Projection"/>, which defines the camera frustum and the projection
            transformation.
            </para>
            <para>
            The view transformation (position and orientation of the camera in the world) is defined by 
            creating a <see cref="T:DigitalRune.Graphics.SceneGraph.CameraNode"/> in a <see cref="T:DigitalRune.Graphics.SceneGraph.IScene"/>. Multiple 
            <see cref="T:DigitalRune.Graphics.SceneGraph.CameraNode"/>s can share the same <see cref="T:DigitalRune.Graphics.Camera"/> object.
            </para>
            <para>
            <strong>Cloning:</strong><br/>
            <see cref="T:DigitalRune.Graphics.Camera"/>s are cloneable. When <see cref="M:DigitalRune.Graphics.Camera.Clone"/> is called all properties 
            including the <see cref="P:DigitalRune.Graphics.Camera.Projection"/> are duplicated (deep copy).
            </para>
            </remarks>
            <seealso cref="T:DigitalRune.Graphics.SceneGraph.CameraNode"/>
        </member>
        <member name="P:DigitalRune.Graphics.Camera.Name">
            <summary>
            Gets or sets the name of this camera.
            </summary>
            <value>The name of this camera.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Camera.Projection">
            <summary>
            Gets the projection.
            </summary>
            <value>The projection. The default value is a standard perspective projection.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Camera.LastProjection">
            <summary>
            Gets or sets the projection transformation of the last frame.
            </summary>
            <value>
            The projection transformation of the last frame. Can be <see langword="null"/>.
            </value>
            <remarks>
            <para>
            The property <see cref="P:DigitalRune.Graphics.Camera.LastProjection"/> is an optional property. It stores the projection
            transformation of the last frame that was rendered. This information is required for 
            temporal reprojection, which is used in temporal caching or camera motion blur.
            </para>
            <para>
            <strong>Important:</strong> This property is not updated automatically! 
            <see cref="P:DigitalRune.Graphics.Camera.LastProjection"/> needs to be set by the application logic whenever the camera
            projection is changed.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Camera.#ctor(DigitalRune.Graphics.Projection)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Camera"/> class with a given projection.
            </summary>
            <param name="projection">The projection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="projection"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Camera.Clone">
            <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.Camera"/> that is a clone (deep copy) of the current instance.
            </summary>
            <returns>
            A new <see cref="T:DigitalRune.Graphics.Camera"/> that is a clone (deep copy) of the current instance.
            </returns>
            <remarks>
            <para>
            See class documentation of <see cref="T:DigitalRune.Graphics.Camera"/> (Section "Cloning") for more information 
            about cloning.
            </para>
            <para>
            <strong>Notes to Inheritors:</strong> The method <see cref="M:DigitalRune.Graphics.Camera.Clone"/> calls 
            <see cref="M:DigitalRune.Graphics.Camera.CreateInstanceCore"/> which is responsible for creating a new instance of the 
            <see cref="T:DigitalRune.Graphics.Camera"/> derived class and <see cref="M:DigitalRune.Graphics.Camera.CloneCore(DigitalRune.Graphics.Camera)"/> to create a copy of the 
            current instance. Classes that derive from <see cref="T:DigitalRune.Graphics.Camera"/> need to implement 
            <see cref="M:DigitalRune.Graphics.Camera.CreateInstanceCore"/> and <see cref="M:DigitalRune.Graphics.Camera.CloneCore(DigitalRune.Graphics.Camera)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Camera.CreateInstance">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Camera"/> class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            This is a private method, and the actual object-specific implementations for the behavior 
            are dependent on the override implementation of the <see cref="M:DigitalRune.Graphics.Camera.CreateInstanceCore"/> method,
            which this method calls internally. 
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cannot clone <see cref="T:DigitalRune.Graphics.Camera"/>. A derived class does not implement 
            <see cref="M:DigitalRune.Graphics.Camera.CreateInstanceCore"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Camera.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Graphics.Camera"/>
            derived class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            <para>
            Do not call this method directly (except when calling base in an implementation). This 
            method is called internally by the <see cref="M:DigitalRune.Graphics.Camera.Clone"/> method whenever a new instance of the
            <see cref="T:DigitalRune.Graphics.Camera"/> is created. 
            </para>
            <para>
            <strong>Notes to Inheritors:</strong> Every <see cref="T:DigitalRune.Graphics.Camera"/> derived class must 
            implement this method. A typical implementation is to simply call the default constructor 
            and return the result. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Camera.CloneCore(DigitalRune.Graphics.Camera)">
            <summary>
            Makes the instance a clone (deep copy) of the specified 
            <see cref="T:DigitalRune.Graphics.Camera"/>.
            </summary>
            <param name="source">The object to clone.</param>
            <remarks>
            <strong>Notes to Inheritors:</strong> Every <see cref="T:DigitalRune.Graphics.Camera"/> derived class must 
            implement this method. A typical implementation is to call <c>base.CloneCore(this)</c> to 
            copy all properties of the base class and then copy all properties of the derived class.
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.OrthographicProjection">
            <summary>
            Defines an orthographic projection.
            </summary>
            <remarks>
            <para>
            The projection can be set in several ways:
            <list type="bullet">
            <item>
            <description>
            By setting the properties <see cref="P:DigitalRune.Graphics.Projection.Left"/>, <see cref="P:DigitalRune.Graphics.Projection.Right"/>, 
            <see cref="P:DigitalRune.Graphics.Projection.Bottom"/>, <see cref="P:DigitalRune.Graphics.Projection.Top"/>, <see cref="P:DigitalRune.Graphics.Projection.Near"/>, 
            and <see cref="P:DigitalRune.Graphics.Projection.Far"/>.
            </description>
            </item>
            <item>
            <description>
            By setting assigning a projection matrix using <see cref="M:DigitalRune.Graphics.OrthographicProjection.Set(DigitalRune.Mathematics.Algebra.Matrix44F)"/> or the property 
            <see cref="P:DigitalRune.Graphics.Projection.Inverse"/>.
            </description>
            </item>
            <item>
            <description>
            By calling on of the following methods: 
            <see cref="M:DigitalRune.Graphics.OrthographicProjection.Set(System.Single,System.Single)"/>, 
            <see cref="M:DigitalRune.Graphics.OrthographicProjection.Set(System.Single,System.Single,System.Single,System.Single)"/>, 
            <see cref="M:DigitalRune.Graphics.OrthographicProjection.Set(DigitalRune.Mathematics.Algebra.Matrix44F)"/>, 
            <see cref="M:DigitalRune.Graphics.OrthographicProjection.SetOffCenter(System.Single,System.Single,System.Single,System.Single)"/>, 
            <see cref="M:DigitalRune.Graphics.OrthographicProjection.SetOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)"/>, 
            </description>
            </item>
            </list>
            </para>
            <para>
            The property <see cref="T:DigitalRune.Geometry.Shapes.ViewVolume"/> defines the bounding shape of the projection which can
            be used for frustum culling. The shape is updated automatically when the properties of the
            projection change.
            </para>
            </remarks>
            <seealso cref="T:DigitalRune.Graphics.Projection"/>
        </member>
        <member name="F:DigitalRune.Graphics.OrthographicProjection.DefaultNear">
            <summary>
            The default value for <see cref="P:DigitalRune.Graphics.Projection.Near"/>.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.OrthographicProjection.DefaultFar">
            <summary>
            The default value for <see cref="P:DigitalRune.Graphics.Projection.Far"/>.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.OrthographicProjection.DefaultWidth">
            <summary>
            The default value for <see cref="P:DigitalRune.Graphics.Projection.Width"/>.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.OrthographicProjection.DefaultHeight">
            <summary>
            The default value for <see cref="P:DigitalRune.Graphics.Projection.Height"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.OrthographicProjection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.OrthographicProjection"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.OrthographicProjection.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.OrthographicProjection.CloneCore(DigitalRune.Graphics.Projection)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.OrthographicProjection.Set(System.Single,System.Single,System.Single,System.Single)">
            <overloads>
            <summary>
            Sets a right-handed, orthographic projection.
            </summary>
            </overloads>
            
            <summary>
            Sets a right-handed, orthographic projection with the specified size and depth.
            </summary>
            <param name="width">The width of the view volume.</param>
            <param name="height">The height of the view volume.</param>
            <param name="near">The distance to the near clip plane.</param>
            <param name="far">The distance to the far clip plane.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> or <paramref name="height"/> is negative or 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="near"/> is greater than or equal to <paramref name="far"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.OrthographicProjection.Set(System.Single,System.Single)">
            <summary>
            Sets a right-handed, orthographic projection with the specified size.
            </summary>
            <param name="width">The width of the view volume.</param>
            <param name="height">The height of the view volume.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> or <paramref name="height"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.OrthographicProjection.SetOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <overloads>
            <summary>
            Sets a customized (off-center), right-handed, orthographic projection.
            </summary>
            </overloads>
            
            <summary>
            Sets a customized (off-center), right-handed, orthographic projection (including depth).
            </summary>
            <param name="left">The minimum x-value of the view volume.</param>
            <param name="right">The maximum x-value of the view volume.</param>
            <param name="bottom">The minimum y-value of the view volume.</param>
            <param name="top">The maximum y-value of the view volume.</param>
            <param name="near">The distance to the near clip plane.</param>
            <param name="far">The distance to the far clip plane.</param>
            <remarks>
            This method can be used to define an off-center view volume.
            </remarks>
            <exception cref="T:System.ArgumentException">
            <paramref name="left"/> is greater than or equal to <paramref name="right"/>, 
            <paramref name="bottom"/> is greater than or equal to <paramref name="top"/>, or
            <paramref name="near"/> is greater than or equal to <paramref name="far"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.OrthographicProjection.SetOffCenter(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets a customized (off-center), right-handed, orthographic projection.
            </summary>
            <param name="left">The minimum x-value of the view volume.</param>
            <param name="right">The maximum x-value of the view volume.</param>
            <param name="bottom">The minimum y-value of the view volume.</param>
            <param name="top">The maximum y-value of the view volume.</param>
            <remarks>
            This method can be used to define an off-center view volume.
            </remarks>
            <exception cref="T:System.ArgumentException">
            <paramref name="left"/> is greater than or equal to <paramref name="right"/>, or
            <paramref name="bottom"/> is greater than or equal to <paramref name="top"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.OrthographicProjection.Set(DigitalRune.Mathematics.Algebra.Matrix44F)">
            <summary>
            Sets the orthographic projection from the given projection matrix.
            </summary>
            <param name="projection">The orthographic projection matrix.</param>
        </member>
        <member name="M:DigitalRune.Graphics.OrthographicProjection.ComputeProjection">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.OrthographicProjection.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix44F)~DigitalRune.Graphics.OrthographicProjection">
            <summary>
            Converts a 4x4 projection matrix to an orthographic projection.
            </summary>
            <param name="matrix">The projection matrix.</param>
            <returns>The orthographic projection.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.OrthographicProjection.FromMatrix(DigitalRune.Mathematics.Algebra.Matrix44F)">
            <summary>
            Creates an orthographic projection from a 4x4 transformation matrix.
            </summary>
            <param name="matrix">The projection matrix.</param>
            <returns>The orthographic projection.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.PerspectiveProjection">
            <summary>
            Defines a perspective projection.
            </summary>
            <remarks>
            <para>
            The perspective projection can be set in several ways:
            <list type="bullet">
            <item>
            <description>
            By setting the properties <see cref="P:DigitalRune.Graphics.Projection.Left"/>, <see cref="P:DigitalRune.Graphics.Projection.Right"/>,
            <see cref="P:DigitalRune.Graphics.Projection.Bottom"/>, <see cref="P:DigitalRune.Graphics.Projection.Top"/>, <see cref="P:DigitalRune.Graphics.Projection.Near"/>,
            and <see cref="P:DigitalRune.Graphics.Projection.Far"/>.
            </description>
            </item>
            <item>
            <description>
            By setting assigning a projection matrix using <see cref="M:DigitalRune.Graphics.PerspectiveProjection.Set(DigitalRune.Mathematics.Algebra.Matrix44F)"/> or the property
            <see cref="P:DigitalRune.Graphics.Projection.Inverse"/>.
            </description>
            </item>
            <item>
            <description>
            By calling on of the following methods:
            <see cref="M:DigitalRune.Graphics.PerspectiveProjection.Set(System.Single,System.Single)"/>,
            <see cref="M:DigitalRune.Graphics.PerspectiveProjection.Set(System.Single,System.Single,System.Single,System.Single)"/>,
            <see cref="M:DigitalRune.Graphics.PerspectiveProjection.Set(DigitalRune.Mathematics.Algebra.Matrix44F)"/>,
            <see cref="M:DigitalRune.Graphics.PerspectiveProjection.SetFieldOfView(System.Single,System.Single)"/>,
            <see cref="M:DigitalRune.Graphics.PerspectiveProjection.SetFieldOfView(System.Single,System.Single,System.Single,System.Single)"/>,
            <see cref="M:DigitalRune.Graphics.PerspectiveProjection.SetOffCenter(System.Single,System.Single,System.Single,System.Single)"/>,
            <see cref="M:DigitalRune.Graphics.PerspectiveProjection.SetOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)"/>,
            </description>
            </item>
            </list>
            </para>
            <para>
            The property <see cref="T:DigitalRune.Geometry.Shapes.ViewVolume"/> defines the bounding shape of the projection which can
            be used for frustum culling. The shape is updated automatically when the properties of the
            projection change.
            </para>
            <para>
            This class supports near plane clipping for portal and reflection rendering, see
            <see cref="P:DigitalRune.Graphics.PerspectiveProjection.NearClipPlane"/>.
            </para>
            </remarks>
            <seealso cref="T:DigitalRune.Graphics.Projection"/>
        </member>
        <member name="F:DigitalRune.Graphics.PerspectiveProjection.DefaultNear">
            <summary>
            The default value for <see cref="P:DigitalRune.Graphics.Projection.Near"/>.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.PerspectiveProjection.DefaultFar">
            <summary>
            The default value for <see cref="P:DigitalRune.Graphics.Projection.Far"/>.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.PerspectiveProjection.DefaultAspectRatio">
            <summary>
            The default value for <see cref="P:DigitalRune.Graphics.Projection.AspectRatio"/>.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.PerspectiveProjection.DefaultFieldOfViewY">
            <summary>
            The default value for <see cref="P:DigitalRune.Graphics.Projection.FieldOfViewY"/>.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.PerspectiveProjection.NearClipPlane">
            <summary>
            Gets or sets the near clip plane in view space.
            </summary>
            <value>
            The near clip plane in view space. The plane normal must point to the viewer.
            </value>
            <remarks>
            <para>
            When rendering mirrors or portals, the objects before the mirror or portal should not be
            rendered. This could be solved using clip planes, but these clip planes need to be supported
            by all shaders. Alternatively, we can also solve this problem by creating a view frustum
            where the near plane is parallel to the clip plane - such frustums are called oblique view
            frustums because the near plane (and also the far plane) are tilted compared to standard
            view frustums.
            </para>
            <para>
            Use the property <see cref="P:DigitalRune.Graphics.PerspectiveProjection.NearClipPlane"/> to set a clip plane for the near view-plane.
            Setting a near clip plane changes the projection matrix. However, it does not affect the
            shape (see <see cref="P:DigitalRune.Graphics.Projection.ViewVolume"/>) of the <see cref="T:DigitalRune.Graphics.Projection"/>!
            </para>
            <para>
            For general information about oblique view frustums, see
            <see href="http://www.terathon.com/code/oblique.html" />.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.PerspectiveProjection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PerspectiveProjection"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.PerspectiveProjection.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.PerspectiveProjection.CloneCore(DigitalRune.Graphics.Projection)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.PerspectiveProjection.Set(System.Single,System.Single,System.Single,System.Single)">
            <overloads>
            <summary>
            Sets a symmetric, perspective projection based on width and height.
            </summary>
            </overloads>
            
            <summary>
            Sets a symmetric, perspective projection based on size and depth.
            </summary>
            <param name="width">The width of the frustum at the near clip plane.</param>
            <param name="height">The height of the frustum at the near clip plane.</param>
            <param name="near">The distance to the near clip plane.</param>
            <param name="far">The distance to the far clip plane.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> or <paramref name="height"/> is negative or 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="near"/> is greater than or equal to <paramref name="far"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PerspectiveProjection.Set(System.Single,System.Single)">
            <summary>
            Sets a symmetric, perspective projection based on size.
            </summary>
            <param name="width">The width of the frustum at the near clip plane.</param>
            <param name="height">The height of the frustum at the near clip plane.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> or <paramref name="height"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PerspectiveProjection.SetFieldOfView(System.Single,System.Single,System.Single,System.Single)">
            <overloads>
            <summary>
            Sets a symmetric, perspective projection based on field of view.
            </summary>
            </overloads>
            
            <summary>
            Sets a symmetric, perspective projection based on field of view and depth.
            </summary>
            <param name="fieldOfViewY">The vertical field of view.</param>
            <param name="aspectRatio">The aspect ratio (width / height).</param>
            <param name="near">The distance to the near clip plane.</param>
            <param name="far">The distance to the far clip plane.</param>
            <remarks>
            This method creates a symmetric frustum.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="fieldOfViewY"/> is not between 0 and π radians (0° and 180°),
            <paramref name="aspectRatio"/> is negative or 0, <paramref name="near"/> is negative or 0,
            or <paramref name="far"/> is negative or 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="near"/> is greater than or equal to <paramref name="far"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PerspectiveProjection.SetFieldOfView(System.Single,System.Single)">
            <summary>
            Sets a symmetric, perspective projection based on field of view.
            </summary>
            <param name="fieldOfViewY">The vertical field of view.</param>
            <param name="aspectRatio">The aspect ratio (width / height).</param>
            <remarks>
            This method creates a symmetric frustum.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="fieldOfViewY"/> is not between 0 and π radians (0° and 180°), or
            <paramref name="aspectRatio"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PerspectiveProjection.SetOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <overloads>
            <summary>
            Sets an asymmetric (off-center), perspective projection.
            </summary>
            </overloads>
            
            <summary>
            Sets an asymmetric (off-center), perspective projection based on the given values (including
            depth).
            </summary>
            <param name="left">The minimum x-value of the frustum at the near clip plane.</param>
            <param name="right">The maximum x-value of the frustum at the near clip plane.</param>
            <param name="bottom">The minimum y-value of the frustum at the near clip plane.</param>
            <param name="top">The maximum y-value of the frustum at the near clip plane.</param>
            <param name="near">The distance to the near clip plane.</param>
            <param name="far">The distance to the far clip plane.</param>
            <remarks>
            This method can be used to define an asymmetric, off-center frustum.
            </remarks>
            <exception cref="T:System.ArgumentException">
            <paramref name="left"/> is greater than or equal to <paramref name="right"/>, 
            <paramref name="bottom"/> is greater than or equal to <paramref name="top"/>, or
            <paramref name="near"/> is greater than or equal to <paramref name="far"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PerspectiveProjection.SetOffCenter(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets an asymmetric (off-center), perspective projection based on the given values.
            </summary>
            <param name="left">The minimum x-value of the frustum at the near clip plane.</param>
            <param name="right">The maximum x-value of the frustum at the near clip plane.</param>
            <param name="bottom">The minimum y-value of the frustum at the near clip plane.</param>
            <param name="top">The maximum y-value of the frustum at the near clip plane.</param>
            <remarks>
            This method can be used to define an asymmetric, off-center frustum.
            </remarks>
            <exception cref="T:System.ArgumentException">
            <paramref name="left"/> is greater than or equal to <paramref name="right"/>, or
            <paramref name="bottom"/> is greater than or equal to <paramref name="top"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PerspectiveProjection.Set(DigitalRune.Mathematics.Algebra.Matrix44F)">
            <summary>
            Sets the perspective projection from the given projection matrix.
            </summary>
            <param name="projection">The perspective projection.</param>
        </member>
        <member name="M:DigitalRune.Graphics.PerspectiveProjection.ComputeProjection">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.PerspectiveProjection.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix44F)~DigitalRune.Graphics.PerspectiveProjection">
            <summary>
            Converts a 4x4 projection matrix to a perspective projection.
            </summary>
            <param name="matrix">The projection.</param>
            <returns>The perspective projection.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.PerspectiveProjection.FromMatrix(DigitalRune.Mathematics.Algebra.Matrix44F)">
            <summary>
            Creates an perspective projection from a 4x4 transformation matrix.
            </summary>
            <param name="matrix">The projection matrix.</param>
            <returns>The perspective projection.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.Projection">
            <summary>
            Defines a projection transformation (including its bounding shape).
            </summary>
            <remarks>
            <para>
            The property <see cref="P:DigitalRune.Graphics.Projection.ViewVolume"/> defines the bounding shape of the projection which can
            be used for frustum culling. The shape is updated automatically when the properties of the
            projection change.
            </para>
            <para>
            <strong>Notes to Inheritors: </strong><br/>
            Derived classes must initialize <see cref="P:DigitalRune.Graphics.Projection.ViewVolume"/> and provide the implementation of the
            <see cref="M:DigitalRune.Graphics.Projection.Set(DigitalRune.Mathematics.Algebra.Matrix44F)"/> method. The base class caches a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/> which describes the
            projection. Therefore, derived classes must call <see cref="M:DigitalRune.Graphics.Projection.Invalidate"/> if the projection is
            changed. The <see cref="T:DigitalRune.Graphics.Projection"/> base class will call <see cref="M:DigitalRune.Graphics.Projection.ComputeProjection"/> of
            derived classes to get and cache the new projection matrix when needed.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Projection.Left">
            <summary>
            Gets or sets the minimum x-value of the view volume at the near view-plane.
            </summary>
            <value>The minimum x-value of the view volume at the near view-plane.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Projection.Right">
            <summary>
            Gets or sets the maximum x-value of the view volume at the near view-plane.
            </summary>
            <value>The maximum x-value of the view volume at the near view-plane.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Projection.Bottom">
            <summary>
            Gets or sets the minimum y-value of the view volume at the near view-plane.
            </summary>
            <value>The minimum y-value of the view volume at the near view-plane.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Projection.Top">
            <summary>
            Gets or sets the maximum y-value of the view volume at the near view-plane.
            </summary>
            <value>The maximum y-value of the view volume at the near view-plane.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Projection.Near">
            <summary>
            Gets or sets the distance to the near view plane. 
            </summary>
            <value>The distance to the near view plane.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Projection.Far">
            <summary>
            Gets or sets the distance to the far view plane. 
            </summary>
            <value>The distance to the far view plane.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Projection.Width">
            <summary>
            Gets the width of the view volume at the near view plane.
            </summary>
            <value>The width of the view volume.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Projection.Height">
            <summary>
            Gets the height of the view volume at the near view plane.
            </summary>
            <value>The height of the view volume.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Projection.Depth">
            <summary>
            Gets the depth of the view volume (<see cref="P:DigitalRune.Graphics.Projection.Far"/> - <see cref="P:DigitalRune.Graphics.Projection.Near"/>).
            </summary>
            <value>The depth of the view volume (<see cref="P:DigitalRune.Graphics.Projection.Far"/> - <see cref="P:DigitalRune.Graphics.Projection.Near"/>).</value>
        </member>
        <member name="P:DigitalRune.Graphics.Projection.AspectRatio">
            <summary>
            Gets the aspect ratio (width / height) of the view.
            </summary>
            <value>The aspect ratio (<see cref="P:DigitalRune.Graphics.Projection.Width"/> / <see cref="P:DigitalRune.Graphics.Projection.Height"/>).</value>
        </member>
        <member name="P:DigitalRune.Graphics.Projection.FieldOfViewX">
            <summary>
            Gets the horizontal field of view in radians.
            </summary>
            <value>
            The horizontal field of view in radians. <see cref="F:System.Single.NaN"/> if this is a orthographic 
            view volume.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Projection.FieldOfViewY">
            <summary>
            Gets the vertical field of view in radians.
            </summary>
            <value>
            The vertical field of view in radians. <see cref="F:System.Single.NaN"/> if this is a orthographic
            view volume.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Projection.Inverse">
            <summary>
            Gets the inverse of the projection matrix.
            </summary>
            <value>The inverse projection matrix.</value>
            <remarks>
            Setting <see cref="P:DigitalRune.Graphics.Projection.Inverse"/> automatically updates the <see cref="T:DigitalRune.Graphics.Projection"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Projection.ViewVolume">
            <summary>
            Gets (or sets) the shape of the view volume (viewing frustum).
            </summary>
            <value>A <see cref="P:DigitalRune.Graphics.Projection.ViewVolume"/> that describes the viewing frustum.</value>
        </member>
        <member name="M:DigitalRune.Graphics.Projection.Clone">
            <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.Projection"/> that is a clone (deep copy) of the current instance.
            </summary>
            <returns>
            A new <see cref="T:DigitalRune.Graphics.Projection"/> that is a clone (deep copy) of the current instance.
            </returns>
            <remarks>
            <strong>Notes to Inheritors:</strong> The method <see cref="M:DigitalRune.Graphics.Projection.Clone"/> calls 
            <see cref="M:DigitalRune.Graphics.Projection.CreateInstanceCore"/> which is responsible for creating a new instance of the 
            <see cref="T:DigitalRune.Graphics.Projection"/> derived class and <see cref="M:DigitalRune.Graphics.Projection.CloneCore(DigitalRune.Graphics.Projection)"/> to create a copy of the
            current instance. Classes that derive from <see cref="T:DigitalRune.Graphics.Projection"/> need to implement 
            <see cref="M:DigitalRune.Graphics.Projection.CreateInstanceCore"/> and <see cref="M:DigitalRune.Graphics.Projection.CloneCore(DigitalRune.Graphics.Projection)"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Projection.CreateInstance">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Projection"/> class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            This is a private method, and the actual object-specific implementations for the behavior 
            are dependent on the override implementation of the <see cref="M:DigitalRune.Graphics.Projection.CreateInstanceCore"/> method,
            which this method calls internally. 
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cannot clone <see cref="T:DigitalRune.Graphics.Projection"/>. A derived class does not implement 
            <see cref="M:DigitalRune.Graphics.Projection.CreateInstanceCore"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Projection.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Graphics.Projection"/>
            derived class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            Do not call this method directly (except when calling base in an implementation). This
            method is called internally by the <see cref="M:DigitalRune.Graphics.Projection.Clone"/> method whenever a new instance of the
            <see cref="T:DigitalRune.Graphics.Projection"/> derived class must implement this method. A typical implementation
            is to simply call the default constructor and return the result. 
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Projection.CloneCore(DigitalRune.Graphics.Projection)">
            <summary>
            Makes the instance a clone (deep copy) of the specified 
            <see cref="T:DigitalRune.Graphics.Projection"/>.
            </summary>
            <param name="source">The object to clone.</param>
            <remarks>
            <strong>Notes to Inheritors:</strong> Every <see cref="T:DigitalRune.Graphics.Projection"/> derived class must
            implement this method. 
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Projection.Invalidate">
            <summary>
            Invalidates the projection matrix.
            </summary>
            <remarks>
            <see cref="M:DigitalRune.Graphics.Projection.Invalidate"/> causes a lazy update: An internal flag is set that indicates that
            the matrices need to be recalculated. The calculation is done when <see cref="M:DigitalRune.Graphics.Projection.ToMatrix44F"/>,
            or an implicit cast to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/> is performed or when <see cref="P:DigitalRune.Graphics.Projection.Inverse"/> is
            accessed.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Projection.Update">
            <summary>
            Updates the projection matrix.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Projection.ComputeProjection">
            <summary>
            Computes the projection matrix.
            </summary>
            <returns>The projection matrix.</returns>
            <remarks>
            <strong>Notes to Inheritors:</strong> The base class <see cref="T:DigitalRune.Graphics.Projection"/> does not know
            how to compute a projection matrix. The classes deriving from <see cref="T:DigitalRune.Graphics.Projection"/> need
            to implement <see cref="M:DigitalRune.Graphics.Projection.ComputeProjection"/> and return a valid projection matrix.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Projection.Set(DigitalRune.Mathematics.Algebra.Matrix44F)">
            <summary>
            Sets the projection from the given projection matrix.
            </summary>
            <param name="projection">The projection matrix.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Projection.ToMatrix44F">
            <summary>
            Converts a projection to a 4x4 transformation matrix.
            </summary>
            <returns>A 4x4-matrix that represents the same transformation as the projection.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Projection.ToXna">
            <summary>
            Converts a projection to a 4x4 transformation matrix (XNA Framework). (Only available in the 
            XNA-compatible build.)
            </summary>
            <returns>A 4x4-matrix that represents the same transformation as the projection.</returns>
            <remarks>
            This method is available only in the XNA-compatible build of the DigitalRune.Graphics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Projection.op_Implicit(DigitalRune.Graphics.Projection)~DigitalRune.Mathematics.Algebra.Matrix44F">
            <summary>
            Converts the projection to a 4x4 transformation matrix.
            </summary>
            <param name="projection">The projection.</param>
            <returns>A 4x4-matrix that represents the same transformation as the projection.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Projection.op_Implicit(DigitalRune.Graphics.Projection)~Microsoft.Xna.Framework.Matrix">
            <summary>
            Converts the projection to a 4x4 transformation matrix (XNA Framework). (Only available in 
            the XNA-compatible build.)
            </summary>
            <param name="projection">The projection.</param>
            <returns>A 4x4-matrix that represents the same transformation as the projection.</returns>
            <remarks>
            This method is available only in the XNA-compatible build of the DigitalRune.Graphics.dll.
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.DecalOptions">
            <summary>
            Defines options for rendering decals.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.DecalOptions.ProjectOnAll">
            <summary>
            The decal is applied to all types of geometry.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.DecalOptions.ProjectOnStatic">
            <summary>
            The decal is applied only to static geometry. (Only scene nodes where 
            <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.IsStatic"/> is set will receive the decal.)
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.CompositeFigure">
            <summary>
            Represents a figure that is composed of several figures.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.CompositeFigure.Children">
            <summary>
            Gets the children.
            </summary>
            <value>The children.</value>
        </member>
        <member name="P:DigitalRune.Graphics.CompositeFigure.HasFill">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.CompositeFigure.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.CompositeFigure"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.CompositeFigure.Flatten(DigitalRune.Collections.ArrayList{DigitalRune.Mathematics.Algebra.Vector3F},DigitalRune.Collections.ArrayList{System.Int32},DigitalRune.Collections.ArrayList{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.EllipseFigure">
            <summary>
            Represents an ellipse in the xy plane.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.EllipseFigure.IsFilled">
            <summary>
            Gets or sets a value indicating whether the ellipse is filled.
            </summary>
            <value>
            <see langword="true"/> if this ellipse is filled; otherwise, <see langword="false"/>.
            The default value is <see langword="true"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.EllipseFigure.RadiusX">
            <summary>
            Gets or sets the radius of the ellipse in the x direction.
            </summary>
            <value>
            The radius of the ellipse in the x direction.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.EllipseFigure.RadiusY">
            <summary>
            Gets or sets the radius of the ellipse in the y direction.
            </summary>
            <value>
            The radius of the ellipse in the y direction.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.EllipseFigure.HasFill">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.EllipseFigure.Flatten(DigitalRune.Collections.ArrayList{DigitalRune.Mathematics.Algebra.Vector3F},DigitalRune.Collections.ArrayList{System.Int32},DigitalRune.Collections.ArrayList{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Figure">
            <summary>
            Represents a drawing composed of lines and 2D shapes.
            </summary>
            <remarks>
            <para>
            A <i>figure</i> is a drawing composed of lines and shapes.
            </para>
            <para>
            A figure may contain smooth curves such as Bézier splines. These smooth curves are "flattened"
            for rendering, which means they are approximated using line segments. The properties 
            <see cref="P:DigitalRune.Graphics.Figure.MaxNumberOfIterations"/> and <see cref="P:DigitalRune.Graphics.Figure.Tolerance"/> determine how detailed the 
            approximations will be. See also <see cref="M:DigitalRune.Mathematics.Interpolation.ICurve`2.Flatten(System.Collections.Generic.ICollection{`1},System.Int32,`0)"/>.
            </para>
            <para>
            The figure has <see cref="P:DigitalRune.Graphics.Figure.BoundingShape"/> which can be used for culling and a 
            <see cref="P:DigitalRune.Graphics.Figure.HitShape"/> which can be used for more accurate hit testing ("picking").
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Figure.MaxNumberOfIterations">
            <summary>
            Gets or sets the maximum number of iterations which are taken when flattening smooth curves.
            </summary>
            <value>
            The maximum number of iterations which are taken when flattening smooth curves. The default
            value is 10.
            </value>
            <remarks>
            Changing <see cref="P:DigitalRune.Graphics.Figure.MaxNumberOfIterations"/> or <see cref="P:DigitalRune.Graphics.Figure.Tolerance"/> does not 
            automatically redraw the existing figures with the new settings. The figures need to be 
            invalidated (see method <see cref="M:DigitalRune.Graphics.Figure.Invalidate"/>) to force a redraw.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Figure.Tolerance">
            <summary>
            Gets or sets the tolerance which is allowed when flattening smooth curves.
            </summary>
            <value>
            The tolerance which is allowed when flattening smooth curves. The default value is 0.01.
            </value>
            <inheritdoc cref="P:DigitalRune.Graphics.Figure.MaxNumberOfIterations"/>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value is zero or less than zero.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.Figure.HasFill">
            <summary>
            Gets a value indicating whether this figure or any part of it is filled.
            </summary>
            <value>
            <see langword="true"/> if figure has a fill; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Figure.BoundingShape">
            <summary>
            Gets the collision shape for bounding volume tests and culling.
            </summary>
            <value>The collision shape for bounding volume tests and culling.</value>
            <inheritdoc cref="P:DigitalRune.Graphics.Figure.HitShape"/>
        </member>
        <member name="P:DigitalRune.Graphics.Figure.HitShape">
            <summary>
            Gets the collision shape for hit tests.
            </summary>
            <value>The collision shape for hit tests.</value>
            <remarks>
            <para>
            The <see cref="P:DigitalRune.Graphics.Figure.BoundingShape"/> is a very simply shape which can be used for simple bounding
            volume tests and culling (e.g. view frustum culling). The <see cref="P:DigitalRune.Graphics.Figure.HitShape"/> is a
            detailed shape which can be used for more accurate hit testing.
            </para>
            <para>
            <strong>Important:</strong> The <see cref="P:DigitalRune.Graphics.Figure.HitShape"/> was designed for hit testing 
            ("picking") to determine whether the mouse cursor or another object intersects the rendered
            figure. The representation of the figure is updated during rendering. That means, the 
            <see cref="P:DigitalRune.Graphics.Figure.HitShape"/> may be invalid when it is not rendered!
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Figure.Invalidate">
            <summary>
            Invalidates cached render data. (Must be called when properties of a figure are changed.)
            </summary>
            <remarks>
            <para>
            Renderers may cache the data they need to render the figure. When properties of a figure
            already in the collection are changed, (e.g. a key point of a curve is moved or new points
            are added to a path), then <see cref="M:DigitalRune.Graphics.Figure.Invalidate"/> must be called manually to inform the
            renderer that cached data may be invalid.
            </para>
            <para>
            When a figure is part of another figure (composite or transformed figures), then 
            <see cref="M:DigitalRune.Graphics.Figure.Invalidate"/> needs to be called on the root figure because the render data is
            usually cached in the root figure.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Figure.Flatten(DigitalRune.Collections.ArrayList{DigitalRune.Mathematics.Algebra.Vector3F},DigitalRune.Collections.ArrayList{System.Int32},DigitalRune.Collections.ArrayList{System.Int32})">
            <summary>
            Flattens the specified vertices.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="strokeIndices">The line indices (2 indices per line).</param>
            <param name="fillIndices">The triangle indices (3 indices per triangle).</param>
        </member>
        <member name="T:DigitalRune.Graphics.FigureDataCollection`1">
            <summary>
            Manages a collection of items owned by a <see cref="T:DigitalRune.Graphics.Figure"/>.
            </summary>
            <typeparam name="T">The type of items.</typeparam>
        </member>
        <member name="M:DigitalRune.Graphics.FigureDataCollection`1.#ctor(DigitalRune.Graphics.Figure)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.FigureDataCollection`1"/> class.
            </summary>
            <param name="owner">The figure that owns the collection.</param>
        </member>
        <member name="M:DigitalRune.Graphics.FigureDataCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:DigitalRune.Graphics.FigureDataCollection`1"/>. 
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> for <see cref="T:DigitalRune.Graphics.FigureDataCollection`1"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.FigureDataCollection`1.ClearItems">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.FigureDataCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1"/> at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="item"/> should be inserted.
            </param>
            <param name="item">The object to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>. 
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.FigureDataCollection`1.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:DigitalRune.Graphics.FigureDataCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or is greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>. 
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.FigureCollection">
            <summary>
            Manages a collection of child figures.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.FigureCollection.#ctor(DigitalRune.Graphics.Figure)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.FigureCollection"/> class.
            </summary>
            <param name="owner">The figure that owns the collection.</param>
        </member>
        <member name="T:DigitalRune.Graphics.PathSegment2FCollection">
            <summary>
            Manages a collection of 2D path segments.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.PathSegment2FCollection.#ctor(DigitalRune.Graphics.Figure)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PathSegment2FCollection"/> class.
            </summary>
            <param name="owner">The figure that owns the collection.</param>
        </member>
        <member name="T:DigitalRune.Graphics.PathSegment3FCollection">
            <summary>
            Manages a collection of 3D path segments.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.PathSegment3FCollection.#ctor(DigitalRune.Graphics.Figure)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PathSegment3FCollection"/> class.
            </summary>
            <param name="owner">The figure that owns the collection.</param>
        </member>
        <member name="T:DigitalRune.Graphics.FigureRenderData">
            <summary>
            Contains the flattened representation of a figure, which is used for rendering and hit 
            testing.
            </summary>
            <remarks>
            The <see cref="T:DigitalRune.Graphics.FigureRenderData"/> has a <see cref="F:DigitalRune.Graphics.FigureRenderData.BoundingShape"/> which can be used for
            culling and a <see cref="P:DigitalRune.Graphics.FigureRenderData.HitShape"/> for accurate hit testing. (The 
            <see cref="T:DigitalRune.Graphics.FigureRenderData"/> implements <see cref="T:DigitalRune.Geometry.Meshes.ITriangleMesh"/>, which is used for the
            <see cref="P:DigitalRune.Graphics.FigureRenderData.HitShape"/>. Filled areas are represented as triangles and stroked lines are 
            represented as degenerate triangles.)
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.FigureRenderData.Vertices">
            <summary>The points of the flattened figure.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.FigureRenderData.FillIndices">
            <summary>The indices of the fill areas (triangle list).</summary>
        </member>
        <member name="F:DigitalRune.Graphics.FigureRenderData.StrokeIndices">
            <summary>The indices of the stroke (line list).</summary>
        </member>
        <member name="M:DigitalRune.Graphics.FigureRenderData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.FigureRenderData"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.FigureRenderData.Reset">
            <summary>
            Resets the render data.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.FigureRenderData.BoundingShape">
            <summary>The bounding shape.</summary> 
        </member>
        <member name="P:DigitalRune.Graphics.FigureRenderData.HitShape">
            <summary>
            Gets the hit shape.
            </summary>
            <value>The hit shape.</value>
        </member>
        <member name="P:DigitalRune.Graphics.FigureRenderData.DigitalRune#Geometry#Meshes#ITriangleMesh#NumberOfTriangles">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.FigureRenderData.DigitalRune#Geometry#Meshes#ITriangleMesh#GetTriangle(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.PathFigure2F">
            <summary>
            Represents a 2D figure composed of lines and curves.
            </summary>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Graphics.PathFigure2F"/> can be used to define complex shapes composed of lines and 
            curves. The figure is 2D and lies in the xy plane where x-axis points to the right and y-axis
            points upwards. The curve segments need to be added to the <see cref="P:DigitalRune.Graphics.PathFigure2F.Segments"/> collection. 
            A curve segment is any object that implements 
            <see cref="T:DigitalRune.Mathematics.Interpolation.ICurve`2">ICurve&lt;float, Vector2F&gt;</see>. Examples: 
            <see cref="T:DigitalRune.Mathematics.Interpolation.LineSegment2F"/>, <see cref="T:DigitalRune.Mathematics.Interpolation.BezierSegment2F"/>, <see cref="T:DigitalRune.Mathematics.Interpolation.Path2F"/>, ...
            </para>
            <para>
            <strong>Fill:</strong><br/>
            Closed shapes within the figure can be filled: A closed shape is defined by consecutive, 
            connected curve segments. For example: Four <see cref="T:DigitalRune.Mathematics.Interpolation.LineSegment2F"/> can be used to create 
            a filled rectangle. The end of the previous segment needs to match the start of the next
            segment. The last segment of a closed shape needs to be connected with the first segment.
            </para>
            <para>
            The property <see cref="P:DigitalRune.Graphics.PathFigure2F.IsFilled"/> determines whether closed shapes will be filled. (The 
            property is <see langword="true"/> by default.)
            </para>
            <para>
            <strong>Stroked vs. Unstroked Segments:</strong><br/>
            By default all curve segments are stroked meaning that the curve segment will be rendered with
            a given stroke color and thickness. The <see cref="T:DigitalRune.Graphics.StrokedSegment2F"/> can be used to add a 
            curve segment which is not stroked. This class is a decorator that wraps a curve segment and 
            allows to define whether it is stroked or not.
            </para>
            <para>
            The following example creates rectangles where all or only some edges are stroked:
            </para>
            <code lang="csharp">
            <![CDATA[
            // Box where all edges are stroked. (Curve segments are stroked by default.)
            var boxFigure1 = new PathFigure2F
            {
              Segments =
              {
                new LineSegment2F { Point1 = new Vector2F(0, 0), Point2 = new Vector2F(0, 1) },
                new LineSegment2F { Point1 = new Vector2F(0, 1), Point2 = new Vector2F(1, 1) },
                new LineSegment2F { Point1 = new Vector2F(1, 1), Point2 = new Vector2F(1, 0) },
                new LineSegment2F { Point1 = new Vector2F(1, 0), Point2 = new Vector2F(0, 0) }
              }
            };
            var figureNode1 = new FigureNode(boxFigure1)
            {
              StrokeColor = new Vector3F(0, 0, 0),
              StrokeThickness = 2,
              FillColor = new Vector3F(0.5f, 0.5f, 0.5f)
            };
            
            // Box where top and bottom edges are stroked.
            var boxFigure2 = new PathFigure2F
            {
              Segments =
              {
                new StrokedSegment2F(
                  new LineSegment2F { Point1 = new Vector2F(0, 0), Point2 = new Vector2F(0, 1) }, 
                  false),
                new LineSegment2F { Point1 = new Vector2F(0, 1), Point2 = new Vector2F(1, 1) },
                new StrokedSegment2F(
                  new LineSegment2F { Point1 = new Vector2F(1, 1), Point2 = new Vector2F(1, 0) }, 
                  false),
                new LineSegment2F { Point1 = new Vector2F(1, 0), Point2 = new Vector2F(0, 0) }
              }
            };
            var figureNode2 = new FigureNode(boxFigure2)
            {
              StrokeColor = new Vector3F(0, 0, 0),
              StrokeThickness = 2,
              FillColor = new Vector3F(0.5f, 0.5f, 0.5f)
            };
            ]]>
            </code>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PathFigure2F.HasFill">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Graphics.PathFigure2F.IsFilled">
            <summary>
            Gets or sets a value indicating whether the interior of the figure is filled or empty.
            </summary>
            <value>
            <see langword="true"/> if the interior of the figure is filled; otherwise, 
            <see langword="false"/>. The default value is <see langword="true"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.PathFigure2F.Segments">
            <summary>
            Gets the curve segments.
            </summary>
            <value>The curve segments.</value>
            <remarks>
            Curve segments need to be added to the <see cref="P:DigitalRune.Graphics.PathFigure2F.Segments"/> collection. A curve segment is 
            any object that implements <see cref="T:DigitalRune.Mathematics.Interpolation.ICurve`2">ICurve&lt;float, Vector2F&gt;</see>. 
            Examples: <see cref="T:DigitalRune.Mathematics.Interpolation.LineSegment2F"/>, <see cref="T:DigitalRune.Mathematics.Interpolation.BezierSegment2F"/>, <see cref="T:DigitalRune.Mathematics.Interpolation.Path2F"/>, 
            etc. 
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.PathFigure2F.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PathFigure2F"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.PathFigure2F.Flatten(DigitalRune.Collections.ArrayList{DigitalRune.Mathematics.Algebra.Vector3F},DigitalRune.Collections.ArrayList{System.Int32},DigitalRune.Collections.ArrayList{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.PathFigure3F">
            <summary>
            Represents a 3D figure composed of lines and curves.
            </summary>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Graphics.PathFigure3F"/> can be used to define data for line rendering. Lines are 
            defined using curve segments (see property <see cref="P:DigitalRune.Graphics.PathFigure3F.Segments"/>). A curve segment is any
            object that implements <see cref="T:DigitalRune.Mathematics.Interpolation.ICurve`2">ICurve&lt;float, Vector3F&gt;</see>. 
            Examples: <see cref="T:DigitalRune.Mathematics.Interpolation.LineSegment3F"/>, <see cref="T:DigitalRune.Mathematics.Interpolation.BezierSegment3F"/>, <see cref="T:DigitalRune.Mathematics.Interpolation.Path3F"/>, 
            etc. 
            </para>
            <para>
            In contrast to a <see cref="T:DigitalRune.Graphics.PathFigure2F"/>, the <see cref="T:DigitalRune.Graphics.PathFigure3F"/> cannot be filled.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PathFigure3F.HasFill">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Graphics.PathFigure3F.Segments">
            <summary>
            Gets the curve segments.
            </summary>
            <value>The curve segments.</value>
            <remarks>
            Curve segments need to be added to the <see cref="P:DigitalRune.Graphics.PathFigure3F.Segments"/> collection. A curve segment is 
            any object that implements <see cref="T:DigitalRune.Mathematics.Interpolation.ICurve`2">ICurve&lt;float, Vector3F&gt;</see>. 
            Examples: <see cref="T:DigitalRune.Mathematics.Interpolation.LineSegment3F"/>, <see cref="T:DigitalRune.Mathematics.Interpolation.BezierSegment3F"/>, <see cref="T:DigitalRune.Mathematics.Interpolation.Path3F"/>, 
            etc. 
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.PathFigure3F.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PathFigure3F"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.PathFigure3F.Flatten(DigitalRune.Collections.ArrayList{DigitalRune.Mathematics.Algebra.Vector3F},DigitalRune.Collections.ArrayList{System.Int32},DigitalRune.Collections.ArrayList{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.RectangleFigure">
            <summary>
            Represents a rectangle in the xy plane.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.RectangleFigure.IsFilled">
            <summary>
            Gets or sets a value indicating whether the rectangle is filled.
            </summary>
            <value>
            <see langword="true"/> if this rectangle is filled; otherwise, <see langword="false"/>.
            The default value is <see langword="true"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.RectangleFigure.WidthX">
            <summary>
            Gets or sets the width of the rectangle in the x direction.
            </summary>
            <value>The width of the rectangle in the x direction. The default value is 1.</value>
        </member>
        <member name="P:DigitalRune.Graphics.RectangleFigure.WidthY">
            <summary>
            Gets or sets the width of the rectangle in the y direction.
            </summary>
            <value>The width of the rectangle in the y direction. The default value is 1.</value>
        </member>
        <member name="P:DigitalRune.Graphics.RectangleFigure.HasFill">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.RectangleFigure.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.RectangleFigure"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.RectangleFigure.Flatten(DigitalRune.Collections.ArrayList{DigitalRune.Mathematics.Algebra.Vector3F},DigitalRune.Collections.ArrayList{System.Int32},DigitalRune.Collections.ArrayList{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.StrokedSegment`2">
            <summary>
            Wraps a curve segment and determines whether it is stroked or not.
            </summary>
            <typeparam name="TParam">
            The type of the curve parameter (usually <see cref="T:System.Single"/> or <see cref="T:System.Double"/>).
            </typeparam>
            <typeparam name="TPoint">
            The type of the curve points (such as <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/>, <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>, etc.).
            </typeparam>
            <remarks>
            Curve segments within a <see cref="T:DigitalRune.Graphics.PathFigure2F"/> are stroked by default. The 
            <see cref="T:DigitalRune.Graphics.StrokedSegment`2"/> is a decorator that wraps another curve and adds
            an annotation that defines whether the curve is stroke or not.
            </remarks>
            <example>
            <para>
            The following example creates rectangles where all or only some edges are stroked:
            </para>
            <code lang="csharp">
            <![CDATA[
            // Box where all edges are stroked. (Curve segments are stroked by default.)
            var boxFigure1 = new PathFigure2F
            {
              Segments =
              {
                new LineSegment2F { Point1 = new Vector2F(0, 0), Point2 = new Vector2F(0, 1) },
                new LineSegment2F { Point1 = new Vector2F(0, 1), Point2 = new Vector2F(1, 1) },
                new LineSegment2F { Point1 = new Vector2F(1, 1), Point2 = new Vector2F(1, 0) },
                new LineSegment2F { Point1 = new Vector2F(1, 0), Point2 = new Vector2F(0, 0) }
              }
            };
            var figureNode1 = new FigureNode(boxFigure1)
            {
              StrokeColor = new Vector3F(0, 0, 0),
              StrokeThickness = 2,
              FillColor = new Vector3F(0.5f, 0.5f, 0.5f)
            };
            
            // Box where top and bottom edges are stroked.
            var boxFigure2 = new PathFigure2F
            {
              Segments =
              {
                new StrokedSegment2F(
                  new LineSegment2F { Point1 = new Vector2F(0, 0), Point2 = new Vector2F(0, 1) }, 
                  false),
                new LineSegment2F { Point1 = new Vector2F(0, 1), Point2 = new Vector2F(1, 1) },
                new StrokedSegment2F(
                  new LineSegment2F { Point1 = new Vector2F(1, 1), Point2 = new Vector2F(1, 0) }, 
                  false),
                new LineSegment2F { Point1 = new Vector2F(1, 0), Point2 = new Vector2F(0, 0) }
              }
            };
            var figureNode2 = new FigureNode(boxFigure2)
            {
              StrokeColor = new Vector3F(0, 0, 0),
              StrokeThickness = 2,
              FillColor = new Vector3F(0.5f, 0.5f, 0.5f)
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:DigitalRune.Graphics.StrokedSegment`2.IsStroked">
            <summary>
            Gets or sets a value indicating whether this curve segment is stroked.
            </summary>
            <value>
            <see langword="true"/> if this curve segment is stroked; otherwise, <see langword="false"/>.
            The default value is <see langword="true"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.StrokedSegment`2.Curve">
            <summary>
            Gets or sets the curve.
            </summary>
            <value>The curve.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.StrokedSegment`2.#ctor(DigitalRune.Mathematics.Interpolation.ICurve{`0,`1})">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.StrokedSegment`2"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.StrokedSegment`2"/> class with the
            specified stroked curve.
            </summary>
            <param name="curve">The curve.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="curve"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.StrokedSegment`2.#ctor(DigitalRune.Mathematics.Interpolation.ICurve{`0,`1},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.StrokedSegment`2"/> class.
            </summary>
            <param name="curve">The curve.</param>
            <param name="isStroked">
            <see langword="true"/> if this curve segment is stroked; otherwise, <see langword="false"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="curve"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.StrokedSegment`2.GetPoint(`0)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.StrokedSegment`2.GetTangent(`0)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.StrokedSegment`2.GetLength(`0,`0,System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.StrokedSegment`2.Flatten(System.Collections.Generic.ICollection{`1},System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.StrokedSegment2F">
            <summary>
            Wraps a 2D curve segment (single-precision) and determines whether it is stroked or not.
            </summary>
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.StrokedSegment2F.#ctor(DigitalRune.Mathematics.Interpolation.ICurve{System.Single,DigitalRune.Mathematics.Algebra.Vector2F})">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.StrokedSegment2F"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.StrokedSegment2F"/> class with the specified 
            stroked curve.
            </summary>
            <param name="curve">The curve.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="curve"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.StrokedSegment2F.#ctor(DigitalRune.Mathematics.Interpolation.ICurve{System.Single,DigitalRune.Mathematics.Algebra.Vector2F},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.StrokedSegment2F"/> class.
            </summary>
            <param name="curve">The curve.</param>
            <param name="isStroked">
            <see langword="true"/> if this curve segment is stroked; otherwise, <see langword="false"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="curve"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.StrokedSegment3F">
            <summary>
            Wraps a 3D curve segment (single-precision) and determines whether it is stroked or not.
            </summary>
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.StrokedSegment3F.#ctor(DigitalRune.Mathematics.Interpolation.ICurve{System.Single,DigitalRune.Mathematics.Algebra.Vector3F})">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.StrokedSegment3F"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.StrokedSegment3F"/> class with the specified 
            stroked curve.
            </summary>
            <param name="curve">The curve.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="curve"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.StrokedSegment3F.#ctor(DigitalRune.Mathematics.Interpolation.ICurve{System.Single,DigitalRune.Mathematics.Algebra.Vector3F},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.StrokedSegment3F"/> class.
            </summary>
            <param name="curve">The curve.</param>
            <param name="isStroked">
            <see langword="true"/> if this curve segment is stroked; otherwise, <see langword="false"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="curve"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.TransformedFigure">
            <summary>
            Represents a figure that is scaled, rotated, or translated in 3D space.
            </summary>
            <remarks>
            The <see cref="T:DigitalRune.Graphics.TransformedFigure"/> takes an existing figure (see property 
            <see cref="P:DigitalRune.Graphics.TransformedFigure.Child"/>) and transforms it in 3D.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TransformedFigure.Child">
            <summary>
            Gets or sets the figure that is transformed.
            </summary>
            <value>The figure that is transformed.</value>
            <exception cref="T:System.ArgumentNullException">
            The value is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.TransformedFigure.Pose">
            <summary>
            Gets or sets the pose (position and orientation) that is applied to the figure.
            </summary>
            <value>The pose (position and orientation) that is applied to the figure.</value>
        </member>
        <member name="P:DigitalRune.Graphics.TransformedFigure.Scale">
            <summary>
            Gets or sets the scale factor that is applied to the figure.
            </summary>
            <value>The scale factor that is applied to the figure.</value>
        </member>
        <member name="P:DigitalRune.Graphics.TransformedFigure.HasFill">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.TransformedFigure.#ctor(DigitalRune.Graphics.Figure)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TransformedFigure" /> class.
            </summary>
            <param name="child">The figure that is transformed.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="child"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.TransformedFigure.Flatten(DigitalRune.Collections.ArrayList{DigitalRune.Mathematics.Algebra.Vector3F},DigitalRune.Collections.ArrayList{System.Int32},DigitalRune.Collections.ArrayList{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Fog">
            <summary>
            Represents fog.
            </summary>
            <remarks>
            <para>
            <see cref="T:DigitalRune.Graphics.Fog"/> can be used to define a height-based fog where the fog density 
            increases/decreases with height. Height-based fog can be used to create thick layer of fog in 
            a valley or on a dungeon floor. The fog is relative to the <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.PoseWorld"/>
            of a <see cref="T:DigitalRune.Graphics.SceneGraph.FogNode"/>. That means, the height fog moves up/down when the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.FogNode"/> moves up/down.
            </para>
            <para>
            The fog density can be specified using either <see cref="P:DigitalRune.Graphics.Fog.Density"/> and 
            <see cref="P:DigitalRune.Graphics.Fog.HeightFalloff"/> or <see cref="P:DigitalRune.Graphics.Fog.Density0"/> and <see cref="P:DigitalRune.Graphics.Fog.Density1"/>. 
            <see cref="P:DigitalRune.Graphics.Fog.Density"/> defines the fog density at height 0 and the <see cref="P:DigitalRune.Graphics.Fog.HeightFalloff"/>
            determines whether the fog density increases or decrease with height. Alternatively, the 
            fog density can be set at two reference heights using <see cref="P:DigitalRune.Graphics.Fog.Density0"/> and 
            <see cref="P:DigitalRune.Graphics.Fog.Density1"/>. The properties are coupled: If <see cref="P:DigitalRune.Graphics.Fog.Density"/> or 
            <see cref="P:DigitalRune.Graphics.Fog.HeightFalloff"/> are changed, <see cref="P:DigitalRune.Graphics.Fog.Density0"/> and <see cref="P:DigitalRune.Graphics.Fog.Density1"/> are
            updated automatically and vice versa. In practice, you will use either <see cref="P:DigitalRune.Graphics.Fog.Density"/> 
            and <see cref="P:DigitalRune.Graphics.Fog.HeightFalloff"/>, or <see cref="P:DigitalRune.Graphics.Fog.Density0"/> and <see cref="P:DigitalRune.Graphics.Fog.Density1"/> to 
            control the fog settings.
            </para>
            <para>
            To disable the fog, simply set <see cref="P:DigitalRune.Graphics.Fog.Density"/> to 0. To create a height-independent fog,
            set <see cref="P:DigitalRune.Graphics.Fog.HeightFalloff"/> to 0.
            </para>
            <para>
            The fog color can be specified using <see cref="P:DigitalRune.Graphics.Fog.Color0"/> and <see cref="P:DigitalRune.Graphics.Fog.Color1"/>, where
            <see cref="P:DigitalRune.Graphics.Fog.Color0"/> defines the fog color at a height of <see cref="P:DigitalRune.Graphics.Fog.Height0"/>, and 
            <see cref="P:DigitalRune.Graphics.Fog.Color1"/> defines the fog color at a height of <see cref="P:DigitalRune.Graphics.Fog.Height1"/>. Colors
            between <see cref="P:DigitalRune.Graphics.Fog.Height0"/> and <see cref="P:DigitalRune.Graphics.Fog.Height1"/> are interpolated. 
            </para>
            <para>
            The fog colors, <see cref="P:DigitalRune.Graphics.Fog.Color0"/> and <see cref="P:DigitalRune.Graphics.Fog.Color1"/>, use premultiplied alpha. The
            alpha value is usually 1, but lower values can be used to reduce the overall fog intensity.
            </para>
            <para>
            The properties <see cref="P:DigitalRune.Graphics.Fog.Start"/> and <see cref="P:DigitalRune.Graphics.Fog.End"/> define a ramp over which the fog 
            fades in.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Fog.Name">
            <summary>
            Gets or sets the name of the fog.
            </summary>
            <value>The name of the fog.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Fog.Density">
            <summary>
            Gets or sets the density of the fog at a height of 0.
            </summary>
            <value>The density of the fog at a height of 0.</value>
            <remarks>
            <para>
            The fog density can be specified using either <see cref="P:DigitalRune.Graphics.Fog.Density"/> and 
            <see cref="P:DigitalRune.Graphics.Fog.HeightFalloff"/> or <see cref="P:DigitalRune.Graphics.Fog.Density0"/> and <see cref="P:DigitalRune.Graphics.Fog.Density1"/>. 
            <see cref="P:DigitalRune.Graphics.Fog.Density"/> defines the fog density at height 0 and the 
            <see cref="P:DigitalRune.Graphics.Fog.HeightFalloff"/>determines whether the fog density increases or decrease with
            height. Alternatively, the  fog density can be set at two reference heights using 
            <see cref="P:DigitalRune.Graphics.Fog.Density0"/> and <see cref="P:DigitalRune.Graphics.Fog.Density1"/>. The properties are coupled: If 
            <see cref="P:DigitalRune.Graphics.Fog.Density"/> or <see cref="P:DigitalRune.Graphics.Fog.HeightFalloff"/> are changed, <see cref="P:DigitalRune.Graphics.Fog.Density0"/> and
            <see cref="P:DigitalRune.Graphics.Fog.Density1"/> are updated automatically and vice versa. In practice, you will use
            either <see cref="P:DigitalRune.Graphics.Fog.Density"/> and <see cref="P:DigitalRune.Graphics.Fog.HeightFalloff"/>, or <see cref="P:DigitalRune.Graphics.Fog.Density0"/> and 
            <see cref="P:DigitalRune.Graphics.Fog.Density1"/> to control the fog settings.
            </para>
            <para>
            To disable the fog, simply set <see cref="P:DigitalRune.Graphics.Fog.Density"/> to 0. To create a height-independent
            fog, set <see cref="P:DigitalRune.Graphics.Fog.HeightFalloff"/> to 0.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Fog.HeightFalloff">
            <summary>
            Gets or sets the height falloff.
            </summary>
            <value>The height falloff.</value>
            <remarks>
            <para>
            The fog density can be specified using either <see cref="P:DigitalRune.Graphics.Fog.Density"/> and 
            <see cref="P:DigitalRune.Graphics.Fog.HeightFalloff"/> or <see cref="P:DigitalRune.Graphics.Fog.Density0"/> and <see cref="P:DigitalRune.Graphics.Fog.Density1"/>. 
            <see cref="P:DigitalRune.Graphics.Fog.Density"/> defines the fog density at height 0 and the 
            <see cref="P:DigitalRune.Graphics.Fog.HeightFalloff"/>determines whether the fog density increases or decrease with
            height. Alternatively, the  fog density can be set at two reference heights using 
            <see cref="P:DigitalRune.Graphics.Fog.Density0"/> and <see cref="P:DigitalRune.Graphics.Fog.Density1"/>. The properties are coupled: If 
            <see cref="P:DigitalRune.Graphics.Fog.Density"/> or <see cref="P:DigitalRune.Graphics.Fog.HeightFalloff"/> are changed, <see cref="P:DigitalRune.Graphics.Fog.Density0"/> and
            <see cref="P:DigitalRune.Graphics.Fog.Density1"/> are updated automatically and vice versa. In practice, you will use
            either <see cref="P:DigitalRune.Graphics.Fog.Density"/> and <see cref="P:DigitalRune.Graphics.Fog.HeightFalloff"/>, or <see cref="P:DigitalRune.Graphics.Fog.Density0"/> and 
            <see cref="P:DigitalRune.Graphics.Fog.Density1"/> to control the fog settings.
            </para>
            <para>
            If this value is greater than 0, the fog density decreases with height. Higher 
            <see cref="P:DigitalRune.Graphics.Fog.HeightFalloff"/> values let the fog density decrease faster.
            </para>
            <para>
            If this value is 0, then the fog density is height-independent and increases only with
            the distance from the camera.
            </para>
            <para>
            If the value is less than 0, the fog density increases with height. This reverses the
            typical height fog effect: The fog gathers at the ceiling instead of the ground.
            </para>
            <para>
            To avoid numerical problems, the absolute value of <see cref="P:DigitalRune.Graphics.Fog.HeightFalloff"/> should be a 
            small value (e.g. between 0 and 10).
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Fog.Height0">
            <summary>
            Gets or sets the reference height for <see cref="P:DigitalRune.Graphics.Fog.Color0"/> and <see cref="P:DigitalRune.Graphics.Fog.Density0"/>.
            </summary>
            <value>The reference height for <see cref="P:DigitalRune.Graphics.Fog.Color0"/> and <see cref="P:DigitalRune.Graphics.Fog.Density0"/>.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Fog.Color0">
            <summary>
            Gets or sets the color of the fog at <see cref="P:DigitalRune.Graphics.Fog.Height0"/>.
            </summary>
            <value>The color of the fog at <see cref="P:DigitalRune.Graphics.Fog.Height0"/> (using premultiplied alpha).</value>
        </member>
        <member name="P:DigitalRune.Graphics.Fog.Density0">
            <summary>
            Gets or sets the density of the fog at <see cref="P:DigitalRune.Graphics.Fog.Height0"/>.
            </summary>
            <value>The density of the fog at <see cref="P:DigitalRune.Graphics.Fog.Height0"/>.</value>
            <inheritdoc cref="P:DigitalRune.Graphics.Fog.Density"/>
        </member>
        <member name="P:DigitalRune.Graphics.Fog.Height1">
            <summary>
            Gets or sets the reference height for <see cref="P:DigitalRune.Graphics.Fog.Color1"/> and <see cref="P:DigitalRune.Graphics.Fog.Density1"/>.
            </summary>
            <value>The reference height for <see cref="P:DigitalRune.Graphics.Fog.Color1"/> and <see cref="P:DigitalRune.Graphics.Fog.Density1"/>.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Fog.Color1">
            <summary>
            Gets or sets the color of the fog at <see cref="P:DigitalRune.Graphics.Fog.Height1"/>.
            </summary>
            <value>The color of the fog at <see cref="P:DigitalRune.Graphics.Fog.Height1"/> (using premultiplied alpha).</value>
        </member>
        <member name="P:DigitalRune.Graphics.Fog.Density1">
            <summary>
            Gets or sets the density of the fog at <see cref="P:DigitalRune.Graphics.Fog.Height1"/>.
            </summary>
            <value>The density of the fog at <see cref="P:DigitalRune.Graphics.Fog.Height1"/>.</value>
            <inheritdoc cref="P:DigitalRune.Graphics.Fog.Density"/>
        </member>
        <member name="P:DigitalRune.Graphics.Fog.Start">
            <summary>
            Gets or sets the distance from the camera where the fog starts.
            </summary>
            <value>The distance from the camera where the fog starts.</value>
            <remarks>
            <see cref="P:DigitalRune.Graphics.Fog.Start"/> and <see cref="P:DigitalRune.Graphics.Fog.End"/> define a ramp over which the fog fades in.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Fog.End">
            <summary>
            Gets or sets the distance from the camera where the fog reaches its full intensity.
            </summary>
            <value>The distance from the camera where the fog reaches its full intensity.</value>
            <inheritdoc cref="P:DigitalRune.Graphics.Fog.Start"/>
        </member>
        <member name="P:DigitalRune.Graphics.Fog.ScatteringSymmetry">
            <summary>
            Gets or sets the scattering symmetry constant.
            </summary>
            <value>
            The scattering symmetry constant for red, green and blue. Each component must be in the
            range ]-1, 1[. The default value is (0, 0, 0).
            </value>
            <remarks>
            If this value is (0, 0, 0), then the fog color is uniform. Any other values create a 
            non-uniform color where the color depends on the most important 
            <see cref="T:DigitalRune.Graphics.DirectionalLight"/> (usually the sunlight). Positive values create more forward
            scattering which make the fog brighter in the direction to the directional light. Different
            values for scattering of red, green and blue can be set. This can be used to create more
            forward scattering for red and green than for blue. This will give the fog color an
            orange/reddish appearance when looking into the sun and a blueish appearance opposite the
            sun.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Fog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Fog"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Fog.Clone">
            <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.Fog"/> that is a clone (deep copy) of the current instance.
            </summary>
            <returns>
            A new <see cref="T:DigitalRune.Graphics.Fog"/> that is a clone (deep copy) of the current instance.
            </returns>
            <remarks>
            <para>
            <strong>Notes to Inheritors:</strong> The method <see cref="M:DigitalRune.Graphics.Fog.Clone"/> calls 
            <see cref="M:DigitalRune.Graphics.Fog.CreateInstanceCore"/> which is responsible for creating a new instance of the 
            <see cref="T:DigitalRune.Graphics.Fog"/> derived class and <see cref="M:DigitalRune.Graphics.Fog.CloneCore(DigitalRune.Graphics.Fog)"/> to create a copy of the 
            current instance. Classes that derive from <see cref="T:DigitalRune.Graphics.Fog"/> need to implement 
            <see cref="M:DigitalRune.Graphics.Fog.CreateInstanceCore"/> and <see cref="M:DigitalRune.Graphics.Fog.CloneCore(DigitalRune.Graphics.Fog)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Fog.CreateInstance">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Fog"/> class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            This is a private method, and the actual object-specific implementations for the behavior 
            are dependent on the override implementation of the <see cref="T:DigitalRune.Graphics.Fog"/> method, which this 
            method calls internally. 
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cannot clone <see cref="T:DigitalRune.Graphics.Fog"/>. A derived class does not implement 
            <see cref="M:DigitalRune.Graphics.Fog.CreateInstanceCore"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Fog.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Graphics.Fog"/>
            derived class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            <para>
            Do not call this method directly (except when calling base in an implementation). This 
            method is called internally by the <see cref="M:DigitalRune.Graphics.Fog.Clone"/> method whenever a new instance of the
            <see cref="T:DigitalRune.Graphics.Fog"/> is created. 
            </para>
            <para>
            <strong>Notes to Inheritors:</strong> Every <see cref="T:DigitalRune.Graphics.Fog"/> derived class must 
            implement this method. A typical implementation is to simply call the default constructor 
            and return the result. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Fog.CloneCore(DigitalRune.Graphics.Fog)">
            <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Fog"/>.
            </summary>
            <param name="source">The object to clone.</param>
            <remarks>
            <para>
            <strong>Notes to Inheritors:</strong> Every <see cref="T:DigitalRune.Graphics.Fog"/> derived class must implement
            this method. A typical implementation is to call <c>base.CloneCore(this)</c> to copy all 
            properties of the base class and then copy all properties of the derived class.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Fog.GetIntensity(DigitalRune.Graphics.SceneGraph.FogNode,DigitalRune.Graphics.SceneGraph.CameraNode,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets the fog intensity at the specified target position.
            </summary>
            <param name="fogNode">The fog node.</param>
            <param name="cameraNode">The camera node.</param>
            <param name="targetPosition">The target position.</param>
            <returns>The fog intensity (0 = no fog; 1 = full fog, nothing else visible).</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fogNode"/> or <paramref name="cameraNode"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Fog.OnGetIntensity(DigitalRune.Graphics.SceneGraph.FogNode,DigitalRune.Graphics.SceneGraph.CameraNode,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Called to compute the fog intensity for <see cref="M:DigitalRune.Graphics.Fog.GetIntensity(DigitalRune.Graphics.SceneGraph.FogNode,DigitalRune.Graphics.SceneGraph.CameraNode,DigitalRune.Mathematics.Algebra.Vector3F)"/>.
            </summary>
            <param name="fogNode">The fog node. (Is never <see langword="null"/>.)</param>
            <param name="cameraNode">The camera node. (Is never <see langword="null"/>.)</param>
            <param name="targetPosition">The target position.</param>
            <returns>The fog intensity (0 = no fog; 1 = full fog, nothing else visible).</returns>
        </member>
        <member name="T:DigitalRune.Graphics.LensFlare">
            <summary>
            Defines a lens flare effect.
            </summary>
            <remarks>
            <para>
            A lens flare is an effect caused by a camera lens when looking at bright light. A lens flare
            usually consists of multiple elements which move across the screen depending on the position 
            of the light source: bloom and halo around the light source, light streaks, secondary rings,
            hexagonal patterns caused by the lens' aperture blades. The elements (e.g. a ring, a halo)
            is defined by creating a <see cref="T:DigitalRune.Graphics.LensFlareElement"/> and adding it to the 
            <see cref="P:DigitalRune.Graphics.LensFlare.Elements"/> collection.
            </para>
            <para>
            A <see cref="T:DigitalRune.Graphics.SceneGraph.LensFlareNode"/> needs to be created to define the position and orientation of a
            lens flare within a 3D scene.
            </para>
            <para>
            The property <see cref="P:DigitalRune.Graphics.LensFlare.IsDirectional"/> defines whether the light is caused by a
            directional light (such as the sun) or a local light source. The light direction is defined by
            the forward direction of the <see cref="T:DigitalRune.Graphics.SceneGraph.LensFlareNode"/>.
            </para>
            <para>
            <strong>Cloning:</strong><br/>
            <see cref="T:DigitalRune.Graphics.LensFlare"/>s are cloneable. When <see cref="M:DigitalRune.Graphics.LensFlare.Clone"/> is called all properties 
            including the <see cref="P:DigitalRune.Graphics.LensFlare.Elements"/> are duplicated (deep copy).
            </para>
            </remarks>
            <seealso cref="T:DigitalRune.Graphics.LensFlareElement"/>
            <seealso cref="T:DigitalRune.Graphics.SceneGraph.LensFlareNode"/>
        </member>
        <member name="P:DigitalRune.Graphics.LensFlare.Name">
            <summary>
            Gets or sets the name of the lens flare effect.
            </summary>
            <value>The name of the lens flare effect.</value>
        </member>
        <member name="P:DigitalRune.Graphics.LensFlare.Elements">
            <summary>
            Gets the elements of the lens flare.
            </summary>
            <value>The elements of the lens flare.</value>
            <remarks>
            A <see cref="T:DigitalRune.Graphics.LensFlareElement"/> defines a single element of lens flare. Most lens flare
            effects consist of multiple elements: halos, streaks, rings or hexagons, ...
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.LensFlare.Shape">
            <summary>
            Gets the bounding shape.
            </summary>
            <value>The bounding shape.</value>
        </member>
        <member name="P:DigitalRune.Graphics.LensFlare.IsDirectional">
            <summary>
            Gets a value indicating whether the lens flare is caused by a directional light, such as the
            sun. (Directional lights are treated as if placed at an infinite distance. See remarks.)
            </summary>
            <value>
            <see langword="true"/> if the light source is a directional light; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            Directional lights are treated as if placed at an infinite distance. The light direction is
            defined by the forward direction (see <see cref="F:DigitalRune.Mathematics.Algebra.Vector3F.Forward"/>) of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.LensFlareNode"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.LensFlare.QuerySize">
            <summary>
            Gets or sets the size of the lens flare used in the occlusion query. See remarks.
            </summary>
            <value>
            The size of the lens flare used in the occlusion query. The default value is 0.1 for 
            directional lights and 0.5 for local lights. See remarks!
            </value>
            <remarks>
            <para>
            The query size is the approximate size of the light source. This value is used in the
            occlusion query to determine the visibility of the lens flare effect. The meaning of the 
            value depends on the type of lens flare:
            </para>
            <list type="bullet">
            <item>
            <term>Directional lights (IsDirectional = true)</term>
            <description>
            The query size is the height of the light source relative to the viewport. 
            Example: <c>QuerySize = 0.1</c> means that the light source is approximately 1/10 of the viewport.
            </description>
            </item>
            <item>
            <term>Local lights (IsDirectional = false)</term>
            <description>
            The query size is the size of the light source in world space.
            Example: <c>QuerySize = 0.5</c> means that the light source is 0.5 units wide.
            </description>
            </item>
            </list>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.LensFlare.Intensity">
            <summary>
            Gets or sets the intensity of the lens flare.
            </summary>
            <value>The intensity of the lens flare. The default value is 1.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.LensFlare.Size">
            <summary>
            Gets or sets the height of the lens flare relative to the viewport.
            </summary>
            <value>
            The height of the lens flare relative to the viewport. The default value is 0.2.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.LensFlare.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.LensFlare" /> class.
            </summary>
            <param name="isDirectionalLight">
            If set to <see langword="true"/>, the lens flare is caused by a a directional light.
            (See <see cref="P:DigitalRune.Graphics.LensFlare.IsDirectional"/> for more info.)
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.LensFlare.Clone">
            <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.LensFlare"/> that is a clone (deep copy) of the current instance.
            </summary>
            <returns>
            A new <see cref="T:DigitalRune.Graphics.LensFlare"/> that is a clone (deep copy) of the current instance.
            </returns>
            <remarks>
            <para>
            See class documentation of <see cref="T:DigitalRune.Graphics.LensFlare"/> (Section "Cloning") for more information 
            about cloning.
            </para>
            <para>
            <strong>Notes to Inheritors:</strong> The method <see cref="M:DigitalRune.Graphics.LensFlare.Clone"/> calls 
            <see cref="M:DigitalRune.Graphics.LensFlare.CreateInstanceCore"/> which is responsible for creating a new instance of the 
            <see cref="T:DigitalRune.Graphics.LensFlare"/> derived class and <see cref="M:DigitalRune.Graphics.LensFlare.CloneCore(DigitalRune.Graphics.LensFlare)"/> to create a copy of the 
            current instance. Classes that derive from <see cref="T:DigitalRune.Graphics.LensFlare"/> need to implement 
            <see cref="M:DigitalRune.Graphics.LensFlare.CreateInstanceCore"/> and <see cref="M:DigitalRune.Graphics.LensFlare.CloneCore(DigitalRune.Graphics.LensFlare)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.LensFlare.CreateInstance">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.LensFlare"/> class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            This is a private method, and the actual object-specific implementations for the behavior 
            are dependent on the override implementation of the <see cref="M:DigitalRune.Graphics.LensFlare.CreateInstanceCore"/> method,
            which this method calls internally. 
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cannot clone <see cref="T:DigitalRune.Graphics.LensFlare"/>. A derived class does not implement 
            <see cref="M:DigitalRune.Graphics.LensFlare.CreateInstanceCore"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.LensFlare.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Graphics.LensFlare"/>
            derived class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            <para>
            Do not call this method directly (except when calling base in an implementation). This 
            method is called internally by the <see cref="M:DigitalRune.Graphics.LensFlare.Clone"/> method whenever a new instance of the
            <see cref="T:DigitalRune.Graphics.LensFlare"/> is created. 
            </para>
            <para>
            <strong>Notes to Inheritors:</strong> Every <see cref="T:DigitalRune.Graphics.LensFlare"/> derived class must 
            implement this method. A typical implementation is to simply call the default constructor 
            and return the result. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.LensFlare.CloneCore(DigitalRune.Graphics.LensFlare)">
            <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.LensFlare"/>.
            </summary>
            <param name="source">The object to clone.</param>
            <remarks>
            <strong>Notes to Inheritors:</strong> Every <see cref="T:DigitalRune.Graphics.LensFlare"/> derived class must 
            implement this method. A typical implementation is to call <c>base.CloneCore(this)</c> to 
            copy all properties of the base class and then copy all properties of the derived class.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.LensFlare.OnGetSizeAndIntensity(DigitalRune.Graphics.SceneGraph.LensFlareNode,DigitalRune.Graphics.RenderContext,System.Int32,System.Int32,System.Single@,System.Single@)">
            <summary>
            Called when the size and intensity of a lens flare is determined.
            </summary>
            <param name="node">The lens flare node.</param>
            <param name="context">The render context.</param>
            <param name="visiblePixels">
            The number of visible pixels as determined by the last hardware occlusion query. 
            (Not available in Reach profile.)
            </param>
            <param name="totalPixels">
            The total number of pixels tested in the hardware occlusion query. 
            (Not available in Reach profile.)
            </param>
            <param name="size">
            Out: The actual size of the lens flare in relative to the viewport.
            </param>
            <param name="intensity">Out: The actual intensity of the lens flare.</param>
            <remarks>
            <strong>Notes to Inheritors:</strong><br/>
            This method can be overridden in derived types to adjust the size and intensity of the lens
            flare. The base implementation creates a lens flare with constant size. The intensity
            depends on the number of visible pixels and the fog.
            <code lang="csharp">
            <![CDATA[
            protected virtual void OnGetSizeAndIntensity(LensFlareNode node, RenderContext context, int visiblePixels, int totalPixels, out float size, out float intensity)
            {
              // Constant size.
              var size = Size;
              
              intensity = node.Intensity * Intensity;
               
              // Intensity depends on the number of visible (unoccluded) pixels.
              if (context.GraphicsService.GraphicsDevice.GraphicsProfile == GraphicsProfile.HiDef)
                intensity *= (float)visiblePixels / totalPixels;
              
              // Fog decreases the intensity.
              var scene = context.Scene;
              var cameraNode = context.CameraNode;
              if (scene != null && cameraNode != null)
              {
                var query = scene.Query<FogQuery>(cameraNode);
                foreach (var fogNode in query.FogNodes)
                {
                  var flarePosition = IsDirectional   // For directional flares, choose a position "far" away.
                                    ? cameraNode.PoseWorld.Position + node.PoseWorld.Orientation.GetColumn(2) * cameraNode.Camera.Projection.Far
                                    : node.PoseWorld.Position;
                  intensity *= (1 - fogNode.Fog.GetIntensity(fogNode, cameraNode, flarePosition));
                }
              }
            }
            ]]>
            </code>
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.LensFlareElement">
            <summary>
            Defines an element of a lens flare.
            </summary>
            <remarks>
            <see cref="T:DigitalRune.Graphics.LensFlareElement"/>s need to be added to the <see cref="P:DigitalRune.Graphics.LensFlare.Elements"/>
            collection of a <see cref="T:DigitalRune.Graphics.LensFlare"/>.
            </remarks>
            <seealso cref="T:DigitalRune.Graphics.LensFlare"/>
        </member>
        <member name="P:DigitalRune.Graphics.LensFlareElement.Color">
            <summary>
            Gets or sets the color of the element.
            </summary>
            <value>The color of the element. The default value is opaque white.</value>
        </member>
        <member name="P:DigitalRune.Graphics.LensFlareElement.Distance">
            <summary>
            The distance of the element.
            </summary>
            <value>
            The distance of the element: 0 = light source, 1 = center of screen.
            Distance can be negative or greater than 1. The default value is 0.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.LensFlareElement.Origin">
            <summary>
            Gets or sets the origin relative to the image.
            </summary>
            <value>
            The origin relative to the image, where (0, 0) is the upper-left corner of the image and
            (1, 1) is the lower-right corner of the image. The default value is (0.5, 0.5).
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.LensFlareElement.Rotation">
            <summary>
            Gets or sets the angle (in radians) to rotate the element.
            </summary>
            <value>
            The angle (in radians) to rotate the element around its origin. <see cref="F:System.Single.NaN"/> 
            can be set to automatically rotate the element depending on the position of the light 
            source. The default value is 0.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.LensFlareElement.Scale">
            <summary>
            Gets or sets the scale of the element relative to <see cref="P:DigitalRune.Graphics.LensFlare.Size"/>. 
            </summary>
            <value>
            The scale of the element relative to <see cref="P:DigitalRune.Graphics.LensFlare.Size"/>. The default value is 
            (1, 1).
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.LensFlareElement.Texture">
            <summary>
            Gets or sets the texture.
            </summary>
            <value>The texture. The default value is <see langword="null" />.</value>
        </member>
        <member name="M:DigitalRune.Graphics.LensFlareElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.LensFlareElement" /> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.LensFlareElement.#ctor(System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Color,DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Graphics.PackedTexture)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.LensFlareElement" /> class.
            </summary>
            <param name="distance">
            The distance of the element: 0 = light source, 1 = center of screen.
            Distance can be negative or greater than 1. The default value is 0.
            </param>
            <param name="scale">
            The scale of the element relative to <see cref="P:DigitalRune.Graphics.LensFlare.Size"/>.
            </param>
            <param name="rotation">
            The angle (in radians) to rotate the element around its center. <see cref="F:System.Single.NaN"/> 
            can be set to automatically rotate the element depending on the position of the light 
            source.
            </param>
            <param name="color">The color of the element.</param>
            <param name="origin">
            The origin relative to the image, where (0, 0) is the upper-left corner of the image and
            (1, 1) is the lower-right corner of the image.
            </param>
            <param name="texture">The texture containing the image.</param>
        </member>
        <member name="M:DigitalRune.Graphics.LensFlareElement.#ctor(System.Single,DigitalRune.Mathematics.Algebra.Vector2F,System.Single,Microsoft.Xna.Framework.Color,DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Graphics.PackedTexture)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.LensFlareElement" /> class.
            </summary>
            <param name="distance">
            The distance of the element: 0 = light source, 1 = center of screen.
            Distance can be negative or greater than 1. The default value is 0.
            </param>
            <param name="scale">
            The scale of the element relative to <see cref="P:DigitalRune.Graphics.LensFlare.Size"/>.
            </param>
            <param name="rotation">
            The angle (in radians) to rotate the element around its center. <see cref="F:System.Single.NaN"/> 
            can be set to automatically rotate the element depending on the position of the light 
            source.
            </param>
            <param name="color">The color of the element.</param>
            <param name="origin">
            The origin relative to the image, where (0, 0) is the upper-left corner of the image and
            (1, 1) is the lower-right corner of the image.
            </param>
            <param name="texture">The texture containing the image.</param>
        </member>
        <member name="M:DigitalRune.Graphics.LensFlareElement.Clone">
            <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.LensFlareElement"/> that is a clone (deep copy) of the current instance.
            </summary>
            <returns>
            A new <see cref="T:DigitalRune.Graphics.LensFlareElement"/> that is a clone (deep copy) of the current instance.
            </returns>
            <remarks>
            <strong>Notes to Inheritors:</strong> The method <see cref="M:DigitalRune.Graphics.LensFlareElement.Clone"/> calls 
            <see cref="M:DigitalRune.Graphics.LensFlareElement.CreateInstanceCore"/> which is responsible for creating a new instance of the 
            <see cref="T:DigitalRune.Graphics.LensFlareElement"/> derived class and <see cref="M:DigitalRune.Graphics.LensFlareElement.CloneCore(DigitalRune.Graphics.LensFlareElement)"/> to create a copy of the 
            current instance. Classes that derive from <see cref="T:DigitalRune.Graphics.LensFlareElement"/> need to implement 
            <see cref="M:DigitalRune.Graphics.LensFlareElement.CreateInstanceCore"/> and <see cref="M:DigitalRune.Graphics.LensFlareElement.CloneCore(DigitalRune.Graphics.LensFlareElement)"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.LensFlareElement.CreateInstance">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.LensFlareElement"/> class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            This is a private method, and the actual object-specific implementations for the behavior 
            are dependent on the override implementation of the <see cref="M:DigitalRune.Graphics.LensFlareElement.CreateInstanceCore"/> method,
            which this method calls internally. 
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cannot clone <see cref="T:DigitalRune.Graphics.LensFlareElement"/>. A derived class does not implement 
            <see cref="M:DigitalRune.Graphics.LensFlareElement.CreateInstanceCore"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.LensFlareElement.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.LensFlareElement"/> derived class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            <para>
            Do not call this method directly (except when calling base in an implementation). This 
            method is called internally by the <see cref="M:DigitalRune.Graphics.LensFlareElement.Clone"/> method whenever a new instance of the
            <see cref="T:DigitalRune.Graphics.LensFlareElement"/> is created. 
            </para>
            <para>
            <strong>Notes to Inheritors:</strong> Every <see cref="T:DigitalRune.Graphics.LensFlareElement"/> derived class 
            must implement this method. A typical implementation is to simply call the default 
            constructor and return the result. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.LensFlareElement.CloneCore(DigitalRune.Graphics.LensFlareElement)">
            <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.LensFlareElement"/>.
            </summary>
            <param name="source">The object to clone.</param>
            <remarks>
            <strong>Notes to Inheritors:</strong> Every <see cref="T:DigitalRune.Graphics.LensFlareElement"/> derived class 
            must implement this method. A typical implementation is to call <c>base.CloneCore(this)</c> 
            to copy all properties of the base class and then copy all properties of the derived class.
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.LensFlareElementCollection">
            <summary>
            Manages a collection of lens flare elements.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.LensFlareElementCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:DigitalRune.Graphics.LensFlareElementCollection"/>. 
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> for <see cref="T:DigitalRune.Graphics.LensFlareElementCollection"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Graphics.AmbientLight">
            <summary>
            Represents an ambient light (indirect light).
            </summary>
            <remarks>
            <para>
            The ambient light represents indirect light in a scene. Indirect light has no origin, 
            direction or range, it has only color and intensity.
            </para>
            <para>
            <see cref="P:DigitalRune.Graphics.AmbientLight.Color"/>, <see cref="P:DigitalRune.Graphics.AmbientLight.Intensity"/>, and <see cref="P:DigitalRune.Graphics.AmbientLight.HdrScale"/> are multiplied to get
            the final light intensity which can be used in the lighting equations. 
            </para>
            <para>
            When using a low dynamic range lighting (LDR lighting) the ambient light intensity is 
            <i>L<sub>ambient</sub></i> = <i>Color<sub>RGB</sub></i> · <i>Intensity</i>
            </para>
            <para>
            When using a high dynamic range lighting (HDR lighting) the ambient light intensity is 
            <i>L<sub>ambient</sub></i> = <i>Color<sub>RGB</sub></i> · <i>Intensity</i> · <i>HdrScale</i>
            </para>
            <para>
            Hemispheric Lighting: If <see cref="P:DigitalRune.Graphics.AmbientLight.HemisphericAttenuation"/> is greater than 0, then the 
            <see cref="T:DigitalRune.Graphics.AmbientLight"/> acts as a hemispheric light with an up direction of (0, 1, 0) - see
            <see cref="F:DigitalRune.Mathematics.Algebra.Vector3F.Up"/>. (A <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/> needs to be created to orient a 
            light within a 3D scene.) A hemispheric light uses the normal vector of the lit surface to 
            attenuate the light intensity. See <see cref="P:DigitalRune.Graphics.AmbientLight.HemisphericAttenuation"/> for more information.
            </para>
            <para>
            The default <see cref="P:DigitalRune.Graphics.AmbientLight.Shape"/> of an ambient light is an <see cref="T:DigitalRune.Geometry.Shapes.InfiniteShape"/> which 
            covers the whole game world. It is allowed to set a different shape to create a local light.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.AmbientLight.Shape">
            <summary>
            Gets or sets the shape of the light volume.
            </summary>
            <value>
            A <see cref="T:DigitalRune.Geometry.Shapes.Shape"/> that describes the light volume (the area that is hit 
            by the light).
            </value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
            <inheritdoc cref="P:DigitalRune.Graphics.Light.Shape"/>
        </member>
        <member name="P:DigitalRune.Graphics.AmbientLight.Color">
            <summary>
            Gets or sets the RGB color of the light.
            </summary>
            <value>The RGB color of the light. The default value is (1, 1, 1).</value>
            <remarks>
            This property defines only the color of the light source - not its intensity. 
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.AmbientLight.Intensity">
            <summary>
            Gets or sets the intensity of the light.
            </summary>
            <value>The intensity of the light. The default value is 1.</value>
            <remarks>
            <see cref="P:DigitalRune.Graphics.AmbientLight.Color"/> and <see cref="P:DigitalRune.Graphics.AmbientLight.Intensity"/> are separate properties so the values can be 
            adjusted independently.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.AmbientLight.HdrScale">
            <summary>
            Gets or sets the HDR scale of the light.
            </summary>
            <value>The HDR scale of the light. The default value is 1.</value>
            <remarks>
            The <see cref="P:DigitalRune.Graphics.AmbientLight.HdrScale"/> is an additional intensity factor. The factor is applied to the 
            <see cref="P:DigitalRune.Graphics.AmbientLight.Color"/> and <see cref="P:DigitalRune.Graphics.AmbientLight.Intensity"/> when high dynamic range lighting (HDR 
            lighting) is enabled.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.AmbientLight.HemisphericAttenuation">
            <summary>
            Gets or sets the hemispheric attenuation factor.
            </summary>
            <value>
            The hemispheric attenuation factor in the range [0, 1]. The default value is 0.7f.
            </value>
            <remarks>
            <para>
            Normal ambient lighting does not depend on the direction of the normal vector of the lit
            surface. Hemispheric lighting depends on the normal vector and the up vector of the light: 
            A lit surface point is brightest if the normal points is parallel to the up vector, and it 
            is darkest if the normal is orthogonal to the light's up vector or pointing in the down 
            direction. 
            </para>
            If <see cref="P:DigitalRune.Graphics.AmbientLight.HemisphericAttenuation"/> is 0, this light is ambient light without 
            hemispheric attenuation. If <see cref="P:DigitalRune.Graphics.AmbientLight.HemisphericAttenuation"/> is 1, this light is a 
            hemispheric light. Usually, <see cref="P:DigitalRune.Graphics.AmbientLight.HemisphericAttenuation"/> is set to a value 
            in between. For example, if it is set to 0.7, then every surface point is lit with at least 
            30% intensity and only surface points with up point normals are lit with 100% intensity.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.AmbientLight.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.AmbientLight"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.AmbientLight.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.AmbientLight.CloneCore(DigitalRune.Graphics.Light)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.AmbientLight.GetIntensity(System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.DirectionalLight">
            <summary>
            Represents a directional light.
            </summary>
            <remarks>
            <para>
            Directional lights have color, intensity, and direction - but no position or range. They emit
            light in the form of parallel rays. Directional lights can be used to model light sources 
            which are positioned at infinite distance, such as the sun. 
            </para>
            <para>
            The <see cref="T:DigitalRune.Graphics.DirectionalLight"/> object defines the light properties of a directional light
            that shines in forward direction (0, 0, -1) - see <see cref="F:DigitalRune.Mathematics.Algebra.Vector3F.Forward"/>. A 
            <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/> needs to be created to orient a light within a 3D scene.
            </para>
            <para>
            <see cref="P:DigitalRune.Graphics.DirectionalLight.Color"/>, <see cref="P:DigitalRune.Graphics.DirectionalLight.DiffuseIntensity"/>/<see cref="P:DigitalRune.Graphics.DirectionalLight.SpecularIntensity"/>, and
            <see cref="P:DigitalRune.Graphics.DirectionalLight.HdrScale"/> are multiplied to get the final diffuse and specular light intensities 
            which can be used in the lighting equations. 
            </para>
            <para>
            When using a low dynamic range lighting (LDR lighting) the light intensities are
            <list type="bullet">
            <item>
            <description>
            Diffuse light intensity <i>L<sub>diffuse</sub></i> = 
            <i>Color<sub>RGB</sub></i> · <i>DiffuseIntensity</i>
            </description>
            </item>
            <item>
            <description>
            Specular light intensity <i>L<sub>specular</sub></i> = 
            <i>Color<sub>RGB</sub></i> · <i>SpecularIntensity</i>
            </description>
            </item>
            </list>
            </para>
            <para>
            When using a high dynamic range lighting (HDR lighting) the light intensities are
            <list type="bullet">
            <item>
            <description>
            Diffuse light intensity <i>L<sub>diffuse</sub></i> = 
            <i>Color<sub>RGB</sub></i> · <i>DiffuseIntensity</i> · <i>HdrScale</i>
            </description>
            </item>
            <item>
            <description>
            Specular light intensity <i>L<sub>specular</sub></i> = 
            <i>Color<sub>RGB</sub></i> · <i>SpecularIntensity</i> · <i>HdrScale</i>
            </description>
            </item>
            </list>
            </para>
            <para>
            A pure diffuse light can be created by setting <see cref="P:DigitalRune.Graphics.DirectionalLight.DiffuseIntensity"/> &gt; 0 and 
            <see cref="P:DigitalRune.Graphics.DirectionalLight.SpecularIntensity"/> = 0. A pure specular light can be created by setting
            <see cref="P:DigitalRune.Graphics.DirectionalLight.DiffuseIntensity"/> = 0 and <see cref="P:DigitalRune.Graphics.DirectionalLight.SpecularIntensity"/> &gt; 0.
            </para>
            <para>
            The default <see cref="P:DigitalRune.Graphics.DirectionalLight.Shape"/> of a directional light is an <see cref="T:DigitalRune.Geometry.Shapes.InfiniteShape"/> which
            covers the whole game world. It is allowed to set a different shape to create a local light.
            </para>
            <para>
            A 2D texture (see <see cref="P:DigitalRune.Graphics.DirectionalLight.Texture"/>) can be assigned to the directional light. By default
            no texture is assigned. If a texture is set, the directional light projects the texture
            onto the lit surroundings (using texture wrapping to get an "infinite" texture).
            <see cref="P:DigitalRune.Graphics.DirectionalLight.TextureOffset"/> and <see cref="P:DigitalRune.Graphics.DirectionalLight.TextureScale"/> can be used to change how the
            texture is projected.
            </para>
            <para>
            <strong>Cloning:</strong> When the <see cref="T:DigitalRune.Graphics.DirectionalLight"/> is cloned the 
            <see cref="P:DigitalRune.Graphics.DirectionalLight.Texture"/> is not duplicated. The <see cref="P:DigitalRune.Graphics.DirectionalLight.Texture"/> is copied by reference.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.DirectionalLight.Shape">
            <summary>
            Gets or sets the shape of the light volume.
            </summary>
            <value>
            A <see cref="T:DigitalRune.Geometry.Shapes.Shape"/> that describes the light volume (the area that is
            hit by the light).
            </value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
            <inheritdoc cref="P:DigitalRune.Graphics.Light.Shape"/>
        </member>
        <member name="P:DigitalRune.Graphics.DirectionalLight.Color">
            <summary>
            Gets or sets the RGB color of the light.
            </summary>
            <value>The RGB color of the light. The default value is (1, 1, 1).</value>
            <remarks>
            This property defines only the color of the light source - not its intensity. 
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.DirectionalLight.DiffuseIntensity">
            <summary>
            Gets or sets the diffuse intensity of the light.
            </summary>
            <value>The diffuse intensity of the light. The default value is 1.</value>
            <remarks>
            <see cref="P:DigitalRune.Graphics.DirectionalLight.Color"/> and <see cref="P:DigitalRune.Graphics.DirectionalLight.DiffuseIntensity"/> are separate properties so the values 
            can be adjusted independently.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.DirectionalLight.SpecularIntensity">
            <summary>
            Gets or sets the specular intensity of the light.
            </summary>
            <value>The specular intensity of the light. The default value is 1.</value>
            <remarks>
            <see cref="P:DigitalRune.Graphics.DirectionalLight.Color"/> and <see cref="P:DigitalRune.Graphics.DirectionalLight.SpecularIntensity"/> are separate properties so the 
            values can be adjusted independently.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.DirectionalLight.HdrScale">
            <summary>
            Gets or sets the HDR scale of the light.
            </summary>
            <value>The HDR scale of the light. The default value is 1.</value>
            <remarks>
            The <see cref="P:DigitalRune.Graphics.DirectionalLight.HdrScale"/> is an additional intensity factor. The factor is applied to the 
            <see cref="P:DigitalRune.Graphics.DirectionalLight.Color"/> and <see cref="P:DigitalRune.Graphics.DirectionalLight.DiffuseIntensity"/>/<see cref="P:DigitalRune.Graphics.DirectionalLight.SpecularIntensity"/> when 
            high dynamic range lighting (HDR lighting) is enabled.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.DirectionalLight.Texture">
            <summary>
            Gets or sets the texture which is projected by this directional light.
            </summary>
            <value>The texture. The default value is <see langword="null"/>.</value>
        </member>
        <member name="P:DigitalRune.Graphics.DirectionalLight.TextureOffset">
            <summary>
            Gets or sets the texture offset.
            </summary>
            <value>The texture offset. The default value is (0, 0).</value>
        </member>
        <member name="P:DigitalRune.Graphics.DirectionalLight.TextureScale">
            <summary>
            Gets or sets the texture scale.
            </summary>
            <value>The texture scale. The default value is (1, 1).</value>
        </member>
        <member name="M:DigitalRune.Graphics.DirectionalLight.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.DirectionalLight"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.DirectionalLight.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.DirectionalLight.CloneCore(DigitalRune.Graphics.Light)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.DirectionalLight.GetIntensity(System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.ImageBasedLight">
            <summary>
            Represents a light which uses an environment cube map to add diffuse lighting and specular
            lighting (reflections).
            </summary>
            <remarks>
            <para>
            Image-based lighting (IBL) uses a cube map of the environment to define the lighting in a
            scene.
            </para>
            <para>
            The property <see cref="P:DigitalRune.Graphics.ImageBasedLight.Texture"/> defines the used environment map. This property must be set
            to valid cube map- otherwise, the <see cref="T:DigitalRune.Graphics.ImageBasedLight"/> is disabled. The texture can
            be a normal sRGB texture or an RGBM encoded HDR texture; see
            <see cref="P:DigitalRune.Graphics.ImageBasedLight.Encoding"/>. The cube map must contain mipmaps.
            </para>
            <para>
            When a mesh is shaded, the normal vector is used to look up a color value in the environment
            map to use for diffuse lighting. Reflection vectors are used to look up color values for
            specular lighting. This allows a mesh to reflect the environment, like a mirror. The mipmap
            levels are used to create reflections on materials with different glossiness. Materials with a
            high <see cref="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.SpecularPower"/>, like mirrors, use high
            resolution mipmap levels. Diffuse lighting and dull materials use low resolution mipmap
            levels.
            </para>
            <para>
            <see cref="T:DigitalRune.Graphics.ImageBasedLight"/>s have a <see cref="P:DigitalRune.Graphics.ImageBasedLight.Shape"/>, which can be
            <see cref="F:DigitalRune.Geometry.Shapes.Shape.Infinite"/> or a <see cref="T:DigitalRune.Geometry.Shapes.BoxShape"/>. Lights with an
            infinite shape cover the whole scene. Usually a level contains only one image-based light with
            an infinite shape. Lights with a box shape cover only the volume inside the box. This allows
            to set different image-based lights for different rooms or zones of a level.
            </para>
            A <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/> must be used to add an <see cref="T:DigitalRune.Graphics.ImageBasedLight"/> to a scene. The
            <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/> is also used to define the position and the orientation of the light.
            <para>
            The <see cref="P:DigitalRune.Graphics.ImageBasedLight.BlendMode"/> determines if the diffuse light contribution of an image-based
            light is added to the scene (additive blending, <see cref="P:DigitalRune.Graphics.ImageBasedLight.BlendMode"/> = 0) or replaces the
            ambient lighting and other image-based lights (alpha blending, <see cref="P:DigitalRune.Graphics.ImageBasedLight.BlendMode"/> = 1).
            The default is <see cref="P:DigitalRune.Graphics.ImageBasedLight.BlendMode"/> = 1, which means that an diffuse light replaces the
            ambient lighting and other image-based lights.
            </para>
            <para>
            Note: Image-based lights are usually applied after the ambient light of the scene and before
            the other lights of the scene. Image-based lights never replace other lights, like directional
            lights or point lights.
            </para>
            <para>
            The property <see cref="P:DigitalRune.Graphics.ImageBasedLight.FalloffRange"/> can be used to let an image-based light fade out to
            create smooth blending between different image-based lights or between an image-based light
            and an area which contains no image-based lights. (Only relevant for box-shaped lights.
            Infinite lights never fade out.)
            </para>
            <para>
            Image-based lights have color and intensity, which are used to tint and scale the colors of
            the environment map. The color of the <see cref="P:DigitalRune.Graphics.ImageBasedLight.Texture"/>, the <see cref="P:DigitalRune.Graphics.ImageBasedLight.Color"/>,
            <see cref="P:DigitalRune.Graphics.ImageBasedLight.DiffuseIntensity"/>/<see cref="P:DigitalRune.Graphics.ImageBasedLight.SpecularIntensity"/> and <see cref="P:DigitalRune.Graphics.ImageBasedLight.HdrScale"/> are 
            multiplied to get the final diffuse and specular light intensities which can be used in the 
            lighting equations.
            </para>
            <para>
            <strong>Diffuse only:</strong> The <see cref="P:DigitalRune.Graphics.ImageBasedLight.SpecularIntensity"/> can be set to
            <see cref="F:System.Single.NaN"/> to disable the specular light contribution. This creates a pure
            diffuse light. As mentioned above, the <see cref="P:DigitalRune.Graphics.ImageBasedLight.BlendMode"/> determines whether the diffuse
            light is added to the scene (<see cref="P:DigitalRune.Graphics.ImageBasedLight.BlendMode"/> = 0) or replaces the ambient light and
            other image-based lights (<see cref="P:DigitalRune.Graphics.ImageBasedLight.BlendMode"/> = 1).
            </para>
            <para>
            <strong>Specular only:</strong> The <see cref="P:DigitalRune.Graphics.ImageBasedLight.DiffuseIntensity"/> can be set to
            <see cref="F:System.Single.NaN"/> to disable the diffuse light contribution. This creates a pure
            specular light, which can be used for reflections only.
            </para>
            <para><strong>Localized reflections:</strong>Usually, environment maps are treated as if the
            scene in the environment map is infinitely far away. If an image-based light is used to create
            reflection of a box-shaped room, the reflections will not properly align with the walls of the
            room. To correct the reflections, <see cref="P:DigitalRune.Graphics.ImageBasedLight.EnableLocalizedReflection"/> can be set to
            <see langword="true"/>. In this case the reflections are computed to fit a given box. This box
            is either equal to the <see cref="T:DigitalRune.Geometry.Shapes.BoxShape"/> of the light (property <see cref="P:DigitalRune.Graphics.ImageBasedLight.Shape"/>) or
            to an axis-aligned box defined by <see cref="P:DigitalRune.Graphics.ImageBasedLight.LocalizedReflectionBox"/>. The box is always
            aligned with the local space of the <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/>.
            </para>
            <para>
            <strong>Cloning:</strong>When the <see cref="T:DigitalRune.Graphics.ImageBasedLight"/> is cloned the 
            <see cref="P:DigitalRune.Graphics.ImageBasedLight.Encoding"/> and the <see cref="P:DigitalRune.Graphics.ImageBasedLight.Texture"/> are not duplicated. These properties are
            copied by reference.
            </para>
            <para><strong>Usage tips:</strong>
            <list type="bullet">
            <item>
            If you only want to add environment map reflections to a game level, add one infinite
            image-based light with diffuse intensity set to <see cref="F:System.Single.NaN"/>. This way the light
            only adds reflections and does not influence the ambient light of the scene.
            </item>
            <item>
            Image-based lights with a diffuse intensity can be used to replace ambient lighting. Ambient
            lighting is usually very "flat", e.g. an ambient light adds only one color. An image-based
            light can create more interesting ambient lighting. For example, if the environment map
            contains the blue sky and a brown ground, then objects lit by the image-based light will be
            blue on top and brown at the bottom.
            </item>
            <item>
            Image-based lights can also be used to add "light bounces". For example, if the environment
            map contains a yellow wall, objects near the yellow wall will receive a yellow "bounce light".
            </item>
            <item>
            Environment maps defined by image-based lights can be used in effects using the environment
            map semantics, see e.g. <see cref="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.EnvironmentMap"/>.
            </item>
            <item>
            To get proper reflections in rooms, create one image-based light per room. Set
            <see cref="P:DigitalRune.Graphics.ImageBasedLight.EnableLocalizedReflection"/> to <see langword="true"/>. Set an AABB in
            <see cref="P:DigitalRune.Graphics.ImageBasedLight.LocalizedReflectionBox"/> which is aligned with the floor, ceiling and walls of the
            room. <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/>s can be rotated to align with rooms which are not axis-aligned
            with the world space.
            </item>
            <item>
            It is recommended to position the image-based lights at the eye-level of the player and to
            capture the environment maps from this position.
            </item>
            <item>
            If you want to smoothly fade out an image-based light over time, you can fade the
            <see cref="P:DigitalRune.Graphics.ImageBasedLight.BlendMode"/> from 1 (alpha-blend) to 0 (additive), and at the same time fade the
            <see cref="P:DigitalRune.Graphics.ImageBasedLight.DiffuseIntensity"/> and <see cref="P:DigitalRune.Graphics.ImageBasedLight.SpecularIntensity"/> to 0. This creates a smooth
            change in lighting.
            </item>
            </list>
            </para> 
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.ImageBasedLight.Color">
            <summary>
            Gets or sets the RGB color of the light.
            </summary>
            <value>The RGB color of the light. The default value is (1, 1, 1).</value>
            <remarks>
            This property defines only the color of the light source - not its intensity.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.ImageBasedLight.DiffuseIntensity">
            <summary>
            Gets or sets the diffuse intensity of the light.
            </summary>
            <value>The diffuse intensity of the light. The default value is 1.</value>
            <remarks>
            <para>
            Setting the diffuse intensity to <see cref="F:System.Single.NaN"/> has a special meaning and is used
            to disable the diffuse contribution of this light. That means, if the intensity is
            <see cref="F:System.Single.NaN"/>, the <see cref="T:DigitalRune.Graphics.ImageBasedLight"/> does not influence the diffuse
            light buffer of the scene.
            </para>
            <para>
            <see cref="P:DigitalRune.Graphics.ImageBasedLight.Color"/> and <see cref="P:DigitalRune.Graphics.ImageBasedLight.DiffuseIntensity"/> are separate properties so the values
            can be adjusted independently.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.ImageBasedLight.SpecularIntensity">
            <summary>
            Gets or sets the specular intensity of the light.
            </summary>
            <value>The specular intensity of the light. The default value is 1.</value>
            <remarks>
            <para>
            Setting the specular intensity to <see cref="F:System.Single.NaN"/> has a special meaning and is used
            to disable the specular contribution of this light. That means, if the intensity is
            <see cref="F:System.Single.NaN"/>, the <see cref="T:DigitalRune.Graphics.ImageBasedLight"/> does not influence the specular
            light buffer of the scene.
            </para>
            <para>
            <see cref="P:DigitalRune.Graphics.ImageBasedLight.Color"/> and <see cref="P:DigitalRune.Graphics.ImageBasedLight.SpecularIntensity"/> are separate properties so the
            values can be adjusted independently.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.ImageBasedLight.HdrScale">
            <summary>
            Gets or sets the HDR scale of the light.
            </summary>
            <value>The HDR scale of the light. The default value is 1.</value>
            <remarks>
            The <see cref="P:DigitalRune.Graphics.ImageBasedLight.HdrScale"/> is an additional intensity factor. The factor is applied to the
            <see cref="P:DigitalRune.Graphics.ImageBasedLight.Color"/> and <see cref="P:DigitalRune.Graphics.ImageBasedLight.DiffuseIntensity"/>/<see cref="P:DigitalRune.Graphics.ImageBasedLight.SpecularIntensity"/> when
            high dynamic range lighting (HDR lighting) is enabled.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.ImageBasedLight.Shape">
            <summary>
            Gets or sets the bounding shape of the light volume.
            </summary>
            <value>
            A <see cref="T:DigitalRune.Geometry.Shapes.Shape" /> that describes the light volume (the area that is hit
            by the light). The shape type must be <see cref="T:DigitalRune.Geometry.Shapes.InfiniteShape"/> or <see cref="T:DigitalRune.Geometry.Shapes.BoxShape"/>.
            Other shapes are not allowed. The default value is
            <see cref="F:DigitalRune.Geometry.Shapes.Shape.Infinite"/>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            <see cref="P:DigitalRune.Graphics.ImageBasedLight.Shape"/> must not be <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <see cref="P:DigitalRune.Graphics.ImageBasedLight.Shape"/> type must be <see cref="T:DigitalRune.Geometry.Shapes.InfiniteShape"/> or <see cref="T:DigitalRune.Geometry.Shapes.BoxShape"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.ImageBasedLight.Texture">
            <summary>
            Gets or sets the cube map texture.
            </summary>
            <value>
            The cube map texture. The default value is <see langword="null"/>, which means the
            <see cref="T:DigitalRune.Graphics.ImageBasedLight"/> is disabled.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.ImageBasedLight.Encoding">
            <summary>
            Gets or sets the color encoding used by the cube map texture.
            </summary>
            <value>
            The color encoding used by the <see cref="P:DigitalRune.Graphics.ImageBasedLight.Texture"/>. The default value is
            <see cref="F:DigitalRune.Graphics.ColorEncoding.SRgb"/>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.ImageBasedLight.BlendMode">
            <summary>
            Gets or sets the blend mode for the diffuse light contribution.
            </summary>
            <value>
            The blend mode of the image-based light: 0 = additive blending, 1 = alpha blending.
            Intermediate values between 0 and 1 are allowed. The default value is 1 (alpha blending).
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative or greater than 1.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.ImageBasedLight.FalloffRange">
            <summary>
            Gets or sets the relative distance over which light effect falls off.
            </summary>
            <value>
            The relative distance over which the light is falls off. The value is in the range [0, 1].
            The default is 0.1 (= 10 %).
            </value>
            <remarks>
            <para>
            This value is only used for <see cref="T:DigitalRune.Graphics.ImageBasedLight"/> where the <see cref="P:DigitalRune.Graphics.ImageBasedLight.Shape"/> is a
            <see cref="T:DigitalRune.Geometry.Shapes.BoxShape"/>. If this value is 0, the whole box is lit. If this value is 1, the
            light has full effect in the center and has no effect at the sides of the box. If the value
            is between 0 and 1, the falloff affects only the outer border; e.g if the 
            <see cref="P:DigitalRune.Graphics.ImageBasedLight.FalloffRange"/> is 0.1, the falloff happens only in the outer 10% of the box.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.ImageBasedLight.EnableLocalizedReflection">
            <summary>
            Gets or sets a value indicating whether the cube map reflection is localized.
            </summary>
            <value>
            <see langword="true" /> if the reflection is localized; otherwise, <see langword="false" />.
            The default value is <see langword="false"/>.
            </value>
            <remarks>
            <para>
            If <see cref="P:DigitalRune.Graphics.ImageBasedLight.EnableLocalizedReflection"/> is <see langword="false"/>, the cube map is
            treated as if the content of the cube map is infinitely far away. If
            <see cref="P:DigitalRune.Graphics.ImageBasedLight.EnableLocalizedReflection"/> is <see langword="true"/>, the cube map is treated
            as if the content was captured from a finite box around the light.
            </para>
            <para>
            The projection box used to localize reflection is defined using
            <see cref="P:DigitalRune.Graphics.ImageBasedLight.LocalizedReflectionBox"/>. (The <see cref="P:DigitalRune.Graphics.ImageBasedLight.LocalizedReflectionBox"/> can be
            <see langword="null"/>. In this case the <see cref="P:DigitalRune.Graphics.ImageBasedLight.Shape"/> is used to localize the
            reflections.)
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.ImageBasedLight.LocalizedReflectionBox">
            <summary>
            Gets or sets the axis-aligned bounding box used to localize the cube map reflection when 
            <see cref="P:DigitalRune.Graphics.ImageBasedLight.EnableLocalizedReflection"/> is set.
            </summary>
            <value>
            The axis-aligned bounding box used to localize the cube map reflection. This value can be
            <see langword="null"/> in which case the <see cref="P:DigitalRune.Graphics.ImageBasedLight.Shape"/> is used to localize the
            reflection. The default value is <see langword="null"/>.
            </value>
            <remarks>
            This property is only used if the <see cref="P:DigitalRune.Graphics.ImageBasedLight.EnableLocalizedReflection"/> is 
            <see langword="true"/>. The axis-aligned bounding box is defined in the local space of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/>. The box can be scaled and rotated using the
            <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/> 's <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.ScaleLocal"/> and
            <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.PoseLocal"/> properties.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.ImageBasedLight.#ctor(Microsoft.Xna.Framework.Graphics.TextureCube)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.ImageBasedLight"/> class.
            </summary>
            <param name="texture">The cube map texture.</param>
        </member>
        <member name="M:DigitalRune.Graphics.ImageBasedLight.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.ImageBasedLight"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.ImageBasedLight.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.ImageBasedLight.CloneCore(DigitalRune.Graphics.Light)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.ImageBasedLight.GetIntensity(System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Light">
            <summary>
            Defines the properties of a light source.
            </summary>
            <remarks>
            <para>
            <see cref="T:DigitalRune.Graphics.Light"/> is the base class for all light sources: see <see cref="T:DigitalRune.Graphics.AmbientLight"/>,
            <see cref="T:DigitalRune.Graphics.DirectionalLight"/>, <see cref="T:DigitalRune.Graphics.PointLight"/>, <see cref="T:DigitalRune.Graphics.Spotlight"/>, and
            <see cref="T:DigitalRune.Graphics.ProjectorLight"/>. A <see cref="T:DigitalRune.Graphics.Light"/> defines the properties of a light source,
            like color, intensity, extent, etc. However, it does not define the position of a light 
            source, or its direction. Position and orientation are defined by creating a 
            <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/> and adding it to a <see cref="T:DigitalRune.Graphics.SceneGraph.IScene"/>. Multiple 
            <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/>s can share the same <see cref="T:DigitalRune.Graphics.Light"/> object.
            </para>
            <para>
            Each light has a <see cref="P:DigitalRune.Graphics.Light.Shape"/> - a 3D shape that defines the space that is lit by the 
            light source. See <see cref="P:DigitalRune.Graphics.Light.Shape"/> for more information.
            </para>
            <para>
            <strong>Cloning:</strong><br/>
            <see cref="T:DigitalRune.Graphics.Light"/>s are cloneable. <see cref="M:DigitalRune.Graphics.Light.Clone"/> creates a deep copy of the current 
            light source - unless documented otherwise (see derived classes). Most properties including 
            the <see cref="P:DigitalRune.Graphics.Light.Shape"/> are duplicated.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Light.Name">
            <summary>
            Gets or sets the name of the light.
            </summary>
            <value>The name of the light.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Light.Shape">
            <summary>
            Gets (or sets) the shape of the light volume.
            </summary>
            <value>
            A <see cref="T:DigitalRune.Geometry.Shapes.Shape"/> that describes the light volume (the area that is hit 
            by the light).
            </value>
            <remarks>
            <para>
            The <see cref="P:DigitalRune.Graphics.Light.Shape"/> defines the space that is lit by the light source. The shape depends
            on the type of light (see derived classes). For example, the light volume of a 
            <see cref="T:DigitalRune.Graphics.PointLight"/> is a <see cref="T:DigitalRune.Geometry.Shapes.SphereShape"/> where the radius of the sphere 
            matches the range of the light. The light volume is used by the <see cref="T:DigitalRune.Graphics.SceneGraph.Scene"/> to 
            determine which objects are lit by a certain light source. 
            </para>
            <para>
            This shape is used for culling using bounding shapes. It is not used to clip the lit area: 
            If the bounding shape of a mesh touches this shape, then the whole mesh is lit - not only
            the overlapping part! The <see cref="P:DigitalRune.Graphics.SceneGraph.LightNode.Clip"/> property of a <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/>
            can be used to define a clipping volume.
            </para>
            <para>
            Some light classes may allow to change the shape. But the shape should not be replaced while
            the <see cref="T:DigitalRune.Graphics.Light"/> is in use, i.e. referenced by a 
            <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/>. For example, if the bounding shape is a <see cref="T:DigitalRune.Geometry.Shapes.SphereShape"/>,
            the radius of the sphere can be changed at any time. But it is not allowed to replace the 
            <see cref="T:DigitalRune.Geometry.Shapes.SphereShape"/> with a <see cref="T:DigitalRune.Geometry.Shapes.BoxShape"/> as long as the light is used in a
            scene. Replacing the bounding shape will not raise any exceptions, but the light node may
            not use the new shape, hence it may not be rendered as desired.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Light.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Light"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Light.Clone">
            <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.Light"/> that is a clone (deep copy) of the current instance.
            </summary>
            <returns>
            A new <see cref="T:DigitalRune.Graphics.Light"/> that is a clone (deep copy) of the current instance.
            </returns>
            <remarks>
            <para>
            See class documentation of <see cref="T:DigitalRune.Graphics.Light"/> (Section "Cloning") for more information 
            about cloning.
            </para>
            <para>
            <strong>Notes to Inheritors:</strong> The method <see cref="M:DigitalRune.Graphics.Light.Clone"/> calls 
            <see cref="M:DigitalRune.Graphics.Light.CreateInstanceCore"/> which is responsible for creating a new instance of the 
            <see cref="T:DigitalRune.Graphics.Light"/> derived class and <see cref="M:DigitalRune.Graphics.Light.CloneCore(DigitalRune.Graphics.Light)"/> to create a copy of the 
            current instance. Classes that derive from <see cref="T:DigitalRune.Graphics.Light"/> need to implement 
            <see cref="M:DigitalRune.Graphics.Light.CreateInstanceCore"/> and <see cref="M:DigitalRune.Graphics.Light.CloneCore(DigitalRune.Graphics.Light)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Light.CreateInstance">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Light"/> class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            This is a private method, and the actual object-specific implementations for the behavior 
            are dependent on the override implementation of the <see cref="T:DigitalRune.Graphics.Light"/> method, which this 
            method calls internally. 
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cannot clone <see cref="T:DigitalRune.Graphics.Light"/>. A derived class does not implement 
            <see cref="M:DigitalRune.Graphics.Light.CreateInstanceCore"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Light.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Light"/> derived class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            <para>
            Do not call this method directly (except when calling base in an implementation). This 
            method is called internally by the <see cref="M:DigitalRune.Graphics.Light.Clone"/> method whenever a new instance of the
            <see cref="T:DigitalRune.Graphics.Light"/> derived class must implement this method. A typical implementation is to
            simply call the default constructor and return the result. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Light.CloneCore(DigitalRune.Graphics.Light)">
            <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Light"/>.
            </summary>
            <param name="source">The object to clone.</param>
            <remarks>
            <para>
            <strong>Notes to Inheritors:</strong> Every <see cref="T:DigitalRune.Graphics.Light"/> derived class must implement
            this method. A typical implementation is to call <c>base.CloneCore(this)</c> to copy all 
            properties of the base class and then copy all properties of the derived class.
            </para>
            <para>
            Note that the base class <see cref="T:DigitalRune.Graphics.Light"/> does not copy or clone the <see cref="P:DigitalRune.Graphics.Light.Shape"/>
            property. The derived class needs to take care of the <see cref="P:DigitalRune.Graphics.Light.Shape"/> property.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Light.GetIntensity(System.Single)">
            <summary>
            Gets the (approximated) light intensity at the given distance.
            </summary>
            <param name="distance">The distance from the light.</param>
            <returns>
            A value representing the (red, green and blue) light intensity at the specified distance. 
            </returns>
        </member>
        <member name="T:DigitalRune.Graphics.PointLight">
            <summary>
            Represents a point light.
            </summary>
            <remarks>
            <para>
            Point lights have color, intensity, position and range - but no direction. Point lights give 
            off light equally in all directions. The <see cref="T:DigitalRune.Graphics.PointLight"/> object defines the light 
            properties of a point light that is positioned at the origin (0, 0, 0). A 
            <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/> needs to be created to position a light within a 3D scene.
            </para>
            <para>
            <see cref="P:DigitalRune.Graphics.PointLight.Color"/>, <see cref="P:DigitalRune.Graphics.PointLight.DiffuseIntensity"/>/<see cref="P:DigitalRune.Graphics.PointLight.SpecularIntensity"/>, 
            <see cref="P:DigitalRune.Graphics.PointLight.HdrScale"/>, and a light distance attenuation factor are multiplied to get the 
            final diffuse and specular light intensities which can be used in the lighting equations. 
            </para>
            <para>
            When using a low dynamic range lighting (LDR lighting) the light intensities are
            <list type="bullet">
            <item>
            <description>
            Diffuse light intensity <i>L<sub>diffuse</sub></i> = 
            <i>Color<sub>RGB</sub></i> · <i>DiffuseIntensity</i>
            </description>
            </item>
            <item>
            <description>
            Specular light intensity <i>L<sub>specular</sub></i> = 
            <i>Color<sub>RGB</sub></i> · <i>SpecularIntensity</i>
            </description>
            </item>
            </list>
            </para>
            <para>
            When using a high dynamic range lighting (HDR lighting) the light intensities are
            <list type="bullet">
            <item>
            <description>
            Diffuse light intensity <i>L<sub>diffuse</sub></i> = 
            <i>Color<sub>RGB</sub></i> · <i>DiffuseIntensity</i> · <i>HdrScale</i>
            </description>
            </item>
            <item>
            <description>
            Specular light intensity <i>L<sub>specular</sub></i> = 
            <i>Color<sub>RGB</sub></i> · <i>SpecularIntensity</i> · <i>HdrScale</i>
            </description>
            </item>
            </list>
            </para>
            <para>
            A pure diffuse light can be created by setting <see cref="P:DigitalRune.Graphics.PointLight.DiffuseIntensity"/> &gt; 0 and 
            <see cref="P:DigitalRune.Graphics.PointLight.SpecularIntensity"/> = 0. A pure specular light can be created by setting
            <see cref="P:DigitalRune.Graphics.PointLight.DiffuseIntensity"/> = 0 and <see cref="P:DigitalRune.Graphics.PointLight.SpecularIntensity"/> &gt; 0.
            </para>
            <para>
            The <see cref="T:DigitalRune.Geometry.Shapes.Shape"/> of a point light is a <see cref="T:DigitalRune.Geometry.Shapes.SphereShape"/> with a radius
            equal to <see cref="P:DigitalRune.Graphics.PointLight.Range"/>.
            </para>
            <para>
            A cube map texture (see <see cref="P:DigitalRune.Graphics.PointLight.Texture"/>) can be assigned to the point light. By default
            no texture is assigned. If a texture is set, the point light projects this texture on its
            surroundings (like a disco ball). 
            </para>
            <para>
            <strong>Cloning:</strong> When the <see cref="T:DigitalRune.Graphics.PointLight"/> is cloned the 
            <see cref="P:DigitalRune.Graphics.PointLight.Texture"/> is not duplicated. The <see cref="P:DigitalRune.Graphics.PointLight.Texture"/> is copied by reference.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PointLight.Color">
            <summary>
            Gets or sets the RGB color of the light.
            </summary>
            <value>The RGB color of the light. The default value is (1, 1, 1).</value>
            <remarks>
            This property defines only the color of the light source - not its intensity. 
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PointLight.DiffuseIntensity">
            <summary>
            Gets or sets the diffuse intensity of the light.
            </summary>
            <value>The diffuse intensity of the light. The default value is 1.</value>
            <remarks>
            <see cref="P:DigitalRune.Graphics.PointLight.Color"/> and <see cref="P:DigitalRune.Graphics.PointLight.DiffuseIntensity"/> are separate properties so the values 
            can be adjusted independently.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PointLight.SpecularIntensity">
            <summary>
            Gets or sets the specular intensity of the light.
            </summary>
            <value>The specular intensity of the light. The default value is 1.</value>
            <remarks>
            <see cref="P:DigitalRune.Graphics.PointLight.Color"/> and <see cref="P:DigitalRune.Graphics.PointLight.SpecularIntensity"/> are separate properties so the 
            values can be adjusted independently.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PointLight.HdrScale">
            <summary>
            Gets or sets the HDR scale of the light.
            </summary>
            <value>The HDR scale of the light. The default value is 1.</value>
            <remarks>
            The <see cref="P:DigitalRune.Graphics.PointLight.HdrScale"/> is an additional intensity factor. The factor is applied to the 
            <see cref="P:DigitalRune.Graphics.PointLight.Color"/> and <see cref="P:DigitalRune.Graphics.PointLight.DiffuseIntensity"/>/<see cref="P:DigitalRune.Graphics.PointLight.SpecularIntensity"/> when 
            high dynamic range lighting (HDR lighting) is enabled.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PointLight.Range">
            <summary>
            Gets or sets the range of the light.
            </summary>
            <value>The range the light. The default value is 2.</value>
            <remarks>
            The intensity of the light continually decreases from the origin up to range. At a distance 
            of range the light intensity is 0. <see cref="P:DigitalRune.Graphics.PointLight.Attenuation"/> the shape of the attenuation 
            curve. See also <see cref="M:DigitalRune.Graphics.GraphicsHelper.GetDistanceAttenuation(System.Single,System.Single,System.Single)"/>.
            </remarks>
            <exception cref="T:System.ArgumentException">
            The range of point light cannot be negative.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.PointLight.Attenuation">
            <summary>
            Gets or sets the exponent for the distance attenuation.
            </summary>
            <value>The exponent for the distance attenuation. The default value is 2.</value>
            <remarks>
            This exponent defines the shape of the distance attenuation curve. See also
            <see cref="M:DigitalRune.Graphics.GraphicsHelper.GetDistanceAttenuation(System.Single,System.Single,System.Single)"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PointLight.Texture">
            <summary>
            Gets or sets the cube map texture which is projected by this point light.
            </summary>
            <value>The cube map texture. The default value is <see langword="null"/>.</value>
        </member>
        <member name="M:DigitalRune.Graphics.PointLight.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PointLight"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.PointLight.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.PointLight.CloneCore(DigitalRune.Graphics.Light)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.PointLight.GetIntensity(System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.ProjectorLight">
            <summary>
            Represents a light that projects a texture.
            </summary>
            <remarks>
            <para>
            A projector light is similar to a <see cref="T:DigitalRune.Graphics.Spotlight"/>, but is usually used to project a 
            texture. The light emitted is shaped like a view frustum and not like a cone. And the light 
            does not have the typical "spotlight falloff". 
            </para>
            <para>
            A <see cref="P:DigitalRune.Graphics.ProjectorLight.Projection"/> defines the shape of the light. Usually, a 
            <see cref="T:DigitalRune.Graphics.PerspectiveProjection"/> is used, but it is also possible to use a 
            <see cref="T:DigitalRune.Graphics.OrthographicProjection"/>.
            </para>
            <para>
            Projector lights have color, intensity, position, direction and range. The 
            <see cref="T:DigitalRune.Graphics.ProjectorLight"/> object defines the light properties of a projector light 
            positioned at the origin (0, 0, 0) that shines in forward direction (0, 0, -1) - see 
            <see cref="F:DigitalRune.Mathematics.Algebra.Vector3F.Forward"/>. A <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/> needs to be created to position and 
            orient a projector light within a 3D scene.
            </para>
            <para>
            <see cref="P:DigitalRune.Graphics.ProjectorLight.Color"/>, <see cref="P:DigitalRune.Graphics.ProjectorLight.DiffuseIntensity"/>/<see cref="P:DigitalRune.Graphics.ProjectorLight.SpecularIntensity"/>, 
            <see cref="P:DigitalRune.Graphics.ProjectorLight.HdrScale"/>, and the light distance attenuation factor (see 
            <see cref="M:DigitalRune.Graphics.GraphicsHelper.GetDistanceAttenuation(System.Single,System.Single,System.Single)"/>) are multiplied to get the final diffuse 
            and specular light intensities which can be used in the lighting equations. 
            </para>
            <para>
            When using a low dynamic range lighting (LDR lighting) the light intensities are
            <list type="bullet">
            <item>
            <description>
            Diffuse light intensity <i>L<sub>diffuse</sub></i> = 
            <i>Color<sub>RGB</sub></i> · <i>DiffuseIntensity</i>
            </description>
            </item>
            <item>
            <description>
            Specular light intensity <i>L<sub>specular</sub></i> = 
            <i>Color<sub>RGB</sub></i> · <i>SpecularIntensity</i>
            </description>
            </item>
            </list>
            </para>
            <para>
            When using a high dynamic range lighting (HDR lighting) the light intensities are
            <list type="bullet">
            <item>
            <description>
            Diffuse light intensity <i>L<sub>diffuse</sub></i> = 
            <i>Color<sub>RGB</sub></i> · <i>DiffuseIntensity</i> · <i>HdrScale</i>
            </description>
            </item>
            <item>
            <description>
            Specular light intensity <i>L<sub>specular</sub></i> = 
            <i>Color<sub>RGB</sub></i> · <i>SpecularIntensity</i> · <i>HdrScale</i>
            </description>
            </item>
            </list>
            </para>
            <para>
            A 2D texture (see <see cref="P:DigitalRune.Graphics.ProjectorLight.Texture"/>) must be assigned to the projector light. If a 
            texture is set, the light intensity is modulated with the texture to project the texture 
            onto the lit surroundings. By default no texture is assigned. If no texture is set, the
            projector light does not emit any light.
            </para>
            <para>
            <strong>Cloning:</strong> When the <see cref="T:DigitalRune.Graphics.ProjectorLight"/> is cloned the 
            <see cref="P:DigitalRune.Graphics.ProjectorLight.Texture"/> is not duplicated. The <see cref="P:DigitalRune.Graphics.ProjectorLight.Texture"/> is copied by reference.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.ProjectorLight.Color">
            <summary>
            Gets or sets the RGB color of the light.
            </summary>
            <value>The color of the light. The default value is (1, 1, 1).</value>
            <remarks>
            This property defines only the RGB color of the light source - not its intensity. 
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.ProjectorLight.DiffuseIntensity">
            <summary>
            Gets or sets the diffuse intensity of the light.
            </summary>
            <value>The diffuse intensity of the light. The default value is 1.</value>
            <remarks>
            <see cref="P:DigitalRune.Graphics.ProjectorLight.Color"/> and <see cref="P:DigitalRune.Graphics.ProjectorLight.DiffuseIntensity"/> are separate properties so the values 
            can be adjusted independently.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.ProjectorLight.SpecularIntensity">
            <summary>
            Gets or sets the specular intensity of the light.
            </summary>
            <value>The specular intensity of the light. The default value is 1.</value>
            <remarks>
            <see cref="P:DigitalRune.Graphics.ProjectorLight.Color"/> and <see cref="P:DigitalRune.Graphics.ProjectorLight.SpecularIntensity"/> are separate properties so the 
            values can be adjusted independently.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.ProjectorLight.HdrScale">
            <summary>
            Gets or sets the HDR scale of the light.
            </summary>
            <value>The HDR scale of the light. The default value is 1.</value>
            <remarks>
            The <see cref="P:DigitalRune.Graphics.ProjectorLight.HdrScale"/> is an additional intensity factor. The factor is applied to the 
            <see cref="P:DigitalRune.Graphics.ProjectorLight.Color"/> and <see cref="P:DigitalRune.Graphics.ProjectorLight.DiffuseIntensity"/>/<see cref="P:DigitalRune.Graphics.ProjectorLight.SpecularIntensity"/> when 
            high dynamic range lighting (HDR lighting) is enabled.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.ProjectorLight.Projection">
            <summary>
            Gets or sets the projection.
            </summary>
            <value>
            The projection of the projector. The default value is a new 
            <see cref="T:DigitalRune.Graphics.PerspectiveProjection"/>.
            </value>
            <remarks>
            The intensity of the light continually decreases from the light's origin up to the 
            far distance specified in the projection. At the far plane the light intensity is 0.
            <see cref="P:DigitalRune.Graphics.ProjectorLight.Attenuation"/> the shape of the attenuation curve. See also 
            <see cref="M:DigitalRune.Graphics.GraphicsHelper.GetDistanceAttenuation(System.Single,System.Single,System.Single)"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.ProjectorLight.Attenuation">
            <summary>
            Gets or sets the attenuation exponent for the distance attenuation.
            </summary>
            <value>The attenuation exponent. The default value is 2.</value>
            <remarks>
            This exponent defines the shape of the distance attenuation curve. See also
            <see cref="M:DigitalRune.Graphics.GraphicsHelper.GetDistanceAttenuation(System.Single,System.Single,System.Single)"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.ProjectorLight.Texture">
            <summary>
            Gets or sets the texture.
            </summary>
            <value>The texture.</value>
        </member>
        <member name="M:DigitalRune.Graphics.ProjectorLight.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.ProjectorLight"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.ProjectorLight"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.ProjectorLight.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,DigitalRune.Graphics.Projection)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.ProjectorLight"/> class.
            </summary>
            <param name="texture">The texture that is projected.</param>
            <param name="projection">The projection.</param>
        </member>
        <member name="M:DigitalRune.Graphics.ProjectorLight.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.ProjectorLight.CloneCore(DigitalRune.Graphics.Light)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.ProjectorLight.GetIntensity(System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Spotlight">
            <summary>
            Represents a spotlight.
            </summary>
            <remarks>
            <para>
            Spotlights have color, intensity, position, direction and range. The light emitted from a 
            spotlight is shaped like a cone. The light intensity is maximal at the center and diminishes 
            towards the outside of the cone. This effect is called "spotlight falloff" (see below). The 
            <see cref="T:DigitalRune.Graphics.Spotlight"/> object defines the light properties of a spotlight positioned at the 
            origin (0, 0, 0) that shines in forward direction (0, 0, -1) - see 
            <see cref="F:DigitalRune.Mathematics.Algebra.Vector3F.Forward"/>. A <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/> needs to be created to position and 
            orient a spotlight within a 3D scene.
            </para>
            <para>
            <see cref="P:DigitalRune.Graphics.Spotlight.Color"/>, <see cref="P:DigitalRune.Graphics.Spotlight.DiffuseIntensity"/>/<see cref="P:DigitalRune.Graphics.Spotlight.SpecularIntensity"/>, 
            <see cref="P:DigitalRune.Graphics.Spotlight.HdrScale"/>, the spotlight falloff (see 
            <see cref="M:DigitalRune.Graphics.GraphicsHelper.GetAngularAttenuation(System.Single,System.Single,System.Single)"/>) and the light distance attenuation factor 
            (see <see cref="M:DigitalRune.Graphics.GraphicsHelper.GetDistanceAttenuation(System.Single,System.Single,System.Single)"/>) are multiplied to get the final 
            diffuse and specular light intensities which can be used in the lighting equations. 
            </para>
            <para>
            When using a low dynamic range lighting (LDR lighting) the light intensities are
            <list type="bullet">
            <item>
            <description>
            Diffuse light intensity <i>L<sub>diffuse</sub></i> = 
            <i>Color<sub>RGB</sub></i> · <i>DiffuseIntensity</i>
            </description>
            </item>
            <item>
            <description>
            Specular light intensity <i>L<sub>specular</sub></i> = 
            <i>Color<sub>RGB</sub></i> · <i>SpecularIntensity</i>
            </description>
            </item>
            </list>
            </para>
            <para>
            When using a high dynamic range lighting (HDR lighting) the light intensities are
            <list type="bullet">
            <item>
            <description>
            Diffuse light intensity <i>L<sub>diffuse</sub></i> = 
            <i>Color<sub>RGB</sub></i> · <i>DiffuseIntensity</i> · <i>HdrScale</i>
            </description>
            </item>
            <item>
            <description>
            Specular light intensity <i>L<sub>specular</sub></i> = 
            <i>Color<sub>RGB</sub></i> · <i>SpecularIntensity</i> · <i>HdrScale</i>
            </description>
            </item>
            </list>
            </para>
            <para>
            A pure diffuse spotlight can be created by setting <see cref="P:DigitalRune.Graphics.Spotlight.DiffuseIntensity"/> &gt; 0 and 
            <see cref="P:DigitalRune.Graphics.Spotlight.SpecularIntensity"/> = 0. A pure specular spotlight can be created by setting
            <see cref="P:DigitalRune.Graphics.Spotlight.DiffuseIntensity"/> = 0 and <see cref="P:DigitalRune.Graphics.Spotlight.SpecularIntensity"/> &gt; 0.
            </para>
            <para>
            <strong>Spotlight Falloff (Dual-Cone Model):</strong> The light emitted from a spotlight is 
            made up of a bright inner cone and a larger outer cone. The amount of light emitted 
            continually diminishes from the inner cone to the outer cone. The angle at which the light 
            starts to fall off is defined as the <see cref="P:DigitalRune.Graphics.Spotlight.FalloffAngle"/>. The angle at which the light 
            is cut off (light intensity is 0) is defined as the <see cref="P:DigitalRune.Graphics.Spotlight.CutoffAngle"/>. So the size of 
            the inner cone is 2 · <see cref="P:DigitalRune.Graphics.Spotlight.FalloffAngle"/> and the size of the outer cone is 
            2 · <see cref="P:DigitalRune.Graphics.Spotlight.CutoffAngle"/>. See also <see cref="M:DigitalRune.Graphics.GraphicsHelper.GetAngularAttenuation(System.Single,System.Single,System.Single)"/>.
            </para>
            <para>
            The <see cref="T:DigitalRune.Geometry.Shapes.Shape"/> of a spotlight is a <see cref="T:DigitalRune.Geometry.Shapes.PerspectiveViewVolume"/>. 
            (A <see cref="T:DigitalRune.Geometry.Shapes.ConeShape"/> would be a better fit, but the 
            <see cref="T:DigitalRune.Geometry.Shapes.PerspectiveViewVolume"/> was chosen because it is computationally more efficient.) 
            </para>
            <para>
            A 2D texture (see <see cref="P:DigitalRune.Graphics.Spotlight.Texture"/>) can be assigned to the spotlight. By default
            no texture is assigned. If a texture is set, the spotlight acts like a projector and
            projects this texture onto the lit surroundings.
            </para>
            <para>
            <strong>Cloning:</strong> When the <see cref="T:DigitalRune.Graphics.Spotlight"/> is cloned the <see cref="P:DigitalRune.Graphics.Spotlight.Texture"/>
            is not duplicated. The <see cref="P:DigitalRune.Graphics.Spotlight.Texture"/> is copied by reference.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Spotlight.Color">
            <summary>
            Gets or sets the RGB color of the light.
            </summary>
            <value>The color of the light. The default value is (1, 1, 1).</value>
            <remarks>
            This property defines only the RGB color of the light source - not its intensity. 
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Spotlight.DiffuseIntensity">
            <summary>
            Gets or sets the diffuse intensity of the light.
            </summary>
            <value>The diffuse intensity of the light. The default value is 1.</value>
            <remarks>
            <see cref="P:DigitalRune.Graphics.Spotlight.Color"/> and <see cref="P:DigitalRune.Graphics.Spotlight.DiffuseIntensity"/> are separate properties so the values 
            can be adjusted independently.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Spotlight.SpecularIntensity">
            <summary>
            Gets or sets the specular intensity of the light.
            </summary>
            <value>The specular intensity of the light. The default value is 1.</value>
            <remarks>
            <see cref="P:DigitalRune.Graphics.Spotlight.Color"/> and <see cref="P:DigitalRune.Graphics.Spotlight.SpecularIntensity"/> are separate properties so the 
            values can be adjusted independently.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Spotlight.HdrScale">
            <summary>
            Gets or sets the HDR scale of the light.
            </summary>
            <value>The HDR scale of the light. The default value is 1.</value>
            <remarks>
            The <see cref="P:DigitalRune.Graphics.Spotlight.HdrScale"/> is an additional intensity factor. The factor is applied to the 
            <see cref="P:DigitalRune.Graphics.Spotlight.Color"/> and <see cref="P:DigitalRune.Graphics.Spotlight.DiffuseIntensity"/>/<see cref="P:DigitalRune.Graphics.Spotlight.SpecularIntensity"/> when 
            high dynamic range lighting (HDR lighting) is enabled.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Spotlight.Range">
            <summary>
            Gets or sets the range of the light.
            </summary>
            <value>The range the light. The default value is 5.</value>
            <remarks>
            The intensity of the light continually decreases from the origin up to range. At a distance 
            of range the light intensity is 0. <see cref="P:DigitalRune.Graphics.Spotlight.Attenuation"/> the shape of the attenuation 
            curve. See also <see cref="M:DigitalRune.Graphics.GraphicsHelper.GetDistanceAttenuation(System.Single,System.Single,System.Single)"/>.
            </remarks>
            <exception cref="T:System.ArgumentException">
            The range of point light cannot be negative.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.Spotlight.FalloffAngle">
            <summary>
            Gets or sets the falloff (umbra) angle.
            </summary>
            <value>
            The falloff (umbra) angle of the spotlight in radians.
            The default value is 0.349 radians (= 20°).
            </value>
            <remarks>
            The falloff angle is the angle between the spotlight direction and the direction at which
            the light begins to fall off. (The size of the inner light cone, in which the light is at
            full intensity, is 2 · <see cref="P:DigitalRune.Graphics.Spotlight.FalloffAngle"/>.)
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.Spotlight.CutoffAngle">
            <summary>
            Gets or sets the cutoff (penumbra) angle.
            </summary>
            <value>
            The cutoff (penumbra) angle of the spotlight in radians.
            The default value is 0.524 radians (= 30°).
            </value>
            <remarks>
            The cutoff angle is the angle between the spotlight direction and the direction at which 
            the light is totally cut off. (The size of the outer light cone is 
            2 · <see cref="P:DigitalRune.Graphics.Spotlight.CutoffAngle"/>.)
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.Spotlight.Attenuation">
            <summary>
            Gets or sets the attenuation exponent for the distance attenuation.
            </summary>
            <value>The attenuation exponent. The default value is 2.</value>
            <remarks>
            This exponent defines the shape of the distance attenuation curve. See also
            <see cref="M:DigitalRune.Graphics.GraphicsHelper.GetDistanceAttenuation(System.Single,System.Single,System.Single)"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Spotlight.Texture">
            <summary>
            Gets or sets the texture which is projected by this spotlight.
            </summary>
            <value>The texture. The default value is <see langword="null"/>.</value>
        </member>
        <member name="M:DigitalRune.Graphics.Spotlight.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Spotlight"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Spotlight.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Spotlight.CloneCore(DigitalRune.Graphics.Light)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Spotlight.GetIntensity(System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Material">
            <summary>
            Defines the material (visual properties) of a mesh.
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Graphics.Mesh"/> represents the geometry and materials of a 3D object that can be 
            rendered. A mesh owns a collection of <see cref="P:DigitalRune.Graphics.Mesh.Materials"/> and is divided into 
            <see cref="T:DigitalRune.Graphics.Submesh"/>es. Each <see cref="T:DigitalRune.Graphics.Submesh"/> describes a batch of primitives (usually 
            triangles) that use one material and can be rendered with a single draw call.
            </para>
            <para>
            An effect binding (see class <see cref="T:DigitalRune.Graphics.Effects.EffectBinding"/>) provides the render states required 
            for each draw call: An <seealso cref="T:Microsoft.Xna.Framework.Graphics.Effect"/> that defines the graphics device states. A 
            technique binding selects the vertex and pixel shaders for rendering. And parameter bindings
            define static properties (color, diffuse texture, gloss map, normal map, etc.) as well as 
            dynamic properties (world/view/projection matrices, light properties, etc.). But depending on 
            the render pipeline that is used, multiple render passes may be required to draw a certain 
            object. Therefore, a <see cref="T:DigitalRune.Graphics.Material"/> is a dictionary of effect bindings - one effect 
            binding per render pass. The dictionary key is the name of the render pass (a case-sensitive 
            string such as "Default", "ZPass", "ShadowMap", "GBuffer", "Material", etc.). The dictionary 
            value is the <see cref="T:DigitalRune.Graphics.Effects.EffectBinding"/> that contains required settings for this render pass.
            The entries in a material depend on the type of renderer that is used.
            </para>
            <para>
            Example: A forward renderer usually only requires a single render pass, in which the mesh is 
            rendered into the back buffer. In this case the material contains one entry (Key = "Default", 
            Value = <see cref="T:DigitalRune.Graphics.Effects.EffectBinding"/>).
            </para>
            <para>
            Advanced example: A light pre-pass renderer usually requires several render passes per mesh: 
            In the "ShadowMap" pass the mesh is rendered into the shadow-map texture, which is used later 
            on. Then in the "GBuffer" pass the depth, the normals, and other properties of the mesh are 
            rendered into multiple render targets. Next, the renderer computes the lighting information. 
            Then in the "Material" pass, the mesh is rendered again - the lighting information is combined 
            with the material settings. In this example the material contains 3 entries. The keys are
            "GBuffer", "Material", and "ShadowMap".
            </para>
            <para>
            A <see cref="T:DigitalRune.Graphics.Material"/> is not bound to a certain <see cref="T:DigitalRune.Graphics.Mesh"/>. It can be shared by 
            different <see cref="T:DigitalRune.Graphics.Mesh"/> objects.
            </para>
            <para>
            <strong>Important:</strong> When an <see cref="T:DigitalRune.Graphics.Effects.EffectBinding"/> is used as part of a 
            <see cref="T:DigitalRune.Graphics.Material"/>, then it can only contain parameter bindings with the sort hint 
            <see cref="F:DigitalRune.Graphics.Effects.EffectParameterHint.Material"/> (see <see cref="T:DigitalRune.Graphics.Effects.EffectParameterHint"/>). 
            </para>
            <para>
            <strong>Cloning:<br/>
            </strong><see cref="T:DigitalRune.Graphics.Material"/>s can be cloned. When <see cref="M:DigitalRune.Graphics.Material.Clone"/> is called all 
            <see cref="T:DigitalRune.Graphics.Effects.EffectBinding"/> are duplicated (deep copy).
            </para>
            </remarks>
            <seealso cref="T:DigitalRune.Graphics.Effects.EffectBinding"/>
            <seealso cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstance"/>
        </member>
        <member name="P:DigitalRune.Graphics.Material.Name">
            <summary>
            Gets the name of the material.
            </summary>
            <value>The name of the material. The default value is <see langword="null"/>.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Material.Count">
            <summary>
            Gets the number of render passes supported by this material.
            </summary>
            <value>The number of render passes supported by this material.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Material.Passes">
            <summary>
            Gets a collection of all the render passes supported by this material.
            </summary>
            <value>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the render passes supported by this material.
            </value>
            <remarks>
            The order of the render passes in the returned <see cref="T:System.Collections.Generic.ICollection`1"/> is unspecified, 
            but it is guaranteed to be the same order as the corresponding effect bindings in the 
            <see cref="T:System.Collections.Generic.ICollection`1"/> returned by the <see cref="P:DigitalRune.Graphics.Material.EffectBindings"/> property.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Material.EffectBindings">
            <summary>
            Gets a collection of effect bindings used by this material.
            </summary>
            <value>A collection of effect bindings used by this material.</value>
            <remarks>
            The order of the effect bindings in the returned <see cref="T:System.Collections.Generic.ICollection`1"/> is 
            unspecified, but it is guaranteed to be the same order as the corresponding render passes in
            the <see cref="T:System.Collections.Generic.ICollection`1"/> returned by the <see cref="P:DigitalRune.Graphics.Material.EffectBindings"/> property.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Material.Item(System.String)">
            <summary>
            Gets or sets the effect binding for the specified render pass.
            </summary>
            <param name="pass">The render pass.</param>
            <value>
            The effect binding, or <see langword="null"/> if this material does not support the 
            specified render pass.
            </value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pass"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            <paramref name="pass"/> is not found in the material.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Material.#ctor">
            <summary>
            Initializes a new binding of the <see cref="T:DigitalRune.Graphics.Material"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Material.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection. 
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Material.Clear">
            <summary>
            Removes all render passes and effect bindings from the material.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Material.Contains(System.String)">
            <summary>
            Determines whether the material contains an effect binding for the specified render pass.
            </summary>
            <param name="pass">The render pass.</param>
            <returns>
            <see langword="true"/> if the material contains an effect binding for the specified render
            pass; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pass"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Material.Add(System.String,DigitalRune.Graphics.Effects.EffectBinding)">
            <summary>
            Adds an effect binding for the specified render pass to the material.
            </summary>
            <param name="pass">The render pass.</param>
            <param name="effectBinding">The effect binding.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="effectBinding"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            There is already an effect binding registered for the same render pass.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Material.Remove(System.String)">
            <summary>
            Removes the effect binding for the specified render pass from the material.
            </summary>
            <param name="pass">The render pass.</param>
            <returns>
            <see langword="true"/> if effect binding was successfully removed from the material; 
            otherwise, <see langword="false"/>. This method also returns <see langword="false"/> if 
            <paramref name="pass"/> is not found in the original material.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pass"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Material.TryGet(System.String,DigitalRune.Graphics.Effects.EffectBinding@)">
            <summary>
            Gets the effect binding for the specified render pass
            </summary>
            <param name="pass">The render pass.</param>
            <param name="effectBinding">
            When this method returns, the effect binding for the specified render pass; otherwise, the 
            <see langword="null"/> if the render pass is not supported by the material. This parameter is 
            passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the material supports the specified render pass; otherwise, 
            <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pass"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Material.Clone">
            <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.Material"/> that is a clone of the current instance.
            </summary>
            <returns>A new <see cref="T:DigitalRune.Graphics.Material"/> that is a clone of the current instance.</returns>
            <remarks>
            <strong>Notes to Inheritors:</strong> The method <see cref="M:DigitalRune.Graphics.Material.Clone"/> calls 
            <see cref="M:DigitalRune.Graphics.Material.CreateInstanceCore"/> which is responsible for creating a new instance of the 
            <see cref="T:DigitalRune.Graphics.Material"/> derived class and <see cref="M:DigitalRune.Graphics.Material.CloneCore(DigitalRune.Graphics.Material)"/> to create a copy of the 
            current instance. Classes that derive from <see cref="T:DigitalRune.Graphics.Material"/> need to implement 
            <see cref="M:DigitalRune.Graphics.Material.CreateInstanceCore"/> and <see cref="M:DigitalRune.Graphics.Material.CloneCore(DigitalRune.Graphics.Material)"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Material.CreateInstance">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Material"/> class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            This is a private method, and the actual object-specific implementations for the behavior 
            are dependent on the override implementation of the <see cref="M:DigitalRune.Graphics.Material.CreateInstanceCore"/> method, 
            which this method calls internally. 
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cannot clone <see cref="T:DigitalRune.Graphics.Material"/>. A derived class does not implement 
            <see cref="M:DigitalRune.Graphics.Material.CreateInstanceCore"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Material.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Graphics.Material"/> 
            derived class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            <para>
            Do not call this method directly (except when calling base in an implementation). This 
            method is called internally by the <see cref="M:DigitalRune.Graphics.Material.Clone"/> method whenever a new instance of the
            <see cref="T:DigitalRune.Graphics.Material"/> is created. 
            </para>
            <para>
            <strong>Notes to Inheritors:</strong> Every <see cref="T:DigitalRune.Graphics.Material"/> derived class must 
            implement this method. A typical implementation is to simply call the default constructor 
            and return the result. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Material.CloneCore(DigitalRune.Graphics.Material)">
            <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Material"/>.
            </summary>
            <param name="source">The object to clone.</param>
            <remarks>
            <strong>Notes to Inheritors:</strong> Every <see cref="T:DigitalRune.Graphics.Material"/> derived class must 
            implement this method. A typical implementation is to call <c>base.CloneCore(this)</c> to 
            copy all properties of the base class and then copy all properties of the derived class.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Material.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,DigitalRune#Graphics#Effects#EffectBinding}}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value>
            <see langword="true"/> if this <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Material.System#Collections#Generic#IDictionary{System#String,DigitalRune#Graphics#Effects#EffectBinding}#Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the 
            <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements 
            <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </value>
            <remarks>
            The order of the keys in the returned <see cref="T:System.Collections.Generic.ICollection`1"/> is unspecified, but it is
            guaranteed to be the same order as the corresponding values in the 
            <see cref="T:System.Collections.Generic.ICollection`1"/> returned by the <see cref="P:System.Collections.Generic.IDictionary`2.Values"/> 
            property.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Material.System#Collections#Generic#IDictionary{System#String,DigitalRune#Graphics#Effects#EffectBinding}#Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values of the 
            <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values of the object that implements 
            <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </value>
            <remarks>
            The order of the values in the returned <see cref="T:System.Collections.Generic.ICollection`1"/> is unspecified, but it 
            is guaranteed to be the same order as the corresponding keys in the 
            <see cref="T:System.Collections.Generic.ICollection`1"/> returned by the <see cref="P:System.Collections.Generic.IDictionary`2.Keys"/> 
            property.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Material.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection. 
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Material.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,DigitalRune#Graphics#Effects#EffectBinding}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection. 
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Material.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,DigitalRune#Graphics#Effects#EffectBinding}}#Add(System.Collections.Generic.KeyValuePair{System.String,DigitalRune.Graphics.Effects.EffectBinding})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Material.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,DigitalRune#Graphics#Effects#EffectBinding}}#Contains(System.Collections.Generic.KeyValuePair{System.String,DigitalRune.Graphics.Effects.EffectBinding})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="item"/> is found in the 
            <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Material.System#Collections#Generic#IDictionary{System#String,DigitalRune#Graphics#Effects#EffectBinding}#ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the 
            specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <returns>
            <see langword="true"/> if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element 
            with the specified key; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Material.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,DigitalRune#Graphics#Effects#EffectBinding}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,DigitalRune.Graphics.Effects.EffectBinding}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at 
            a particular array index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from 
            <see cref="T:System.Collections.Generic.ICollection`1"/>. The array must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the 
            available space from <paramref name="arrayIndex"/> to the end of the destination 
            <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Material.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,DigitalRune#Graphics#Effects#EffectBinding}}#Remove(System.Collections.Generic.KeyValuePair{System.String,DigitalRune.Graphics.Effects.EffectBinding})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="item"/> was successfully removed from the 
            <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, <see langword="false"/>. This method also returns 
            <see langword="false"/> if <paramref name="item"/> is not found in the original 
            <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Material.System#Collections#Generic#IDictionary{System#String,DigitalRune#Graphics#Effects#EffectBinding}#TryGetValue(System.String,DigitalRune.Graphics.Effects.EffectBinding@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">
            When this method returns, the value associated with the specified key, if the key is found; 
            otherwise, the default value for the type of the <paramref name="value"/> parameter. This 
            parameter is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> 
            contains an element with the specified key; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.MaterialCollection">
            <summary>
            Manages a collection of materials.
            </summary>
            <remarks>
            Items in this collection must not be <see langword="null"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.MaterialCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:DigitalRune.Graphics.MaterialCollection"/>. 
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> for <see cref="T:DigitalRune.Graphics.MaterialCollection"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.MaterialCollection.InsertItem(System.Int32,DigitalRune.Graphics.Material)">
            <summary>
            Inserts a material into the collection at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="item"/> should be inserted.
            </param>
            <param name="item">The material to insert.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MaterialCollection.SetItem(System.Int32,DigitalRune.Graphics.Material)">
            <summary>
            Replaces the material at the specified index.
            </summary>
            <param name="index">The zero-based index of the material to replace.</param>
            <param name="item">The new value for the material at the specified index.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.Mesh">
            <summary>
            Represents a mesh of a 3D model.
            </summary>
            <remarks>
            <para>
            A mesh represents the geometry and materials of a 3D object that can be rendered. A mesh owns 
            a collection of <see cref="P:DigitalRune.Graphics.Mesh.Materials"/> and is divided into <see cref="T:DigitalRune.Graphics.Submesh"/>es. Each 
            <see cref="T:DigitalRune.Graphics.Submesh"/> describes a batch of primitives (usually triangles) that use one 
            material and can be rendered with a single draw call.
            </para>
            <para>
            The mesh can be rendered by creating a <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode"/> and adding it to a 3D scene.
            </para>
            <para>
            <strong>Morph Target Animation:</strong> Submeshes may include morph targets (see
            <see cref="P:DigitalRune.Graphics.Submesh.MorphTargets"/>). The extension method
            <see cref="M:DigitalRune.Graphics.MeshHelper.GetMorphTargetNames(DigitalRune.Graphics.Mesh)"/> can be used to get a list of all morph targets
            included in a mesh. The current <see cref="P:DigitalRune.Graphics.SceneGraph.MeshNode.MorphWeights"/> are stored in the
            <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode"/>.
            </para>
            <para>
            <strong>Skeletal Animation:</strong> The mesh may contain a <see cref="P:DigitalRune.Graphics.Mesh.Skeleton"/>, which can
            be used to animate (deform) the mesh. The current <see cref="P:DigitalRune.Graphics.SceneGraph.MeshNode.SkeletonPose"/> is
            stored in the <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode"/>. The property <see cref="P:DigitalRune.Graphics.SceneGraph.MeshNode.SkeletonPose"/> can be
            animated. A set of key frame animations can be stored in <see cref="P:DigitalRune.Graphics.Mesh.Animations"/>.
            </para>
            <para>
            <strong>Bounding shape:</strong> The bounding shape of the mesh is usually created by the 
            content pipeline and stored in the <see cref="P:DigitalRune.Graphics.Mesh.BoundingShape"/> property. It is not updated
            automatically when the vertex buffer changes. The user who changes the vertex buffer is 
            responsible for updating or replacing the shape stored in <see cref="P:DigitalRune.Graphics.Mesh.BoundingShape"/>.
            If the mesh can be deformed on the GPU (e.g. using mesh skinning), then the bounding shape
            must be large enough to contain all possible deformations.
            </para>
            <para>
            The properties of the bounding shape can be changed at any time. But it is not allowed to 
            replace the bounding shape while the <see cref="T:DigitalRune.Graphics.Mesh"/> is in use, i.e. referenced by a 
            scene node.
            </para>
            <para>
            For example, if the bounding shape is a <see cref="T:DigitalRune.Geometry.Shapes.SphereShape"/>, the radius of the sphere 
            can be changed at any time. But it is not allowed to replace the <see cref="T:DigitalRune.Geometry.Shapes.SphereShape"/> 
            with a <see cref="T:DigitalRune.Geometry.Shapes.BoxShape"/> as long as the mesh is used in a scene. Replacing the 
            bounding shape will not raise any exceptions, but the mesh may no longer be rendered 
            correctly.
            </para>
            <para>
            <strong>Cloning:</strong> Meshes are currently <strong>not</strong> cloneable.
            </para>
            </remarks>
            <seealso cref="T:DigitalRune.Graphics.Effects.EffectBinding"/>
            <seealso cref="T:DigitalRune.Graphics.Material"/>
            <seealso cref="T:DigitalRune.Graphics.SceneGraph.MeshNode"/>
            <seealso cref="T:DigitalRune.Graphics.Submesh"/>
        </member>
        <member name="P:DigitalRune.Graphics.Mesh.BoundingShape">
            <summary>
            Gets or sets the bounding shape of this mesh.
            </summary>
            <value>
            The bounding shape of this mesh. Must not be <see langword="null"/>.
            The default value is <see cref="F:DigitalRune.Geometry.Shapes.Shape.Infinite"/>.
            </value>
            <remarks>
            <para>
            The properties of the bounding shape can be changed at any time. But it is not allowed to 
            replace the bounding shape while the <see cref="T:DigitalRune.Graphics.Mesh"/> is in use, i.e. referenced by a 
            scene node.
            </para>
            <para>
            For example, if the bounding shape is a <see cref="T:DigitalRune.Geometry.Shapes.SphereShape"/>, the radius of the sphere 
            can be changed at any time. But it is not allowed to replace the <see cref="T:DigitalRune.Geometry.Shapes.SphereShape"/> 
            with a <see cref="T:DigitalRune.Geometry.Shapes.BoxShape"/> as long as the mesh is used in a scene. Replacing the bounding
            shape will not raise any exceptions, but the mesh may no longer be rendered correctly.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.Mesh.Materials">
            <summary>
            Gets a collection of materials associated with this mesh.
            </summary>
            <value>
            A collection of materials associated with this mesh.
            </value>
            <remarks>
            A <see cref="T:DigitalRune.Graphics.Material"/> defines the effect bindings per render pass.
            </remarks>
            <seealso cref="T:DigitalRune.Graphics.Effects.EffectBinding"/>
            <seealso cref="T:DigitalRune.Graphics.Material"/>
        </member>
        <member name="P:DigitalRune.Graphics.Mesh.Submeshes">
            <summary>
            Gets the collection of <see cref="T:DigitalRune.Graphics.Submesh"/>es that make up this mesh. Each submesh is 
            composed of a set of primitives that share the same material. 
            </summary>
            <value>The <see cref="T:DigitalRune.Graphics.Submesh"/>es that make up this mesh.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Mesh.Name">
            <summary>
            Gets or sets the name of this mesh.
            </summary>
            <value>The name of this mesh.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Mesh.Occluder">
            <summary>
            Gets or sets the occluder that is rendered into the occlusion buffer.
            </summary>
            <value>The occluder. The default value is <see langword="null"/>.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Mesh.Skeleton">
            <summary>
            Gets or sets the skeleton for mesh skinning.
            </summary>
            <value>The skeleton. Can be <see langword="null"/>.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Mesh.Animations">
            <summary>
            Gets or sets the animations.
            </summary>
            <value>The animations. Can be <see langword="null"/> if there are no animations.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Mesh.UserData">
            <summary>
            Gets or sets a user-defined object.
            </summary>
            <value>A user-defined object.</value>
            <remarks>
            This property is intended for application-specific data and is not used by the mesh itself. 
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Mesh.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Mesh"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Mesh.Dispose">
            <summary>
            Releases all resources used by an instance of the <see cref="T:DigitalRune.Graphics.Mesh"/> class.
            </summary>
            <remarks>
            This method calls the virtual <see cref="M:DigitalRune.Graphics.Mesh.Dispose(System.Boolean)"/> method, passing in 
            <see langword="true"/>, and then suppresses finalization of the instance.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Mesh.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.Mesh"/> class and
            optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources; 
            <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:DigitalRune.Graphics.MeshHelper">
            <summary>
            Provides helper methods for <see cref="T:DigitalRune.Graphics.Mesh"/>es, <see cref="T:DigitalRune.Graphics.Submesh"/>es and 
            <see cref="T:DigitalRune.Graphics.Material"/>s.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.GetMaterial(DigitalRune.Graphics.Submesh)">
            <summary>
            Gets the material of a submesh.
            </summary>
            <param name="submesh">The submesh.</param>
            <returns>
            The material of this submesh, or <see langword="null"/> if the submesh is not assigned to a 
            mesh or if the <see cref="P:DigitalRune.Graphics.Submesh.MaterialIndex"/> is invalid.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="submesh"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.SetMaterial(DigitalRune.Graphics.Submesh,DigitalRune.Graphics.Material)">
            <summary>
            Sets the material for a submesh.
            </summary>
            <param name="submesh">The submesh.</param>
            <param name="material">The new material.</param>
            <remarks>
            The material can only be changed if the <see cref="T:DigitalRune.Graphics.Submesh"/> is part of a 
            <see cref="T:DigitalRune.Graphics.Mesh"/>. When the material is changed, the <see cref="P:DigitalRune.Graphics.Mesh.Materials"/> of the
            <see cref="T:DigitalRune.Graphics.Mesh"/> are automatically updated. (New materials are added. Unused materials are
            removed.)
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="submesh"/> or <paramref name="material"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:DigitalRune.Graphics.Submesh"/> is not yet part of a <see cref="T:DigitalRune.Graphics.Mesh"/>. Add the 
            <see cref="T:DigitalRune.Graphics.Submesh"/> to the <see cref="P:DigitalRune.Graphics.Mesh.Submeshes"/> collection of a <see cref="T:DigitalRune.Graphics.Mesh"/>
            before setting the material.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.GetMorphTargetNames(DigitalRune.Graphics.Mesh)">
            <summary>
            Gets the names of all morph targets.
            </summary>
            <param name="mesh">The mesh.</param>
            <returns>The names of all morph targets.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="mesh"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.Draw(DigitalRune.Graphics.Submesh)">
            <summary>
            Draws the <see cref="T:DigitalRune.Graphics.Submesh"/> using the currently active shader.
            </summary>
            <param name="submesh">The submesh.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="submesh"/> is <see langword="null"/>.
            </exception>
            <remarks>
            This method sets the <see cref="T:Microsoft.Xna.Framework.Graphics.VertexDeclaration"/>, <see cref="P:DigitalRune.Graphics.Submesh.VertexBuffer"/>,
            and <see cref="P:DigitalRune.Graphics.Submesh.IndexBuffer"/> of the submesh and calls
            <see cref="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DrawIndexedPrimitives(Microsoft.Xna.Framework.Graphics.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/>. Effects are not handled in this method.
            The method assumes that the correct shader effect is already active.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.CreateSubmesh(Microsoft.Xna.Framework.Graphics.GraphicsDevice,DigitalRune.Geometry.Meshes.TriangleMesh,System.Single)">
             <overloads>
             <summary>
             Creates a submesh to draw a triangle mesh.
             </summary>
             </overloads>
            
             <summary>
             Creates a submesh to draw a triangle mesh.
             </summary>
             <param name="graphicsDevice">The graphics device.</param>
             <param name="mesh">The mesh.</param>
             <param name="angleLimit">
             The angle limit for normal vectors in radians. Normals are only merged if the angle between
             the triangle normals is equal to or less than the angle limit. Set this value to -1 to
             disable the angle limit (all normals of one vertex are merged). 
             </param>
             <returns>The submesh, or <see langword="null"/> if the mesh is empty.</returns>
             <remarks>
             The returned submesh will contain a triangle list that represents the given mesh. Each 
             vertex contains the position and the normal vector (no texture coordinates, no vertex 
             colors, etc.). The submesh will not use an index buffer.
             </remarks>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="graphicsDevice"/> or <paramref name="mesh"/> is <see langword="null"/>.
             </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.CreateSubmesh(Microsoft.Xna.Framework.Graphics.GraphicsDevice,DigitalRune.Geometry.Meshes.ITriangleMesh,System.Single)">
            <summary>
            Creates a submesh to draw a triangle mesh.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="mesh">The mesh.</param>
            <param name="angleLimit">
            The angle limit for normal vectors in radians. Normals are only merged if the angle between
            the triangle normals is equal to or less than the angle limit. Set this value to -1 to
            disable the angle limit (all normals of one vertex are merged). 
            </param>
            <returns>The submesh, or <see langword="null"/> if the mesh is empty.</returns>
            <remarks>
            The returned submesh will contain a triangle list that represents the given mesh. Each 
            vertex contains the position and the normal vector (no texture coordinates, no vertex 
            colors, etc.). The submesh will not use an index buffer.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/> or <paramref name="mesh"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.GetPrimitiveCount(Microsoft.Xna.Framework.Graphics.VertexBuffer,Microsoft.Xna.Framework.Graphics.IndexBuffer,Microsoft.Xna.Framework.Graphics.PrimitiveType)">
            <summary>
            Gets the number of primitives for the given vertex/index buffer and primitive type.
            </summary>
            <param name="vertexBuffer">The vertex buffer.</param>
            <param name="indexBuffer">The index buffer.</param>
            <param name="primitiveType">The type of the primitive.</param>
            <returns>The number of primitives in the given vertex and index buffer.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.ToTriangleMesh(DigitalRune.Graphics.Mesh)">
             <overloads>
             <summary>
             Creates a <see cref="T:DigitalRune.Geometry.Meshes.TriangleMesh"/> (DigitalRune.Geometry) for the <see cref="T:DigitalRune.Graphics.Mesh"/> or 
             <see cref="T:DigitalRune.Graphics.Submesh"/> (DigitalRune.Graphics).
             </summary>
             </overloads>
            
             <summary>
             Creates a <see cref="T:DigitalRune.Geometry.Meshes.TriangleMesh"/> from a <see cref="T:DigitalRune.Graphics.Mesh"/>. 
             </summary>
             <param name="mesh">The mesh.</param>
             <returns>A triangle mesh containing all triangles of the specified mesh.</returns>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="mesh"/> is <see langword="null"/>.
             </exception>
             <exception cref="T:System.NotSupportedException">
             A submeshes uses a primitive type other than triangle lists. Other primitive types are not 
             supported.
             </exception>
             <exception cref="T:System.NotSupportedException">
             The vertex position format of a submesh is not <see cref="T:Microsoft.Xna.Framework.Vector3"/>. Only 
             <see cref="T:Microsoft.Xna.Framework.Vector3"/> is supported
             </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.ToTriangleMesh(DigitalRune.Graphics.Submesh)">
            <summary>
            Creates a <see cref="T:DigitalRune.Geometry.Meshes.TriangleMesh"/> from a <see cref="T:DigitalRune.Graphics.Submesh"/>. 
            </summary>
            <param name="submesh">The mesh.</param>
            <returns>
            A triangle mesh containing all triangles of the specified submesh.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="submesh"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            A submeshes uses a primitive type other than triangle lists. Other primitive types are not 
            supported.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The vertex position format of a submesh is not <see cref="T:Microsoft.Xna.Framework.Vector3"/>. Only 
            <see cref="T:Microsoft.Xna.Framework.Vector3"/> is supported
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.ToTriangleMesh(DigitalRune.Graphics.Submesh,DigitalRune.Geometry.Meshes.TriangleMesh)">
            <summary>
            Adds the triangles from the specified <see cref="T:DigitalRune.Graphics.Submesh"/> to a 
            <see cref="T:DigitalRune.Geometry.Meshes.TriangleMesh"/>.
            </summary>
            <param name="submesh">The submesh.</param>
            <param name="triangleMesh">
            The triangle mesh to which the triangles of the <paramref name="submesh"/> are added.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="submesh"/> or <paramref name="triangleMesh"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            A submeshes uses a primitive type other than triangle lists. Other primitive types are not 
            supported.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The vertex position format of a submesh is not <see cref="T:Microsoft.Xna.Framework.Vector3"/>. Only 
            <see cref="T:Microsoft.Xna.Framework.Vector3"/> is supported
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.Merge(System.Collections.Generic.IEnumerable{DigitalRune.Graphics.SceneGraph.SceneNode})">
            <summary>
            Merges the specified scene nodes (including descendants) into a single mesh.
            </summary>
            <param name="sceneNodes">The scene nodes.</param>
            <returns>The merged mesh.</returns>
            <remarks>
            <para>
            Only <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode"/>s are merged. Other scene node types are ignored.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sceneNodes"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Too many different materials. Merged mesh must have less than 256 materials.
            </exception>
            <exception cref="T:System.NotSupportedException">
            A submesh uses a vertex declaration which is not supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.Merge(DigitalRune.Graphics.Mesh,System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector3F},System.Collections.Generic.IList{DigitalRune.Geometry.Pose})">
            <overloads>
            <summary>
            Merges the specified mesh instances into a single mesh.
            </summary>
            </overloads>
            
            <summary>
            Merges the specified mesh instances into a single mesh.
            </summary>
            <param name="mesh">The mesh.</param>
            <param name="scales">
            The scale factors. Can be <see langword="null"/> to use no scale, i.e. all scale factors are
            (1, 1, 1).
            </param>
            <param name="poses">The poses (positions and orientations).</param>
            <returns>The merged mesh.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="mesh"/> or <paramref name="poses"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in <paramref name="poses"/> and <paramref name="scales"/> does not
            match.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Cannot merge skinned meshes.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Too many different vertex declarations. Merged mesh must not have more than 256 different
            vertex declarations.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Too many different materials. Merged mesh would have more than 256 materials.
            </exception>
            <exception cref="T:System.NotSupportedException">
            A submesh uses a vertex declaration which is not supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.GetBox(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Gets the default submesh that represents a box using triangles.
            (The box is centered at the origin. The side length is 1.)
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <returns>
            The default submesh of a box. This submesh is shared and must not be modified!
            </returns>
            <remarks>
            The returned <see cref="T:DigitalRune.Graphics.Submesh"/> is a shared instance that must not be modified. 
            Use <see cref="M:DigitalRune.Graphics.MeshHelper.CreateBox(Microsoft.Xna.Framework.Graphics.GraphicsDevice)"/> to create a new <see cref="T:DigitalRune.Graphics.Submesh"/> instance.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.CreateBox(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Creates a new submesh that represents a box using triangles.
            (The box is centered at the origin. The side length is 1.)
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <returns>A new <see cref="T:DigitalRune.Graphics.Submesh"/> that represents a box.</returns>
            <remarks>
            If the returned <see cref="T:DigitalRune.Graphics.Submesh"/> is not going to be modified, then it is better
            to call <see cref="M:DigitalRune.Graphics.MeshHelper.GetBox(DigitalRune.Graphics.IGraphicsService)"/> to retrieve a shared <see cref="T:DigitalRune.Graphics.Submesh"/> instance.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.GetBoxLines(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Gets the default submesh that represents a box using lines.
            (The box is centered at the origin. The side length is 1.)
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <returns>
            The default submesh of box line list. This submesh is shared and must not be modified!
            </returns>
            <remarks>
            The returned <see cref="T:DigitalRune.Graphics.Submesh"/> is a shared instance that must not be modified. 
            Use <see cref="M:DigitalRune.Graphics.MeshHelper.CreateBoxLines(Microsoft.Xna.Framework.Graphics.GraphicsDevice)"/> to create a new <see cref="T:DigitalRune.Graphics.Submesh"/> instance.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.CreateBoxLines(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Creates a new submesh that represents a box using lines.
            (The box is centered at the origin. The side length is 1.)
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <returns>A new <see cref="T:DigitalRune.Graphics.Submesh"/> that represents a box line list.</returns>
            <remarks>
            If the returned <see cref="T:DigitalRune.Graphics.Submesh"/> is not going to be modified, then it is better
            to call <see cref="M:DigitalRune.Graphics.MeshHelper.GetBoxLines(DigitalRune.Graphics.IGraphicsService)"/> to retrieve a shared <see cref="T:DigitalRune.Graphics.Submesh"/> instance.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.GetCircleLines(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Gets the default submesh that represents a circle using lines.
            (The circle lies in the xy plane and is centered at the origin. Radius = 1.)
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <returns>
            The default submesh of circle line list. 
            This submesh is shared and must not be modified!
            </returns>
            <remarks>
            The returned <see cref="T:DigitalRune.Graphics.Submesh"/> is a shared instance that must not be modified. 
            Use <see cref="M:DigitalRune.Graphics.MeshHelper.CreateCircleLines(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)"/> to create a new <see cref="T:DigitalRune.Graphics.Submesh"/> instance.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.CreateCircleLines(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
            <summary>
            Creates a new submesh that represents a circle using lines.
            (The circle lies in the xy plane and is centered at the origin. Radius = 1.)
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="numberOfSegments">
            The number of segments. This parameter controls the detail of the mesh.</param>
            <returns>A new <see cref="T:DigitalRune.Graphics.Submesh"/> that represents a circle line list.</returns>
            <remarks>
            If the returned <see cref="T:DigitalRune.Graphics.Submesh"/> is not going to be modified, then it is better
            to call <see cref="M:DigitalRune.Graphics.MeshHelper.GetCircleLines(DigitalRune.Graphics.IGraphicsService)"/> to retrieve a shared <see cref="T:DigitalRune.Graphics.Submesh"/> instance.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="numberOfSegments"/> is less than or equal to 2.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.GetCone(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Gets the default submesh that represents a cone using triangles.
            (The cone is standing on the xz plane pointing along the y axis. Radius = 1. Height = 1.) 
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <returns>
            The default submesh of cone. 
            This submesh is shared and must not be modified!
            </returns>
            <remarks>
            The returned <see cref="T:DigitalRune.Graphics.Submesh"/> is a shared instance that must not be modified. 
            Use <see cref="M:DigitalRune.Graphics.MeshHelper.CreateCone(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)"/> to create a new <see cref="T:DigitalRune.Graphics.Submesh"/> instance.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.CreateCone(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
            <summary>
            Creates a new submesh that represents a cone using triangles.
            (The cone is standing on the xz plane pointing along the y axis. Radius = 1. Height = 1.) 
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="numberOfSegments">
            The number of segments. This parameter controls the detail of the mesh.</param>
            <returns>A new <see cref="T:DigitalRune.Graphics.Submesh"/> that represents a cone.</returns>
            <remarks>
            If the returned <see cref="T:DigitalRune.Graphics.Submesh"/> is not going to be modified, then it is better
            to call <see cref="M:DigitalRune.Graphics.MeshHelper.GetCone(DigitalRune.Graphics.IGraphicsService)"/> to retrieve a shared <see cref="T:DigitalRune.Graphics.Submesh"/> instance.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="numberOfSegments"/> is less than or equal to 2.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.GetConeLines(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Gets the default submesh that represents a cone using lines.
            (The cone is standing on the xz plane pointing along the y axis. Radius = 1. Height = 1.) 
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <returns>
            The default submesh of cone line list. 
            This submesh is shared and must not be modified!
            </returns>
            <remarks>
            The returned <see cref="T:DigitalRune.Graphics.Submesh"/> is a shared instance that must not be modified. 
            Use <see cref="M:DigitalRune.Graphics.MeshHelper.CreateConeLines(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)"/> to create a new <see cref="T:DigitalRune.Graphics.Submesh"/> instance.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.CreateConeLines(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
            <summary>
            Creates a new submesh that represents a cone using lines.
            (The cone is standing on the xz plane pointing along the y axis. Radius = 1. Height = 1.) 
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="numberOfSegments">
            The number of segments. This parameter controls the detail of the mesh.</param>
            <returns>A new <see cref="T:DigitalRune.Graphics.Submesh"/> that represents a cone line list.</returns>
            <remarks>
            If the returned <see cref="T:DigitalRune.Graphics.Submesh"/> is not going to be modified, then it is better
            to call <see cref="M:DigitalRune.Graphics.MeshHelper.GetConeLines(DigitalRune.Graphics.IGraphicsService)"/> to retrieve a shared <see cref="T:DigitalRune.Graphics.Submesh"/> instance.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="numberOfSegments"/> is less than or equal to 2.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.GetCylinder(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Gets the default submesh that represents a cylinder using triangles.
            (The cylinder is centered at the origin. Radius = 1. Height = 2 (along the y axis).) 
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <returns>
            The default submesh of cylinder. 
            This submesh is shared and must not be modified!
            </returns>
            <remarks>
            The returned <see cref="T:DigitalRune.Graphics.Submesh"/> is a shared instance that must not be modified. 
            Use <see cref="M:DigitalRune.Graphics.MeshHelper.CreateCylinder(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)"/> to create a new <see cref="T:DigitalRune.Graphics.Submesh"/> instance.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.CreateCylinder(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
            <summary>
            Creates a new submesh that represents a cylinder using triangles.
            (The cylinder is centered at the origin. Radius = 1. Height = 2 (along the y axis).) 
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="numberOfSegments">
            The number of segments. This parameter controls the detail of the mesh.
            </param>
            <returns>A new <see cref="T:DigitalRune.Graphics.Submesh"/> that represents a cylinder.</returns>
            <remarks>
            If the returned <see cref="T:DigitalRune.Graphics.Submesh"/> is not going to be modified, then it is better
            to call <see cref="M:DigitalRune.Graphics.MeshHelper.GetCylinder(DigitalRune.Graphics.IGraphicsService)"/> to retrieve a shared <see cref="T:DigitalRune.Graphics.Submesh"/> instance.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="numberOfSegments"/> is less than or equal to 2.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.GetCylinderLines(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Gets the default submesh that represents a cylinder using lines.
            (The cylinder is centered at the origin. Radius = 1. Height = 2 (along the y axis).) 
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <returns>
            The default submesh of cylinder line list. 
            This submesh is shared and must not be modified!
            </returns>
            <remarks>
            The returned <see cref="T:DigitalRune.Graphics.Submesh"/> is a shared instance that must not be modified. 
            Use <see cref="M:DigitalRune.Graphics.MeshHelper.CreateCylinderLines(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)"/> to create a new <see cref="T:DigitalRune.Graphics.Submesh"/> instance.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.CreateCylinderLines(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
            <summary>
            Creates a new submesh that represents a cylinder using lines.
            (The cylinder is centered at the origin. Radius = 1. Height = 2 (along the y axis).) 
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="numberOfSegments">
            The number of segments. This parameter controls the detail of the mesh.</param>
            <returns>A new <see cref="T:DigitalRune.Graphics.Submesh"/> that represents a cylinder line list.</returns>
            <remarks>
            If the returned <see cref="T:DigitalRune.Graphics.Submesh"/> is not going to be modified, then it is better
            to call <see cref="M:DigitalRune.Graphics.MeshHelper.GetCylinderLines(DigitalRune.Graphics.IGraphicsService)"/> to retrieve a shared <see cref="T:DigitalRune.Graphics.Submesh"/> instance.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="numberOfSegments"/> is less than or equal to 2.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.CreateGrid(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Creates a new submesh that represents a rectangular grid in the xy plane.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="widthX">
            The total width of the grid in x.
            </param>
            <param name="widthY">
            The total width of the grid in y.
            </param>
            <param name="numberOfCellsX">
            The number of grid cells in the x direction.
            </param>
            <param name="numberOfCellsY">
            The number of grid cells in the y direction.
            </param>
            <returns>A new <see cref="T:DigitalRune.Graphics.Submesh"/> that represents the grid.</returns>
            <remarks>
            <para>
            The returned mesh represents a tessellated grid in the xy plane. The grid goes from (0, 0)
            to (widthX, withY). The returned mesh has texture coordinates which go from (0, 0) to
            (1, 1).
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="widthX"/> or <paramref name="widthY"/> is 0 or negative.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="numberOfCellsX"/> or <paramref name="numberOfCellsY"/> is less than 1
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.GetHemisphere(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Gets the default submesh that represents a spherical cap using triangles.
            (The sphere is centered at the origin. Radius = 1. The submesh contains only the 
            top half (+y) of the sphere.) 
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <returns>
            The default submesh of a hemisphere. 
            This submesh is shared and must not be modified!
            </returns>
            <remarks>
            The returned <see cref="T:DigitalRune.Graphics.Submesh"/> is a shared instance that must not be modified. 
            Use <see cref="M:DigitalRune.Graphics.MeshHelper.CreateHemisphere(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)"/> to create a new <see cref="T:DigitalRune.Graphics.Submesh"/> instance.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.CreateHemisphere(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
            <summary>
            Creates a new submesh that represents a spherical cap using triangles.
            (The sphere is centered at the origin. Radius = 1. The submesh contains only the 
            top half (+y) of the sphere.) 
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="numberOfSegments">
            The number of segments. This parameter controls the detail of the mesh.</param>
            <returns>A new <see cref="T:DigitalRune.Graphics.Submesh"/> that represents a hemisphere.</returns>
            <remarks>
            If the returned <see cref="T:DigitalRune.Graphics.Submesh"/> is not going to be modified, then it is better
            to call <see cref="M:DigitalRune.Graphics.MeshHelper.GetHemisphere(DigitalRune.Graphics.IGraphicsService)"/> to retrieve a shared <see cref="T:DigitalRune.Graphics.Submesh"/> instance.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="numberOfSegments"/> is less than or equal to 2.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.GetHemisphereLines(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Gets the default submesh that represents a spherical cap using lines.
            (The sphere is centered at the origin. Radius = 1. The submesh contains only the 
            top half (+y) of the sphere.) 
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <returns>
            The default submesh of a hemisphere line list. 
            This submesh is shared and must not be modified!
            </returns>
            <remarks>
            The returned <see cref="T:DigitalRune.Graphics.Submesh"/> is a shared instance that must not be modified. 
            Use <see cref="M:DigitalRune.Graphics.MeshHelper.CreateHemisphereLines(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)"/> to create a new <see cref="T:DigitalRune.Graphics.Submesh"/> instance.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.CreateHemisphereLines(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
            <summary>
            Creates a new submesh that represents a spherical cap using lines.
            (The sphere is centered at the origin. Radius = 1. The submesh contains only the 
            top half (+y) of the sphere.) 
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="numberOfSegments">
            The number of segments. This parameter controls the detail of the mesh.</param>
            <returns>A new <see cref="T:DigitalRune.Graphics.Submesh"/> that represents a hemisphere line list.</returns>
            <remarks>
            If the returned <see cref="T:DigitalRune.Graphics.Submesh"/> is not going to be modified, then it is better
            to call <see cref="M:DigitalRune.Graphics.MeshHelper.GetHemisphereLines(DigitalRune.Graphics.IGraphicsService)"/> to retrieve a shared <see cref="T:DigitalRune.Graphics.Submesh"/> instance.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="numberOfSegments"/> is less than or equal to 2.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.GetIcosphere(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Gets the default submesh that represents a sphere using triangles.
            (The sphere is centered at the origin. Radius = 1. The sphere is generated by subdividing 
            an icosahedron.)
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <returns>
            The default submesh of an icosphere. 
            This submesh is shared and must not be modified!
            </returns>
            <remarks>
            The returned <see cref="T:DigitalRune.Graphics.Submesh"/> is a shared instance that must not be modified. 
            Use <see cref="M:DigitalRune.Graphics.MeshHelper.CreateIcosphere(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)"/> to create a new <see cref="T:DigitalRune.Graphics.Submesh"/> instance.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.CreateIcosphere(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
            <summary>
            Creates a new submesh that represents a sphere using triangles.
            (The sphere is centered at the origin. Radius = 1. The sphere is generated by subdividing 
            an icosahedron.)
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="numberOfSubdivisions">
            The number of subdivisions [0, 5]. (See remarks of 
            <see cref="M:DigitalRune.Geometry.GeometryHelper.CreateIcosphere(System.Int32,System.Boolean)"/>.) 
            This parameter controls the detail of the mesh.</param>
            <returns>A new <see cref="T:DigitalRune.Graphics.Submesh"/> that represents an icosphere.</returns>
            <remarks>
            If the returned <see cref="T:DigitalRune.Graphics.Submesh"/> is not going to be modified, then it is better
            to call <see cref="M:DigitalRune.Graphics.MeshHelper.GetIcosphere(DigitalRune.Graphics.IGraphicsService)"/> to retrieve a shared <see cref="T:DigitalRune.Graphics.Submesh"/> instance.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="numberOfSubdivisions"/> is less than 1.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.CreateSpherePatch(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Single,System.Single,System.Int32)">
            <summary>
            Creates a new submesh that represents a rectangular patch on a sphere using triangles.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="originRadius">
            The radius where the origin of the submesh is placed. See remarks.
            </param>
            <param name="sphereRadius">
            The radius of the sphere.
            </param>
            <param name="numberOfDivisions">
            The number of divisions in the range [0, 255]. This parameter controls the detail of the
            mesh.
            </param>    
            <returns>A new <see cref="T:DigitalRune.Graphics.Submesh"/> that represents a sphere.</returns>
            <remarks>
            <para>
            The returned mesh is like a quad in the xz plane where the vertices are pulled down over a
            sphere to match  the curvature. This mesh is useful for cloud planes and sky domes.
            </para>
            <para>
            The patch center is centered in the xz plane and under the patch. 
            <paramref name="originRadius"/> defines relative y positions of the dome, for example: If
            this mesh is used for a cloud plane, set <paramref name="originRadius"/> to the earth radius
            and <paramref name="sphereRadius"/> to the cloud plane radius. 
            </para>
            <para>
            The returned <see cref="T:DigitalRune.Graphics.Submesh"/> will have textured coordinates.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="numberOfDivisions"/> is less than or equal to 2.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.GetTeapot(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Gets the default submesh that represents a teapot using triangles.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <returns>
            The default submesh of a teapot. This submesh is shared and must not be modified!
            </returns>
            <remarks>
            The returned <see cref="T:DigitalRune.Graphics.Submesh"/> is a shared instance that must not be modified. 
            Use <see cref="M:DigitalRune.Graphics.MeshHelper.CreateTeapot(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Single,System.Int32)"/> to create a new <see cref="T:DigitalRune.Graphics.Submesh"/> instance.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.CreateTeapot(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Single,System.Int32)">
            <summary>
            Creates a new submesh that represents a teapot using triangles.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="size">The size of the teapot.</param>
            <param name="tessellation">The tessellation of the teapot in the range [1, 18].</param>
            <returns>A new <see cref="T:DigitalRune.Graphics.Submesh"/> that represents a teapot.</returns>
            <remarks>
            If the returned <see cref="T:DigitalRune.Graphics.Submesh"/> is not going to be modified, then it is better to call
            <see cref="M:DigitalRune.Graphics.MeshHelper.GetTeapot(DigitalRune.Graphics.IGraphicsService)"/> to retrieve a shared <see cref="T:DigitalRune.Graphics.Submesh"/> instance.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="tessellation"/> is less than 1.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.CreateTorus(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Single,System.Single,System.Int32)">
            <summary>
            Creates a new submesh that represents a torus using triangles.
            (The torus is centered at the origin.)
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="radius">The radius of the torus.</param>
            <param name="thickness">The thickness of the torus.</param>
            <param name="numberOfSegments">
            The number of segments. This parameter controls the detail of the mesh.
            </param>
            <returns>A new <see cref="T:DigitalRune.Graphics.Submesh"/> that represents a torus.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="numberOfSegments"/> is less than or equal to 2.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.GetUVSphere(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Gets the default submesh that represents a sphere using triangles.
            (The sphere is centered at the origin. Radius = 1.) 
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <returns>
            The default submesh of sphere. 
            This submesh is shared and must not be modified!
            </returns>
            <remarks>
            The returned <see cref="T:DigitalRune.Graphics.Submesh"/> is a shared instance that must not be modified. 
            Use <see cref="M:DigitalRune.Graphics.MeshHelper.CreateUVSphere(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)"/> to create a new <see cref="T:DigitalRune.Graphics.Submesh"/> instance.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.CreateUVSphere(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
            <summary>
            Creates a new submesh that represents a sphere using triangles.
            (The sphere is centered at the origin. Radius = 1.) 
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="numberOfSegments">
            The number of segments. This parameter controls the detail of the mesh.</param>
            <returns>A new <see cref="T:DigitalRune.Graphics.Submesh"/> that represents a sphere.</returns>
            <remarks>
            If the returned <see cref="T:DigitalRune.Graphics.Submesh"/> is not going to be modified, then it is better
            to call <see cref="M:DigitalRune.Graphics.MeshHelper.GetUVSphere(DigitalRune.Graphics.IGraphicsService)"/> to retrieve a shared <see cref="T:DigitalRune.Graphics.Submesh"/> instance.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="numberOfSegments"/> is less than or equal to 2.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.GetUncappedCylinder(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Gets the default submesh that represents an uncapped (open) cylinder using triangles. 
            (The cylinder centered at the origin. Radius = 1. Height = 2 (along the y axis).)
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <returns>
            The default submesh of an uncapped cylinder. 
            This submesh is shared and must not be modified!
            </returns>
            <remarks>
            The returned <see cref="T:DigitalRune.Graphics.Submesh"/> is a shared instance that must not be modified. 
            Use <see cref="M:DigitalRune.Graphics.MeshHelper.CreateUncappedCylinder(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)"/> to create a new <see cref="T:DigitalRune.Graphics.Submesh"/> instance.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MeshHelper.CreateUncappedCylinder(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
            <summary>
            Creates a new submesh that represents an uncapped (open) cylinder using triangles. 
            (The cylinder centered at the origin. Radius = 1. Height = 2 (along the y axis).)
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="numberOfSegments">
            The number of segments. This parameter controls the detail of the mesh.</param>
            <returns>
            A new <see cref="T:DigitalRune.Graphics.Submesh"/> that represents an uncapped cylinder (a cylinder without
            flat circle caps).
            </returns>
            <remarks>
            If the returned <see cref="T:DigitalRune.Graphics.Submesh"/> is not going to be modified, then it is better
            to call <see cref="M:DigitalRune.Graphics.MeshHelper.GetUncappedCylinder(DigitalRune.Graphics.IGraphicsService)"/> to retrieve a shared <see cref="T:DigitalRune.Graphics.Submesh"/> 
            instance.
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.MorphTarget">
            <summary>
            Defines a morph target (blend shape) of a submesh.
            </summary>
            <remarks>
            <para>
            <i>Morph target animation</i> (or per-vertex animation, blend shape interpolation) can be used
            to deform a model. It is primarily used for facial animation.
            </para>
            <para>
            The <see cref="T:DigitalRune.Graphics.Submesh"/> defines the base shape (neutral expression). A
            <see cref="T:DigitalRune.Graphics.MorphTarget"/> defines a deformed version of the base shape. Morph target animation
            typically involves several morph targets where each morph target represents a key shape
            (expressions such as "smile", "closed eye", "raised eyebrow"). A weight, usually in the range
            [0, 1], is assigned to each morph target. These weights control the influence of the morph
            targets and are animated over time. When the model is rendered the vertices are interpolated
            between the submesh and the morph targets.
            </para>
            <para>
            The submesh and the corresponding morph targets need to have the same structure. That is, the
            order of the vertices in the <see cref="P:DigitalRune.Graphics.MorphTarget.VertexBuffer"/> needs to match the order of the
            vertices in the submesh. The <see cref="P:DigitalRune.Graphics.MorphTarget.VertexBuffer"/> of morph target stores vertices of
            type <see cref="T:DigitalRune.Graphics.VertexPositionNormal"/>. Vertex positions and normals are relative to the
            submesh (difference between key shape and base shape, "delta shape").
            </para>
            <para>
            The morph target weights of a specific mesh instance are stored in the <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode"/>
            (see property <see cref="P:DigitalRune.Graphics.SceneGraph.MeshNode.MorphWeights"/>). These weights are used during rendering.
            </para>
            </remarks>
            <seealso cref="T:DigitalRune.Graphics.MorphWeightCollection"/>
            <seealso cref="P:DigitalRune.Graphics.Submesh.MorphTargets"/>
            <seealso cref="P:DigitalRune.Graphics.SceneGraph.MeshNode.MorphWeights"/>
        </member>
        <member name="P:DigitalRune.Graphics.MorphTarget.Name">
            <summary>
            Gets the name of the morph target.
            </summary>
            <value>The name of the morph target.</value>
        </member>
        <member name="P:DigitalRune.Graphics.MorphTarget.VertexBuffer">
            <summary>
            Gets or sets the vertex buffer.
            </summary>
            <value>The vertex buffer.</value>
            <remarks>
            Vertex buffers and index buffers may be shared between meshes, submeshes, or morph targets.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.MorphTarget.StartVertex">
            <summary>
            Gets or sets the index of the first vertex in the vertex buffer that belongs to this morph
            target (a.k.a base vertex or vertex offset).
            </summary>
            <value>The index of the first vertex in the vertex buffer.</value>
        </member>
        <member name="M:DigitalRune.Graphics.MorphTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.MorphTarget"/> class. 
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.MorphTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.MorphTarget"/> class.
            </summary>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is empty.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MorphTarget.Dispose">
            <summary>
            Releases all resources used by an instance of the <see cref="T:DigitalRune.Graphics.Submesh"/> class.
            </summary>
            <remarks>
            This method calls the virtual <see cref="M:DigitalRune.Graphics.MorphTarget.Dispose(System.Boolean)"/> method, passing in
            <see langword="true"/>, and then suppresses finalization of the instance.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.MorphTarget.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.Submesh"/> class 
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources;
            <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:DigitalRune.Graphics.MorphTargetCollection">
            <summary>
            Manages a collection of morph targets.
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Graphics.MorphTargetCollection"/> may only be assigned to one
            <see cref="T:DigitalRune.Graphics.Submesh"/>. It cannot be assigned to multiple submeshes simultaneously.
            </para>
            <para>
            Items in this collection must not be <see langword="null"/>.
            </para>
            </remarks>
            <seealso cref="T:DigitalRune.Graphics.MorphTarget"/>
        </member>
        <member name="P:DigitalRune.Graphics.MorphTargetCollection.Submesh">
            <summary>
            Gets or sets the submesh that owns the morph targets.
            </summary>
            <value>The submesh that owns the morph targets.</value>
        </member>
        <member name="M:DigitalRune.Graphics.MorphTargetCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.MorphTargetCollection"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.MorphTargetCollection.InvalidateMorphTargetNames">
            <summary>
            Clears the morph target names, which are cached by the <see cref="T:DigitalRune.Graphics.Mesh"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.MorphTargetCollection.ClearItems">
            <summary>
            Removes all morph targets from the collection.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.MorphTargetCollection.InsertItem(System.Int32,DigitalRune.Graphics.MorphTarget)">
            <summary>
            Inserts a morph target into the collection at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="item"/> should be inserted.
            </param>
            <param name="item">The morph target to insert.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MorphTargetCollection.RemoveItem(System.Int32)">
            <summary>
            Removes the morph target at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:DigitalRune.Graphics.MorphTargetCollection.SetItem(System.Int32,DigitalRune.Graphics.MorphTarget)">
            <summary>
            Replaces the morph target at the specified index.
            </summary>
            <param name="index">The zero-based index of the material to replace.</param>
            <param name="item">The new value for the morph target at the specified index.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.MorphWeight">
            <summary>
            Represent the weight of a morph target that can be animated (no base value).
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.MorphWeight.Value">
            <summary>
            Gets or sets the weight of the morph target.
            </summary>
            <value>The weight of the morph target.</value>
        </member>
        <member name="P:DigitalRune.Graphics.MorphWeight.DigitalRune#Animation#IAnimatableProperty#HasBaseValue">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Graphics.MorphWeight.DigitalRune#Animation#IAnimatableProperty#BaseValue">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Graphics.MorphWeight.DigitalRune#Animation#IAnimatableProperty#IsAnimated">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Graphics.MorphWeight.DigitalRune#Animation#IAnimatableProperty#AnimationValue">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Graphics.MorphWeight.DigitalRune#Animation#IAnimatableProperty{System#Single}#BaseValue">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Graphics.MorphWeight.DigitalRune#Animation#IAnimatableProperty{System#Single}#AnimationValue">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.MorphWeightCollection">
            <summary>
            Defines the weights for a set of morph targets.
            </summary>
            <remarks>
            <para>
            A mesh may include morph targets (see <see cref="P:DigitalRune.Graphics.Submesh.MorphTargets"/>). Each morph target
            is controlled by a <i>weight</i>, which is usually a value in the range [0, 1] or [-1, 1]. The
            <see cref="T:DigitalRune.Graphics.MorphWeightCollection"/> stores the weights for a set of morph targets.
            </para>
            <para>
            Morph targets are identified by their name. The extension method
            <see cref="M:DigitalRune.Graphics.MeshHelper.GetMorphTargetNames(DigitalRune.Graphics.Mesh)"/> can be used to get a list of all morph targets of a
            specific mesh.
            </para>
            <para>
            <strong>Animation:</strong><br/>
            The class <see cref="T:DigitalRune.Graphics.MorphWeightCollection"/> implements the interface
            <see cref="T:DigitalRune.Animation.IAnimatableObject"/>, which means that the weights can be animated using
            DigitalRune Animation. The animatable properties can be accessed by calling the method
            <see cref="M:DigitalRune.Animation.IAnimatableObject.GetAnimatableProperty``1(System.String)"/> passing the name of the morph target
            as the parameter.
            </para>
            <para>
            Note: The <see cref="T:DigitalRune.Animation.IAnimatableProperty"/>s (the morph target weights) do not have a base
            value and therefore cannot be used in some from-to-by animations or similar animations that
            require a base value.
            </para>
            </remarks>
            <seealso cref="T:DigitalRune.Graphics.MorphTarget"/>
            <seealso cref="P:DigitalRune.Graphics.Submesh.MorphTargets"/>
            <seealso cref="P:DigitalRune.Graphics.SceneGraph.MeshNode.MorphWeights"/>
        </member>
        <member name="T:DigitalRune.Graphics.MorphWeightCollection.Enumerator">
            <summary>
            Enumerates the weights of a <see cref="T:DigitalRune.Graphics.MorphWeightCollection"/>.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.MorphWeightCollection.Enumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The element in the collection at the current position of the enumerator.</value>
        </member>
        <member name="P:DigitalRune.Graphics.MorphWeightCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The element in the collection at the current position of the enumerator.</value>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last 
            element.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MorphWeightCollection.Enumerator.#ctor(DigitalRune.Graphics.MorphWeightCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.MorphWeightCollection.Enumerator"/> struct.
            </summary>
            <param name="morphWeights">The <see cref="T:DigitalRune.Graphics.MorphWeightCollection"/> to be enumerated.</param>
        </member>
        <member name="M:DigitalRune.Graphics.MorphWeightCollection.Enumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting 
            unmanaged resources.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.MorphWeightCollection.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <see langword="true"/> if the enumerator was successfully advanced to the next element; 
            <see langword="false"/> if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MorphWeightCollection.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the 
            collection.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.MorphWeightCollection.Name">
            <summary>
            Gets or sets the name of the <see cref="T:DigitalRune.Graphics.MorphWeightCollection"/>.
            </summary>
            <value>
            The name of the <see cref="T:DigitalRune.Graphics.MorphWeightCollection"/>. The default value is the name of the
            <see cref="T:DigitalRune.Graphics.Mesh"/> or <see langword="null"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.MorphWeightCollection.Count">
            <summary>
            Gets the number of morph targets.
            </summary>
            <value>The number of morph targets.</value>
        </member>
        <member name="P:DigitalRune.Graphics.MorphWeightCollection.Item(System.String)">
            <summary>
            Gets or sets the weight of the specified morph target.
            </summary>
            <param name="name">The name of the morph target.</param>
            <value>The weight of the morph target.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            No morph target with the given <paramref name="name"/> was found.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MorphWeightCollection.#ctor(DigitalRune.Graphics.Mesh)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.MorphWeightCollection"/> class for the specified mesh.
            </summary>
            <param name="mesh">The mesh.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="mesh"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="mesh"/> does not include any morph targets.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MorphWeightCollection.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.MorphWeightCollection"/> class for the specified morph
            targets.
            </summary>
            <param name="morphTargetNames">The names of the morph targets.</param>
            <exception cref="T:System.ArgumentException">
            No parameters specified. Or the name of a morph target is null or empty.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.MorphWeightCollection.#ctor(DigitalRune.Graphics.MorphWeightCollection)">
            <summary>
            Creates a copy of the specified <see cref="T:DigitalRune.Graphics.MorphWeightCollection"/> instance.
            </summary>
            <param name="source">The source <see cref="T:DigitalRune.Graphics.MorphWeightCollection"/>.</param>
        </member>
        <member name="M:DigitalRune.Graphics.MorphWeightCollection.Clone">
            <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.MorphWeightCollection"/> that is a clone (deep copy) of the current 
            instance.
            </summary>
            <returns>
            A new <see cref="T:DigitalRune.Graphics.MorphWeightCollection"/> that is a clone (deep copy) of the current instance.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.MorphWeightCollection.Reset">
            <summary>
            Clears the weights of all morph targets.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.MorphWeightCollection.Contains(System.String)">
            <summary>
            Determines whether the <see cref="T:DigitalRune.Graphics.MorphWeightCollection"/> contains a morph target with the specified
            name.
            </summary>
            <param name="name">The name of the morph target.</param>
            <returns>
            <see langword="true"/> if this instance contains a morph target with the given
            <paramref name="name"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.MorphWeightCollection.TryGetValue(System.String,System.Single@)">
            <summary>
            Gets the weight for the specified morph target.
            </summary>
            <param name="name">The name of the morph target.</param>
            <param name="weight">The weight of the morph target.</param>
            <returns>
            <see langword="true"/> if the <see cref="T:DigitalRune.Graphics.MorphWeightCollection"/> contains the specified morph target;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.MorphWeightCollection.DigitalRune#Animation#IAnimatableObject#GetAnimatedProperties">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.MorphWeightCollection.DigitalRune#Animation#IAnimatableObject#GetAnimatableProperty``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.MorphWeightCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the morph target weights.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the morph target weights.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.MorphWeightCollection.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Single}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.MorphWeightCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:DigitalRune.Graphics.Teapot">
            <summary>
            "The" teapot.
            </summary>
            <remarks>
            This teapot model was created by Martin Newell and Jim Blinn in 1975.
            It consists of ten cubic Bézier patches, a type of curved surface which
            can be tessellated to create triangles at various levels of detail. The
            use of curved surfaces allows a smoothly curved, visually interesting,
            and instantly recognizable shape to be specified by a tiny amount of
            data, which made the teapot a popular test data set for computer graphics
            researchers. It has been used in so many papers and demos that many
            graphics programmers have come to think of it as a standard geometric
            primitive, right up there with cubes and spheres!
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.Teapot.TeapotPatch">
            <summary>
            The teapot model consists of 10 Bézier patches. Each patch has 16 control
            points, plus a flag indicating whether it should be mirrored in the Z axis
            as well as in X (all of the teapot is symmetrical from left to right, but
            only some parts are symmetrical from front to back). The control points
            are stored as integer indices into the TeapotControlPoints array.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Teapot.TeapotPatches">
            <summary>
            Static data array defines the Bézier patches that make up the teapot.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Teapot.TeapotControlPoints">
            <summary>
            Static array defines the control point positions that make up the teapot.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Teapot.CurrentVertex">
            <summary>
            Queries the index of the current vertex. This starts at zero, and increments every time 
            a vertex is added.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Teapot.Vertices">
            <summary>
            Gets the vertices of the teapot.
            </summary>
            <value>The vertices of the teapot.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Teapot.Indices">
            <summary>
            Gets the indices of the teapot.
            </summary>
            <value>The indices of the teapot.</value>
        </member>
        <member name="M:DigitalRune.Graphics.Teapot.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Teapot"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Teapot"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Teapot.#ctor(System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Teapot"/> class using the specified settings.
            </summary>
            <param name="size">The size of the teapot.</param>
            <param name="tessellation">The tessellation level [1, 18].</param>
            <remarks>
            The maximum tessellation level when using a 16-bit index buffer is 18!
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Teapot.TessellatePatch(DigitalRune.Graphics.Teapot.TeapotPatch,System.Int32,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Tessellates the specified Bézier patch.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Teapot.CreatePatchIndices(System.Int32,System.Boolean)">
            <summary>
            Creates indices for a patch that is tessellated at the specified level.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Teapot.CreatePatchVertices(Microsoft.Xna.Framework.Vector3[],System.Int32,System.Boolean)">
            <summary>
            Creates vertices for a patch that is tessellated at the specified level.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Teapot.Bezier(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Performs a cubic Bézier interpolation between four scalar control
            points, returning the value at the specified time (t ranges 0 to 1).
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Teapot.Bezier(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Performs a cubic Bézier interpolation between four Vector3 control
            points, returning the value at the specified time (t ranges 0 to 1).
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Teapot.BezierTangent(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Computes the tangent of a cubic Bézier curve at the specified time,
            when given four scalar control points.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Teapot.BezierTangent(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Computes the tangent of a cubic Bézier curve at the specified time,
            when given four Vector3 control points. This is used for calculating
            normals (by crossing the horizontal and vertical tangent vectors).
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Submesh">
            <summary>
            Represents a batch of geometry information to submit to the graphics device during rendering.
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Graphics.Mesh"/> has a collection of <see cref="P:DigitalRune.Graphics.Mesh.Materials"/> and is
            subdivided into several submeshes. Each <see cref="T:DigitalRune.Graphics.Submesh"/> describes a batch of primitives
            that use the same vertex buffer and the same material, which means a submesh can be rendered
            with one draw call. 
            </para>
            <para>
            The submesh references a <see cref="P:DigitalRune.Graphics.Submesh.VertexBuffer"/> and an <see cref="P:DigitalRune.Graphics.Submesh.IndexBuffer"/>. These
            buffers are usually shared with other submeshes of the same model.
            </para>
            <para>
            The submesh uses a continuous part of the <see cref="P:DigitalRune.Graphics.Submesh.VertexBuffer"/>, starting at
            <see cref="P:DigitalRune.Graphics.Submesh.StartVertex"/> and containing <see cref="P:DigitalRune.Graphics.Submesh.VertexCount"/> vertices. The submesh also
            uses a continuous part of the <see cref="P:DigitalRune.Graphics.Submesh.IndexBuffer"/>, starting at <see cref="P:DigitalRune.Graphics.Submesh.StartIndex"/>.
            <see cref="P:DigitalRune.Graphics.Submesh.PrimitiveCount"/> defines the number of primitives (usually triangles) that belong
            to this submesh.
            </para>
            </remarks>
            <seealso cref="T:DigitalRune.Graphics.Effects.EffectBinding"/>
            <seealso cref="T:DigitalRune.Graphics.Material"/>
            <seealso cref="P:DigitalRune.Graphics.Submesh.Mesh"/>
        </member>
        <member name="F:DigitalRune.Graphics.Submesh.Id">
            <summary>Temporary ID set during rendering.</summary>
        </member>
        <member name="P:DigitalRune.Graphics.Submesh.Mesh">
            <summary>
            Gets the mesh that own this submesh.
            </summary>
            <value>The mesh.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Submesh.PrimitiveType">
            <summary>
            Gets or sets the type of the primitive.
            </summary>
            <value>The type of the primitive. The default type is triangle list.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Submesh.VertexBuffer">
            <summary>
            Gets or sets the vertex buffer.
            </summary>
            <value>The vertex buffer.</value>
            <remarks>
            Vertex buffers and index buffers may be shared between meshes, submeshes, or morph targets.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Submesh.VertexBufferEx">
            <summary>
            Gets the <see cref="P:DigitalRune.Graphics.Submesh.VertexBufferEx"/>.
            </summary>
            <value>The <see cref="P:DigitalRune.Graphics.Submesh.VertexBufferEx"/>.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Submesh.StartVertex">
            <summary>
            Gets or sets the index of the first vertex in the vertex buffer that belongs to this submesh
            (a.k.a base vertex or vertex offset).
            </summary>
            <value>The index of the first vertex in the vertex buffer.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Submesh.VertexCount">
            <summary>
            Gets or sets the number of vertices.
            </summary>
            <value>The number of vertices.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Submesh.IndexBuffer">
            <summary>
            Gets or sets the index buffer.
            </summary>
            <value>The index buffer.</value>
            <remarks>
            Vertex buffers and index buffers may be shared between meshes or submeshes.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Submesh.StartIndex">
            <summary>
            Gets or sets the location in the index array at which to start reading vertices.
            </summary>
            <value>Location in the index array at which to start reading vertices.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Submesh.PrimitiveCount">
            <summary>
            Gets or sets the number of primitives (usually the number of triangles).
            </summary>
            <value>The number of primitives.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Submesh.MaterialIndex">
            <summary>
            Gets or sets or sets the index of the material.
            </summary>
            <value>
            The index of the material in the <see cref="P:DigitalRune.Graphics.Mesh.Materials"/> collection.
            The default value is 0.
            </value>
            <remarks>
            A <see cref="T:DigitalRune.Graphics.Material"/> defines the effect bindings per render pass.
            </remarks>
            <seealso cref="T:DigitalRune.Graphics.Effects.EffectBinding"/>
            <seealso cref="T:DigitalRune.Graphics.Material"/>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is out of range.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.Submesh.HasMorphTargets">
            <summary>
            Gets a value indicating whether this submesh has morph targets.
            </summary>
            <value>
            <see langword="true"/> if this submesh has morph targets; otherwise,
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Submesh.MorphTargets">
            <summary>
            Gets or sets the morph targets of the submesh.
            </summary>
            <value>
            The morph targets of the submesh. The default value is <see langword="null"/>.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The specified <see cref="T:DigitalRune.Graphics.MorphTargetCollection"/> cannot be assigned to the 
            <see cref="T:DigitalRune.Graphics.Submesh"/> because it already belongs to another <see cref="T:DigitalRune.Graphics.Submesh"/> instance.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.Submesh.UserData">
            <summary>
            Gets or sets user-defined data.
            </summary>
            <value>User-defined data.</value>
            <remarks>
            This property is intended for application-specific data and is not used by the submesh 
            itself. 
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Submesh.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Submesh"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Submesh.Dispose">
            <summary>
            Releases all resources used by an instance of the <see cref="T:DigitalRune.Graphics.Submesh"/> class.
            </summary>
            <remarks>
            This method calls the virtual <see cref="M:DigitalRune.Graphics.Submesh.Dispose(System.Boolean)"/> method, passing in 
            <see langword="true"/>, and then suppresses finalization of the instance.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Submesh.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.Submesh"/> class 
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources; 
            <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.Submesh.InvalidateMorphTargetNames">
            <summary>
            Clears the morph target names, which are cached by the <see cref="P:DigitalRune.Graphics.Submesh.Mesh"/>.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.SubmeshCollection">
            <summary>
            Represents a collection of <see cref="T:DigitalRune.Graphics.Submesh"/>es. 
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SubmeshCollection.#ctor(DigitalRune.Graphics.Mesh)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SubmeshCollection"/> class.
            </summary>
            <param name="owner">The <see cref="T:DigitalRune.Graphics.Mesh"/> that owns this collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="owner"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SubmeshCollection.GetParent(DigitalRune.Graphics.Submesh)">
            <summary>
            Gets the parent of an object.
            </summary>
            <param name="child">The child object.</param>
            <returns>The parent of <paramref name="child"/>.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.SubmeshCollection.SetParent(DigitalRune.Graphics.Submesh,DigitalRune.Graphics.Mesh)">
            <summary>
            Sets the parent of the given object.
            </summary>
            <param name="child">The child object.</param>
            <param name="parent">The parent to set.</param>
        </member>
        <member name="T:DigitalRune.Graphics.VertexBufferEx">
            <summary>
            Provides additional data for a <see cref="T:Microsoft.Xna.Framework.Graphics.VertexBuffer"/>.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.VertexBufferEx.SubmeshCount">
            <summary>Counts the submeshes for this vertex buffer during rendering.</summary>
        </member>
        <member name="M:DigitalRune.Graphics.VertexBufferEx.From(Microsoft.Xna.Framework.Graphics.VertexBuffer)">
            <summary>
            Gets the <see cref="T:DigitalRune.Graphics.VertexBufferEx"/> for the specified <see cref="T:Microsoft.Xna.Framework.Graphics.VertexBuffer"/>.
            </summary>
            <param name="vertexBuffer">The vertexBuffer.</param>
            <returns>The <see cref="T:DigitalRune.Graphics.VertexBufferEx"/>.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.Occluder">
            <summary>
            Defines an occluder represented as an indexed triangle mesh.
            </summary>
            <remarks>
            <para>
            <i>Occlusion culling</i> is the process of determining which scene nodes are hidden from a
            certain viewpoint. This is achieved by testing the scene nodes against a set of occluders. An
            <i>occluder</i> is an object within a scene that obscures the view and prevents objects behind
            it from being seen. In theory, any opaque object within a scene acts as occluder. However,
            most scene nodes (e.g. meshes) are too complex to be considered as occluders during occlusion
            culling.
            </para>
            <para>
            <strong>Occlusion Proxies:</strong><br/>
            The class <see cref="T:DigitalRune.Graphics.Occluder"/> defines a triangle mesh that acts as an occluder for
            occlusion culling. An <see cref="T:DigitalRune.Graphics.Occluder"/> is usually a lightweight representations of more
            complex scene node. Example: An <see cref="T:DigitalRune.Graphics.Occluder"/> storing a simple quad (2 triangles) can
            be used to approximate a complex wall (mesh with many triangles).
            </para>
            <para>
            An occluder can be assigned to a <see cref="T:DigitalRune.Graphics.Mesh"/> (property <see cref="P:DigitalRune.Graphics.Mesh.Occluder"/>) or
            can be added directly to a scene using an <see cref="T:DigitalRune.Graphics.SceneGraph.OccluderNode"/>. The
            <see cref="T:DigitalRune.Graphics.SceneGraph.OccluderNode"/> is often attached as child node to the scene node that it
            represents. This ensures that the occluder is updated automatically when the parent scene node
            is moved.
            </para>
            <para>
            The occluder geometry needs to be conservative, i.e. the triangle mesh needs to fit inside the
            object that it represents. Otherwise it may prevent visible objects from being rendered.
            </para>
            </remarks>
            <seealso cref="P:DigitalRune.Graphics.Mesh.Occluder"/>
            <seealso cref="T:DigitalRune.Graphics.SceneGraph.OccluderNode"/>
            <seealso cref="T:DigitalRune.Graphics.Rendering.OcclusionBuffer"/>
        </member>
        <member name="P:DigitalRune.Graphics.Occluder.Vertices">
            <summary>
            Gets the triangle vertices.
            </summary>
            <value>The triangle vertices.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Occluder.Indices">
            <summary>
            Gets the triangle indices.
            </summary>
            <value>The triangle indices.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Occluder.Shape">
            <summary>
            Gets the bounding shape.
            </summary>
            <value>The bounding shape.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Occluder.DigitalRune#Geometry#Meshes#ITriangleMesh#NumberOfTriangles">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Occluder.#ctor(DigitalRune.Mathematics.Algebra.Vector3F[],System.Int32[])">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Occluder"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Occluder"/> class. (CLS-compliant constructor.
            If possible use <see cref="M:DigitalRune.Graphics.Occluder.#ctor(DigitalRune.Mathematics.Algebra.Vector3F[],System.UInt16[])"/>)
            </summary>
            <param name="vertices">The vertex array.</param>
            <param name="indices">The index array.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vertices"/> or <paramref name="indices"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="vertices"/> or <paramref name="indices"/> is empty.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Occluder.#ctor(DigitalRune.Mathematics.Algebra.Vector3F[],System.Int16[])">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Occluder"/> class. (CLS-compliant constructor.
            If possible use <see cref="M:DigitalRune.Graphics.Occluder.#ctor(DigitalRune.Mathematics.Algebra.Vector3F[],System.UInt16[])"/>)
            </summary>
            <param name="vertices">The vertex array.</param>
            <param name="indices">The index array.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vertices"/> or <paramref name="indices"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="vertices"/> or <paramref name="indices"/> is empty.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Occluder.#ctor(DigitalRune.Mathematics.Algebra.Vector3F[],System.UInt16[])">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Occluder"/> class. (Recommended constructor.)
            </summary>
            <param name="vertices">The vertex array.</param>
            <param name="indices">The index array.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vertices"/> or <paramref name="indices"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="vertices"/> or <paramref name="indices"/> is empty.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Occluder.DigitalRune#Geometry#Meshes#ITriangleMesh#GetTriangle(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.RenderToTexture">
            <summary>
            Represents a 2D texture or cube map that was created using render-to-texture functionality.
            </summary>
            <remarks>
            <para>
            <see cref="T:DigitalRune.Graphics.SceneGraph.RenderToTextureNode"/>s can be used to create scene captures, e.g. for real-time
            reflections. This class represents the target <see cref="P:DigitalRune.Graphics.RenderToTexture.Texture"/> and the
            <see cref="P:DigitalRune.Graphics.RenderToTexture.TextureMatrix"/> for projective texture mapping.
            </para>
            <para>
            The <see cref="P:DigitalRune.Graphics.RenderToTexture.Texture"/> must be set by the user. It is not created automatically.
            <see cref="P:DigitalRune.Graphics.RenderToTexture.Texture"/> must be a valid render target: <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/> or
            <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTargetCube"/>. The property specifies which kind of texture should be
            captured and the target resolution, format, etc. Render-to-texture renderers will render into
            this render target.
            </para>
            The <see cref="P:DigitalRune.Graphics.RenderToTexture.TextureMatrix"/> is set automatically. Its purpose depends on the type of the
            target texture (2D or cube map). See property <see cref="P:DigitalRune.Graphics.RenderToTexture.TextureMatrix"/> for details.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.RenderToTexture.Texture">
            <summary>
            Gets or sets the render target.
            </summary>
            <value>
            The render target. Must be a <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/> or <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTargetCube"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.RenderToTexture.TextureMatrix">
            <summary>
            Gets the texture matrix.
            </summary>
            <value>The texture matrix.</value>
            <remarks>
            <para>
            This matrix is set automatically.
            </para>
            <para>
            When the target <see cref="P:DigitalRune.Graphics.RenderToTexture.Texture"/> is a 2D render target, this matrix represents a
            projective texturing matrix. It transforms world space positions to texture space.
            </para>
            <para>
            When the target <see cref="P:DigitalRune.Graphics.RenderToTexture.Texture"/> is a cube map render target, this matrix represents 
            the orientation of the cube map. It transforms world space directions to texture space.
            Usually, the cube map will be aligned with the world space axes, and this matrix will
            be the identity matrix.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.RenderToTexture.LastFrame">
            <summary>
            Gets the number of the last frame in which the texture was rendered.
            </summary>
            <value>The number of the frame in which the texture was rendered.</value>
            <remarks>
            The property <see cref="P:DigitalRune.Graphics.RenderToTexture.LastFrame"/> can be used to determine when the texture was updated
            the last time. (Note: When using <see cref="T:DigitalRune.Graphics.SceneGraph.RenderToTextureNode"/>s, the texture is usually
            only updated when the <see cref="T:DigitalRune.Graphics.SceneGraph.RenderToTextureNode"/> is visible from the player's point
            of view.)
            </remarks>
            <seealso cref="P:DigitalRune.Graphics.IGraphicsService.Frame"/>
        </member>
        <member name="M:DigitalRune.Graphics.RenderToTexture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.RenderToTexture"/> class.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.CascadedShadow">
            <summary>
            Defines a cascaded shadow that can be used for <see cref="T:DigitalRune.Graphics.DirectionalLight"/>s.
            </summary>
            <remarks>
            <para>
            A cascaded shadow map splits the camera frustum into separate slices (up to 4). For each slice
            a shadow map is computed.
            </para>
            <para>
            A "slice" is also called "cascade interval", "sub-frustum" or simply "cascade". The word
            "cascade" actually means "a series of stages" - however, it is common to use the term
            "cascade" to describe an individual slice and this term is used here too.
            </para>
            <para>
            The term "split" could refer to the border between two slices (4 cascades = 3 splits) or to
            the slices (cascade = split). Therefore, the term "split" has to be used with care.
            </para>
            <para>
            <see cref="P:DigitalRune.Graphics.CascadedShadow.Distances"/> defines the cascade split distances and the maximum shadow distance.
            </para>
            <para>
            <see cref="P:DigitalRune.Graphics.Shadow.PreferredSize"/> defines the size of a single cascade of the cascaded shadow
            map.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.CascadedShadow.ShadowMap">
            <inheritdoc cref="P:DigitalRune.Graphics.Shadow.ShadowMap"/>
        </member>
        <member name="P:DigitalRune.Graphics.CascadedShadow.NumberOfCascades">
            <summary>
            Gets or sets the number of cascades.
            </summary>
            <value>The number of cascades (1 - 4). The default value is 4.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is less than 1 or greater than 4.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.CascadedShadow.Distances">
            <summary>
            Gets or sets the cascade split distances.
            </summary>
            <value>
            The cascade split distances in world space. The default value is (4, 12, 20, 80).
            </value>
            <remarks>
            <para>
            This vector contains the distances where the camera frustum is split in world space in
            following order: (split 0-1, split 1-2, split 2-3, max shadow distance). If the
            <see cref="P:DigitalRune.Graphics.CascadedShadow.NumberOfCascades"/> is less than 4, then the last components are ignored.
            </para>
            <para>
            For example, if <see cref="P:DigitalRune.Graphics.CascadedShadow.Distances"/> is (4, 12, 20, 80), then the first cascade covers an
            area 4 units in front of the camera. The second cascade covers an area up to 12 units. The
            third cascade covers the area up to 20 units. The last cascade always covers the remaining
            area. The max. shadow distance is 80. The renderer does not need to render shadows beyond
            80 units in front of the camera.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.CascadedShadow.MinLightDistance">
            <summary>
            Gets or sets the minimal distance of the light projection to the camera frustum of a
            cascade.
            </summary>
            <value>The minimum light distance from the camera frustum. The default value is 100.</value>
            <remarks>
            To compute the shadow map an orthographic projection is fitted to the partial frustum of a
            cascade. The near plane of this orthographic projection should be moved as close as possible
            to the cascade - but not too close in order to catch occluders in front of the cascade.
            <see cref="P:DigitalRune.Graphics.CascadedShadow.MinLightDistance"/> defines the minimum allowed distance of the shadow projection
            near plane from the cascade.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.CascadedShadow.DepthBias">
            <summary>
            Gets or sets the depth bias used to remove "surface acne".
            </summary>
            <value>
            The depth bias for each of the 4 cascades in shadow map texels.
            The default value is (5, 5, 5, 5).
            </value>
            <remarks>
            <para>
            This value is used to modify the depth value of the shadow-receiving pixel. A positive value
            moves the receiver closer to the light source (into the light), a negative value moves the
            receiver farther away from the light source (into the shadow). If this value is too large,
            the shadow becomes visually disconnected from the occluder (a.k.a. "Peter Panning").
            </para>
            <para>
            This value is relative to the shadow map resolution. A depth bias of 1 changes the depth by
            the size of one shadow map texel. Therefore, the depth bias values automatically scale with
            the shadow map resolution of each cascade. You can set 4 different values to tune the depth
            bias for each cascade.
            </para>
            <para>
            The <see cref="P:DigitalRune.Graphics.CascadedShadow.DepthBias"/> is used to remove "surface acne" at surfaces facing the light
            source. The <see cref="P:DigitalRune.Graphics.CascadedShadow.NormalOffset"/> is used to remove "surface acne" at steep angles,
            i.e. surface parallel to the light direction. In practice a combination of
            <see cref="P:DigitalRune.Graphics.CascadedShadow.DepthBias"/> and <see cref="P:DigitalRune.Graphics.CascadedShadow.NormalOffset"/> is required to remove shadow
            artifacts.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.CascadedShadow.NormalOffset">
            <summary>
            Gets or sets the normal offset used to remove "surface acne".
            </summary>
            <value>
            The normal offset for each of the 4 cascades in shadow map texels. 
            The default value is (2, 2, 2, 2).
            </value>
            <remarks>
            <para>
            This value is used to modify the position of shadow receivers. This has the effect of moving
            the receiver into the direction of the receiver's surface normal. This helps to remove
            "surface acne" especially on steep slopes. If this value is too high, the shadow becomes
            visually disconnected from the occluder (a.k.a. "Peter Panning").
            </para>
            <para>
            This value is relative to the shadow map resolution. A normal offset of 1 moves the position
            by the size of one shadow map texel. Therefore, the normal offset values automatically scale
            with the shadow map resolution of each cascade. You can set 4 different values to tune the
            normal offset for each cascade.
            </para>
            <para>
            The <see cref="P:DigitalRune.Graphics.CascadedShadow.DepthBias"/> is used to remove "surface acne" at surfaces facing the light
            source. The <see cref="P:DigitalRune.Graphics.CascadedShadow.NormalOffset"/> is used to remove "surface acne" at steep angles,
            i.e. surface parallel to the light direction. In practice a combination of
            <see cref="P:DigitalRune.Graphics.CascadedShadow.DepthBias"/> and <see cref="P:DigitalRune.Graphics.CascadedShadow.NormalOffset"/> is required to remove shadow
            artifacts.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.CascadedShadow.NumberOfSamples">
            <summary>
            Gets or sets the number of filter samples.
            </summary>
            <value>The number of PCF samples. The default value is -1 (see remarks).</value>
            <remarks>
            If this value is -1 (default), the shadow mask renderer will use predefined and optimized
            sampling pattern. If this value is 0, the shadow map is sampled once without any PCF
            (percentage closer filtering). If this value is 1, the shadow map is sampled with one
            jittered sample without any PCF. If this value is greater than 1, the shadow map is sampled
            with the given number of PCF samples.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.CascadedShadow.FilterRadius">
            <summary>
            Gets or sets the filter radius.
            </summary>
            <value>The filter radius in texels. The default value of is 1.</value>
        </member>
        <member name="P:DigitalRune.Graphics.CascadedShadow.JitterResolution">
            <summary>
            Gets or sets the jitter resolution (for jitter sampling).
            </summary>
            <value>
            The jitter resolution. The jitter resolution is the number of noise texels per world space
            unit. The default value is 2048.
            </value>
            <remarks>
            This value is only used when jitter sampling is applied to filter shadow edges. Jitter
            sampling uses a noise pattern to choose which shadow map texels are sampled. This noise is
            stable in world space. The <see cref="P:DigitalRune.Graphics.CascadedShadow.JitterResolution"/> defines the size of the jitter
            pattern relative to the world. If the jitter resolution is too high, then the noise becomes
            visually unstable when the camera moves (because there are too many noise pixels per screen
            pixel). Low jitter resolutions can cause a coarse blocky noise patterns.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.CascadedShadow.FadeOutRange">
            <summary>
            Gets or sets the relative distance over which shadows are faded out.
            </summary>
            <value>
            The relative distance over which shadows are faded out. The value is in the range
            [0, 1]. The default is 0.1 (= 10 %).
            </value>
            <remarks>
            Near the maximum shadow distance defined by <see cref="P:DigitalRune.Graphics.CascadedShadow.Distances"/> shadows are faded
            towards the <see cref="P:DigitalRune.Graphics.CascadedShadow.ShadowFog"/> value. <see cref="P:DigitalRune.Graphics.CascadedShadow.FadeOutRange"/> defines the fade out
            interval relative to the size of the last cascade.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.CascadedShadow.ShadowFog">
            <summary>
            Gets or sets the shadow factor that is used beyond the max shadow distance.
            </summary>
            <value>
            The shadow factor that is used beyond the maximum shadow distance defined by
            <see cref="P:DigitalRune.Graphics.CascadedShadow.Distances"/>. If this value is 0, then objects beyond the maximum shadow distance
            are not shadowed. If this value is 1, then objects beyond the max. distance are fully
            shadowed. The default value is 0.
            </value>
            <inheritdoc cref="P:DigitalRune.Graphics.CascadedShadow.FadeOutRange"/>
        </member>
        <member name="P:DigitalRune.Graphics.CascadedShadow.CascadeSelection">
            <summary>
            Gets or sets the cascade selection mode.
            </summary>
            <value>
            The cascade selection mode. The default is <see cref="F:DigitalRune.Graphics.ShadowCascadeSelection.Fast"/> on Xbox
            360 and <see cref="F:DigitalRune.Graphics.ShadowCascadeSelection.Best"/> on PC.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.CascadedShadow.VisualizeCascades">
            <summary>
            Gets or sets a value indicating whether cascades are visualized for debugging.
            </summary>
            <value>
            <see langword="true" /> if cascades are visualized for debugging; otherwise, 
            <see langword="false" />.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.CascadedShadow.IsCascadeLocked">
            <summary>
            Gets or sets the flags which determine if a cascade is locked.
            </summary>
            <value>
            A 4-elements array which determines if a cascade is locked. The default value is { false,
            false, false, false }, which means all 4 cascades are updated every time.
             </value>
            <remarks>
            <para>
            These flags can be used to control shadow map caching. <c>IsCascadeLocked[i]</c> determines
            if the <see cref="T:DigitalRune.Graphics.Rendering.ShadowMapRenderer"/> updates the cascade with index <c>i</c> or if it
            reuses the cached shadow map. Per default, all flags are <see langword="false"/> and the
            shadow maps of all cascades are updated every frame. If the flag of a cascade is set to
            <see langword="true"/>, the shadow map of the cascade is not rendered; the result of the
            last frame is used instead. The application can use this flags to determine when cascades
            need to be updated. (Note: If a flag is changed, it keeps this value until it is changed
            again. The flags are not automatically reset.)
            </para>
            <para>
            Example usages for shadow map caching:
            </para>
            <list type="bullet">
            <item>
            Update distant cascades less often.
            </item>
            <item>
            Do not update a cascade if it does not contain any dynamic objects and if the camera has not
            move.
            </item>
            <item>
            Distribute cascade updates over several frames. For example: Update cascade 0 and 1 every
            frame. Update cascade 2 in every odd numbered frame. Update cascade 3 in every even numbered
            frame.
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.CascadedShadow.SplitDistribution">
            <summary>
            Gets or sets the split distribution parameter.
            </summary>
            <value>The split distribution parameter. The default value is 0.9f.</value>
            <remarks>
            If this value is 0, the camera frustum is split using a uniform splitting scheme (the camera
            frustum is split at regular intervals). If this value is 1, the camera frustum is split 
            using a logarithmic splitting scheme. <see cref="P:DigitalRune.Graphics.CascadedShadow.SplitDistribution"/> can be set to values 
            between 0 and 1 to interpolate between uniform and logarithmic splitting.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.CascadedShadow.FadeOutDistance">
            <summary>
            Gets or sets the distance from the camera where the shadow starts to fade out.
            </summary>
            <value>The fade out distance.</value>
            <remarks>
            Shadows between [<see cref="P:DigitalRune.Graphics.CascadedShadow.FadeOutDistance"/>, <see cref="P:DigitalRune.Graphics.CascadedShadow.MaxDistance"/>] are faded out 
            towards the <see cref="P:DigitalRune.Graphics.CascadedShadow.ShadowFog"/> value.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.CascadedShadow.MaxDistance">
            <summary>
            Gets or sets the maximum distance from the camera up to which shadows are rendered. 
            </summary>
            <value>The maximum distance.</value>
            <inheritdoc cref="P:DigitalRune.Graphics.CascadedShadow.FadeOutDistance"/>
        </member>
        <member name="P:DigitalRune.Graphics.CascadedShadow.DepthBiasScale">
            <summary>
            Gets or sets the depth bias scale of each cascade used to remove surface acne.
            </summary>
            <value>
            The depth bias scale of each cascade. The default value of each cascade is 0.99f. 
            </value>
            <remarks>
            The depth value of the lit pixel is multiplied with this value. Use values lower than 1 to
            remove surface acne. If the value is too low, the shadow becomes visually disconnected from
            the occluder (a.k.a. "Peter Panning").
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.CascadedShadow.DepthBiasOffset">
            <summary>
            Gets or sets the depth bias offset of each cascade used to remove surface acne.
            </summary>
            <value>
            The depth bias offset of each cascade. The default value of each cascade is -0.001f.
            </value>
            <remarks>
            This value is added to the depth value of the lit pixel. Use values lower than 0 to remove
            surface acne. If the value is too low, the shadow becomes visually disconnected from the
            occluder (a.k.a. "Peter Panning").
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.CascadedShadow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.CascadedShadow"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.CascadedShadow.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.CascadedShadow.CloneCore(DigitalRune.Graphics.Shadow)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.CascadedShadow.ComputeSplitDistances(System.Single,System.Single,System.Int32,System.Single)">
            <summary>
            Computes the <see cref="P:DigitalRune.Graphics.CascadedShadow.Distances"/> for a <see cref="T:DigitalRune.Graphics.CascadedShadow"/>.
            </summary>
            <param name="near">The camera near plane distance.</param>
            <param name="maxDistance">The maximum shadow distance.</param>
            <param name="numberOfCascades">The number of cascades (2, 3 or 4).</param>
            <param name="splitDistribution">
            The split distribution parameter in the range [0, 1]. If this value is 0, the camera frustum
            is split using a uniform splitting scheme (the camera frustum is split at regular
            intervals). If this value is 1, the camera frustum is split using a logarithmic splitting
            scheme. A value between 0 and 1 can be used to interpolate between uniform and logarithmic
            splitting.
            </param>
            <returns>The split distances, which can be assigned to <see cref="P:DigitalRune.Graphics.CascadedShadow.Distances"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="numberOfCascades"/> is greater than 4. Or,
            <paramref name="splitDistribution"/> is not in the range [0, 1].
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.CompositeShadow">
            <summary>
            Defines a shadow which combines several other <see cref="T:DigitalRune.Graphics.Shadow"/>s.
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Graphics.CompositeShadow"/> owns a collection of child shadows (see property
            <see cref="P:DigitalRune.Graphics.CompositeShadow.Shadows"/>). The <see cref="T:DigitalRune.Graphics.CompositeShadow"/> itself does not compute a
            shadow map (<see cref="P:DigitalRune.Graphics.Shadow.ShadowMap"/> is always <see langword="null"/>). A shadow map is
            computed for each child shadow. The shadows of the child shadows will be combined in the
            <see cref="P:DigitalRune.Graphics.Shadow.ShadowMask"/> of the <see cref="T:DigitalRune.Graphics.CompositeShadow"/>. The
            <see cref="P:DigitalRune.Graphics.Shadow.ShadowMask"/>s of the child shadows will be <see langword="null"/>.
            </para>
            <para>
            Here ares some applications for composite shadows:
            </para>
            <list type="bullet">
            <item>
            Combine two <see cref="T:DigitalRune.Graphics.CascadedShadow"/>s. One shadow covers a large distance and contains
            only static objects. The second shadow covers a short distance and contains only dynamic
            objects.
            </item>
            <item>
            Combine a <see cref="T:DigitalRune.Graphics.CascadedShadow"/> with a custom variance shadow map. Use the variance
            shadow map to create smooth shadows for distant hills. Use the <see cref="T:DigitalRune.Graphics.CascadedShadow"/>
            for detailed shadows of other objects.
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.CompositeShadow.Shadows">
            <summary>
            Gets the list of shadows.
            </summary>
            <value>The list of shadows. Empty by default.</value>
        </member>
        <member name="M:DigitalRune.Graphics.CompositeShadow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.CompositeShadow"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.CompositeShadow.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.CompositeShadow.CloneCore(DigitalRune.Graphics.Shadow)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.CubeMapShadow">
            <summary>
            Defines an omnidirectional cube map shadow that can be used for <see cref="T:DigitalRune.Graphics.PointLight"/>s.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.CubeMapShadow.ShadowMap">
            <inheritdoc cref="P:DigitalRune.Graphics.Shadow.ShadowMap"/>
        </member>
        <member name="P:DigitalRune.Graphics.CubeMapShadow.Near">
            <summary>
            Gets or sets the near plane distance for the shadow projection.
            </summary>
            <value>
            The near plane distance for the shadow projection. The default value is 0.01f;
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.CubeMapShadow.DepthBias">
            <summary>
            Gets or sets the depth bias used to remove "surface acne".
            </summary>
            <value>The depth bias in shadow map texels. The default value is 2.</value>
            <remarks>
            <para>
            This value is used to modify the depth value of the shadow-receiving pixel. A positive value
            moves the receiver closer to the light source (into the light), a negative value moves the
            receiver farther away from the light source (into the shadow). If this value is too large,
            the shadow becomes visually disconnected from the occluder (a.k.a. "Peter Panning").
            </para>
            <para>
            This value is relative to the shadow map resolution. A depth bias of 1 changes the depth by
            the size of one shadow map texel. Therefore, the depth bias values automatically scale with
            the shadow map resolution.
            </para>
            <para>
            The <see cref="P:DigitalRune.Graphics.CubeMapShadow.DepthBias"/> is used to remove "surface acne" at surfaces facing the light
            source. The <see cref="P:DigitalRune.Graphics.CubeMapShadow.NormalOffset"/> is used to remove "surface acne" at steep angles,
            i.e. surface parallel to the light direction. In practice a combination of
            <see cref="P:DigitalRune.Graphics.CubeMapShadow.DepthBias"/> and <see cref="P:DigitalRune.Graphics.CubeMapShadow.NormalOffset"/> is required to remove shadow
            artifacts.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.CubeMapShadow.NormalOffset">
            <summary>
            Gets or sets the normal offset used to remove "surface acne".
            </summary>
            <value>The normal offset in shadow map texels. The default value is 2.</value>
            <remarks>
            <para>
            This value is used to modify the position of shadow receivers. This has the effect of moving
            the receiver into the direction of the receiver's surface normal. This helps to remove
            "surface acne" especially on steep slopes. If this value is too high, the shadow becomes
            visually disconnected from the occluder (a.k.a. "Peter Panning").
            </para>
            <para>
            This value is relative to the shadow map resolution. A normal offset of 1 moves the position
            by the size of one shadow map texel. Therefore, the normal offset values automatically scale
            with the shadow map resolution.
            </para>
            <para>
            The <see cref="P:DigitalRune.Graphics.CubeMapShadow.DepthBias"/> is used to remove "surface acne" at surfaces facing the light
            source. The <see cref="P:DigitalRune.Graphics.CubeMapShadow.NormalOffset"/> is used to remove "surface acne" at steep angles,
            i.e. surface parallel to the light direction. In practice a combination of
            <see cref="P:DigitalRune.Graphics.CubeMapShadow.DepthBias"/> and <see cref="P:DigitalRune.Graphics.CubeMapShadow.NormalOffset"/> is required to remove shadow
            artifacts.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.CubeMapShadow.NumberOfSamples">
            <summary>
            Gets or sets the number of filter samples.
            </summary>
            <value>The number of PCF samples. The default value is -1 (see remarks).</value>
            <remarks>
            If this value is -1 (default), the shadow mask renderer will use predefined and optimized
            sampling pattern. If this value is 0, the shadow map is sampled once without any PCF
            (percentage closer filtering). If this value is 1, the shadow map is sampled with one
            jittered sample without any PCF. If this value is greater than 1, the shadow map is sampled
            with the given number of PCF samples.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.CubeMapShadow.FilterRadius">
            <summary>
            Gets or sets the filter radius.
            </summary>
            <value>The filter radius in texels. The default value is 1.</value>
        </member>
        <member name="P:DigitalRune.Graphics.CubeMapShadow.JitterResolution">
            <summary>
            Gets or sets the jitter resolution (for jitter sampling).
            </summary>
            <value>
            The jitter resolution. The jitter resolution is the number of noise texels per world space
            unit. The default value is 2048.
            </value>
            <remarks>
            This value is only used when jitter sampling is applied to filter shadow edges. Jitter
            sampling uses a noise pattern to choose which shadow map texels are sampled. This noise is
            stable in world space. The <see cref="P:DigitalRune.Graphics.CubeMapShadow.JitterResolution"/> defines the size of the jitter
            pattern relative to the world. If the jitter resolution is too high, then the noise becomes
            visually unstable when the camera moves (because there are too many noise pixels per screen
            pixel). Low jitter resolutions can cause a coarse blocky noise patterns.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.CubeMapShadow.DepthBiasScale">
            <summary>
            Gets or sets the depth bias scale used to remove surface acne.
            </summary>
            <value>The depth bias scale. The default value is 0.99f.</value>
            <remarks>
            The depth value of the lit pixel is multiplied with this value. Use values lower than 1 to
            remove surface acne. If the value is too low, the shadow becomes visually disconnected from
            the occluder (a.k.a. "Peter Panning").
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.CubeMapShadow.DepthBiasOffset">
            <summary>
            Gets or sets the depth bias offset used to remove surface acne.
            </summary>
            <value>The depth bias offset. The default value is -0.001f.</value>
            <remarks>
            This value is added to the depth value of the lit pixel. Use values lower than 0 to remove
            surface acne. If the value is too low, the shadow becomes visually disconnected from the
            occluder (a.k.a. "Peter Panning").
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.CubeMapShadow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.CubeMapShadow"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.CubeMapShadow.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.CubeMapShadow.CloneCore(DigitalRune.Graphics.Shadow)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Shadow">
            <summary>
            Defines the shadow of a specific <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/>.
            </summary>
            <remarks>
            <para>
            This class defines the desired shadow map format. During rendering it stores a reference to
            the <see cref="P:DigitalRune.Graphics.Shadow.ShadowMap"/> and <see cref="P:DigitalRune.Graphics.Shadow.ShadowMask"/>.
            </para>
            <para>
            <strong>Cloning:</strong><br/>
            <see cref="T:DigitalRune.Graphics.Shadow"/>s are cloneable. <see cref="M:DigitalRune.Graphics.Shadow.Clone"/> creates a deep copy of the current 
            shadow - unless documented otherwise (see derived classes). The shadow settings, like 
            <see cref="P:DigitalRune.Graphics.Shadow.Prefer16Bit"/>, <see cref="P:DigitalRune.Graphics.Shadow.PreferredSize"/>, etc. are duplicated - but the actual 
            shadow maps or shadow masks are not copied, since these resources cannot be shared between
            different shadow casting light nodes and they are usually updated in each frame anyways.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Shadow.ShadowMap">
            <summary>
            Gets or sets the shadow map.
            </summary>
            <value>The shadow map. The default value is <see langword="null"/>.</value>
            <remarks>
            This property is set by the shadow map renderer.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Shadow.ShadowMask">
            <summary>
            Gets or sets the shadow mask.
            </summary>
            <value>The shadow mask. The default value is <see langword="null"/>.</value>
            <remarks>
            <para>
            This property is set by the shadow mask renderer.
            </para>
            <para>
            The shadow mask is a render target with the same size as the scene. It contains the filtered
            shadow values (0 = shadow, 1 = no shadow) as viewed from the camera.
            </para>
            </remarks>
            <seealso cref="P:DigitalRune.Graphics.Shadow.ShadowMaskChannel"/>
        </member>
        <member name="P:DigitalRune.Graphics.Shadow.ShadowMaskChannel">
            <summary>
            Gets or sets the shadow mask channel.
            </summary>
            <value>The shadow mask channel. The default value is 0.</value>
            <remarks>
            Each <see cref="P:DigitalRune.Graphics.Shadow.ShadowMask"/> can contain the shadow terms of several shadows. Each shadow
            uses one channel (R, G, B, or A) of the shadow mask. The <see cref="P:DigitalRune.Graphics.Shadow.ShadowMaskChannel"/> is
            the index of the used channel (0 = R, 1 = B, 2 = G, 3 = A).
            </remarks>
            <seealso cref="P:DigitalRune.Graphics.Shadow.ShadowMask"/>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is less than 0 or greater than 3.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.Shadow.PreferredSize">
            <summary>
            Gets or sets the size of the desired size of the shadow map in texels.
            </summary>
            <value>The preferred size of the shadow map in texels.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Shadow.Prefer16Bit">
            <summary>
            Gets or sets a value indicating whether the shadow map should use a 16-bit format to store
            depth.
            </summary>
            <value>
            <see langword="true"/> if a 16 bit shadow map format should be used; otherwise, 
            <see langword="false"/>. The default value is <see langword="true"/>.
            </value>
        </member>
        <member name="M:DigitalRune.Graphics.Shadow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Shadow"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Shadow.Clone">
            <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.Shadow"/> that is a clone (deep copy) of the current instance.
            </summary>
            <returns>
            A new <see cref="T:DigitalRune.Graphics.Shadow"/> that is a clone (deep copy) of the current instance.
            </returns>
            <remarks>
            <para>
            See class documentation of <see cref="T:DigitalRune.Graphics.Shadow"/> (Section "Cloning") for more information 
            about cloning.
            </para>
            <para>
            <strong>Notes to Inheritors:</strong> The method <see cref="M:DigitalRune.Graphics.Shadow.Clone"/> calls 
            <see cref="M:DigitalRune.Graphics.Shadow.CreateInstanceCore"/> which is responsible for creating a new instance of the 
            <see cref="T:DigitalRune.Graphics.Shadow"/> derived class and <see cref="M:DigitalRune.Graphics.Shadow.CloneCore(DigitalRune.Graphics.Shadow)"/> to create a copy of the 
            current instance. Classes that derive from <see cref="T:DigitalRune.Graphics.Shadow"/> need to implement 
            <see cref="M:DigitalRune.Graphics.Shadow.CreateInstanceCore"/> and <see cref="M:DigitalRune.Graphics.Shadow.CloneCore(DigitalRune.Graphics.Shadow)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Shadow.CreateInstance">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Shadow"/> class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            This is a private method, and the actual object-specific implementations for the behavior 
            are dependent on the override implementation of the <see cref="T:DigitalRune.Graphics.Shadow"/> method, which this 
            method calls internally. 
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cannot clone <see cref="T:DigitalRune.Graphics.Shadow"/>. A derived class does not implement 
            <see cref="M:DigitalRune.Graphics.Shadow.CreateInstanceCore"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Shadow.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Shadow"/> derived class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            <para>
            Do not call this method directly (except when calling base in an implementation). This 
            method is called internally by the <see cref="M:DigitalRune.Graphics.Shadow.Clone"/> method whenever a new instance of the
            <see cref="T:DigitalRune.Graphics.Shadow"/> derived class must implement this method. A typical implementation is to
            simply call the default constructor and return the result. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Shadow.CloneCore(DigitalRune.Graphics.Shadow)">
            <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Shadow"/>.
            </summary>
            <param name="source">The object to clone.</param>
            <remarks>
            <para>
            <strong>Notes to Inheritors:</strong> Every <see cref="T:DigitalRune.Graphics.Shadow"/> derived class must implement
            this method. A typical implementation is to call <c>base.CloneCore(this)</c> to copy all 
            properties of the base class and then copy all properties of the derived class.
            </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.ShadowCascadeSelection">
            <summary>
            Defines how the cascade of a cascaded shadow map is selected.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.ShadowCascadeSelection.Fast">
            <summary>
            The shadow cascade is selected using the fastest available method.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.ShadowCascadeSelection.Best">
            <summary>
            The optimal shadow cascade is selected. (Best visual result, but with seams between
            cascades.)
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.ShadowCascadeSelection.BestDithered">
            <summary>
            The optimal shadow cascade is selected using dithering to hide transitions between cascades.
            (Best visual result, but slower.)
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.ShadowCollection">
            <summary>
            Manages a collection of <see cref="T:DigitalRune.Graphics.Shadow"/>s.
            </summary>
            <remarks>
            <para>
            Duplicates items, <see langword="null"/> and <see cref="T:DigitalRune.Graphics.CompositeShadow"/>s are not allowed
            in the collection.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.ShadowCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:DigitalRune.Graphics.ShadowCollection"/>. 
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator"/> for <see cref="T:DigitalRune.Graphics.ShadowCollection"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.ShadowCollection.InsertItem(System.Int32,DigitalRune.Graphics.Shadow)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="item"/> should be inserted.
            </param>
            <param name="item">The object to insert.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>. The collection does not allow 
            <see langword="null"/> values.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="item"/> is a <see cref="T:DigitalRune.Graphics.CompositeShadow"/>. <see cref="T:DigitalRune.Graphics.CompositeShadow"/>s
            cannot be added to a shadow collection.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="item"/> is already contained in the collection. The collection does not 
            allow duplicate items.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.ShadowCollection.SetItem(System.Int32,DigitalRune.Graphics.Shadow)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>. The collection does not allow 
            <see langword="null"/> values.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or is greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="item"/> is a <see cref="T:DigitalRune.Graphics.CompositeShadow"/>. <see cref="T:DigitalRune.Graphics.CompositeShadow"/>s
            cannot be added to a shadow collection.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="item"/> is already contained in the collection. The collection does not 
            allow duplicate items.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.StandardShadow">
            <summary>
            Defines a standard shadow that can be used for <see cref="T:DigitalRune.Graphics.Spotlight"/>s or 
            <see cref="T:DigitalRune.Graphics.ProjectorLight"/>s.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.StandardShadow.ShadowMap">
            <inheritdoc cref="P:DigitalRune.Graphics.Shadow.ShadowMap"/>
        </member>
        <member name="P:DigitalRune.Graphics.StandardShadow.DefaultNear">
            <summary>
            Gets or sets the default near plane distance for the shadow projection.
            </summary>
            <value>The default near plane distance for the shadow projection.</value>
            <remarks>
            Some light sources define their own projection that is used to compute the shadows (e.g.
            <see cref="T:DigitalRune.Graphics.ProjectorLight"/>s). Some lights (e.g. <see cref="T:DigitalRune.Graphics.Spotlight"/>s) do not
            explicitly define a projection. In these cases this value defines the near plane distance
            that should be used for the shadow projection matrix.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.StandardShadow.DepthBias">
            <summary>
            Gets or sets the depth bias used to remove "surface acne".
            </summary>
            <value>The depth bias in shadow map texels. The default value is 2.</value>
            <remarks>
            <para>
            This value is used to modify the depth value of the shadow-receiving pixel. A positive value
            moves the receiver closer to the light source (into the light), a negative value moves the
            receiver farther away from the light source (into the shadow). If this value is too large,
            the shadow becomes visually disconnected from the occluder (a.k.a. "Peter Panning").
            </para>
            <para>
            This value is relative to the shadow map resolution. A depth bias of 1 changes the depth by
            the size of one shadow map texel. Therefore, the depth bias values automatically scale with
            the shadow map resolution.
            </para>
            <para>
            The <see cref="P:DigitalRune.Graphics.StandardShadow.DepthBias"/> is used to remove "surface acne" at surfaces facing the light
            source. The <see cref="P:DigitalRune.Graphics.StandardShadow.NormalOffset"/> is used to remove "surface acne" at steep angles,
            i.e. surface parallel to the light direction. In practice a combination of
            <see cref="P:DigitalRune.Graphics.StandardShadow.DepthBias"/> and <see cref="P:DigitalRune.Graphics.StandardShadow.NormalOffset"/> is required to remove shadow
            artifacts.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.StandardShadow.NormalOffset">
            <summary>
            Gets or sets the normal offset used to remove "surface acne".
            </summary>
            <value>The normal offset in shadow map texels. The default value is 2.</value>
            <remarks>
            <para>
            This value is used to modify the position of shadow receivers. This has the effect of moving
            the receiver into the direction of the receiver's surface normal. This helps to remove
            "surface acne" especially on steep slopes. If this value is too high, the shadow becomes
            visually disconnected from the occluder (a.k.a. "Peter Panning").
            </para>
            <para>
            This value is relative to the shadow map resolution. A normal offset of 1 moves the position
            by the size of one shadow map texel. Therefore, the normal offset values automatically scale
            with the shadow map resolution.
            </para>
            <para>
            The <see cref="P:DigitalRune.Graphics.StandardShadow.DepthBias"/> is used to remove "surface acne" at surfaces facing the light
            source. The <see cref="P:DigitalRune.Graphics.StandardShadow.NormalOffset"/> is used to remove "surface acne" at steep angles,
            i.e. surface parallel to the light direction. In practice a combination of
            <see cref="P:DigitalRune.Graphics.StandardShadow.DepthBias"/> and <see cref="P:DigitalRune.Graphics.StandardShadow.NormalOffset"/> is required to remove shadow
            artifacts.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.StandardShadow.NumberOfSamples">
            <summary>
            Gets or sets the number of filter samples.
            </summary>
            <value>The number of PCF samples. The default value is -1 (see remarks).</value>
            <remarks>
            If this value is -1 (default), the shadow mask renderer will use predefined and optimized
            sampling pattern. If this value is 0, the shadow map is sampled once without any PCF
            (percentage closer filtering). If this value is 1, the shadow map is sampled with one
            jittered sample without any PCF. If this value is greater than 1, the shadow map is sampled
            with the given number of PCF samples.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.StandardShadow.FilterRadius">
            <summary>
            Gets or sets the filter radius.
            </summary>
            <value>The filter radius in texels. The default value is 1.</value>
        </member>
        <member name="P:DigitalRune.Graphics.StandardShadow.JitterResolution">
            <summary>
            Gets or sets the jitter resolution (for jitter sampling).
            </summary>
            <value>
            The jitter resolution. The jitter resolution is the number of noise texels per world space
            unit. The default value is 2048.
            </value>
            <remarks>
            This value is only used when jitter sampling is applied to filter shadow edges. Jitter
            sampling uses a noise pattern to choose which shadow map texels are sampled. This noise is
            stable in world space. The <see cref="P:DigitalRune.Graphics.StandardShadow.JitterResolution"/> defines the size of the jitter
            pattern relative to the world. If the jitter resolution is too high, then the noise becomes
            visually unstable when the camera moves (because there are too many noise pixels per screen
            pixel). Low jitter resolutions can cause a coarse blocky noise patterns.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.StandardShadow.DepthBiasScale">
            <summary>
            Gets or sets the depth bias scale used to remove surface acne.
            </summary>
            <value>The depth bias scale. The default value is 0.99f.</value>
            <remarks>
            The depth value of the lit pixel is multiplied with this value. Use values lower than 1 to
            remove surface acne. If the value is too low, the shadow becomes visually disconnected from
            the occluder (a.k.a. "Peter Panning").
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.StandardShadow.DepthBiasOffset">
            <summary>
            Gets or sets the depth bias offset used to remove surface acne.
            </summary>
            <value>The depth bias offset. The default value is -0.001f.</value>
            <remarks>
            This value is added to the depth value of the lit pixel. Use values lower than 0 to remove
            surface acne. If the value is too low, the shadow becomes visually disconnected from the
            occluder (a.k.a. "Peter Panning").
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.StandardShadow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.StandardShadow"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.StandardShadow.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.StandardShadow.CloneCore(DigitalRune.Graphics.Shadow)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.CieSkyParameters">
            <summary>
            Defines the parameters of the CIE sky luminance distribution.
            </summary>
            <remarks>
            The CIE Sky Model uses 5 parameters a, b, c, d, e to define the distribution of luminance in
            the sky. This type provides parameters for several predefined sky types according to the CIE
            standard (see <see cref="F:DigitalRune.Graphics.CieSkyParameters.Type1"/> to <see cref="F:DigitalRune.Graphics.CieSkyParameters.Type15"/>).
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.CieSkyParameters.Type1">
            <summary>
            CIE Standard Overcast Sky, steep luminance gradation towards zenith, azimuthal uniformity.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.CieSkyParameters.Type2">
            <summary>
            Overcast, with steep luminance gradation and slight brightening towards the sun.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.CieSkyParameters.Type3">
            <summary>
            Overcast, moderately graded with azimuthal uniformity.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.CieSkyParameters.Type4">
            <summary>
            Overcast, moderately graded and slight brightening towards the sun.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.CieSkyParameters.Type5">
            <summary>
            Sky of uniform luminance.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.CieSkyParameters.Type6">
            <summary>
            Partly cloudy sky, no gradation towards zenith, slight brightening towards the sun.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.CieSkyParameters.Type7">
            <summary>
            Partly cloudy sky, no gradation towards zenith, brighter circumsolar region.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.CieSkyParameters.Type8">
            <summary>
            Partly cloudy sky, no gradation towards zenith, distinct solar corona.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.CieSkyParameters.Type9">
            <summary>
            Partly cloudy, with the obscured sun.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.CieSkyParameters.Type10">
            <summary>
            Partly cloudy, with brighter circumsolar region.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.CieSkyParameters.Type11">
            <summary>
            White-blue sky with distinct solar corona.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.CieSkyParameters.Type12">
            <summary>
            CIE Standard Clear Sky, low illuminance turbidity.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.CieSkyParameters.Type13">
            <summary>
            CIE Standard Clear Sky, polluted atmosphere.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.CieSkyParameters.Type14">
            <summary>
            Cloudless turbid sky with broad solar corona.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.CieSkyParameters.Type15">
            <summary>
            White-blue turbid sky with broad solar corona.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.CieSkyParameters.A">
            <summary>The parameter a of the CIE Sky Model.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.CieSkyParameters.B">
            <summary>The parameter b of the CIE Sky Model.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.CieSkyParameters.C">
            <summary>The parameter c of the CIE Sky Model.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.CieSkyParameters.D">
            <summary>The parameter d of the CIE Sky Model.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.CieSkyParameters.E">
            <summary>The parameter e of the CIE Sky Model.</summary>
        </member>
        <member name="M:DigitalRune.Graphics.CieSkyParameters.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.CieSkyParameters"/> struct.
            </summary>
            <param name="a">The parameter a.</param>
            <param name="b">The parameter b.</param>
            <param name="c">The parameter c.</param>
            <param name="d">The parameter d.</param>
            <param name="e">The parameter e.</param>
        </member>
        <member name="M:DigitalRune.Graphics.CieSkyParameters.Equals(System.Object)">
            <overloads>
            <summary>
            Determines whether the current object is equal to another object.
            </summary>
            </overloads>
            
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to this instance; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.CieSkyParameters.Equals(DigitalRune.Graphics.CieSkyParameters)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the <paramref name="other"/> 
            parameter; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.CieSkyParameters.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures 
            like a hash table. 
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.CieSkyParameters.op_Equality(DigitalRune.Graphics.CieSkyParameters,DigitalRune.Graphics.CieSkyParameters)">
            <summary>
            Compares two sets of <see cref="T:DigitalRune.Graphics.CieSkyParameters"/>s to determine whether they are the same.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
            <see langword="true"/> if the instances are equal; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.CieSkyParameters.op_Inequality(DigitalRune.Graphics.CieSkyParameters,DigitalRune.Graphics.CieSkyParameters)">
            <summary>
            Compares two sets of <see cref="T:DigitalRune.Graphics.CieSkyParameters"/>s to determine whether they are 
            different.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
            <see langword="true"/> if the instances are different; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Graphics.CloudMap">
            <summary>
            Provides a cloud texture.
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Graphics.SceneGraph.CloudLayerNode"/> draws a cloud texture into the sky. The cloud texture is 
            provided by the <see cref="T:DigitalRune.Graphics.CloudMap"/>. Different types of cloud maps are available:
            </para>
            <list type="bullet">
            <item>
            <term><see cref="T:DigitalRune.Graphics.UserDefinedCloudMap"/></term>
            <description>
            This type provides a user-defined texture as the cloud texture.
            </description>
            </item>
            <item>
            <term><see cref="T:DigitalRune.Graphics.LayeredCloudMap"/></term>
            <description>
            This type provides a cloud texture which is dynamically generated from multiple layers of 
            textures or random noise. The cloud texture can be animated at runtime.
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.CloudMap.Texture">
            <summary>
            Gets the cloud texture.
            </summary>
            <value>The cloud texture.</value>
            <remarks>
            The cloud texture stores the transmittance of the sky. The transmittance is the amount of 
            incident light that passes through a point in the sky. A value of 0 (black) means that the 
            point in the sky is covered by clouds, a value of 1 (white) means that the sky is clear.
            Cloud textures are usually stored using single-channel surface formats, such as
            <strong>SurfaceFormat.Alpha8</strong> (unsigned format, 8-bit alpha only).
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.CloudMap.Dispose">
            <summary>
            Releases all resources used by an instance of the <see cref="T:DigitalRune.Graphics.CloudMap"/> class.
            </summary>
            <remarks>
            This method calls the virtual <see cref="M:DigitalRune.Graphics.CloudMap.Dispose(System.Boolean)"/> method, passing in 
            <see langword="true"/>, and then suppresses finalization of the instance.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.CloudMap.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.CloudMap"/> class 
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources; 
            <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:DigitalRune.Graphics.CloudMapLayer">
            <summary>
            Defines a layer of a <see cref="T:DigitalRune.Graphics.CloudMap"/>.
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Graphics.CloudMap"/> consists of several cloud map layers. A cloud map layer defines the 
            relative cloud density: A value of 0 means the sky is clear (no clouds), a positive value 
            increases the density (more clouds), and a negative value decreases the density (less clouds). 
            Cloud map layers are added together to get the overall cloud density. The density contribution
            of each layer is (pseudo code):
            </para>
            <para>
            <c>CloudDensity += DensityScale * (Texture[TextureMatrix * texCoords] + DensityOffset)</c>
            </para>
            <para>
            The <see cref="P:DigitalRune.Graphics.CloudMapLayer.Texture"/> is optional. If <see cref="P:DigitalRune.Graphics.CloudMapLayer.Texture"/> is <see langword="null"/>, a
            random noise texture is used. The random noise texture can be animated (see 
            <see cref="P:DigitalRune.Graphics.CloudMapLayer.AnimationSpeed"/>). The property <see cref="P:DigitalRune.Graphics.CloudMapLayer.AnimationSpeed"/> is only used to 
            animate the random noise texture. It is not used if a <see cref="P:DigitalRune.Graphics.CloudMapLayer.Texture"/> is set.
            </para>
            <para>
            The <see cref="P:DigitalRune.Graphics.CloudMapLayer.TextureMatrix"/> can be used to scale or translate the texture. By changing the
            translation part of the <see cref="P:DigitalRune.Graphics.CloudMapLayer.TextureMatrix"/>, the layer can be animated to move with
            the wind.
            </para>
            <para>
            To disable a <see cref="T:DigitalRune.Graphics.CloudMapLayer"/> set the <see cref="P:DigitalRune.Graphics.CloudMapLayer.DensityScale"/> to 0.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.CloudMapLayer.Texture">
            <summary>
            Gets or sets the cloud texture that defines the cloud density. (Optional)
            </summary>
            <value>
            The cloud texture that defines the cloud density. The default value is 
            <see langword="null"/>.
            </value>
            <remarks>
            The <see cref="P:DigitalRune.Graphics.CloudMapLayer.Texture"/> is optional. If <see cref="P:DigitalRune.Graphics.CloudMapLayer.Texture"/>
            is <see langword="null"/>, a random noise texture is used.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.CloudMapLayer.TextureMatrix">
            <summary>
            Gets or sets the matrix used to transform the texture coordinates.
            </summary>
            <value>
            The matrix used to transform the texture coordinates. The default value is 
            <see cref="F:DigitalRune.Mathematics.Algebra.Matrix33F.Identity"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.CloudMapLayer.DensityScale">
            <summary>
            Gets or sets the density scale factor that is used to scale the density of this 
            <see cref="T:DigitalRune.Graphics.CloudMapLayer"/>.
            </summary>
            <value>
            The density scale factor that is used to scale the density of this 
            <see cref="T:DigitalRune.Graphics.CloudMapLayer"/>. The default value is 1.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.CloudMapLayer.DensityOffset">
            <summary>
            Gets or sets the density offset that is added to the density of this 
            <see cref="T:DigitalRune.Graphics.CloudMapLayer"/>.
            </summary>
            <value>
            The density offset that is added to the density of this <see cref="T:DigitalRune.Graphics.CloudMapLayer"/>. The
            default value is 0.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.CloudMapLayer.AnimationSpeed">
            <summary>
            Gets or sets the animation speed. (Only used if <see cref="P:DigitalRune.Graphics.CloudMapLayer.Texture"/> is 
            <see langword="null"/> - see remarks.)
            </summary>
            <value>
            The animation speed. The default value is 0.
            </value>
            <remarks>
            If <see cref="P:DigitalRune.Graphics.CloudMapLayer.Texture"/> is <see langword="null"/>, a random noise texture is used. The 
            random noise texture can be animated by setting an <see cref="P:DigitalRune.Graphics.CloudMapLayer.AnimationSpeed"/>. 
            <see cref="P:DigitalRune.Graphics.CloudMapLayer.AnimationSpeed"/> is only used to animate the random noise texture. The property
            is ignored if a <see cref="P:DigitalRune.Graphics.CloudMapLayer.Texture"/> is set.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.CloudMapLayer.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.CloudMapLayer"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.CloudMapLayer"/> class with default settings.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.CloudMapLayer.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,DigitalRune.Mathematics.Algebra.Matrix33F,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.CloudMapLayer" /> struct.
            </summary>
            <param name="texture">The <see cref="P:DigitalRune.Graphics.CloudMapLayer.Texture" />.</param>
            <param name="textureMatrix">The <see cref="P:DigitalRune.Graphics.CloudMapLayer.TextureMatrix" />.</param>
            <param name="densityOffset">The <see cref="P:DigitalRune.Graphics.CloudMapLayer.DensityOffset" />.</param>
            <param name="densityScale">The <see cref="P:DigitalRune.Graphics.CloudMapLayer.DensityScale" />.</param>
            <param name="animationSpeed">The <see cref="P:DigitalRune.Graphics.CloudMapLayer.AnimationSpeed"/>.</param>
        </member>
        <member name="T:DigitalRune.Graphics.LayeredCloudMap">
            <summary>
            Provides a cloud texture which is generated at runtime.
            </summary>
            <remarks>
            <para>
            A cloud map defines a cloud texture using (up to) 8 <see cref="T:DigitalRune.Graphics.CloudMapLayer"/>s, which are
            sampled and added together. The resulting cloud texture is stored in <see cref="T:Microsoft.Xna.Framework.Graphics.Texture"/>. A
            cloud map layer can contain a texture or random noise. In addition, layers can be animated. 
            See <see cref="T:DigitalRune.Graphics.CloudMapLayer"/> for more information. 
            </para>
            <para>
            To disable a cloud map layer, simply set the array entry to <see langword="null"/> or the 
            <see cref="P:DigitalRune.Graphics.CloudMapLayer.DensityScale"/> of the layer to 0.
            </para>
            <para>
            The class <see cref="T:DigitalRune.Graphics.LayeredCloudMap"/> only defines the settings for generating a cloud
            texture and stores the result, but it does not automatically generate the cloud texture. A 
            <see cref="T:DigitalRune.Graphics.Rendering.CloudMapRenderer"/> must be used generate the cloud texture at runtime. A 
            <see cref="T:DigitalRune.Graphics.Rendering.CloudMapRenderer"/> is a scene node renderer which handles 
            <see cref="T:DigitalRune.Graphics.SceneGraph.CloudLayerNode"/>s. If a <see cref="T:DigitalRune.Graphics.SceneGraph.CloudLayerNode"/> references a 
            <see cref="T:DigitalRune.Graphics.LayeredCloudMap"/>, the renderer creates the cloud texture and stores the result in
            the <see cref="P:DigitalRune.Graphics.CloudMap.Texture"/> property.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.LayeredCloudMap.Layers">
            <summary>
            Gets the (up to) 8 layers that define cloud density.
            </summary>
            <value>
            The (up to) 8 layers that define the cloud density. By default, the cloud map is initialized 
            with 8 static, random noise textures.
            </value>
            <remarks>
            <see cref="P:DigitalRune.Graphics.LayeredCloudMap.Layers"/> is an array of 8 <see cref="T:DigitalRune.Graphics.CloudMapLayer"/>s. The cloud densities of 
            the layers are added together to determine the total cloud density. 
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.LayeredCloudMap.Coverage">
            <summary>
            Gets or sets the cloud coverage.
            </summary>
            <value>
            The cloud coverage that defines how much of the sky is filled with clouds. Values less than 
            0 or greater than 1 are allowed and might be necessary to remove all clouds or to fill the 
            whole sky. The default value is 0.5.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.LayeredCloudMap.Density">
            <summary>
            Gets or sets the cloud density.
            </summary>
            <value>
            The cloud density. The default value is 10.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.LayeredCloudMap.Size">
            <summary>
            Gets or sets the size of the cloud map in texels.
            </summary>
            <value>
            The size of the cloud map in texels. The default is 1024.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.LayeredCloudMap.Seed">
            <summary>
            Gets or sets the random number generator seed.
            </summary>
            <value>
            The random number generator seed.
            </value>
            <remarks>
            An internal random number generator is used to created textures for 
            <see cref="T:DigitalRune.Graphics.CloudMapLayer"/>s where <see cref="P:DigitalRune.Graphics.CloudMapLayer.Texture"/> is 
            <see langword="null"/>. The random number generator is initialized with this seed value.
            The default value is 1234567.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.LayeredCloudMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.CloudMap" /> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.LayeredCloudMap.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.LayeredCloudMap.SetTexture(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Sets the cloud texture.
            </summary>
            <param name="texture">The cloud texture.</param>
        </member>
        <member name="T:DigitalRune.Graphics.BasicCloudMap">
            <summary>
            Provides a user-defined cloud texture.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.UserDefinedCloudMap">
            <summary>
            Provides a user-defined cloud texture.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.UserDefinedCloudMap.Texture">
            <summary>
            Gets or sets the cloud texture.
            </summary>
            <value>The cloud texture.</value>
            <inheritdoc cref="P:DigitalRune.Graphics.CloudMap.Texture"/>
        </member>
        <member name="M:DigitalRune.Graphics.UserDefinedCloudMap.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.UserDefinedCloudMap"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.UserDefinedCloudMap"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.UserDefinedCloudMap.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.UserDefinedCloudMap"/> class.
            </summary>
            <param name="texture">The cloud texture.</param>
        </member>
        <member name="T:DigitalRune.Graphics.ImageSprite">
            <summary>
            Represents a 2D bitmap rendered in screen space.
            </summary>
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Graphics.ImageSprite.Texture">
            <summary>
            Gets or sets the texture.
            </summary>
            <value>The texture. (Can be <see langword="null"/>.)</value>
            <remarks>
            A packed texture can define a single image or a tile set. Tile sets can be used for 2D 
            animations.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.ImageSprite.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.ImageSprite"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.ImageSprite"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.ImageSprite.#ctor(DigitalRune.Graphics.PackedTexture)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.ImageSprite"/> class with the specified 
            texture.
            </summary>
            <param name="texture">The texture. (Can be <see langword="null"/>.)</param>
        </member>
        <member name="M:DigitalRune.Graphics.ImageSprite.Clone">
            <inheritdoc cref="M:DigitalRune.Graphics.Sprite.Clone"/>
        </member>
        <member name="M:DigitalRune.Graphics.ImageSprite.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.ImageSprite.CloneCore(DigitalRune.Graphics.Sprite)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Sprite">
            <summary>
            Represents a 2D image rendered in screen space.
            </summary>
            <remarks>
            <para>
            A sprite is a 2D image, such as a bitmap or a text. Sprites are positioned in world space, but
            rendered in screen space. That means, a 16x16 pixel sprite is usually exactly 16x16 pixel on 
            screen. (Internally the images and texts are rendered using the XNA <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/>,
            hence the name.)
            </para>
            <para>
            DigitalRune Graphics supports two types of sprites:
            </para>
            <list type="bullet">
            <item>
            <description><see cref="T:DigitalRune.Graphics.ImageSprite"/> ... static or animated bitmap</description>
            </item>
            <item>
            <description><see cref="T:DigitalRune.Graphics.TextSprite"/> ... text using a bitmap font</description>
            </item>
            </list>
            <para>
            A sprite is positioned in world space by creating a new <see cref="T:DigitalRune.Graphics.SceneGraph.SpriteNode"/> and adding it
            to a 3D scene. 
            </para>
            <para>
            <strong>Cloning:</strong><br/>
            <see cref="T:DigitalRune.Graphics.Sprite"/>s are cloneable. <see cref="M:DigitalRune.Graphics.Sprite.Clone"/> creates a copy of the current 
            sprite. The <see cref="P:DigitalRune.Graphics.ImageSprite.Texture"/> of a <see cref="T:DigitalRune.Graphics.ImageSprite"/> or the 
            <see cref="P:DigitalRune.Graphics.TextSprite.Text"/> of a <see cref="T:DigitalRune.Graphics.TextSprite"/> is copied by reference (no deep 
            copy).
            </para>
            </remarks>
            <seealso cref="T:DigitalRune.Graphics.ImageSprite"/>
            <seealso cref="T:DigitalRune.Graphics.TextSprite"/>
            <seealso cref="T:DigitalRune.Graphics.SceneGraph.SpriteNode"/>
        </member>
        <member name="P:DigitalRune.Graphics.Sprite.Name">
            <summary>
            Gets or sets the name of the sprite.
            </summary>
            <value>The name of the sprite.</value>
        </member>
        <member name="M:DigitalRune.Graphics.Sprite.Clone">
            <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.Sprite"/> that is a clone (deep copy) of the current instance.
            </summary>
            <returns>
            A new <see cref="T:DigitalRune.Graphics.Sprite"/> that is a clone (deep copy) of the current instance.
            </returns>
            <remarks>
            <para>
            See class documentation of <see cref="T:DigitalRune.Graphics.Sprite"/> (Section "Cloning") for more information 
            about cloning.
            </para>
            <para>
            <strong>Notes to Inheritors:</strong> The method <see cref="M:DigitalRune.Graphics.Sprite.Clone"/> calls 
            <see cref="M:DigitalRune.Graphics.Sprite.CreateInstanceCore"/> which is responsible for creating a new instance of the 
            <see cref="T:DigitalRune.Graphics.Sprite"/> derived class and <see cref="M:DigitalRune.Graphics.Sprite.CloneCore(DigitalRune.Graphics.Sprite)"/> to create a copy of the 
            current instance. Classes that derive from <see cref="T:DigitalRune.Graphics.Sprite"/> need to implement 
            <see cref="M:DigitalRune.Graphics.Sprite.CreateInstanceCore"/> and <see cref="M:DigitalRune.Graphics.Sprite.CloneCore(DigitalRune.Graphics.Sprite)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Sprite.CreateInstance">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Sprite"/> class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            This is a private method, and the actual object-specific implementations for the behavior 
            are dependent on the override implementation of the <see cref="T:DigitalRune.Graphics.Sprite"/> method, which this 
            method calls internally. 
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cannot clone <see cref="T:DigitalRune.Graphics.Sprite"/>. A derived class does not implement 
            <see cref="M:DigitalRune.Graphics.Sprite.CreateInstanceCore"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Sprite.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Sprite"/> derived class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            <para>
            Do not call this method directly (except when calling base in an implementation). This 
            method is called internally by the <see cref="M:DigitalRune.Graphics.Sprite.Clone"/> method whenever a new instance of the
            <see cref="T:DigitalRune.Graphics.Sprite"/> derived class must implement this method. A typical implementation is
            to simply call the default constructor and return the result. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Sprite.CloneCore(DigitalRune.Graphics.Sprite)">
            <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Sprite"/>.
            </summary>
            <param name="source">The object to clone.</param>
            <remarks>
            <strong>Notes to Inheritors:</strong> Every <see cref="T:DigitalRune.Graphics.Sprite"/> derived class must implement
            this method. A typical implementation is to call <c>base.CloneCore(this)</c> to copy all 
            properties of the base class and then copy all properties of the derived class.
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.TextSprite">
            <summary>
            Represents a 2D text rendered in screen space.
            </summary>
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Graphics.TextSprite.Text">
            <summary>
            Gets or sets the text. See remarks.
            </summary>
            <value>The text - see remarks. The default value is <see langword="null"/>.</value>
            <remarks>
            <para>
            The value can be set as a <see cref="T:System.String"/>, a <see cref="T:System.Text.StringBuilder"/>, or a general
            <see cref="T:System.Object"/>. If it is a general object, the value is converted to its string 
            representation by calling <see cref="M:System.Object.ToString"/> immediately. (The property 
            internally stores either a <see cref="T:System.String"/> or <see cref="T:System.Text.StringBuilder"/>.)
            </para>
            <para>
            Depending on the value that was set, the get accessor returns either <see langword="null"/>,
            a <see cref="T:System.String"/>, or a <see cref="T:System.Text.StringBuilder"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TextSprite.Font">
            <summary>
            Gets or sets the font.
            </summary>
            <value>The font. Can be <see langword="null"/>.</value>
        </member>
        <member name="M:DigitalRune.Graphics.TextSprite.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TextSprite"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TextSprite"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.TextSprite.#ctor(System.Object,Microsoft.Xna.Framework.Graphics.SpriteFont)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TextSprite"/> class.
            </summary>
            <param name="text">The text. See <see cref="P:DigitalRune.Graphics.TextSprite.Text"/> for more information.</param>
            <param name="font">The font.</param>
        </member>
        <member name="M:DigitalRune.Graphics.TextSprite.Clone">
            <inheritdoc cref="M:DigitalRune.Graphics.Sprite.Clone"/>
        </member>
        <member name="M:DigitalRune.Graphics.TextSprite.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.TextSprite.CloneCore(DigitalRune.Graphics.Sprite)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Star">
            <summary>
            Represents a star of a <see cref="T:DigitalRune.Graphics.SceneGraph.StarfieldNode"/>.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Star.Position">
            <summary>
            The star position given as a direction vector. (Does not need to be normalized.)
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Star.Size">
            <summary>
            The star size in pixels. To avoid flickering, the star size needs to be at least 2.8 pixels.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Star.Color">
            <summary>
            The star color.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Star.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,System.Single,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Star"/> struct.
            </summary>
            <param name="position">
            The star position given as a direction vector. (Does not need to be normalized.)
            </param>
            <param name="size">
            The star size in pixels. To avoid flickering, the star size needs to be at least 2.8 pixels.
            </param>
            <param name="color">The star color.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Star.Equals(System.Object)">
            <overloads>
            <summary>
            Determines whether the current object is equal to another object.
            </summary>
            </overloads>
            
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to this instance; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Star.Equals(DigitalRune.Graphics.Star)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the <paramref name="other"/> 
            parameter; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Star.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures
            like a hash table. 
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Star.op_Equality(DigitalRune.Graphics.Star,DigitalRune.Graphics.Star)">
            <summary>
            Compares two <see cref="T:DigitalRune.Graphics.Star"/>s to determine whether they are the same.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
            <see langword="true"/> if the instances are equal; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Star.op_Inequality(DigitalRune.Graphics.Star,DigitalRune.Graphics.Star)">
            <summary>
            Compares two <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF"/>s to determine whether they are different.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
            <see langword="true"/> if the instances are different; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Graphics.IInternalTerrainLayer">
            <summary>
            Represents a layer to be rendered into the terrain clipmap.
            </summary>
            <remarks>
            Every object that needs to draw into the clipmap needs to be implement
            <see cref="T:DigitalRune.Graphics.IInternalTerrainLayer"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.IInternalTerrainLayer.Aabb">
            <inheritdoc cref="P:DigitalRune.Graphics.TerrainLayer.Aabb"/>
        </member>
        <member name="P:DigitalRune.Graphics.IInternalTerrainLayer.FadeInStart">
            <inheritdoc cref="P:DigitalRune.Graphics.TerrainLayer.FadeInStart"/>
        </member>
        <member name="P:DigitalRune.Graphics.IInternalTerrainLayer.FadeOutEnd">
            <inheritdoc cref="P:DigitalRune.Graphics.TerrainLayer.FadeOutEnd"/>
        </member>
        <member name="P:DigitalRune.Graphics.IInternalTerrainLayer.Material">
            <inheritdoc cref="P:DigitalRune.Graphics.TerrainLayer.Material"/>
        </member>
        <member name="P:DigitalRune.Graphics.IInternalTerrainLayer.MaterialInstance">
            <inheritdoc cref="P:DigitalRune.Graphics.TerrainLayer.MaterialInstance"/>
        </member>
        <member name="M:DigitalRune.Graphics.IInternalTerrainLayer.OnDraw(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Rectangle,DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <inheritdoc cref="M:DigitalRune.Graphics.TerrainLayer.OnDraw(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Rectangle,DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)"/>
        </member>
        <member name="T:DigitalRune.Graphics.Terrain">
            <summary>
            Represents a height field based terrain.
            (Not available on these platforms: Xbox 360, mobile platforms)
            </summary>
            <remarks>
            <para>
            This type is not available on the following platforms: Xbox 360, mobile platforms
            </para>
            <para>
            A terrain is split into one or more tiles. The terrain tiles defines the geometry (height,
            normals, holes) of the terrain. Each tile has a set of material layers (dirt, grass, decals,
            roads) that define the appearance. The material layers are applied (blended) one after the
            other, which means that a layer can override previous layers.
            </para>
            <para>
            See <see cref="T:DigitalRune.Graphics.TerrainTile"/> and <see cref="T:DigitalRune.Graphics.TerrainLayer"/> for more information.
            </para>
            <para>
            <strong>Cache invalidation:</strong><br/>
            When the <see cref="T:DigitalRune.Graphics.Terrain"/> is used with the <see cref="T:DigitalRune.Graphics.SceneGraph.TerrainNode"/>, then the terrain
            data is cached in clipmaps. Therefore, it is important to notify the terrain system when a
            tile or layer has changed and the cached data is invalid. When tiles or layers are added to or
            removed from the terrain, this happens automatically. But when the properties or the contents
            of tiles/layers are changed, the affected region needs to be invalidated explicitly by calling
            the appropriate <see cref="M:DigitalRune.Graphics.Terrain.Invalidate"/> method of the <see cref="T:DigitalRune.Graphics.Terrain"/> or the
            <see cref="T:DigitalRune.Graphics.TerrainTile"/>. For example, when the contents of a height map is changed, the
            affected region on the terrain needs to be invalidated by calling
            <see cref="M:DigitalRune.Graphics.Terrain.Invalidate(DigitalRune.Geometry.Shapes.Aabb)"/> or
            <see cref="M:DigitalRune.Graphics.Terrain.Invalidate(DigitalRune.Graphics.TerrainTile)"/>.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.Terrain.TerrainLimit">
            <summary>
            A large value which can be used in the AABBs if the AABB should cover "everything".
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Terrain.IsDisposed">
            <summary>
            Gets a value indicating whether this instance has been disposed of.
            </summary>
            <value>
            <see langword="true"/> if this instance has been disposed of; otherwise,
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Terrain.BaseClearValues">
            <summary>
            Gets or sets the values written into the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.BaseClipmap"/> textures when
            it is cleared.
            </summary>
            <value>
            The clear values for the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.BaseClipmap"/>. The default values are
            (-10000, 0, 0, 1) for the first clipmap texture and (0, 0, 0, 0) for the remaining clipmap
            textures.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Terrain.DetailClearValues">
            <summary>
            Gets or sets the values written into the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailClipmap"/> textures
            when it is cleared.
            </summary>
            <value>
            The clear values for the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailClipmap"/>. The default values are (0,
            0, 0, 0).
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Terrain.Tiles">
            <summary>
            Gets the terrain tiles which define the terrain geometry and materials.
            </summary>
            <value>The terrain tiles which define the terrain geometry and materials.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Terrain.Aabb">
            <summary>
            Gets the axis-aligned bounding box of the terrain tile.
            (Vertical min and max values are not set!)
            </summary>
            <value>The axis-aligned bounding box of the terrain tile.</value>
            <remarks>
            The min and max y values of this <see cref="P:DigitalRune.Graphics.Terrain.Aabb"/> are 0 and should be ignored. Only the
            x and z values are set.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Terrain.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Terrain"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Terrain.Dispose">
            <summary>
            Releases all resources used by an instance of the <see cref="T:DigitalRune.Graphics.Terrain"/> class.
            </summary>
            <remarks>
            This method calls the virtual <see cref="M:DigitalRune.Graphics.Terrain.Dispose(System.Boolean)"/> method, passing in
            <see langword="true"/>, and then suppresses finalization of the instance.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Terrain.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.Terrain"/> class
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources;
            <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.Terrain.Invalidate">
            <overloads>
            <summary>
            Invalidates the data cached by the renderer.
            </summary>
            </overloads>
            
            <summary>
            Invalidates all data cached by the renderer.
            </summary>
            <remarks>
            <para>
            This method notifies the renderers that cached data (e.g. terrain clipmaps) needs to be
            updated.
            </para>
            <para>
            The <see cref="M:DigitalRune.Graphics.Terrain.Invalidate"/> method or its overloads are called automatically when terrain
            tiles or layers are added to/removed from the terrain. If any other data that affects the
            appearance of the terrain is changed, the method <see cref="M:DigitalRune.Graphics.Terrain.Invalidate"/> needs to be
            called manually.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Terrain.Invalidate(DigitalRune.Graphics.TerrainTile)">
            <summary>
            Invalidates the specified terrain tile in the data cached by the renderer.
            </summary>
            <param name="tile">The terrain tile which should be invalidated.</param>
            <inheritdoc cref="M:DigitalRune.Graphics.Terrain.Invalidate"/>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="tile"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Terrain.Invalidate(DigitalRune.Graphics.TerrainTile,DigitalRune.Graphics.TerrainLayer)">
            <summary>
            Invalidates the specified terrain layer in the data cached by the renderer.
            </summary>
            <param name="tile">The terrain tile owning the terrain layer.</param>
            <param name="layer">The terrain layer which should be invalidated.</param>
            <inheritdoc cref="M:DigitalRune.Graphics.Terrain.Invalidate"/>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="tile"/> or <paramref name="layer"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Terrain.Invalidate(DigitalRune.Graphics.TerrainLayer)">
            <summary>
            Invalidates the specified terrain layer in the data cached by the renderer.
            </summary>
            <param name="layer">The terrain layer which should be invalidated.</param>
            <inheritdoc cref="M:DigitalRune.Graphics.Terrain.Invalidate"/>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="layer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:DigitalRune.Graphics.GraphicsException">
            <paramref name="layer"/> does not have a valid AABB. This method cannot be used. Use one of
            the other method overloads instead.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Terrain.Invalidate(DigitalRune.Geometry.Shapes.Aabb)">
            <summary>
            Invalidates the specified region in the data cached by the renderer.
            </summary>
            <param name="aabb">The axis-aligned bounding box of the invalid region.</param>
            <inheritdoc cref="M:DigitalRune.Graphics.Terrain.Invalidate"/>
        </member>
        <member name="T:DigitalRune.Graphics.TerrainClearLayer">
            <summary>
            Clears the terrain clipmaps.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainClearLayer.DigitalRune#Graphics#IInternalTerrainLayer#Aabb">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainClearLayer.DigitalRune#Graphics#IInternalTerrainLayer#FadeInStart">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainClearLayer.DigitalRune#Graphics#IInternalTerrainLayer#FadeOutEnd">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainClearLayer.Material">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainClearLayer.MaterialInstance">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainClearLayer.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TerrainClearLayer"/> class.
            </summary>
            <param name="graphicService">The graphic service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainClearLayer.OnDraw(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Rectangle,DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.TerrainClipmap">
            <summary>
            Represents a clipmap which stores terrain data.
            </summary>
            <remarks>
            <para>
            For a basic introduction to clipmaps, see <see href="https://en.wikipedia.org/wiki/Clipmap">
            Clipmaps (Wikipedia)</see>.
            </para>
            <para>
            The clipmap can store geometry information (e.g. heights, normals, holes) or material
            information (e.g. diffuse color, specular color). The usage of a clipmap can vary and is not
            defined by this class itself. The only restriction is that all textures of this clipmap use
            the same texture format.
            </para>
            <para>
            The clipmap consists of several levels, which are similar to mipmap levels. Level 0 has the
            finest resolution. All other levels have a lower resolution. The cell size (= texel size) is
            usually doubled between levels, but this can be configured using the property
            <see cref="P:DigitalRune.Graphics.TerrainClipmap.CellSizes"/>. For example: A clipmap which stores terrain height values can use a
            resolution of 1 meter per cell at level 0, 2 meters per cell at level 1, 4 meters per cell at
            level 2, etc.
            </para>
            <para>
            There is one texture for each clipmap level. All texture have the same size which is defined
            by <see cref="P:DigitalRune.Graphics.TerrainClipmap.CellsPerLevel"/>. The number of levels is defined by
            <see cref="P:DigitalRune.Graphics.TerrainClipmap.NumberOfLevels"/>.
            </para>
            <para>
            Further a clipmap can consist of several textures per level, e.g. one texture to store detail
            normal vectors, a second texture to store diffuse color, a third texture to store specular
            color. Because of XNA limitations it might be necessary to combine several textures into a
            single texture atlas, where each texture atlas contains all levels with the same content. For
            example: One texture atlas contains all level textures with detail normal vectors, a second
            texture atlas contains all level textures with diffuse colors, the third texture atlas
            contains all level textures with specular colors. - All textures can be accessed using the
            <see cref="P:DigitalRune.Graphics.TerrainClipmap.Textures"/> collection. (It can be helpful to visualize the textures for
            debugging).
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.TerrainClipmap.MaxNumberOfLevels">
            <summary>
            The maximum number of clipmap levels.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainClipmap.CellSizes">
            <summary>
            Gets the cell sizes of all clipmap levels.
            </summary>
            <value>The cell sizes of all clipmap levels.</value>
            <remarks>
            <para>
            This array contains <see cref="F:DigitalRune.Graphics.TerrainClipmap.MaxNumberOfLevels"/> elements - where only the first
            <see cref="P:DigitalRune.Graphics.TerrainClipmap.NumberOfLevels"/> elements are used.
            </para>
            <para>
            The first element <c>CellSizes[0]</c> has to be set. All other entries can contain NaN
            values, which means that subsequent cell sizes are chosen automatically. By default, each
            cell size is twice the cell size of the previous level.
            </para>
            <para>
            Example: The array contains the values { 1, NaN, NaN, NaN, NaN, ... }. In this case the
            first level uses a cell size of 1 unit. The second level has a cell size of 2 units. The
            third level has a cell size of 4 units per cell. Etc.
            </para>
            <para>
            The default terrain renderers ( <see cref="T:DigitalRune.Graphics.Rendering.TerrainClipmapRenderer"/> and
            <see cref="T:DigitalRune.Graphics.Rendering.TerrainRenderer"/>) use only <c>CellSizes[0]</c> for the
            <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.BaseClipmap"/> (all other cell sizes are treated as if they are NaN
            or twice the size of the previous level). The <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailClipmap"/> can
            have user-defined cell sizes for all levels.
            </para>
            <para>
            <see cref="M:DigitalRune.Graphics.TerrainClipmap.Invalidate"/> has to be called if the elements in this array are changed!
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainClipmap.CellsPerLevel">
            <summary>
            Gets or sets the number of cells (texels) per clipmap level.
            </summary>
            <value>The number of cells (texels) per clipmap level.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative or 0.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainClipmap.NumberOfLevels">
            <summary>
            Gets or sets the number of clipmap levels.
            </summary>
            <value>The number of clipmap levels.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is outside the range [1, <see cref="F:DigitalRune.Graphics.TerrainClipmap.MaxNumberOfLevels"/>].
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainClipmap.LevelBias">
            <summary>
            Gets or sets the level bias.
            </summary>
            <value>The level bias.</value>
            <remarks>
            This value can be used to modify the distance of the level of detail (LOD) transitions. Use
            a positive value to make the LOD transitions appear closer to the camera (reduce quality).
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainClipmap.EnableMipMap">
            <summary>
            Gets or sets a value indicating whether the clipmap textures use mipmaps.
            </summary>
            <value>
            <see langword="true"/> if the clipmap textures use mipmaps; otherwise,
            <see langword="false"/>. The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainClipmap.EnableAnisotropicFiltering">
            <summary>
            Gets or sets a value indicating whether the clipmap is sampled using anisotropic
            filtering.
            </summary>
            <value>
            <see langword="true"/> if the clipmap is sampled using anisotropic filtering;
            otherwise, <see langword="false"/>. The default value is <see langword="true"/>.
            </value>
            <remarks>
            On AMD GPUs it is also necessary to enable mipmaps (see <see cref="P:DigitalRune.Graphics.TerrainClipmap.EnableMipMap"/>) for
            anisotropic filtering. This is not necessary on Intel or Nvidia GPUs. (Note that mipmap
            generation for terrain clipmaps is very expensive. Therefore, consider disabling anisotropic
            filtering on AMD GPUs.)
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainClipmap.MinLevel">
            <summary>
            Gets or sets the index of the first level which is actively used.
            </summary>
            <value>
            The index of the first level which is actively used.
            The default value is 0.
            </value>
            <remarks>
            Per default, all clipmap levels from index 0 (most detailed level) to index 
            <see cref="P:DigitalRune.Graphics.TerrainClipmap.NumberOfLevels"/> - 1 (least detailed level) are in use. In certain situations
            it makes sense to skip the most detailed levels, for example if player is high above 
            the ground or moving very fast. For this case <see cref="P:DigitalRune.Graphics.TerrainClipmap.MinLevel"/> can be set to a value
            in [0, <see cref="P:DigitalRune.Graphics.TerrainClipmap.NumberOfLevels"/> - 1]. The clipmap renderer will not update the clipmap
            levels with an index smaller than <see cref="P:DigitalRune.Graphics.TerrainClipmap.MinLevel"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainClipmap.Textures">
            <summary>
            Gets the clipmap textures.
            </summary>
            <value>The clipmap textures.</value>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainClipmap.Origins">
            <summary>
            Gets the world space origin of each clipmap level.
            </summary>
            <value>The world space origin of each clipmap level.</value>
            <remarks>
            <para>
            This array contains <see cref="F:DigitalRune.Graphics.TerrainClipmap.MaxNumberOfLevels"/> elements. Only the first
            <see cref="P:DigitalRune.Graphics.TerrainClipmap.NumberOfLevels"/> elements are used.
            </para>
            <para>
            Unlike the origin of <see cref="T:DigitalRune.Graphics.TerrainTile"/>s, this origin corresponds to the texture
            coordinate (0, 0) (= the corner of the texture). The origin is not in the center of the 
            first texel. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainClipmap.#ctor(System.Int32,Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TerrainClipmap"/> class.
            </summary>
            <param name="numberOfTextures">The number of textures in the range [1, 4].</param>
            <param name="format">The texture surface format.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Invalid <paramref name="numberOfTextures"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainClipmap.Dispose">
            <summary>
            Releases all resources used by an instance of the <see cref="T:DigitalRune.Graphics.TerrainClipmap"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainClipmap.Invalidate">
            <summary>
            Invalidates the cached clipmap.
            </summary>
            <remarks>
            This method is called automatically when clipmap properties are modified. It is usually not
            necessary to call this method manually.
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.TerrainDecalLayer">
            <summary>
            Represents a decal which is rendered onto the terrain.
            </summary>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Graphics.TerrainDecalLayer"/> can be used to render decals, such as dirt, leaves,
            explosion marks, sewer grates, etc. onto the terrain.
            </para>
            <para>
            The position and orientation of the texture is determined by the <see cref="P:DigitalRune.Graphics.TerrainDecalLayer.Pose"/>. The decal
            is projected in "forward" (-z) direction. That means that the orientation will usually be a
            downward facing orientation and the y value of the position will be ignored. For
            example:
            </para>
            <code lang="csharp">
            <![CDATA[
            var position = new Vector3F(positionX, 0, positionZ);
            var orientation = Matrix33F.CreateRotationY(rotationAngle) * 
                              Matrix33F.CreateRotationX(-ConstantsF.PiOver2);
            myDecalLayer.Pose = new Pose(position, orientation);
            ]]>
            </code>
            <para>
            The decal is centered at the specified <see cref="P:DigitalRune.Graphics.TerrainDecalLayer.Pose"/>. The extent is defined by
            <see cref="P:DigitalRune.Graphics.TerrainDecalLayer.Width"/> and <see cref="P:DigitalRune.Graphics.TerrainDecalLayer.Height"/>.
            </para>
            <para>
            Important: The decal is only rendered on tiles where the decal layer is added. If the decal
            overlaps multiple terrain tiles, the decal layer needs to be added to all tiles. (An instance
            of <see cref="T:DigitalRune.Graphics.TerrainDecalLayer"/> can be shared by multiple terrain tiles.
            </para>
            <para>
            <strong>Material:</strong><br/>
            Different <see cref="T:DigitalRune.Graphics.TerrainDecalLayer"/>s can share the same material.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainDecalLayer.Pose">
            <summary>
            Gets or sets the pose of the decal.
            </summary>
            <value>
            The pose of the decal. The default orientation is downward facing (local z-axis points
            down).
            </value>
            <remarks>
            See <see cref="T:DigitalRune.Graphics.TerrainDecalLayer"/> for more details.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainDecalLayer.Width">
            <summary>
            Gets or sets the width of the decal in world space.
            </summary>
            <value>The width of the decal in world space. The default value is 1.</value>
            <remarks>
            The width is measured along the local x-axis.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainDecalLayer.Height">
            <summary>
            Gets or sets the height of the decal in world space.
            </summary>
            <value>The height of the decal in world space. The default value is 1.</value>
            <remarks>
            The height is measured along the local y-axis.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainDecalLayer.DiffuseColor">
            <summary>
            Gets or sets the diffuse color.(This is a material parameter - see remarks.)
            </summary>
            <value>The diffuse color. The default value is (1, 1, 1).</value>
            <remarks>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainDecalLayer.SpecularColor">
            <summary>
            Gets or sets the specular color. (This is a material parameter - see remarks.)
            </summary>
            <value>The specular color. The default value is (1, 1, 1).</value>
            <remarks>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainDecalLayer.SpecularPower">
            <summary>
            Gets or sets the specular color exponent. (This is a material parameter - see remarks.)
            </summary>
            <value>The specular color exponent. The default value is 10.</value>
            <remarks>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainDecalLayer.Alpha">
            <summary>
            Gets or sets the opacity (alpha). (This is a material parameter - see remarks.)
            </summary>
            <value>The opacity (alpha). The default value is 1.</value>
            <remarks>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainDecalLayer.DiffuseTexture">
            <summary>
            Gets or sets the diffuse texture. (This is a material parameter - see remarks.)
            </summary>
            <value>The diffuse texture.</value>
            <remarks>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainDecalLayer.SpecularTexture">
            <summary>
            Gets or sets the specular texture. (This is a material parameter - see remarks.)
            </summary>
            <value>The specular texture.</value>
            <remarks>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainDecalLayer.NormalTexture">
            <summary>
            Gets or sets the normal texture. (This is a material parameter - see remarks.)
            </summary>
            <value>The normal texture.</value>
            <remarks>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainDecalLayer.HeightTextureScale">
            <summary>
            Gets or sets the scale that is multiplied with samples of the height texture.
            (This is a material parameter - see remarks.)
            </summary>
            <value>
            The scale that is multiplied with samples of the height texture. The default value is 1.
            </value>
            <remarks>
            <para>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </para>
            <para>
            The <see cref="P:DigitalRune.Graphics.TerrainDecalLayer.HeightTextureScale"/> and the <see cref="P:DigitalRune.Graphics.TerrainDecalLayer.HeightTextureBias"/> can be used to
            modify the height samples read from the <see cref="P:DigitalRune.Graphics.TerrainDecalLayer.HeightTexture"/>. The resulting height
            values is:
            </para>
            <para>
            <c>HeightTextureScale * value + HeightTextureBias</c>
            </para>
            <para>
            If the standard <see cref="T:DigitalRune.Graphics.SceneGraph.TerrainNode"/> with a <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailClipmap"/> is
            used, the resulting height values need to be in the range [0, 1]. Values outside this range
            will be clamped.
            </para>
            </remarks>
            <seealso cref="P:DigitalRune.Graphics.TerrainDecalLayer.HeightTexture"/>
            <seealso cref="P:DigitalRune.Graphics.TerrainDecalLayer.HeightTextureBias"/>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainDecalLayer.HeightTextureBias">
            <summary>
            Gets or sets the bias that is added to samples of the height texture.
            (This is a material parameter - see remarks.)
            </summary>
            <value>
            The bias that is added to samples of the height texture. The default value is 0.
            </value>
            <inheritdoc cref="P:DigitalRune.Graphics.TerrainDecalLayer.HeightTextureScale"/>
            <seealso cref="P:DigitalRune.Graphics.TerrainDecalLayer.HeightTexture"/>
            <seealso cref="P:DigitalRune.Graphics.TerrainDecalLayer.HeightTextureScale"/>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainDecalLayer.HeightTexture">
            <summary>
            Gets or sets the height texture. (This is a material parameter - see remarks.)
            </summary>
            <value>The height texture.</value>
            <remarks>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </remarks>
            <seealso cref="P:DigitalRune.Graphics.TerrainDecalLayer.HeightTextureBias"/>
            <seealso cref="P:DigitalRune.Graphics.TerrainDecalLayer.HeightTextureScale"/>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainDecalLayer.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TerrainDecalLayer"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TerrainDecalLayer"/> class with the default
            material.
            </summary>
            <param name="graphicService">The graphic service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainDecalLayer.#ctor(DigitalRune.Graphics.Material)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TerrainDecalLayer"/> class with a custom
            material.
            </summary>
            <param name="material">The material.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="material"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainDecalLayer.OnDraw(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Rectangle,DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.TerrainEffectBinder">
            <summary>
            Provides effect bindings for rendering a <see cref="T:DigitalRune.Graphics.Terrain"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.TerrainEffectBinder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.TerrainEffectBinder"/> class.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.TerrainEffectInterpreter">
            <summary>
            Provides the descriptions for effects used by the <see cref="T:DigitalRune.Graphics.Terrain"/>.
            </summary>
            <remarks>
            See <see cref="T:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics"/> for a list of supported semantics.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.TerrainEffectInterpreter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.TerrainEffectInterpreter"/> class.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics">
            <summary>
            Defines the semantics for effect parameters used by the <see cref="T:DigitalRune.Graphics.Terrain"/>.
            </summary>
            <inheritdoc cref="T:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics"/>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainClearValues">
            <summary>
            The clear values written into the <see cref="T:DigitalRune.Graphics.TerrainClipmap"/> (array of
            <see cref="T:Microsoft.Xna.Framework.Vector4"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainTileOrigin">
            <summary>
            The world space origin (<see cref="P:DigitalRune.Graphics.TerrainTile.OriginX"/>, <see cref="P:DigitalRune.Graphics.TerrainTile.OriginZ"/>)
            of the terrain tile given as <see cref="T:Microsoft.Xna.Framework.Vector2"/>.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainTileSize">
            <summary>
            The world space size (<see cref="P:DigitalRune.Graphics.TerrainTile.WidthX"/>, <see cref="P:DigitalRune.Graphics.TerrainTile.WidthZ"/>)
            of the terrain tile given as <see cref="T:Microsoft.Xna.Framework.Vector2"/>.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainTileHeightTexture">
            <summary>
            The height texture of the terrain tile which stores absolute height values in the Red
            channel (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainTileHeightTextureSize">
            <summary>
            The size of the <see cref="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainTileHeightTexture"/> in texels (<see cref="T:Microsoft.Xna.Framework.Vector2"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainTileNormalTexture">
            <summary>
            The normal texture of the terrain tile which store normal vectors (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainTileNormalTextureSize">
            <summary>
            The size of the <see cref="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainTileNormalTexture"/> in texels (<see cref="T:Microsoft.Xna.Framework.Vector2"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainTileHoleTexture">
            <summary>
            The hole texture of the terrain tile which stores hole information in the Alpha channel
            (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainTileHoleTextureSize">
            <summary>
            The size of the <see cref="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainTileHoleTexture"/> in texels (<see cref="T:Microsoft.Xna.Framework.Vector2"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainHoleThreshold">
            <summary>
            The threshold used to check for holes in the terrain (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainBaseClipmap">
            <summary>
            The n-th texture in the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.BaseClipmap"/> (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainBaseClipmapCellSize">
            <summary>
            The cell size of the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.BaseClipmap"/> (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainBaseClipmapCellsPerLevel">
            <summary>
            The <see cref="P:DigitalRune.Graphics.TerrainClipmap.CellsPerLevel"/> of the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.BaseClipmap"/>
            (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainBaseClipmapNumberOfLevels">
            <summary>
            The <see cref="P:DigitalRune.Graphics.TerrainClipmap.NumberOfLevels"/> in the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.BaseClipmap"/>
            (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainBaseClipmapNumberOfColumns">
            <summary>
            The number of texture atlas columns in the  <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.BaseClipmap"/> 
            (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainBaseClipmapLevelBias">
            <summary>
            The <see cref="P:DigitalRune.Graphics.TerrainClipmap.LevelBias"/> of the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.BaseClipmap"/>
            (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainBaseClipmapOrigins">
            <summary>
            The <see cref="P:DigitalRune.Graphics.TerrainClipmap.Origins"/> of the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.BaseClipmap"/>
            (array of <see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainDetailClipmap">
            <summary>
            The n-th texture in the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailClipmap"/> (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainDetailClipmapCellSizes">
            <summary>
            The cell sizes of the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailClipmap"/> (array of <see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainDetailClipmapCellsPerLevel">
            <summary>
            The <see cref="P:DigitalRune.Graphics.TerrainClipmap.CellsPerLevel"/> of the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailClipmap"/>
            (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainDetailClipmapNumberOfLevels">
            <summary>
            The <see cref="P:DigitalRune.Graphics.TerrainClipmap.NumberOfLevels"/> in the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailClipmap"/>
            (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainDetailClipmapNumberOfColumns">
            <summary>
            The number of texture atlas columns in the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailClipmap"/> 
            (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainDetailClipmapLevelBias">
            <summary>
            The <see cref="P:DigitalRune.Graphics.TerrainClipmap.LevelBias"/> of the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailClipmap"/>
            (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainDetailClipmapOrigins">
            <summary>
            The <see cref="P:DigitalRune.Graphics.TerrainClipmap.Origins"/> of the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailClipmap"/>
            (array of <see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainDetailClipmapOffsets">
            <summary>
            The offsets (for toroidal wrapping) of the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailClipmap"/> 
            (array of <see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainDetailFadeRange">
            <summary>
            The <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailFadeRange"/> (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainEnableAnisotropicFiltering">
            <summary>
            The <see cref="P:DigitalRune.Graphics.TerrainClipmap.EnableAnisotropicFiltering"/> flag of the
            <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailClipmap"/> (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.ByNameTechniqueBinding">
            <summary>
            Selects the technique where the technique name matches the current technique string of the
            render context (see property <see cref="P:DigitalRune.Graphics.RenderContext.Technique"/>).
            </summary>
            <remarks>
            This technique binding compares the technique names with the 
            <see cref="P:DigitalRune.Graphics.RenderContext.Technique"/> string set in the <see cref="T:DigitalRune.Graphics.RenderContext"/>. If a
            matching technique is found, it is used; otherwise, the first technique is used.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.ByNameTechniqueBinding.#ctor(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.ByNameTechniqueBinding"/> class.
            </summary>
            <param name="effect">The effect.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="effect"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.ByNameTechniqueBinding.#ctor(Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.ByNameTechniqueBinding"/> class.
            </summary>
            <param name="techniques">The effect techniques.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="techniques"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.ByNameTechniqueBinding.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.ByNameTechniqueBinding.OnUpdate(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.ByNameTechniqueBinding.OnGetTechnique(Microsoft.Xna.Framework.Graphics.Effect,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1">
            <summary>
            Binds an effect parameter to an array of values.
            </summary>
            <typeparam name="T">
            The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1"/>.
            </typeparam>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1.Values">
            <summary>
            Gets or sets the values of the effect parameter.
            </summary>
            <value>The values of the effect parameter.</value>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1"/> class. (This
            constructor creates an uninitialized instance. Use this constructor only for cloning or 
            other special cases!)
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1"/> class.
            </summary>
            <param name="effect">The effect.</param>
            <param name="parameter">The effect parameter.</param>
            <param name="values">The array of values.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="effect"/>, <paramref name="parameter"/>, or <paramref name="values"/> is 
            <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in <paramref name="values"/> does not match the number of elements of
            <paramref name="parameter"/>.
            </exception>
            <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T"/> is not supported.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="parameter"/> does not represent an array of values.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1.CloneCore(DigitalRune.Graphics.Effects.EffectParameterBinding)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1">
            <summary>
            Binds an effect parameter to a value.
            </summary>
            <typeparam name="T">
            The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding`1"/>.
            </typeparam>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.ConstParameterBinding`1.Value">
            <summary>
            Gets or sets the value of the effect parameter.
            </summary>
            <value>The value of the effect parameter.</value>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.ConstParameterBinding`1.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1"/> class. (This
            constructor creates an uninitialized instance. Use this constructor only for cloning or
            other special cases!)
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.ConstParameterBinding`1.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1"/> class.
            </summary>
            <param name="effect">The effect.</param>
            <param name="parameter">The effect parameter.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="effect"/> or <paramref name="parameter"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T"/> is not supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.ConstParameterBinding`1.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.ConstParameterBinding`1.CloneCore(DigitalRune.Graphics.Effects.EffectParameterBinding)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1">
            <summary>
            Binds an effect parameter to an array of values computed by a callback method.
            </summary>
            <typeparam name="T">
            The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1"/>.
            </typeparam>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1.ComputeParameter">
            <summary>
            Gets or sets a method that computes the new values for the effect parameter.
            </summary>
            <value>The method that computes the new values for the effect parameter.</value>
            <remarks>
            The input parameters of this method are the <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1"/>, 
            the render context, and the array of values. The method has to update the values in the 
            pre-allocated array.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1"/> class.
            (This constructor creates an uninitialized instance. Use this constructor only for cloning 
            or other special cases!)
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,System.Action{DigitalRune.Graphics.Effects.DelegateParameterArrayBinding{`0},DigitalRune.Graphics.RenderContext,`0[]})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1"/> class.
            </summary>
            <param name="effect">The effect.</param>
            <param name="parameter">The effect parameter.</param>
            <param name="computeParameter">The callback method that computes the values.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="effect"/>, <paramref name="parameter"/>, or 
            <paramref name="computeParameter"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T"/> is not supported.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="parameter"/> does not represent an array of values.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1.CloneCore(DigitalRune.Graphics.Effects.EffectParameterBinding)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1.OnUpdate(DigitalRune.Graphics.RenderContext)">
            <summary>
            Called when the effect parameter value needs to be updated.
            </summary>
            <param name="context">The render context.</param>
            <remarks>
            <strong>Notes to Inheritors:</strong> The method <see cref="M:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1.OnUpdate(DigitalRune.Graphics.RenderContext)"/> calls 
            <see cref="P:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1.ComputeParameter"/> and stores the result in 
            <see cref="P:DigitalRune.Graphics.Effects.EffectParameterBinding`1.Value"/>. Derived classes should either call
            <see cref="P:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1.ComputeParameter"/> directly or call <see cref="M:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1.OnUpdate(DigitalRune.Graphics.RenderContext)"/> of the base class.
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.DelegateParameterBinding`1">
            <summary>
            Binds an effect parameter to a value computed by a callback method.
            </summary>
            <typeparam name="T">
            The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding`1"/>.
            </typeparam>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.DelegateParameterBinding`1.ComputeParameter">
            <summary>
            Get or sets a method that computes the new value for the effect parameter.
            </summary>
            <value>The method that computes the new value for the effect parameter.</value>
            <remarks>
            The input parameters of this method are the <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterBinding`1"/> and 
            the render context. The method must return the new parameter value.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.DelegateParameterBinding`1.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterBinding`1"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterBinding`1"/> class. (This
            constructor creates an uninitialized instance. Use this constructor only for cloning or
            other special cases!)
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.DelegateParameterBinding`1.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,System.Func{DigitalRune.Graphics.Effects.DelegateParameterBinding{`0},DigitalRune.Graphics.RenderContext,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterBinding`1"/> class.
            </summary>
            <param name="effect">The effect.</param>
            <param name="parameter">The effect parameter.</param>
            <param name="computeParameter">The callback method that computes the value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="effect"/>, <paramref name="parameter"/>, or 
            <paramref name="computeParameter"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T"/> is not supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.DelegateParameterBinding`1.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.DelegateParameterBinding`1.CloneCore(DigitalRune.Graphics.Effects.EffectParameterBinding)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.DelegateParameterBinding`1.OnUpdate(DigitalRune.Graphics.RenderContext)">
            <summary>
            Called when the effect parameter value needs to be updated.
            </summary>
            <param name="context">The render context.</param>
            <remarks>
            <strong>Notes to Inheritors:</strong> The method <see cref="M:DigitalRune.Graphics.Effects.DelegateParameterBinding`1.OnUpdate(DigitalRune.Graphics.RenderContext)"/> calls 
            <see cref="P:DigitalRune.Graphics.Effects.DelegateParameterBinding`1.ComputeParameter"/> and stores the result in 
            <see cref="P:DigitalRune.Graphics.Effects.EffectParameterBinding`1.Value"/>. Derived classes should either call
            <see cref="P:DigitalRune.Graphics.Effects.DelegateParameterBinding`1.ComputeParameter"/> directly or call <see cref="M:DigitalRune.Graphics.Effects.DelegateParameterBinding`1.OnUpdate(DigitalRune.Graphics.RenderContext)"/> of the base class.
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.DirectionalLightShadowParameterBinding">
            <summary>
            Binds an <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter"/> to the shadow parameters of a directional
            light shadow map.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.DirectionalLightShadowParameterBinding.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.DirectionalLightShadowParameterBinding"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.DirectionalLightShadowParameterBinding"/> class. (This
            constructor creates an uninitialized instance. Use this constructor only for cloning or
            other special cases!)
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.DirectionalLightShadowParameterBinding.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.DirectionalLightShadowParameterBinding"/> class.
            </summary>
            <param name="effect">The effect.</param>
            <param name="parameter">The effect parameter.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="effect"/> or <paramref name="parameter"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.DirectionalLightShadowParameterBinding.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.DirectionalLightShadowParameterBinding.CloneCore(DigitalRune.Graphics.Effects.EffectParameterBinding)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.DirectionalLightShadowParameterBinding.OnUpdate(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.DirectionalLightShadowParameterBinding.OnApply(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1">
            <summary>
            Binds an effect parameter to an array of values of a given type.
            </summary>
            <typeparam name="T">
            The value type. Must be one of the following types: 
            <see cref="T:System.Boolean"/>, 
            <see cref="T:System.Int32"/>, 
            <see cref="T:Microsoft.Xna.Framework.Matrix"/>, 
            <see cref="T:Microsoft.Xna.Framework.Quaternion"/>, 
            <see cref="T:System.Single"/>, 
            <see cref="T:Microsoft.Xna.Framework.Vector2"/>, 
            <see cref="T:Microsoft.Xna.Framework.Vector3"/>, 
            <see cref="T:Microsoft.Xna.Framework.Vector4"/>, 
            </typeparam>
            <inheritdoc cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding`1"/>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1.ValidateType">
            <summary>
            The method that checks whether the type of the effect parameter binding is compatible with
            the specified effect parameter.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1.SetValue">
            <summary>
            The method that sets the effect parameter to the specified array of values.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1.Values">
            <summary>
            Gets (or sets) the values of the effect parameter.
            </summary>
            <value>The values of the effect parameter.</value>
            <remarks>
            The values are computed in <see cref="M:DigitalRune.Graphics.Effects.EffectParameterBinding.Update(DigitalRune.Graphics.RenderContext)"/> and applied to 
            <see cref="P:DigitalRune.Graphics.Effects.EffectParameterBinding.Parameter"/> when 
            <see cref="M:DigitalRune.Graphics.Effects.EffectParameterBinding.Apply(DigitalRune.Graphics.RenderContext)"/> is called.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1"/> class.
            </summary>
            <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            Effect parameters of type <typeparamref name="T"/> are not supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1"/> class.
            (This constructor creates an uninitialized instance. Use this constructor only for cloning 
            or other special cases!)
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1"/> class.
            </summary>
            <param name="effect">The effect.</param>
            <param name="parameter">The effect parameter.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="effect"/> or <paramref name="parameter"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="parameter"/> has more elements than is supported by the effect parameter.
            </exception>
            <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T"/> is not supported or does not match the effect
            parameter.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1"/> class with 
            the given value.
            </summary>
            <param name="effect">The effect.</param>
            <param name="parameter">The effect parameter.</param>
            <param name="value">The initial value for all elements of the value array.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="effect"/> or <paramref name="parameter"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T"/> is not supported or does not match the effect
            parameter.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1"/> class with 
            the given array of values.
            </summary>
            <param name="effect">The effect.</param>
            <param name="parameter">The effect parameter.</param>
            <param name="values">The initial values.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="effect"/>, <paramref name="parameter"/>, or <paramref name="values"/> is 
            <see langword="null"/>.
            </exception>
            <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T"/> is not supported or does not match the effect
            parameter.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1.CloneCore(DigitalRune.Graphics.Effects.EffectParameterBinding)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1.OnUpdate(DigitalRune.Graphics.RenderContext)">
            <summary>
            Called when the effect parameter value needs to be updated.
            </summary>
            <param name="context">The render context.</param>
            <remarks>
            <strong>Notes to Inheritors:</strong> It is not necessary to call <see cref="M:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1.OnUpdate(DigitalRune.Graphics.RenderContext)"/> of 
            the base class in derived classes.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1.OnApply(DigitalRune.Graphics.RenderContext)">
            <summary>
            Called when the effect parameter needs to be applied.
            </summary>
            <param name="context">The render context.</param>
            <remarks>
            <strong>Notes to Inheritors:</strong> Derived classes need to call <see cref="M:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1.OnApply(DigitalRune.Graphics.RenderContext)"/> of
            the base class to ensure that the effect parameter value is properly set.
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.EffectParameterBinding">
            <summary>
            Binds a parameter of an effect to a certain value.
            </summary>
            <remarks>
            <para>
            This class is used to bind an <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter"/> of an <see cref="T:Microsoft.Xna.Framework.Graphics.Effect"/> to a 
            certain value. When the effect parameter represents a single value (such as 
            <see cref="T:System.Single"/>, <see cref="T:Microsoft.Xna.Framework.Vector3"/>, <see cref="T:Microsoft.Xna.Framework.Matrix"/>, etc.) an 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding`1"/> should be used to bind the value. When the effect 
            parameter represents an array of values an <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1"/> needs 
            to be used.
            </para>
            <para>
            <strong>Cloning:</strong><br/>
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/>s need to be cloneable. The method 
            <see cref="M:DigitalRune.Graphics.Effects.EffectParameterBinding.Clone"/> calls <see cref="M:DigitalRune.Graphics.Effects.EffectParameterBinding.CreateInstanceCore"/> and <see cref="M:DigitalRune.Graphics.Effects.EffectParameterBinding.CloneCore(DigitalRune.Graphics.Effects.EffectParameterBinding)"/> which
            are responsible for creating a clone of the current instance. Classes that derive from 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> need to provide the implementation for 
            <see cref="M:DigitalRune.Graphics.Effects.EffectParameterBinding.CreateInstanceCore"/> and override <see cref="M:DigitalRune.Graphics.Effects.EffectParameterBinding.CloneCore(DigitalRune.Graphics.Effects.EffectParameterBinding)"/> if necessary.
            </para>
            </remarks>
            <seealso cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding`1"/>
            <seealso cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1"/>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.EffectParameterBinding.Parameter">
            <summary>
            Gets the effect parameter.
            </summary>
            <value>The effect parameter.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.EffectParameterBinding.Description">
            <summary>
            Gets the description of the effect parameter.
            </summary>
            <value>The description of the effect parameter.</value>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> class. (This
            constructor creates an uninitialized instance. Use this constructor only for cloning or
            other special cases!)
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> class.
            </summary>
            <param name="effect">The effect.</param>
            <param name="parameter">The effect parameter.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="effect"/> or <paramref name="parameter"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding.Clone">
            <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> that is a clone of the current instance.
            </summary>
            <returns>
            A new <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> that is a clone of the current instance.
            </returns>
            <remarks>
            <strong>Notes to Inheritors:</strong> The method <see cref="M:DigitalRune.Graphics.Effects.EffectParameterBinding.Clone"/> calls 
            <see cref="M:DigitalRune.Graphics.Effects.EffectParameterBinding.CreateInstanceCore"/> which is responsible for creating a new instance of the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> derived class and <see cref="M:DigitalRune.Graphics.Effects.EffectParameterBinding.CloneCore(DigitalRune.Graphics.Effects.EffectParameterBinding)"/> to create a 
            copy of the current instance. Classes that derive from <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> 
            need to implement <see cref="M:DigitalRune.Graphics.Effects.EffectParameterBinding.CreateInstanceCore"/> and <see cref="M:DigitalRune.Graphics.Effects.EffectParameterBinding.CloneCore(DigitalRune.Graphics.Effects.EffectParameterBinding)"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding.CreateInstance">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            This is a private method, and the actual object-specific implementations for the behavior 
            are dependent on the override implementation of the <see cref="M:DigitalRune.Graphics.Effects.EffectParameterBinding.CreateInstanceCore"/> method, 
            which this method calls internally. 
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cannot clone <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/>. A derived class does not implement 
            <see cref="M:DigitalRune.Graphics.Effects.EffectParameterBinding.CreateInstanceCore"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> derived class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            <para>
            Do not call this method directly (except when calling base in an implementation). This 
            method is called internally by the <see cref="M:DigitalRune.Graphics.Effects.EffectParameterBinding.Clone"/> method whenever a new instance of the
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> is created. 
            </para>
            <para>
            <strong>Notes to Inheritors:</strong> Every <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> derived 
            class must implement this method. A typical implementation is to simply call the default 
            constructor and return the result. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding.CloneCore(DigitalRune.Graphics.Effects.EffectParameterBinding)">
            <summary>
            Makes the instance a clone (deep copy) of the specified 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/>.
            </summary>
            <param name="source">The object to clone.</param>
            <remarks>
            <strong>Notes to Inheritors:</strong> Every <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> derived 
            class must implement this method. A typical implementation is to call 
            <c>base.CloneCore(this)</c> to copy all properties of the base class and then copy all 
            properties of the derived class.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding.VerifyEffectParameter(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Called when binding is created to verify that <see cref="P:DigitalRune.Graphics.Effects.EffectParameterBinding.Parameter"/> is a valid parameter.
            </summary>
            <param name="effect">The effect.</param>
            <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            <see cref="P:DigitalRune.Graphics.Effects.EffectParameterBinding.Parameter"/> is not a valid effect parameter of the current effect.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding.ContainsParameter(Microsoft.Xna.Framework.Graphics.EffectParameterCollection,System.Boolean@)">
            <summary>
            Recursively determines whether the specified collection of effect parameters contains 
            <see cref="P:DigitalRune.Graphics.Effects.EffectParameterBinding.Parameter"/>.
            </summary>
            <param name="parameterCollection">The effect parameter collection.</param>
            <param name="isField">
            <see langword="true"/> if <see cref="P:DigitalRune.Graphics.Effects.EffectParameterBinding.Parameter"/> is the member of a struct; otherwise
            <see langword="false"/>.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="parameterCollection"/> contains 
            <see cref="P:DigitalRune.Graphics.Effects.EffectParameterBinding.Parameter"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding.Update(DigitalRune.Graphics.RenderContext)">
            <summary>
            Updates the value of the binding.
            </summary>
            <param name="context">The render context.</param>
            <remarks>
            <para>
            This method is called usually once per frame to update the parameter value. 
            <see cref="M:DigitalRune.Graphics.Effects.EffectParameterBinding.Update(DigitalRune.Graphics.RenderContext)"/> calls <see cref="M:DigitalRune.Graphics.Effects.EffectParameterBinding.OnUpdate(DigitalRune.Graphics.RenderContext)"/> which needs to be implemented in derived 
            classes. When the effect parameter is dynamic and needs to be recalculated each frame before
            rendering, <see cref="M:DigitalRune.Graphics.Effects.EffectParameterBinding.OnUpdate(DigitalRune.Graphics.RenderContext)"/> can be used to compute the new parameter value. When the 
            effect parameter is static then <see cref="M:DigitalRune.Graphics.Effects.EffectParameterBinding.OnUpdate(DigitalRune.Graphics.RenderContext)"/> can be empty.
            </para>
            <para>
            The method <see cref="M:DigitalRune.Graphics.Effects.EffectParameterBinding.Update(DigitalRune.Graphics.RenderContext)"/> only calculates the new value and stores it internally. 
            The <see cref="M:DigitalRune.Graphics.Effects.EffectParameterBinding.Apply(DigitalRune.Graphics.RenderContext)"/> then sets the value in the target parameter (see 
            <see cref="P:DigitalRune.Graphics.Effects.EffectParameterBinding.Parameter"/>).
            </para>
            <para>
            <see cref="M:DigitalRune.Graphics.Effects.EffectParameterBinding.Update(DigitalRune.Graphics.RenderContext)"/> needs to be called before <see cref="M:DigitalRune.Graphics.Effects.EffectParameterBinding.Apply(DigitalRune.Graphics.RenderContext)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding.OnUpdate(DigitalRune.Graphics.RenderContext)">
            <summary>
            Called when the effect parameter value needs to be updated.
            </summary>
            <param name="context">The render context.</param>
            <remarks>
            This method needs to be implemented in derived classes.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding.Apply(DigitalRune.Graphics.RenderContext)">
            <summary>
            Applies the value to the effect parameter.
            </summary>
            <param name="context">The render context.</param>
            <remarks>
            <para>
            This method sets the shader constant to the value that was calculated in 
            <see cref="M:DigitalRune.Graphics.Effects.EffectParameterBinding.Update(DigitalRune.Graphics.RenderContext)"/>. <see cref="M:DigitalRune.Graphics.Effects.EffectParameterBinding.Apply(DigitalRune.Graphics.RenderContext)"/> needs to be called after <see cref="M:DigitalRune.Graphics.Effects.EffectParameterBinding.Update(DigitalRune.Graphics.RenderContext)"/> 
            before the object that uses the <see cref="T:Microsoft.Xna.Framework.Graphics.Effect"/> is rendered.
            </para>
            <para>
            This method calls <see cref="M:DigitalRune.Graphics.Effects.EffectParameterBinding.OnApply(DigitalRune.Graphics.RenderContext)"/> which needs to be implemented in derived classes and
            is responsible for assigning the value that was calculated in <see cref="M:DigitalRune.Graphics.Effects.EffectParameterBinding.Update(DigitalRune.Graphics.RenderContext)"/> to 
            <see cref="P:DigitalRune.Graphics.Effects.EffectParameterBinding.Parameter"/> by using the appropriate <strong>EffectParameter.SetValue()</strong>
            method.
            </para>
            </remarks>
            <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            Unable to apply effect parameter.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding.OnApply(DigitalRune.Graphics.RenderContext)">
            <summary>
            Called when the effect parameter value needs to be applied.
            </summary>
            <param name="context">The render context.</param>
            <remarks>
            This method needs to be implemented in derived classes.
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.EffectParameterBinding.ValidateTypeMethods">
            <summary>
            Provides delegates that check whether the effect parameter binding has the correct type.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.EffectParameterBinding.SetValueMethods">
            <summary>
            Provides delegates that set parameter values for all supported value types.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.EffectParameterBinding.SetValueArrayMethods">
            <summary>
            Provides delegates that set parameter values for arrays of all supported value types.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding.ThrowIfInvalidType``1(Microsoft.Xna.Framework.Graphics.Effect,DigitalRune.Graphics.Effects.EffectParameterDescription,System.Func{Microsoft.Xna.Framework.Graphics.EffectParameter,System.Boolean},System.Int32)">
            <summary>
            Throws the type of if invalid.
            </summary>
            <typeparam name="T">The value type of the effect parameter binding.</typeparam>
            <param name="effect">The effect.</param>
            <param name="description">The effect parameter description.</param>
            <param name="validateType">Type of the validate.</param>
            <param name="numberOfElements">The number of elements.</param>
            <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.EffectParameterBindingCollection">
            <summary>
            Manages a collection of <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/>s.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.EffectParameterBindingCollection.Hints">
            <summary>
            Gets a value indicating which effect parameters can be added to this collection.
            </summary>
            <value>
            A bitwise combination of <see cref="T:DigitalRune.Graphics.Effects.EffectParameterHint"/> values. The value defines which
            parameter bindings can be added to the collection.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.EffectParameterBindingCollection.Item(Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <overloads>
            <summary>
            Gets the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> of a specific effect parameter.
            </summary>
            </overloads>
            
            <summary>
            Gets the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> for the specified effect parameter.
            </summary>
            <param name="parameter"> The effect parameter.</param>
            <value>
            The <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> for the specified effect parameter. Or 
            <see langword="null"/> if no matching <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> is found.
            </value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parameter"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.EffectParameterBindingCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> for the effect parameter with the specified 
            name.
            </summary>
            <param name="name">The name of the effect parameter.</param>
            <value>
            The <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> for the effect parameter the specified name. Or 
            <see langword="null"/> if no matching <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> is found.
            </value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is empty.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterBindingCollection.#ctor(DigitalRune.Graphics.Effects.EffectParameterHint)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBindingCollection"/> class.
            </summary>
            <param name="hints">
            A bitwise combination of <see cref="T:DigitalRune.Graphics.Effects.EffectParameterHint"/> values. The value defines which
            parameter bindings can be added to the collection.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterBindingCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBindingCollection"/>. 
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator"/> for <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBindingCollection"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterBindingCollection.InsertItem(System.Int32,DigitalRune.Graphics.Effects.EffectParameterBinding)">
            <summary>
            Inserts the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The new effect parameter binding.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="item"/> does not belong to the same <see cref="T:Microsoft.Xna.Framework.Graphics.Effect"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            An <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> for the same <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter"/> already
            exists.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterBindingCollection.SetItem(System.Int32,DigitalRune.Graphics.Effects.EffectParameterBinding)">
            <summary>
            Sets the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> at the specified index.
            </summary>
            <param name="index">The index of the effect parameter binding.</param>
            <param name="item">The new effect parameter binding.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="item"/> does not belong to the same <see cref="T:Microsoft.Xna.Framework.Graphics.Effect"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            An <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> for the same <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter"/> already
            exists.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterBindingCollection.Contains(Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <overloads>
            <summary>
            Determines whether the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBindingCollection"/> contains a certain
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/>.
            </summary>
            </overloads>
            
            <summary>
            Determines whether the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBindingCollection"/> contains an 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> for the specified effect parameter.
            </summary>
            <param name="parameter">
            The <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter"/> of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/>.
            </param>
            <returns>
            <see langword="true"/> if the collection contains a binding for the specified effect 
            parameter; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parameter"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterBindingCollection.Contains(System.String)">
            <summary>
            Determines whether the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBindingCollection"/> contains an 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> for the effect parameter with the specified name.
            </summary>
            <param name="name">
            The name of the <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter"/> in the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/>.
            </param>
            <returns>
            <see langword="true"/> if the collection contains a binding for the effect parameter with 
            the given name; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is empty.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterBindingCollection.IndexOf(System.String)">
            <overloads>
            <summary>
            Searches for the specified <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> and returns the zero-based 
            index. 
            </summary>
            </overloads>
            
            <summary>
            Searches for the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> for the effect parameter with the 
            specified name and returns the zero-based index. 
            </summary>
            <param name="name">
            The name of the <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter"/> in the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/>.
            </param>
            <returns>
            The zero-based index of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> within the entire
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBindingCollection"/>, if found; otherwise, -1. 
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is empty.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterBindingCollection.IndexOf(Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <summary>
            Searches for the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> with the specified effect parameter 
            and returns the zero-based index. 
            </summary>
            <param name="parameter">
            The <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter"/> of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/>.
            </param>
            <returns>
            The zero-based index of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> within the entire
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBindingCollection"/>, if found; otherwise, -1. 
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parameter"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterBindingCollection.Remove(Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <overloads>
            <summary>
            Removes an <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> from the collection.
            </summary>
            </overloads>
            
            <summary>
            Removes the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> with the specified effect parameter.
            </summary>
            <param name="parameter">
            The <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter"/> of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> to remove.
            </param>
            <returns>
            <see langword="true"/> if the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> was removed successfully; 
            otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parameter"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterBindingCollection.Remove(System.String)">
            <summary>
            Removes the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> for the effect parameter with the specified 
            name.
            </summary>
            <param name="name">
            The name of the <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter"/> in the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> to
            remove.
            </param>
            <returns>
            <see langword="true"/> if the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> was removed successfully; 
            otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is empty.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.EffectParameterBinding`1">
            <summary>
            Binds an effect parameter to a value of a given type.
            </summary>
            <typeparam name="T">
            The value type. Must be one of the following types: 
            <see cref="T:System.Boolean"/>, 
            <see cref="T:System.Int32"/>, 
            <see cref="T:Microsoft.Xna.Framework.Matrix"/>, 
            <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/>, 
            <see cref="T:Microsoft.Xna.Framework.Quaternion"/>, 
            <see cref="T:System.Single"/>, 
            <see cref="T:System.String"/>, 
            <see cref="T:Microsoft.Xna.Framework.Graphics.Texture"/>, 
            <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/>, 
            <see cref="T:Microsoft.Xna.Framework.Graphics.Texture3D"/>, 
            <see cref="T:Microsoft.Xna.Framework.Graphics.TextureCube"/>, 
            <see cref="T:Microsoft.Xna.Framework.Vector2"/>, 
            <see cref="T:Microsoft.Xna.Framework.Vector3"/>, 
            <see cref="T:Microsoft.Xna.Framework.Vector4"/>, 
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/>, 
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>, 
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>.
            </typeparam>
            <remarks>
            <para>
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding`1"/> and <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1"/> are
            the base implementations of all parameter bindings of type <typeparamref name="T"/>. Classes
            derived from <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding`1"/> are used to bind effect parameters that 
            represent a single value (such as <see cref="T:System.Single"/>, <see cref="T:Microsoft.Xna.Framework.Vector3"/>, etc.). Classes
            that are derived from <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1"/> are used to bind effect 
            parameters that represent arrays of values.
            </para>
            <para>
            <see cref="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1"/> and <see cref="T:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1"/> should 
            be used when the value of the effect parameter is static or updated manually. The value can be
            set directly. The binding ensures that the parameter is applied whenever the 
            <see cref="T:Microsoft.Xna.Framework.Graphics.Effect"/> needs to be rendered.
            </para>
            <para>
            <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterBinding`1"/> and <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1"/> 
            need to be used when the value of the effect parameter is dynamic and should be updated
            automatically.
            </para>
            <para>
            <see cref="T:DigitalRune.Graphics.Effects.NullParameterBinding`1"/> and <see cref="T:DigitalRune.Graphics.Effects.NullParameterArrayBinding`1"/> are dummy
            bindings that do not modify effect parameters. These bindings can be set, if parameters should
            not be updated automatically. 
            </para>
            <para>
            User-defined bindings can be implemented by deriving from 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/>, <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding`1"/>, or 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1"/> to define new mechanisms for resolving effect 
            parameter values.
            </para>
            <para>
            <strong>Notes to Inheritors:</strong><br/>
            The static constructors of <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding`1"/> and 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1"/> automatically validate the value type 
            <typeparamref name="T"/> and checks whether the type is supported.
            </para>
            <para>
            Inheritors should override <see cref="M:DigitalRune.Graphics.Effects.EffectParameterBinding`1.OnUpdate(DigitalRune.Graphics.RenderContext)"/> when the value of the effect parameter needs
            to be updated before rendering. The new value computed in <see cref="M:DigitalRune.Graphics.Effects.EffectParameterBinding`1.OnUpdate(DigitalRune.Graphics.RenderContext)"/> must be 
            stored in <see cref="P:DigitalRune.Graphics.Effects.EffectParameterBinding`1.Value"/>. (It is not necessary to call <see cref="M:DigitalRune.Graphics.Effects.EffectParameterBinding`1.OnUpdate(DigitalRune.Graphics.RenderContext)"/> of the base
            class in the derived class.)
            </para>
            <para>
            By default, <see cref="M:DigitalRune.Graphics.Effects.EffectParameterBinding`1.OnApply(DigitalRune.Graphics.RenderContext)"/> assigns the current <see cref="P:DigitalRune.Graphics.Effects.EffectParameterBinding`1.Value"/> to 
            <see cref="P:DigitalRune.Graphics.Effects.EffectParameterBinding.Parameter"/> by using the appropriate 
            <strong>EffectParameter.SetValue()</strong> method. Inheritors can override this method to 
            perform additional work. It is necessary to call <see cref="M:DigitalRune.Graphics.Effects.EffectParameterBinding`1.OnApply(DigitalRune.Graphics.RenderContext)"/> of the base class to 
            ensure that the value is properly set.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.EffectParameterBinding`1.ValidateType">
            <summary>
            The method that checks whether the type of the effect parameter binding is compatible with
            the specified effect parameter.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.EffectParameterBinding`1.SetValue">
            <summary>
            The method that sets the effect parameter to the specified value.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.EffectParameterBinding`1.Comparer">
            <summary>
            An equality comparer for <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.EffectParameterBinding`1.Value">
            <summary>
            Gets (or sets) the value of the effect parameter.
            </summary>
            <value>The value of the effect parameter.</value>
            <remarks>
            The value is computed in <see cref="M:DigitalRune.Graphics.Effects.EffectParameterBinding.Update(DigitalRune.Graphics.RenderContext)"/> and applied to 
            <see cref="P:DigitalRune.Graphics.Effects.EffectParameterBinding.Parameter"/> when 
            <see cref="M:DigitalRune.Graphics.Effects.EffectParameterBinding.Apply(DigitalRune.Graphics.RenderContext)"/> is called.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding`1"/> class.
            </summary>
            <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            Effect parameters of type <typeparamref name="T"/> are not supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding`1.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding`1"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding`1"/> class.
            (This constructor creates an uninitialized instance. Use this constructor only for cloning 
            or other special cases!)
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding`1.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding`1"/> class.
            </summary>
            <param name="effect">The effect.</param>
            <param name="parameter">The effect parameter.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="effect"/> or <paramref name="parameter"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T"/> is not supported or does not match the effect
            parameter.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding`1.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> class with the given 
            value.
            </summary>
            <param name="effect">The effect.</param>
            <param name="parameter">The effect parameter.</param>
            <param name="value">The initial value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="effect"/> or <paramref name="parameter"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T"/> is not supported or does not match the effect
            parameter.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding`1.CloneCore(DigitalRune.Graphics.Effects.EffectParameterBinding)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding`1.OnUpdate(DigitalRune.Graphics.RenderContext)">
            <summary>
            Called when the effect parameter value needs to be updated.
            </summary>
            <param name="context">The render context.</param>
            <remarks>
            <strong>Notes to Inheritors:</strong> It is not necessary to call <see cref="M:DigitalRune.Graphics.Effects.EffectParameterBinding`1.OnUpdate(DigitalRune.Graphics.RenderContext)"/> of 
            the base class in derived classes.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding`1.OnApply(DigitalRune.Graphics.RenderContext)">
            <summary>
            Called when the effect parameter value needs to be applied.
            </summary>
            <param name="context">The render context.</param>
            <remarks>
            <strong>Notes to Inheritors:</strong> Derived classes need to call <see cref="M:DigitalRune.Graphics.Effects.EffectParameterBinding`1.OnApply(DigitalRune.Graphics.RenderContext)"/> of
            the base class to ensure that the effect parameter value is properly set.
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.EffectPassBinding">
            <summary>
            Selects the effect passes and determines the order in which they need to be applied.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectPassBinding.#ctor(DigitalRune.Graphics.Effects.EffectTechniqueBinding,Microsoft.Xna.Framework.Graphics.EffectTechnique,DigitalRune.Graphics.RenderContext)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectPassBinding"/> struct.
            </summary>
            <param name="techniqueBinding">The effect technique binding.</param>
            <param name="technique">The effect technique.</param>
            <param name="context">The render context.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectPassBinding.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through all effect passes of the current effect 
            technique.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate the effect passes of the 
            current effect technique.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:DigitalRune.Graphics.Effects.EffectPassBinding"/> is invalid.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectPassBinding.System#Collections#Generic#IEnumerable{Microsoft#Xna#Framework#Graphics#EffectPass}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectPassBinding.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectPassBinding.Equals(DigitalRune.Graphics.Effects.EffectPassBinding)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the <paramref name="other" /> 
            parameter; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectPassBinding.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object" /> is equal to this 
            instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectPassBinding.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures 
            like a hash table.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectPassBinding.op_Equality(DigitalRune.Graphics.Effects.EffectPassBinding,DigitalRune.Graphics.Effects.EffectPassBinding)">
            <summary>
            Compares two <see cref="T:DigitalRune.Graphics.Effects.EffectPassBinding"/>s to determine whether they are the same.
            </summary>
            <param name="left">The first effect pass binding.</param>
            <param name="right">The second effect pass binding.</param>
            <returns>
            <see langword="true"/> if the effect pass bindings are equal; otherwise 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectPassBinding.op_Inequality(DigitalRune.Graphics.Effects.EffectPassBinding,DigitalRune.Graphics.Effects.EffectPassBinding)">
            <summary>
            Compares two <see cref="T:DigitalRune.Graphics.Effects.EffectPassBinding"/>s to determine whether they are different.
            </summary>
            <param name="left">The first effect pass binding.</param>
            <param name="right">The second effect pass binding.</param>
            <returns>
            <see langword="true"/> if the effect pass bindings are different; otherwise 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.EffectPassEnumerator">
            <summary>
            Iterates the effect passes of the current technique in the order determined by the effect pass
            binding.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.EffectPassEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The element in the collection at the current position of the enumerator.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.EffectPassEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The element in the collection at the current position of the enumerator.</value>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectPassEnumerator.#ctor(DigitalRune.Graphics.Effects.EffectTechniqueBinding,Microsoft.Xna.Framework.Graphics.EffectTechnique,DigitalRune.Graphics.RenderContext)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectPassEnumerator"/> struct.
            </summary>
            <param name="techniqueBinding">The effect technique binding.</param>
            <param name="technique">The effect technique.</param>
            <param name="context">The render context.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectPassEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting 
            unmanaged resources.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectPassEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <see langword="true"/> if the enumerator was successfully advanced to the next element; 
            <see langword="false"/> if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:DigitalRune.Graphics.Effects.EffectPassBinding"/> is invalid.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectPassEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the 
            collection.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding">
            <summary>
            Selects a technique when rendering a certain effect.
            </summary>
            <remarks>
            <para>
            An <see cref="T:Microsoft.Xna.Framework.Graphics.Effect"/> may define several <see cref="T:Microsoft.Xna.Framework.Graphics.EffectTechnique"/>s for rendering 
            objects. An <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding"/> provides the logic that selects the 
            appropriate technique when rendering a specific object.
            </para>
            <para>
            This base class always chooses the first technique of an effect and ignores other techniques.
            Derived <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding"/> class should implement more useful strategies.
            </para>
            <para>
            Once a technique is selected, the method <see cref="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.GetPassBinding(Microsoft.Xna.Framework.Graphics.EffectTechnique,DigitalRune.Graphics.RenderContext)"/> can be called. This 
            methods returns an <see cref="T:DigitalRune.Graphics.Effects.EffectPassBinding"/>. The <see cref="T:DigitalRune.Graphics.Effects.EffectPassBinding"/> 
            can be used to iterate over all effect passes that need to be applied for the current
            object.
            </para>
            <para>
            <strong>Cloning:</strong><br/>
            <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding"/>s need to be cloneable. The method 
            <see cref="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.Clone"/> calls <see cref="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.CreateInstanceCore"/> and <see cref="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.CloneCore(DigitalRune.Graphics.Effects.EffectTechniqueBinding)"/> which
            are responsible for creating a clone of the current instance. Classes that derive from 
            <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding"/> need to provide the implementation for 
            <see cref="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.CreateInstanceCore"/> and override <see cref="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.CloneCore(DigitalRune.Graphics.Effects.EffectTechniqueBinding)"/> if necessary.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.EffectTechniqueBinding.Default">
            <summary>
            The default effect technique binding.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.EffectTechniqueBinding.Id">
            <summary>
            Gets (or sets) an ID, which can be used for state-sorting.
            </summary>
            <value>An ID, which can be used for state-sorting. The allowed range is [0, 127].</value>
            <remarks>
            The ID must be set in <see cref="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.OnUpdate(DigitalRune.Graphics.RenderContext)"/>. The ID may change from frame to frame.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.Clone">
            <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding"/> that is a clone of the current instance.
            </summary>
            <returns>
            A new <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding"/> that is a clone of the current instance.
            </returns>
            <remarks>
            <strong>Notes to Inheritors:</strong> The method <see cref="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.Clone"/> calls 
            <see cref="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.CreateInstanceCore"/> which is responsible for creating a new instance of the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding"/> derived class and <see cref="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.CloneCore(DigitalRune.Graphics.Effects.EffectTechniqueBinding)"/> to create a 
            copy of the current instance. Classes that derive from <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding"/> 
            need to implement <see cref="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.CreateInstanceCore"/> and <see cref="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.CloneCore(DigitalRune.Graphics.Effects.EffectTechniqueBinding)"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.CreateInstance">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding"/> class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            This is a private method, and the actual object-specific implementations for the behavior 
            are dependent on the override implementation of the <see cref="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.CreateInstanceCore"/> method, 
            which this method calls internally. 
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cannot clone <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding"/>. A derived class does not implement 
            <see cref="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.CreateInstanceCore"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding"/> derived class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            <para>
            Do not call this method directly (except when calling base in an implementation). This 
            method is called internally by the <see cref="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.Clone"/> method whenever a new instance of the
            <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding"/> is created. 
            </para>
            <para>
            <strong>Notes to Inheritors:</strong> Every <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding"/> derived 
            class must implement this method. A typical implementation is to simply call the default 
            constructor and return the result. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.CloneCore(DigitalRune.Graphics.Effects.EffectTechniqueBinding)">
            <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding"/>.
            </summary>
            <param name="source">The object to clone.</param>
            <remarks>
            <strong>Notes to Inheritors:</strong> Every <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding"/> derived 
            class must implement this method. A typical implementation is to call 
            <c>base.CloneCore(this)</c> to copy all properties of the base class and then copy all 
            properties of the derived class.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.Update(DigitalRune.Graphics.RenderContext)">
            <summary>
            Selects a technique for rendering the specified effect and sets the ID.
            </summary>
            <param name="context">The render context.</param>
            <remarks>
            <para>
            The method <see cref="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.Update(DigitalRune.Graphics.RenderContext)"/> is called when an object needs to be rendered using an 
            <see cref="T:Microsoft.Xna.Framework.Graphics.Effect"/>. Based on the information given in the render context, the method 
            selects the effect technique that should be used for rendering. The selected technique is 
            not yet set as the active technique - the information is only stored internally in the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding"/>. The method also updates the property <see cref="P:DigitalRune.Graphics.Effects.EffectTechniqueBinding.Id"/>,
            which can be used for state sorting. 
            </para>
            <para>
            Immediately before rendering the object, the renderer can call <see cref="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.GetTechnique(Microsoft.Xna.Framework.Graphics.Effect,DigitalRune.Graphics.RenderContext)"/>, which
            returns the effect technique that should be used. The renderer can set the returned 
            technique as the <see cref="P:Microsoft.Xna.Framework.Graphics.Effect.CurrentTechnique"/> of the <see cref="T:Microsoft.Xna.Framework.Graphics.Effect"/>.
            </para>
            <para>
            <strong>Notes to Inheritors:</strong> The method <see cref="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.Update(DigitalRune.Graphics.RenderContext)"/> calls 
            <see cref="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.OnUpdate(DigitalRune.Graphics.RenderContext)"/>, which can be overridden in derived classes. The base implementation 
            selects the first technique found in the current <see cref="T:Microsoft.Xna.Framework.Graphics.Effect"/>. <see cref="P:DigitalRune.Graphics.Effects.EffectTechniqueBinding.Id"/> is
            always 0.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.OnUpdate(DigitalRune.Graphics.RenderContext)">
            <summary>
            Called when the effect technique needs to be selected and <see cref="P:DigitalRune.Graphics.Effects.EffectTechniqueBinding.Id"/> needs to be set.
            </summary>
            <param name="context">The render context.</param>
            <remarks>
            <para>
            <strong>Notes to Inheritors:</strong>
            This method can be overridden in derived classes. <see cref="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.OnUpdate(DigitalRune.Graphics.RenderContext)"/> needs to select the 
            effect technique that should be used for rendering and internally store the value. In 
            addition, the property <see cref="P:DigitalRune.Graphics.Effects.EffectTechniqueBinding.Id"/>, which is used for state sorting, needs to be 
            updated.
            </para>
            <para>
            The base implementation always chooses the first technique found in the effect. 
            <see cref="P:DigitalRune.Graphics.Effects.EffectTechniqueBinding.Id"/> is set to 0.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.GetTechnique(Microsoft.Xna.Framework.Graphics.Effect,DigitalRune.Graphics.RenderContext)">
            <summary>
            Gets the effect technique that should be used for rendering.
            </summary>
            <param name="effect">The effect.</param>
            <param name="context">The render context.</param>
            <returns>The effect technique that should be used for rendering.</returns>
            <remarks>
            <para>
            This method is called immediately before an object is rendered using 
            <paramref name="effect"/>. The returned effect technique can set as the as the 
            <see cref="P:Microsoft.Xna.Framework.Graphics.Effect.CurrentTechnique"/>.
            </para>
            <para>
            <strong>Notes to Inheritors:</strong> The method <see cref="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.GetTechnique(Microsoft.Xna.Framework.Graphics.Effect,DigitalRune.Graphics.RenderContext)"/> calls 
            <see cref="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.OnGetTechnique(Microsoft.Xna.Framework.Graphics.Effect,DigitalRune.Graphics.RenderContext)"/>, which can be overridden in derived classes.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.OnGetTechnique(Microsoft.Xna.Framework.Graphics.Effect,DigitalRune.Graphics.RenderContext)">
            <summary>
            Called when the effect technique that should be used for rendering should be returned.
            </summary>
            <param name="effect">The effect.</param>
            <param name="context">The render context.</param>
            <returns>The effect technique that should be used for rendering.</returns>
            <remarks>
            <strong>Notes to Inheritors:</strong><br/>
            This method can be overridden in derived classes. The base implementation always returns the
            first technique found in <paramref name="effect"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.GetPassBinding(Microsoft.Xna.Framework.Graphics.EffectTechnique,DigitalRune.Graphics.RenderContext)">
            <summary>
            Gets the effect pass binding for the specified effect technique.
            </summary>
            <param name="technique">The effect technique.</param>
            <param name="context">The render context.</param>
            <returns>The effect pass binding.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.OnNextPass(Microsoft.Xna.Framework.Graphics.EffectTechnique,DigitalRune.Graphics.RenderContext,System.Int32@,Microsoft.Xna.Framework.Graphics.EffectPass@)">
            <summary>
            Called when next effect pass needs to be selected.
            </summary>
            <param name="technique">The current effect technique.</param>
            <param name="context">The render context.</param>
            <param name="index">The index of the next effect pass to be applied.</param>
            <param name="pass">The effect pass.</param>
            <returns>
            <see langword="true"/> if the next effect pass has been selected and should be applied; 
            otherwise, <see langword="false"/> if the are no more passes.
            </returns>
            <remarks>
            <para>
            The method performs the following tasks:
            </para>
            <list type="bullet">
            <item>
            <description>
            Update the property <see cref="P:DigitalRune.Graphics.RenderContext.PassIndex"/> in the render context.
            </description>
            </item>
            <item>
            <description>
            Select the next effect pass to be applied and store it in <paramref name="pass"/>.
            </description>
            </item>
            <item>
            <description>
            Increment <paramref name="index"/>.
            </description>
            </item>
            </list>
            <para>
            <strong>Notes to Inheritors:</strong><br/>
            This method can be overridden in derived classes. The base implementation simply iterates 
            through all effect passes of the current technique.
            </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.NullParameterArrayBinding`1">
            <summary>
            Empty binding for effect parameter array. Does nothing.
            </summary>
            <typeparam name="T">
            The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1"/>.
            </typeparam>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.NullParameterArrayBinding`1.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.NullParameterArrayBinding`1"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.NullParameterArrayBinding`1"/> class. (This
            constructor creates an uninitialized instance. Use this constructor only for cloning or
            other special cases!)
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.NullParameterArrayBinding`1.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.NullParameterArrayBinding`1"/> class.
            </summary>
            <param name="effect">The effect.</param>
            <param name="parameter">The effect parameter.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="effect"/> or <paramref name="parameter"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T"/> is not supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.NullParameterArrayBinding`1.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.NullParameterArrayBinding`1.OnApply(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.NullParameterBinding`1">
            <summary>
            Empty binding for effect parameter. Does nothing.
            </summary>
            <typeparam name="T">
            The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding`1"/>.
            </typeparam>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.NullParameterBinding`1.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.NullParameterBinding`1"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.NullParameterBinding`1"/> class. (This
            constructor creates an uninitialized instance. Use this constructor only for cloning or
            other special cases!)
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.NullParameterBinding`1.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.NullParameterBinding`1"/> class.
            </summary>
            <param name="effect">The effect.</param>
            <param name="parameter">The effect parameter.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="effect"/> or <paramref name="parameter"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T"/> is not supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.NullParameterBinding`1.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.NullParameterBinding`1.OnApply(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.SkeletonPoseParameterBinding">
            <summary>
            Binds an <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter"/> to the skinning matrices of <see cref="T:DigitalRune.Animation.Character.SkeletonPose"/>
            of the current <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode"/>.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.SkeletonPoseParameterBinding.Value">
            <summary>
            Gets or sets the skeleton pose.
            </summary>
            <value>The skeleton pose.</value>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.SkeletonPoseParameterBinding.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.SkeletonPoseParameterBinding"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.SkeletonPoseParameterBinding"/> class. (This
            constructor creates an uninitialized instance. Use this constructor only for cloning or
            other special cases!)
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.SkeletonPoseParameterBinding.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.SkeletonPoseParameterBinding"/> class.
            </summary>
            <param name="effect">The effect.</param>
            <param name="parameter">The effect parameter.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="effect"/> or <paramref name="parameter"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.SkeletonPoseParameterBinding.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.SkeletonPoseParameterBinding.CloneCore(DigitalRune.Graphics.Effects.EffectParameterBinding)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.SkeletonPoseParameterBinding.OnUpdate(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.SkeletonPoseParameterBinding.OnApply(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.EffectParameterDescription">
            <summary>
            Describes a parameter of an effect.
            </summary>
            <remarks>
            <para>
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterDescription"/>s provide additional information for effect 
            parameters. This information is used by the graphics engine to understand effects and apply 
            them properly during rendering.
            </para>
            <para>
            The standard semantic (see <see cref="P:DigitalRune.Graphics.Effects.EffectParameterDescription.Semantic"/>) is a unique, case-sensitive string (such as 
            "World", "Diffuse", "PointLightPosition", etc.) that defines how the parameter should be 
            interpreted and used by the engine. User-defined strings can be used, as long as they do not 
            conflict with any of the existing semantics. Existing semantics are defined by the following
            types: <see cref="T:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics"/>, 
            <see cref="T:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics"/>.
            </para>
            <para>
            The index (see <see cref="P:DigitalRune.Graphics.Effects.EffectParameterDescription.Index"/>) defines the object to which the parameter needs to be 
            bound if multiple objects of the same type exist. The description (<see cref="P:DigitalRune.Graphics.Effects.EffectParameterDescription.Semantic"/> = 
            "PointLightPosition", <see cref="P:DigitalRune.Graphics.Effects.EffectParameterDescription.Index"/> = 3, <see cref="P:DigitalRune.Graphics.Effects.EffectParameterDescription.Hint"/> = 
            <see cref="F:DigitalRune.Graphics.Effects.EffectParameterHint.Local"/>) means that the parameter stores the position of 
            4<sup>th</sup> point light near the object that is being rendered.
            </para>
            <para>
            Additionally, the sort hint (see <see cref="P:DigitalRune.Graphics.Effects.EffectParameterDescription.Hint"/>) indicates how the parameter should be 
            treated during state sorting.
            </para>
            <para>
            The descriptions are created automatically by effect interpreters (see 
            <see cref="T:DigitalRune.Graphics.Effects.IEffectInterpreter"/>) when an effect is initialized. The graphics service manages 
            a list of effect interpreters. Custom interpreters can be added to the graphics service to 
            support new types of effects.
            </para>
            </remarks>
            <seealso cref="T:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics"/>
            <seealso cref="T:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics"/>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.EffectParameterDescription.Semantic">
            <summary>
            Gets the standard semantic (case-sensitive).
            </summary>
            <value>
            The standard semantic (case-sensitive). The default value is <see langword="null"/>, which 
            means that the meaning of the effect parameter is unknown.
            </value>
            <remarks>
            The standard semantic is a case-sensitive string that defines the purpose of the effect 
            parameter: Examples are "World", "Diffuse", "PointLightPosition", etc. 
            </remarks>
            <seealso cref="T:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics"/>
            <seealso cref="T:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics"/>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.EffectParameterDescription.Parameter">
            <summary>
            Gets the effect parameter.
            </summary>
            <value>The effect parameter.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.EffectParameterDescription.Index">
            <summary>
            Gets the zero-based index.
            </summary>
            <value>
            The zero-based index. The default value is 0. (Internal: The value may be -1 during 
            initialization. -1 indicates that the index is unknown and should be set automatically. When
            the index is -1 at runtime, this usually indicates an error and parameter bindings will not 
            be applied correctly.)
            </value>
            <remarks>
            The index defines the object to which the parameter is bound if multiple objects of the same
            type exist. Example: The description (<see cref="P:DigitalRune.Graphics.Effects.EffectParameterDescription.Semantic"/> = "PointLightPosition", 
            <see cref="P:DigitalRune.Graphics.Effects.EffectParameterDescription.Index"/> = 3, <see cref="P:DigitalRune.Graphics.Effects.EffectParameterDescription.Hint"/> = <see cref="F:DigitalRune.Graphics.Effects.EffectParameterHint.Local"/>) means
            that the parameter stores the position of 4<sup>th</sup> point light near the object that is 
            being rendered.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is out of range. Allowed values are -1, 0, and positive numbers.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.EffectParameterDescription.Hint">
            <summary>
            Gets a value indicating how the effect parameter should be treated during state sorting.
            </summary>
            <value>
            A value indicating how the effect parameter should be treated during state sorting.
            </value>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterDescription.#ctor(Microsoft.Xna.Framework.Graphics.EffectParameter,System.String,System.Int32,DigitalRune.Graphics.Effects.EffectParameterHint)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterDescription"/> class.
            </summary>
            <param name="parameter">The effect parameter.</param>
            <param name="semantic">The semantic.</param>
            <param name="index">The index.</param>
            <param name="hint">
            A value indicating how the effect parameter should be treated during state sorting.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parameter"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Invalid <paramref name="index"/>. Allowed values are -1, 0, and positive numbers.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="hint"/> is invalid.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.EffectParameterDescriptionCollection">
            <summary>
            Stores an <see cref="T:DigitalRune.Graphics.Effects.EffectParameterDescription"/> for all parameters of an effect.
            </summary>
            <remarks>
            The <see cref="T:DigitalRune.Graphics.Effects.EffectParameterDescriptionCollection"/> is a read-only collection! Attempts to 
            manipulate the collection will cause exceptions.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.EffectParameterDescriptionCollection.Items">
            <summary>
            Gets the internal <see cref="T:System.Collections.Generic.List`1" /> ot the <see cref="T:System.Collections.ObjectModel.Collection`1" />.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterDescriptionCollection.#ctor(DigitalRune.Graphics.IGraphicsService,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterDescriptionCollection"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <param name="effect">The effect.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> or <paramref name="effect"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterDescriptionCollection.Initialize(DigitalRune.Graphics.IGraphicsService,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Initializes the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterDescriptionCollection"/> for the specified effect.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <param name="effect">The effect.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterDescriptionCollection.InterpretParameter(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,DigitalRune.Graphics.Effects.EffectInterpreterCollection)">
            <summary>
            Interprets the specified effect parameter and adds an 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterDescription"/> to the collection.
            </summary>
            <param name="effect">The effect.</param>
            <param name="parameter">The effect parameter.</param>
            <param name="interpreters">The effect interpreters.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterDescriptionCollection.ValidateIndices(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Validates the indices of all effect parameters.
            </summary>
            <param name="effect">The effect.</param>
            <remarks>
            <see cref="M:DigitalRune.Graphics.Effects.EffectParameterDescriptionCollection.ValidateIndices(Microsoft.Xna.Framework.Graphics.Effect)"/> ensures that all the indices (see 
            <see cref="P:DigitalRune.Graphics.Effects.EffectParameterDescription.Index"/>) are set correctly (no duplicate indices, all 
            indices 0 or positive). Indices with a value of -1 are automatically set to the next free 
            index.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterDescriptionCollection.TryGet(Microsoft.Xna.Framework.Graphics.EffectParameter,DigitalRune.Graphics.Effects.EffectParameterDescription@)">
            <summary>
            Gets the description for the specified effect parameter.
            </summary>
            <param name="parameter">The effect parameter.</param>
            <param name="description">
            The description for the specified effect parameter, if the parameter is found; otherwise, 
            <see langword="null"/>.
            </param>
            <returns>
            <see langword="true"/> if the collection contains a description for the effect parameter; 
            otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parameter"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterDescriptionCollection.GetKeyForItem(DigitalRune.Graphics.Effects.EffectParameterDescription)">
            <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
            <param name="item">The element from which to extract the key.</param>
            <returns>The key for the specified element.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterDescriptionCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection. 
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator"/> for <see cref="T:DigitalRune.Graphics.Effects.EffectParameterDescriptionCollection"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterDescriptionCollection.ClearItems">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterDescriptionCollection.InsertItem(System.Int32,DigitalRune.Graphics.Effects.EffectParameterDescription)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="item"/> should be inserted.
            </param>
            <param name="item">The object to insert.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterDescriptionCollection.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or <paramref name="index"/> is equal to or
            greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectParameterDescriptionCollection.SetItem(System.Int32,DigitalRune.Graphics.Effects.EffectParameterDescription)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.EffectParameterHint">
            <summary>
            Indicates how an effect parameter should be treated during state sorting.
            </summary>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Graphics.Rendering.MeshRenderer"/> sorts meshes by render states before rendering them. State
            sorting is used to minimize number of state changes required for drawing a complex scene.
            </para>
            <para>
            Each effect parameter has an <see cref="T:DigitalRune.Graphics.Effects.EffectParameterHint"/>. The sort hint is a value 
            indicating how the effect parameter should be treated during state sorting. It basically puts
            each parameter into a certain category.
            </para>
            <para>
            The sort hint is stored in the effect parameter description (see 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterDescription"/>). The parameter descriptions of an effect can be 
            read using the method <see cref="M:DigitalRune.Graphics.Effects.EffectHelper.GetParameterDescriptions(Microsoft.Xna.Framework.Graphics.Effect)"/>. The value is set 
            by one of the effect interpreters (see <see cref="T:DigitalRune.Graphics.Effects.IEffectInterpreter"/>) of the graphics 
            service (see <see cref="P:DigitalRune.Graphics.IGraphicsService.EffectInterpreters"/>) during effect initialization.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.EffectParameterHint.PerPass">
            <summary>
            The effect parameter needs to be updated and applied once per effect pass. Examples for 
            per-pass parameters are: pass index.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.EffectParameterHint.PerInstance">
            <summary>
            The effect parameter is unique for each mesh instance. Examples for instance parameters are: 
            world matrix.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.EffectParameterHint.Local">
            <summary>
            The effect parameter depends on the location of the mesh in the scene. Multiple meshes which
            are close to each other in the scene may share the same parameter values. Examples of local 
            parameters are: local environment maps, local lights, etc.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.EffectParameterHint.Material">
            <summary>
            The effect parameter defines the material of a mesh. Multiple meshes can share the same 
            material. Material parameters are independent of the location of the object in the scene. 
            Examples of material parameters are: diffuse color, albedo texture, specular color, gloss 
            texture, normal map, etc.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.EffectParameterHint.Global">
            <summary>
            The effect parameter is identical for all meshes that use the same effect/technique. They do
            not depend on the object that is being rendered or on the location of the object in the 
            scene. Examples of global parameters are: view matrix, projection matrix, camera position, 
            etc.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.EffectParameterHint.Any">
            <summary>
            Any of the other values.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.EffectTechniqueDescription">
            <summary>
            Describes a technique of an effect.
            </summary>
            <remarks>
            <para>
            <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueDescription"/>s provide additional information for effect 
            techniques. This information is used by the graphics engine to understand effects and apply 
            them properly during rendering.
            </para>
            <para>
            The descriptions are created automatically by effect interpreters (see 
            <see cref="T:DigitalRune.Graphics.Effects.IEffectInterpreter"/>) when an effect is initialized. The graphics service manages 
            a list of effect interpreters. Custom interpreters can be added to the graphics service to 
            support new types of effects.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.EffectTechniqueDescription.Technique">
            <summary>
            Gets the effect technique.
            </summary>
            <value>The effect technique.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.EffectTechniqueDescription.Index">
            <summary>
            Gets the index of the effect technique.
            </summary>
            <value>The index of the effect technique.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.EffectTechniqueDescription.InstancingTechnique">
            <summary>
            Gets the associated effect technique that supports hardware instancing.
            </summary>
            <value>
            The effect technique that supports hardware instancing, or <see langword="null"/> if there 
            is no associated technique that supports hardware instancing.
            </value>
            <remarks>
            <para>
            An effect technique in a DirectX Effect may reference another technique, which supports
            instancing. This technique needs to have the same name plus the postfix <c>"Instancing"</c>.
            Example:
            </para>
            <code lang="none">
            <![CDATA[
            // Technique without hardware instancing
            technique MyTechnique
            {
                pass
                {
                    VertexShader = compile vs_2_0 VS();
                    PixelShader = compile ps_2_0 PS();
                }
            }
            
            // Equivalent of MyTechnique that supports hardware instancing.
            technique MyTechniqueInstancing
            {
                pass
                {
                    VertexShader = compile vs_3_0 HardwareInstancingVS();
                    PixelShader = compile ps_3_0 PS();
                }
            }
            ]]>
            </code>
            <para>
            Alternatively, the technique can also be identified by adding an effect annotation to the
            effect technique:
            </para>
            <code lang="none">
            <![CDATA[
            // Default technique without hardware instancing
            technique MyTechnique
            <
                // There is an equivalent of this technique that supports hardware instancing.
                string InstancingTechnique = "HardwareInstancing"; 
            >
            {
                pass
                {
                    VertexShader = compile vs_2_0 VS();
                    PixelShader = compile ps_2_0 PS();
                }
            }
            
            // Hardware instancing technique.
            technique HardwareInstancing
            {
                pass
                {
                    VertexShader = compile vs_3_0 HardwareInstancingVS();
                    PixelShader = compile ps_3_0 PS();
                }
            }
            ]]>
            </code>
            <note type="warning">
            <para>
            MonoGame currently does not support effect annotations. Therefore, this only works in XNA.
            </para>
            </note>
            <para>
            The <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueDescription"/> checks the names and annotations and will
            automatically resolve the technique for hardware instancing and store the reference in
            <see cref="P:DigitalRune.Graphics.Effects.EffectTechniqueDescription.InstancingTechnique"/>. The <see cref="T:DigitalRune.Graphics.Rendering.MeshRenderer"/> and custom renderers can
            check this property, to see if hardware instancing is supported.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueDescription.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectTechnique)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueDescription"/> class.
            </summary>
            <param name="effect">The effect.</param>
            <param name="technique">The effect technique.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="effect"/> or <paramref name="technique"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueDescription.GetIndex(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectTechnique)">
            <summary>
            Validates the specified technique and returns its index.
            </summary>
            <param name="effect">The effect.</param>
            <param name="technique">The effect technique.</param>
            <returns>The index of the effect technique</returns>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.EffectTechniqueDescriptionCollection">
            <summary>
            Stores an <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueDescription"/> for all techniques of an effect.
            </summary>
            <remarks>
            The <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueDescriptionCollection"/> is a read-only collection! Attempts to 
            manipulate the collection will cause exceptions.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.EffectTechniqueDescriptionCollection.Item(Microsoft.Xna.Framework.Graphics.EffectTechnique)">
            <summary>
            Gets the <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueDescription"/> for the specified technique.
            </summary>
            <value>
            The <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueDescription"/>, or <see langword="null"/> if the specified
            technique is not found in the collection.
            </value>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueDescriptionCollection.#ctor(DigitalRune.Graphics.IGraphicsService,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterDescriptionCollection"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <param name="effect">The effect.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> or <paramref name="effect"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueDescriptionCollection.Initialize(DigitalRune.Graphics.IGraphicsService,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Initializes the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterDescriptionCollection"/> for the specified effect.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <param name="effect">The effect.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueDescriptionCollection.InterpretTechnique(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectTechnique,DigitalRune.Graphics.Effects.EffectInterpreterCollection)">
            <summary>
            Interprets the specified effect technique and adds an 
            <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueDescription"/> to the collection.
            </summary>
            <param name="effect">The effect.</param>
            <param name="technique">The technique.</param>
            <param name="interpreters">The effect interpreters.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueDescriptionCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection. 
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator"/> for <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueDescriptionCollection"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueDescriptionCollection.ClearItems">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueDescriptionCollection.InsertItem(System.Int32,DigitalRune.Graphics.Effects.EffectTechniqueDescription)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="item"/> should be inserted.
            </param>
            <param name="item">The object to insert.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueDescriptionCollection.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or <paramref name="index"/> is equal to or 
            greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueDescriptionCollection.SetItem(System.Int32,DigitalRune.Graphics.Effects.EffectTechniqueDescription)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.EffectBinding">
            <summary>
            Provides the logic for rendering a specific 
            <see cref="T:Microsoft.Xna.Framework.Graphics.Effect"/>.
            </summary>
            <remarks>
            <para>
            An <see cref="T:Microsoft.Xna.Framework.Graphics.Effect"/> defines the render states required to
            render an object. An <see cref="T:DigitalRune.Graphics.Effects.EffectBinding"/> provides the logic that is required for using
            an effect at runtime.
            </para>
            <para>
            Multiple <see cref="T:DigitalRune.Graphics.Effects.EffectBinding"/>s can share the same <see cref="P:DigitalRune.Graphics.Effects.EffectBinding.Effect"/>. An 
            <see cref="T:DigitalRune.Graphics.Effects.EffectBinding"/> can in theory be shared by different graphics objects. But in 
            most cases an <see cref="T:DigitalRune.Graphics.Effects.EffectBinding"/> belongs to a single object, such as a 
            <see cref="T:DigitalRune.Graphics.Mesh"/>.
            </para>
            <para>
            <strong>Technique and Parameter Bindings:</strong><br/>
            An effect may define one or more effect techniques. When rendering a certain object the 
            correct technique needs to be chosen. In addition, an effect defines a set of effect 
            parameters. An effect file (.fx) can define default values for effect parameters. However, 
            most effect parameters need to be set at runtime. Static parameters (such as colors, textures,
            etc.) can be set when assets are loaded. Dynamic parameters (such as world matrix, view 
            matrix, projection matrix, etc.) need to be updated, typically once per frame, when the 
            associated objects are rendered.
            </para>
            <para>
            Effect parameters belong to different categories, defined by 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterHint"/>. An <see cref="T:DigitalRune.Graphics.Effects.EffectBinding"/> can be used to manage all
            kinds of effect parameters, or only parameters of a certain type, e.g. only 
            <see cref="F:DigitalRune.Graphics.Effects.EffectParameterHint.Material"/> parameters. See also <see cref="P:DigitalRune.Graphics.Effects.EffectBinding.Hints"/>.
            </para>
            <para>
            DigitalRune Graphics introduces the concept of <i>effect technique bindings</i> and <i>effect 
            parameter bindings</i>: The technique binding (see property <see cref="P:DigitalRune.Graphics.Effects.EffectBinding.TechniqueBinding"/>) 
            provides the logic for selecting a technique at runtime. Parameter bindings (stored in 
            <see cref="P:DigitalRune.Graphics.Effects.EffectBinding.ParameterBindings"/>) links a effect parameters to a certain values. By using a 
            <see cref="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1"/> a parameter can be bound to a static value. By using a 
            <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterBinding`1"/> a parameter can be dynamically updated when needed. 
            Effect technique and parameter bindings are evaluated when the associated object (e.g. a mesh)
            needs to be rendered. Evaluation consists of two phases:
            <list type="number">
            <item>
            <description>
            <strong>Update:</strong> The effect technique is selected; the new value of an effect 
            parameter is calculated.
            </description>
            </item>
            <item>
            <description>
            <strong>Apply:</strong> An effect technique is selected for rendering; the new value is 
            applied to the effect parameter in <see cref="P:DigitalRune.Graphics.Effects.EffectBinding.Effect"/>.
            </description>
            </item>
            </list>
            </para>
            <para>
            <strong>Initialization:</strong> When an effect binding is created all technique and parameter
            bindings are created automatically. This initialization involves two steps:
            <list type="number">
            <item>
            <description>
            <strong>Interpretation: </strong> <see cref="T:DigitalRune.Graphics.Effects.IEffectInterpreter"/>s are used to interpret the
            meaning of effect techniques and parameters. An <see cref="T:DigitalRune.Graphics.Effects.IEffectInterpreter"/> returns 
            <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueDescription"/>s and <see cref="T:DigitalRune.Graphics.Effects.EffectParameterDescription"/>s which
            indicate how the effect should be used at runtime. This information is stored per effect and 
            can also be queried using the methods <see cref="M:DigitalRune.Graphics.Effects.EffectHelper.GetTechniqueDescriptions(Microsoft.Xna.Framework.Graphics.Effect)"/> and 
            <see cref="M:DigitalRune.Graphics.Effects.EffectHelper.GetParameterDescriptions(Microsoft.Xna.Framework.Graphics.Effect)"/>.
            </description>
            </item>
            <item>
            <description>
            <strong>Binding of Effect Parameters: </strong> <see cref="T:DigitalRune.Graphics.Effects.IEffectBinder"/>s read the
            information provided in the previous step and create an <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding"/>
            for the effect and <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/>s for all effect parameters.
            </description>
            </item>
            </list>
            The <see cref="T:DigitalRune.Graphics.Effects.IEffectInterpreter"/>s and the <see cref="T:DigitalRune.Graphics.Effects.IEffectBinder"/>s are stored in the
            <see cref="T:DigitalRune.Graphics.IGraphicsService"/>. Custom interpreters/binders can be added to support new types
            of effects.
            </para>
            <para>
            <strong>Cloning:</strong><br/>
            <see cref="T:DigitalRune.Graphics.Effects.EffectBinding"/>s need to be cloneable. The method <see cref="M:DigitalRune.Graphics.Effects.EffectBinding.Clone"/> calls 
            <see cref="M:DigitalRune.Graphics.Effects.EffectBinding.CreateInstanceCore"/> and <see cref="M:DigitalRune.Graphics.Effects.EffectBinding.CloneCore(DigitalRune.Graphics.Effects.EffectBinding)"/> which are responsible for 
            creating a clone of the current instance. Classes that derive from <see cref="T:DigitalRune.Graphics.Effects.EffectBinding"/>
            need to provide the implementation for <see cref="M:DigitalRune.Graphics.Effects.EffectBinding.CreateInstanceCore"/> and override 
            <see cref="M:DigitalRune.Graphics.Effects.EffectBinding.CloneCore(DigitalRune.Graphics.Effects.EffectBinding)"/> if necessary.
            </para>
            <para>
            By default, when an <see cref="T:DigitalRune.Graphics.Effects.EffectBinding"/> is cloned all technique and parameter bindings
            are duplicated (deep copy).  Any optional object stored in <see cref="P:DigitalRune.Graphics.Effects.EffectBinding.UserData"/> is copied 
            per reference (shallow copy).
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.EffectBinding.Id">
            <summary>Temporary ID set during rendering.</summary>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.EffectBinding.Effect">
            <summary>
            Gets the effect.
            </summary>
            <value>The effect.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.EffectBinding.EffectEx">
            <summary>
            Gets the <see cref="P:DigitalRune.Graphics.Effects.EffectBinding.EffectEx"/>.
            </summary>
            <value>The <see cref="P:DigitalRune.Graphics.Effects.EffectBinding.EffectEx"/>.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.EffectBinding.MaterialBinding">
            <summary>
            Gets the material binding. (Only valid if this is a material instance binding.)
            </summary>
            <value>The material binding.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.EffectBinding.MorphWeights">
            <summary>
            Gets or sets the weights of the morph targets. (Only valid if this is a material instance
            binding and the submeshes have morph targets.)
            </summary>
            <value>The weights of the morph targets.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.EffectBinding.TechniqueBinding">
            <summary>
            Gets or sets the binding that resolves the effect technique.
            </summary>
            <value>The binding that resolves the effect technique.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.EffectBinding.ParameterBindings">
            <summary>
            Gets the bindings that resolve effect parameters.
            </summary>
            <value>The bindings that resolve effect parameters.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.EffectBinding.Hints">
            <summary>
            Gets a value indicating which effect parameters are handled by this effect binding.
            </summary>
            <value>
            A bitwise combination of <see cref="T:DigitalRune.Graphics.Effects.EffectParameterHint"/> values. The value defines which
            parameter bindings are handled by this effect binding.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.EffectBinding.KeepOpaqueData">
            <summary>
            Gets or sets a value indicating whether <see cref="P:DigitalRune.Graphics.Effects.EffectBinding.OpaqueData"/> should be kept for 
            debugging.
            </summary>
            <value>
            <see langword="true"/> if <see cref="P:DigitalRune.Graphics.Effects.EffectBinding.OpaqueData"/> should be kept for debugging; otherwise, 
            <see langword="false"/> if opaque data will be deleted once the effect binding is 
            initialized. The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.EffectBinding.OpaqueData">
            <summary>
            Gets the opaque data (only used for debugging, only set if <see cref="P:DigitalRune.Graphics.Effects.EffectBinding.KeepOpaqueData"/> is 
            <see langword="true"/>).
            </summary>
            <value>The opaque data.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.EffectBinding.UserData">
            <summary>
            Gets or sets user-defined data.
            </summary>
            <value>User-defined data.</value>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectBinding.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectBinding"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectBinding"/> class. (This constructor
            creates an uninitialized instance. Use this constructor only for cloning or other special
            cases!)
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectBinding.#ctor(DigitalRune.Graphics.IGraphicsService,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectBinding"/> class which can store
            all kinds of effect parameters.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <param name="effect">The effect.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> or <paramref name="effect"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectBinding.#ctor(DigitalRune.Graphics.IGraphicsService,Microsoft.Xna.Framework.Graphics.Effect,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectBinding"/> class which can be used in a 
            <see cref="T:DigitalRune.Graphics.Material"/> (only storing bindings for 
            <see cref="F:DigitalRune.Graphics.Effects.EffectParameterHint.Material"/> parameters).
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <param name="effect">The effect.</param>
            <param name="opaqueData">The opaque data. Can be <see langword="null"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> or <paramref name="effect"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectBinding.#ctor(DigitalRune.Graphics.IGraphicsService,Microsoft.Xna.Framework.Graphics.Effect,System.Collections.Generic.IDictionary{System.String,System.Object},DigitalRune.Graphics.Effects.EffectParameterHint)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectBinding"/> class with the given settings.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <param name="effect">The effect.</param>
            <param name="opaqueData">The opaque data. Can be <see langword="null"/>.</param>
            <param name="hints">
            A bitwise combination of <see cref="T:DigitalRune.Graphics.Effects.EffectParameterHint"/> values. The value defines which
            parameter bindings can be added to the effect binding.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> or <paramref name="effect"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="effect"/> is an XNA stock effect. The effect binding cannot be used with XNA 
            stock effects.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectBinding.CreateMaterialInstance">
            <summary>
            Creates a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectBinding"/> class for a material instance.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectBinding.InitializeBindings(DigitalRune.Graphics.IGraphicsService,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes the effect technique and parameter bindings.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <param name="opaqueData">The opaque data.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectBinding.OnInitializeBindings(DigitalRune.Graphics.IGraphicsService,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Called when the effect technique and parameter bindings should be initialized.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <param name="opaqueData">The opaque data. Can be <see langword="null"/>.</param>
            <remarks>
            <para>
            <strong>Notes to Inheritors:</strong> Derived classes can override this method to create
            custom parameter bindings. If the derived class does not initialize all parameter bindings
            then it should call the base implementation of <see cref="M:DigitalRune.Graphics.Effects.EffectBinding.OnInitializeBindings(DigitalRune.Graphics.IGraphicsService,System.Collections.Generic.IDictionary{System.String,System.Object})"/> to
            initialize the remaining bindings.
            </para>
            <para>
            The method is called by the constructor of the base class. This means that derived classes
            may not be initialized yet!
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectBinding.Clone">
            <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.Effects.EffectBinding"/> that is a clone of the current instance.
            </summary>
            <returns>
            A new <see cref="T:DigitalRune.Graphics.Effects.EffectBinding"/> that is a clone of the current instance.
            </returns>
            <remarks>
            <strong>Notes to Inheritors:</strong> The method <see cref="M:DigitalRune.Graphics.Effects.EffectBinding.Clone"/> calls 
            <see cref="M:DigitalRune.Graphics.Effects.EffectBinding.CreateInstanceCore"/> which is responsible for creating a new instance of the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectBinding"/> derived class and <see cref="M:DigitalRune.Graphics.Effects.EffectBinding.CloneCore(DigitalRune.Graphics.Effects.EffectBinding)"/> to create a copy of 
            the current instance. Classes that derive from <see cref="T:DigitalRune.Graphics.Effects.EffectBinding"/> need to 
            implement <see cref="M:DigitalRune.Graphics.Effects.EffectBinding.CreateInstanceCore"/> and <see cref="M:DigitalRune.Graphics.Effects.EffectBinding.CloneCore(DigitalRune.Graphics.Effects.EffectBinding)"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectBinding.CreateInstance">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectBinding"/> class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            This is a private method, and the actual object-specific implementations for the behavior 
            are dependent on the override implementation of the <see cref="M:DigitalRune.Graphics.Effects.EffectBinding.CreateInstanceCore"/> method, 
            which this method calls internally. 
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cannot clone EffectBinding. A derived class does not implement 
            <see cref="M:DigitalRune.Graphics.Effects.EffectBinding.CreateInstanceCore"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectBinding.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectBinding"/> derived class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            <para>
            Do not call this method directly (except when calling base in an implementation). This 
            method is called internally by the <see cref="M:DigitalRune.Graphics.Effects.EffectBinding.Clone"/> method whenever a new instance of
            the <see cref="T:DigitalRune.Graphics.Effects.EffectBinding"/> is created. 
            </para>
            <para>
            <strong>Notes to Inheritors:</strong> Every <see cref="T:DigitalRune.Graphics.Effects.EffectBinding"/> derived class must
            implement this method. A typical implementation is to simply call the default constructor
            and return the result. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectBinding.CloneCore(DigitalRune.Graphics.Effects.EffectBinding)">
            <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Effects.EffectBinding"/>.
            </summary>
            <param name="source">The object to clone.</param>
            <remarks>
            <strong>Notes to Inheritors:</strong> Every <see cref="T:DigitalRune.Graphics.Effects.EffectBinding"/> derived class must
            implement this method. A typical implementation is to call <c>base.CloneCore(this)</c> to
            copy all properties of the base class and then copy all properties of the derived class.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectBinding.Set``1(System.String,``0)">
            <overloads>
            <summary>
            Sets a parameter binding for the specified effect parameter.
            </summary>
            </overloads>
            
            <summary>
            Sets a <see cref="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1"/> for the effect parameter with the specified 
            name.
            </summary>
            <typeparam name="T">The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding`1"/>.</typeparam>
            <param name="name">
            The name of the effect parameter to which the binding is applied.
            </param>
            <param name="value">The value.</param>
            <returns>The <see cref="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1"/> that has been set.</returns>
            <remarks>
            If an appropriate effect parameter binding for the effect parameter already exists, then the
            existing binding is updated.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is empty.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            <see cref="P:DigitalRune.Graphics.Effects.EffectBinding.Effect"/> does not contain an <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter"/> with the given name.
            </exception>
            <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T"/> is not supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectBinding.Set``1(System.String,``0[])">
            <summary>
            Sets a <see cref="T:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1"/> for the effect parameter with the 
            specified name.
            </summary>
            <typeparam name="T">
            The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1"/>.
            </typeparam>
            <param name="name">
            The name of the effect parameter to which the binding is applied.
            </param>
            <param name="values">The array of values.</param>
            <returns>The <see cref="T:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1"/> that has been set.</returns>
            <remarks>
            If an appropriate effect parameter binding for the effect parameter already exists, then the
            existing binding is updated.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is empty.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            <see cref="P:DigitalRune.Graphics.Effects.EffectBinding.Effect"/> does not contain an <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter"/> with the given name.
            </exception>
            <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T"/> is not supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectBinding.Set``1(System.String,System.Func{DigitalRune.Graphics.Effects.DelegateParameterBinding{``0},DigitalRune.Graphics.RenderContext,``0})">
            <summary>
            Sets a <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterBinding`1"/> for the effect parameter with the specified
            name.
            </summary>
            <typeparam name="T">The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding`1"/>.</typeparam>
            <param name="name">
            The name of the effect parameter to which the binding is applied.
            </param>
            <param name="computeParameter">The callback function that computes the value.</param>
            <returns>The <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterBinding`1"/> that has been set.</returns>
            <remarks>
            If an appropriate effect parameter binding for the effect parameter already exists, then the
            existing binding is updated.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is empty.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            <see cref="P:DigitalRune.Graphics.Effects.EffectBinding.Effect"/> does not contain an <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter"/> with the given name.
            </exception>
            <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T"/> is not supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectBinding.Set``1(System.String,System.Action{DigitalRune.Graphics.Effects.DelegateParameterArrayBinding{``0},DigitalRune.Graphics.RenderContext,``0[]})">
            <summary>
            Sets a <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1"/> for the effect parameter with the 
            specified name.
            </summary>
            <typeparam name="T">
            The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1"/>.
            </typeparam>
            <param name="name">
            The name of the effect parameter to which the binding is applied.
            </param>
            <param name="computeParameter">
            The callback function that computes the parameter values.
            </param>
            <returns>The <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1"/> that has been set.</returns>
            <remarks>
            If an appropriate effect parameter binding for the effect parameter already exists, then the
            existing binding is updated.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is empty.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            <see cref="P:DigitalRune.Graphics.Effects.EffectBinding.Effect"/> does not contain an <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter"/> with the given name.
            </exception>
            <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T"/> is not supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectBinding.Set``1(Microsoft.Xna.Framework.Graphics.EffectParameter,``0)">
            <summary>
            Sets a <see cref="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1"/> for the specified effect parameter.
            </summary>
            <typeparam name="T">The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding`1"/>.</typeparam>
            <param name="parameter">
            The effect parameter to which the binding is applied.
            </param>
            <param name="value">The value.</param>
            <returns>The <see cref="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1"/> that has been set.</returns>
            <remarks>
            If an appropriate effect parameter binding for <paramref name="parameter"/> already exists,
            then the existing binding is updated.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parameter"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T"/> is not supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectBinding.Set``1(Microsoft.Xna.Framework.Graphics.EffectParameter,``0[])">
            <summary>
            Sets a <see cref="T:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1"/> for the specified effect parameter.
            </summary>
            <typeparam name="T">
            The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1"/>.
            </typeparam>
            <param name="parameter">
            The effect parameter to which the binding is applied.
            </param>
            <param name="values">The array of values.</param>
            <returns>The <see cref="T:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1"/> that has been set.</returns>
            <remarks>
            If an appropriate effect parameter binding for <paramref name="parameter"/> already exists,
            then the existing binding is updated.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parameter"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T"/> is not supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectBinding.Set``1(Microsoft.Xna.Framework.Graphics.EffectParameter,System.Func{DigitalRune.Graphics.Effects.DelegateParameterBinding{``0},DigitalRune.Graphics.RenderContext,``0})">
            <summary>
            Sets a <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterBinding`1"/> for the specified effect parameter.
            </summary>
            <typeparam name="T">The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding`1"/>.</typeparam>
            <param name="parameter">
            The effect parameter to which the binding is applied.
            </param>
            <param name="computeParameter">The callback function that computes the value.</param>
            <returns>The <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterBinding`1"/> that has been set.</returns>
            <remarks>
            If an appropriate effect parameter binding for <paramref name="parameter"/> already exists,
            then the existing binding is updated.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parameter"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T"/> is not supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectBinding.Set``1(Microsoft.Xna.Framework.Graphics.EffectParameter,System.Action{DigitalRune.Graphics.Effects.DelegateParameterArrayBinding{``0},DigitalRune.Graphics.RenderContext,``0[]})">
            <summary>
            Sets a <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1"/> for the specified effect parameter.
            </summary>
            <typeparam name="T">
            The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1"/>.
            </typeparam>
            <param name="parameter">The effect parameter to which the binding is applied.</param>
            <param name="computeParameter">
            The callback function that computes the parameter values.
            </param>
            <returns>The <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1"/> that has been set.</returns>
            <remarks>
            If an appropriate effect parameter binding for <paramref name="parameter"/> already exists,
            then the existing binding is updated.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parameter"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T"/> is not supported.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.EffectBindingException">
            <summary>
            Occurs if an effect binding fails.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.EffectBindingException.EffectName">
            <summary>
            Gets the name of the effect.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.EffectBindingException.EffectParameterName">
            <summary>
            Gets the name of the effect parameter.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectBindingException.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectBindingException"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectBindingException"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectBindingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectBindingException"/> class with a
            specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectBindingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectBindingException"/> class with a
            specified error message and a reference to the inner exception that is the cause of this
            exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">
            The exception that is the cause of the current exception, or <see langword="null"/> if no
            inner exception is specified.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectBindingException.#ctor(System.String,Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectBindingException"/> class with a
            specified error message and additional effect information.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="effect">The effect. Can be <see langword="null"/>.</param>
            <param name="effectParameter">The effect parameter. Can be <see langword="null"/>.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectBindingException.#ctor(System.String,Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectBindingException"/> class with a
            specified error message, additional effect information and a reference to the inner
            exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="effect">The effect. Can be <see langword="null"/>.</param>
            <param name="effectParameter">The effect parameter. Can be <see langword="null"/>.</param>
            <param name="innerException">
            The exception that is the cause of the current exception, or <see langword="null"/> if no
            inner exception is specified.
            </param>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.EffectEx">
            <summary>
            Provides additional data for an <see cref="T:Microsoft.Xna.Framework.Graphics.Effect"/>.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.EffectEx.BindingCount">
            <summary>Counts the bindings for this effect during rendering.</summary>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.EffectEx.OriginalParameterValues">
            <summary>
            Gets the original effect parameter values as specified in the .fx file.
            </summary>
            <value>The original effect parameter values as specified in the .fx file.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.EffectEx.TechniqueDescriptions">
            <summary>
            Gets the descriptions of the effect techniques.
            </summary>
            <value>
            The descriptions of the effect techniques.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.EffectEx.TechniqueBinding">
            <summary>
            Gets the effect technique binding.
            </summary>
            <value>The effect technique binding.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.EffectEx.ParameterDescriptions">
            <summary>
            Gets the descriptions of the effect parameters.
            </summary>
            <value>The descriptions of the effect parameters.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.EffectEx.ParameterBindings">
            <summary>
            Gets the effect parameter bindings.
            </summary>
            <value>The effect parameter bindings.</value>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectEx.From(Microsoft.Xna.Framework.Graphics.Effect,DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Gets the <see cref="T:DigitalRune.Graphics.Effects.EffectEx"/> for the specified <see cref="T:Microsoft.Xna.Framework.Graphics.Effect"/>.
            </summary>
            <param name="effect">The effect.</param>
            <param name="graphicsService">The graphics service.</param>
            <returns>The <see cref="T:DigitalRune.Graphics.Effects.EffectEx"/>.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectEx.Initialize(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes the <see cref="T:DigitalRune.Graphics.Effects.EffectEx"/>.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.EffectHelper">
            <summary>
            Provides extension methods for the <see cref="T:Microsoft.Xna.Framework.Graphics.Effect"/> class and related types.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetColor(Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <summary>
            Gets the value of the effect parameter as <see cref="T:Microsoft.Xna.Framework.Color"/>. 
            </summary>
            <param name="parameter">The effect parameter.</param>
            <returns>
            The value of the effect parameter as <see cref="T:Microsoft.Xna.Framework.Color"/>.
            </returns>
            <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Color"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectHelper.SetColor(Microsoft.Xna.Framework.Graphics.EffectParameter,Microsoft.Xna.Framework.Color)">
            <overloads>
            <summary>
            Sets the value of an effect parameter that represents a color.
            </summary>
            </overloads>
            
            <summary>
            Sets the value of the effect parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="color">The color given as <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Color"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetColorVector3(Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <summary>
            Gets the value of the effect parameter as a RGB color represented as
            <see cref="T:Microsoft.Xna.Framework.Vector3"/>. 
            </summary>
            <param name="parameter">The effect parameter.</param>
            <returns>
            The value of the effect parameter as a RGB color represented as
            <see cref="T:Microsoft.Xna.Framework.Vector3"/>.
            </returns>
            <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Vector3"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectHelper.SetColor(Microsoft.Xna.Framework.Graphics.EffectParameter,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Sets the value of the effect parameter to a RGB color.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="color">The color given as <see cref="T:Microsoft.Xna.Framework.Vector3"/>.</param>
            <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Vector3"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetColorVector3F(Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <summary>
            Gets the value of the effect parameter as a RGB color represented as
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>. 
            </summary>
            <param name="parameter">The effect parameter.</param>
            <returns>
            The value of the effect parameter as a RGB color represented as
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.
            </returns>
            <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectHelper.SetColor(Microsoft.Xna.Framework.Graphics.EffectParameter,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Sets the value of the effect parameter to a RGB color.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="color">The color given as <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.</param>
            <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetColorVector4(Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <summary>
            Gets the value of the effect parameter as a RGBA color represented as
            <see cref="T:Microsoft.Xna.Framework.Vector4"/>. 
            </summary>
            <param name="parameter">The effect parameter.</param>
            <returns>
            The value of the effect parameter as a RGBA color represented as
            <see cref="T:Microsoft.Xna.Framework.Vector4"/>.
            </returns>
            <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Vector4"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectHelper.SetColor(Microsoft.Xna.Framework.Graphics.EffectParameter,Microsoft.Xna.Framework.Vector4)">
            <summary>
            Sets the value of the effect parameter to a RGBA color.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="color">The color given as <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
            <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Vector4"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetColorVector4F(Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <summary>
            Gets the value of the effect parameter as a RGBA color represented as
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>. 
            </summary>
            <param name="parameter">The effect parameter.</param>
            <returns>
            The value of the effect parameter as a RGBA color represented as
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>.
            </returns>
            <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectHelper.SetColor(Microsoft.Xna.Framework.Graphics.EffectParameter,DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Sets the value of the effect parameter to a RGBA color.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="color">The color given as <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>.</param>
            <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetPositionVector3(Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <summary>
            Gets the value of the effect parameter as position vector represented as 
            <see cref="T:Microsoft.Xna.Framework.Vector3"/>. 
            </summary>
            <param name="parameter">The effect parameter.</param>
            <returns>
            The value of the effect parameter as position vector represented as 
            <see cref="T:Microsoft.Xna.Framework.Vector3"/>.
            </returns>
            <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Vector3"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectHelper.SetPosition(Microsoft.Xna.Framework.Graphics.EffectParameter,Microsoft.Xna.Framework.Vector3)">
            <overloads>
            <summary>
            Sets the value of an effect parameter that represents a position.
            </summary>
            </overloads>
            
            <summary>
            Sets the value of the effect parameter as a position vector.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="position">The position.</param>
            <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Color"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetPositionVector3F(Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <summary>
            Gets the value of the effect parameter as a position vector represented as
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>. 
            </summary>
            <param name="parameter">The effect parameter.</param>
            <returns>
            The value of the effect parameter as a position vector represented as
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.
            </returns>
            <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectHelper.SetPosition(Microsoft.Xna.Framework.Graphics.EffectParameter,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Sets the value of the effect parameter to a position vector.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="position">The position given as <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.</param>
            <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetPositionVector4(Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <summary>
            Gets the value of the effect parameter as a position vector represented as
            <see cref="T:Microsoft.Xna.Framework.Vector4"/>. 
            </summary>
            <param name="parameter">The effect parameter.</param>
            <returns>
            The value of the effect parameter as a position vector represented as
            <see cref="T:Microsoft.Xna.Framework.Vector4"/>.
            </returns>
            <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Vector4"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectHelper.SetPosition(Microsoft.Xna.Framework.Graphics.EffectParameter,Microsoft.Xna.Framework.Vector4)">
            <summary>
            Sets the value of the effect parameter to a position vector.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="position">The position given as <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
            <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Vector4"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetPositionVector4F(Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <summary>
            Gets the value of the effect parameter as a position vector represented as
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>. 
            </summary>
            <param name="parameter">The effect parameter.</param>
            <returns>
            The value of the effect parameter as a position vector represented as
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>.
            </returns>
            <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectHelper.SetPosition(Microsoft.Xna.Framework.Graphics.EffectParameter,DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Sets the value of the effect parameter to a position vector.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="position">The position given as <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>.</param>
            <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetDirectionVector3(Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <summary>
            Gets the value of the effect parameter as direction vector represented as 
            <see cref="T:Microsoft.Xna.Framework.Vector3"/>. 
            </summary>
            <param name="parameter">The effect parameter.</param>
            <returns>
            The value of the effect parameter as direction vector represented as 
            <see cref="T:Microsoft.Xna.Framework.Vector3"/>.
            </returns>
            <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Vector3"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectHelper.SetDirection(Microsoft.Xna.Framework.Graphics.EffectParameter,Microsoft.Xna.Framework.Vector3)">
            <overloads>
            <summary>
            Sets the value of an effect parameter that represents a direction.
            </summary>
            </overloads>
            
            <summary>
            Sets the value of the effect parameter as a direction vector.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="direction">The direction.</param>
            <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Color"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetDirectionVector3F(Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <summary>
            Gets the value of the effect parameter as a direction vector represented as
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>. 
            </summary>
            <param name="parameter">The effect parameter.</param>
            <returns>
            The value of the effect parameter as a direction vector represented as
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.
            </returns>
            <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectHelper.SetDirection(Microsoft.Xna.Framework.Graphics.EffectParameter,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Sets the value of the effect parameter to a direction vector.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="direction">The direction given as <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.</param>
            <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetDirectionVector4(Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <summary>
            Gets the value of the effect parameter as a direction vector represented as
            <see cref="T:Microsoft.Xna.Framework.Vector4"/>. 
            </summary>
            <param name="parameter">The effect parameter.</param>
            <returns>
            The value of the effect parameter as a direction vector represented as
            <see cref="T:Microsoft.Xna.Framework.Vector4"/>.
            </returns>
            <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Vector4"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectHelper.SetDirection(Microsoft.Xna.Framework.Graphics.EffectParameter,Microsoft.Xna.Framework.Vector4)">
            <summary>
            Sets the value of the effect parameter to a direction vector.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="direction">The direction given as <see cref="T:Microsoft.Xna.Framework.Vector4"/>.</param>
            <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Vector4"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetDirectionVector4F(Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <summary>
            Gets the value of the effect parameter as a direction vector represented as
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>. 
            </summary>
            <param name="parameter">The effect parameter.</param>
            <returns>
            The value of the effect parameter as a direction vector represented as
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>.
            </returns>
            <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectHelper.SetDirection(Microsoft.Xna.Framework.Graphics.EffectParameter,DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Sets the value of the effect parameter to a direction vector.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="direction">The direction given as <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>.</param>
            <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectHelper.CreateTechniqueBinding(DigitalRune.Graphics.IGraphicsService,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Creates the technique binding for the specified effect by calling the 
            <see cref="T:DigitalRune.Graphics.Effects.IEffectBinder"/>s.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <param name="effect">The effect.</param>
            <returns>
            The effect technique binding created by an <see cref="T:DigitalRune.Graphics.Effects.IEffectBinder"/>. If no
            <see cref="T:DigitalRune.Graphics.Effects.IEffectBinder"/> returned a binding then a default 
            <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding"/> is returned.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectHelper.InitializeParameterBindings(DigitalRune.Graphics.IGraphicsService,DigitalRune.Graphics.Effects.EffectEx,System.Collections.Generic.IDictionary{System.String,System.Object},DigitalRune.Graphics.Effects.EffectParameterBindingCollection)">
            <summary>
            Initializes the bindings of the effect by calling the <see cref="T:DigitalRune.Graphics.Effects.IEffectBinder"/>s.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <param name="effectEx">The effect wrapper.</param>
            <param name="opaqueData">The opaque data.</param>
            <param name="bindings">
            The collection that stores the resulting effect parameter bindings.
            </param>
            <remarks>
            If the <see cref="T:DigitalRune.Graphics.Effects.IEffectBinder"/>s do not return a binding, then this method creates
            default bindings using opaque data or the default values from the effect. 
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectHelper.IsArray``1(System.Object)">
            <summary>
            Determines whether the specified value is array of the specified type.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="value">The value.</param>
            <returns>
            <see langword="true"/> if the specified value is array of <typeparamref name="T"/>; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetParameterValues(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Creates a dictionary of all effect parameter values.
            </summary>
            <param name="effect">The effect.</param>
            <returns>A dictionary of all effect parameter values.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetEffectEx(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Gets the <see cref="T:DigitalRune.Graphics.Effects.EffectEx"/> object of the specified <see cref="T:Microsoft.Xna.Framework.Graphics.Effect"/>.
            </summary>
            <param name="effect">The effect.</param>
            <returns>
            The <see cref="T:DigitalRune.Graphics.Effects.EffectEx"/>, which provides additional information for 
            <paramref name="effect"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="effect"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:DigitalRune.Graphics.GraphicsException">
            <see cref="T:DigitalRune.Graphics.Effects.EffectEx"/> is not available. <paramref name="effect"/> has not yet been 
            initialized.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetTechniqueDescriptions(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Gets the technique descriptions of the specified effect.
            </summary>
            <param name="effect">The effect.</param>
            <returns>The effect technique descriptions.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="effect"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetTechniqueBinding(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Gets the default effect technique binding of the specified effect.
            </summary>
            <param name="effect">The effect.</param>
            <returns>The default effect technique binding.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="effect"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetParameterDescriptions(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Gets the effect parameter descriptions of the specified effect.
            </summary>
            <param name="effect">The effect.</param>
            <returns>The effect parameter descriptions.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="effect"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetParameterBindings(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Gets the default effect parameter bindings of the specified effect.
            </summary>
            <param name="effect">The effect.</param>
            <returns>The default effect parameter bindings.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="effect"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetHintFromAnnotations(Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <summary>
            Gets the sort hint from the effect parameter annotations.
            </summary>
            <param name="parameter">The effect parameter.</param>
            <returns>
            The sort hint, or <see langword="null"/> if no sort hint was specified in the effect 
            parameter annotations.
            </returns>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Graphics.Effects"/> namespace provides types for managing DirectX
            Effects.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.Dxsas08EffectInterpreter">
            <summary>
            Provides the descriptions effects using the <i>DirectX Standard Annotations and Semantics 
            (DXSAS)</i> version 0.8.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.Dxsas08EffectInterpreter.GetDescription(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectTechnique)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.Dxsas08EffectInterpreter.GetDescription(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.Dxsas10EffectInterpreter">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.Dxsas10EffectInterpreter.GetDescription(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectTechnique)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.Dxsas10EffectInterpreter.GetDescription(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.DefaultEffectBinder">
            <summary>
            Provides the bindings for default effect parameters. 
            </summary>
            <remarks>
            <para>
            <strong>Technique Bindings:</strong> By default, the <see cref="T:DigitalRune.Graphics.Effects.ByNameTechniqueBinding"/> is
            used for effects that contain several techniques. If there is only one technique, we use the
            default EffectTechniqueBinding.
            </para>
            <para>
            <strong>Parameter Bindings:</strong> See <see cref="T:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics"/> for
            supported semantics.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.DefaultEffectBinder.Debug0">
            <summary>
            Gets or sets the value for effect parameters with the semantic
            <see cref="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.Debug"/> and index 0.
            </summary>
            <value>
            The value for effect parameters with the semantic 
            <see cref="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.Debug"/> and index 0.
            </value>
            <remarks>
            Use this value to simply and quickly inject values into a shader while debugging, e.g. you
            can set this property to (1, 0 , 0, 0) if a key is pressed on the keyboard and use this info
            in the shader to perform a different action.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.DefaultEffectBinder.Debug1">
            <summary>
            Gets or sets the value for effect parameters with the semantic 
            <see cref="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.Debug"/> and index 1.
            </summary>
            <value>
            The value for effect parameters with the semantic
            <see cref="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.Debug"/> and index 1.
            </value>
            <remarks>
            Use this value to simply and quickly inject values into a shader while debugging, e.g. you
            can set this property to (1, 0, 0, 0) if a key is pressed on the keyboard and use this info
            in the shader to perform a different action.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.DefaultEffectBinder.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.DefaultEffectBinder"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.DefaultEffectBinder.GetBinding(Microsoft.Xna.Framework.Graphics.Effect)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.DefaultEffectInterpreter">
            <summary>
            Provides the descriptions of the default effect parameters.
            </summary>
            <remarks>
            See <see cref="T:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics"/> for a list of supported semantics.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.DefaultEffectInterpreter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.DefaultEffectInterpreter"/> class.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics">
            <summary>
            Defines the standard semantics for default effect parameters.
            </summary>
            <remarks>
            <para>
            The standard semantic define the meaning of effect parameters. See 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterDescription"/>.
            </para>
            <para>
            <strong>Important:</strong> General semantics specified in an .fx files are case-insensitive. 
            Therefore, use the <see cref="!:StringComparer.InvariantCultureIgnoreCase"/> string comparer
            for parsing .fx files. But when accessed from code (C# or VB.NET) the strings are
            case-sensitive!  That means the standard semantics stored in 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterDescription"/> can be  compared directly.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.MorphWeight">
            <summary>
            The weight of a morph target (<see cref="T:System.Single"/> or an array of <see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.Bones">
            <summary>
            The skinning matrices for mesh skinning (array of <see cref="T:Microsoft.Xna.Framework.Matrix"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.DiffuseColor">
            <summary>
            The diffuse material color as RGB (<see cref="T:Microsoft.Xna.Framework.Vector3"/>) or RGBA (<see cref="T:Microsoft.Xna.Framework.Vector4"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.DiffuseTexture">
            <summary>
            The albedo texture (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.SpecularColor">
            <summary>
            The specular material color as RGB (<see cref="T:Microsoft.Xna.Framework.Vector3"/>) or RGBA (<see cref="T:Microsoft.Xna.Framework.Vector4"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.SpecularTexture">
            <summary>
            The gloss texture (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/>) containing the specular intensity (not specular
            power).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.SpecularPower">
            <summary>
            The material specular color exponent as a single value (<see cref="T:System.Single"/>) or a
            per-component value (<see cref="T:Microsoft.Xna.Framework.Vector3"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.EmissiveColor">
            <summary>
            The emissive material color as RGB (<see cref="T:Microsoft.Xna.Framework.Vector3"/>) or RGBA (<see cref="T:Microsoft.Xna.Framework.Vector4"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.EmissiveTexture">
            <summary>
            The emissive texture (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.Opacity">
            <summary>
            The opacity (alpha) as a single value (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.Alpha">
            <summary>
            The opacity (alpha) as a single value (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.BlendMode">
            <summary>
            The blend mode (<see cref="T:System.Single"/>): 0 = additive blending, 1 = normal alpha blending
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.ReferenceAlpha">
            <summary>
            The reference value (<see cref="T:System.Single"/>) used for alpha testing.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.NormalTexture">
            <summary>
            The surface normal texture (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.FresnelPower">
            <summary>
            The power of the Fresnel term (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.InstanceColor">
            <summary>
            The instance color as RGB (<see cref="T:Microsoft.Xna.Framework.Vector3"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.InstanceAlpha">
            <summary>
            The instance opacity (alpha) as a single value (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.PassIndex">
            <summary>
            The zero-based index of the current effect pass (<see cref="T:System.Int32"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.SourceTexture">
            <summary>
            The source texture which is usually the last backbuffer or the result of a previous
            post-processor (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.ViewportSize">
            <summary>
            The viewport width and height in pixels (<see cref="T:Microsoft.Xna.Framework.Vector2"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.Time">
            <summary>
            The <see cref="P:DigitalRune.Graphics.RenderContext.Time">simulation time</see> in seconds (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.LastTime">
            <summary>
            The <see cref="P:DigitalRune.Graphics.RenderContext.Time">simulation time</see> of the previous frame in seconds
            (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.ElapsedTime">
            <summary>
            The time since the previous frame in seconds (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.GBuffer">
            <summary>
            The G-buffer texture (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture"/> or <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.LightBuffer">
            <summary>
            The light buffer texture (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture"/> or <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.NormalsFittingTexture">
            <summary>
            The normals fitting texture (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture"/> or <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/>) for encoding
            "best fit" normals.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.DitherMap">
            <summary>
            An 8-bit texture (alpha only) with 16x16 dither values (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture"/> or 
            <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.JitterMap">
            <summary>
            A quadratic RGBA texture (8 bit per channel) with random values (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture"/> or 
            <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.JitterMapSize">
            <summary>
            The width of the quadratic <see cref="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.JitterMap"/> in texels (<see cref="T:System.Single"/> or <see cref="T:Microsoft.Xna.Framework.Vector2"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.NoiseMap">
            <summary>
            A quadratic, tileable RGBA texture (8 bit per channel) with smooth noise values 
            (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture"/> or <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.Debug">
            <summary>
            A 4-element vector with user-defined data for debugging (<see cref="T:Microsoft.Xna.Framework.Vector4"/>).
            </summary>
            <seealso cref="P:DigitalRune.Graphics.Effects.DefaultEffectBinder.Debug0"/>
            <seealso cref="P:DigitalRune.Graphics.Effects.DefaultEffectBinder.Debug1"/>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.NaN">
            <summary>
            A value containing <see cref="F:System.Single.NaN"/> (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.DictionaryEffectBinder">
            <summary>
            Creates bindings for effect parameters using dictionaries with factory methods.
            </summary>
            <remarks>
            <para>
            This effect binder owns several dictionaries that contain factory methods, which create effect
            parameter bindings for different value types. 
            </para>
            <para>
            All dictionaries are empty by default. The dictionary key is a <strong>case-sensitive</strong>
            usage name, e.g. "WorldViewProjection". The dictionary value is a factory method that creates 
            an <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/>. New dictionary entries can be added to support new 
            effect parameters.
            </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.DictionaryEffectBinder.CreateEffectParameterBinding">
            <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> for the given effect parameter.
            </summary>
            <param name="effect">The effect.</param>
            <param name="parameter">The effect parameter.</param>
            <param name="opaqueData">The opaque data. Can be <see langword="null"/>.</param>
            <returns>
            The new <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> for <paramref name="parameter"/>.
            </returns>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.BoolBindings">
            <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:System.Boolean"/> parameters.
            </summary>
            <value>The factory methods. The default value is an empty dictionary.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.BoolArrayBindings">
            <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:System.Boolean"/>[] parameters.
            </summary>
            <value>The factory methods. The default value is an empty dictionary.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.Int32Bindings">
            <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:System.Int32"/> parameters.
            </summary>
            <value>The factory methods. The default value is an empty dictionary.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.Int32ArrayBindings">
            <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:System.Int32"/>[] parameters.
            </summary>
            <value>The factory methods. The default value is an empty dictionary.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.SingleBindings">
            <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:System.Single"/> parameters.
            </summary>
            <value>The factory methods. The default value is an empty dictionary.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.SingleArrayBindings">
            <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:System.Single"/>[] parameters.
            </summary>
            <value>The factory methods. The default value is an empty dictionary.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.MatrixBindings">
            <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:Microsoft.Xna.Framework.Matrix"/> parameters.
            </summary>
            <value>The factory methods. The default value is an empty dictionary.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.MatrixArrayBindings">
            <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:Microsoft.Xna.Framework.Matrix"/>[] parameters.
            </summary>
            <value>The factory methods. The default value is an empty dictionary.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.Vector2Bindings">
            <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:Microsoft.Xna.Framework.Vector2"/> parameters.
            </summary>
            <value>The factory methods. The default value is an empty dictionary.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.Vector2ArrayBindings">
            <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:Microsoft.Xna.Framework.Vector2"/>[] parameters.
            </summary>
            <value>The factory methods. The default value is an empty dictionary.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.Vector3Bindings">
            <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:Microsoft.Xna.Framework.Vector3"/> parameters.
            </summary>
            <value>The factory methods. The default value is an empty dictionary.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.Vector3ArrayBindings">
            <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:Microsoft.Xna.Framework.Vector3"/>[] parameters.
            </summary>
            <value>The factory methods. The default value is an empty dictionary.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.Vector4Bindings">
            <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:Microsoft.Xna.Framework.Vector4"/> parameters.
            </summary>
            <value>The factory methods. The default value is an empty dictionary.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.Vector4ArrayBindings">
            <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:Microsoft.Xna.Framework.Vector4"/>[] parameters.
            </summary>
            <value>The factory methods. The default value is an empty dictionary.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.TextureBindings">
            <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:Microsoft.Xna.Framework.Graphics.Texture"/> parameters.
            </summary>
            <value>The factory methods. The default value is an empty dictionary.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.Texture2DBindings">
            <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/> parameters.
            </summary>
            <value>The factory methods. The default value is an empty dictionary.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.Texture3DBindings">
            <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:Microsoft.Xna.Framework.Graphics.Texture3D"/> parameters.
            </summary>
            <value>The factory methods. The default value is an empty dictionary.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.TextureCubeBindings">
            <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:Microsoft.Xna.Framework.Graphics.TextureCube"/> parameters.
            </summary>
            <value>The factory methods. The default value is an empty dictionary.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.StructBindings">
            <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <c>struct</c> parameters.
            </summary>
            <value>The factory methods. The default value is an empty dictionary.</value>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.DictionaryEffectBinder.GetBinding(Microsoft.Xna.Framework.Graphics.Effect)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.DictionaryEffectBinder.GetBinding(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.DictionaryEffectBinder.CreateDelegateParameterBinding``1(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,System.Func{DigitalRune.Graphics.Effects.DelegateParameterBinding{``0},DigitalRune.Graphics.RenderContext,``0})">
            <overloads>
            <summary>
            Creates the <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterBinding`1"/> for an effect parameter.
            </summary>
            </overloads>
            
            <summary>
            Creates the <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterBinding`1"/> for an effect parameter.
            </summary>
            <typeparam name="T">The type of the effect parameter.</typeparam>
            <param name="effect">The effect.</param>
            <param name="parameter">The effect parameter.</param>
            <param name="computeParameter">The callback method that computes the value.</param>
            <returns>The <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterBinding`1"/>.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.DictionaryEffectBinder.CreateDelegateParameterArrayBinding``1(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,System.Action{DigitalRune.Graphics.Effects.DelegateParameterArrayBinding{``0},DigitalRune.Graphics.RenderContext,``0[]})">
            <summary>
            Creates the <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1"/> for an effect parameter that 
            represents an array of values.
            </summary>
            <typeparam name="T">The type of the effect parameter.</typeparam>
            <param name="effect">The effect.</param>
            <param name="parameter">The effect parameter.</param>
            <param name="computeParameter">The callback method that computes the values.</param>
            <returns>The <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1"/>.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.DictionaryEffectBinder.CreateConstParameterBinding``1(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Creates the <see cref="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1"/> for an effect parameter with a
            default value defined in opaque data.
            </summary>
            <typeparam name="T">The type of the effect parameter.</typeparam>
            <param name="effect">The effect.</param>
            <param name="parameter">The parameter.</param>
            <param name="opaqueData">The opaque data. Can be <see langword="null"/>.</param>
            <param name="key">The key of an item in the opaque data.</param>
            <returns>The <see cref="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1"/>.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.DictionaryEffectBinder.CreateConstParameterBindingVector3(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Creates the <see cref="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1"/> for an <see cref="T:Microsoft.Xna.Framework.Vector3"/>
            effect parameter with a default value defined in opaque data. 
            </summary>
            <param name="effect">The effect.</param>
            <param name="parameter">The parameter.</param>
            <param name="opaqueData">The opaque data. Can be <see langword="null"/>.</param>
            <param name="key">The key of an item in the opaque data.</param>
            <returns>The <see cref="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1"/>.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.DictionaryEffectBinder.CreateConstParameterBindingVector4(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Single)">
            <summary>
            Creates the <see cref="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1"/> for an <see cref="T:Microsoft.Xna.Framework.Vector4"/>
            effect parameter with a default value defined in opaque data.
            </summary>
            <param name="effect">The effect.</param>
            <param name="parameter">The parameter.</param>
            <param name="opaqueData">The opaque data. Can be <see langword="null"/>.</param>
            <param name="key">The key of an item in the opaque data.</param>
            <param name="defaultW">
            The default value for the fourth vector component. (If the default value in the opaque data
            is of type <strong>Vector3</strong> then the w component of the <see cref="T:Microsoft.Xna.Framework.Vector4"/>
            is set to this default value.)
            </param>
            <returns>The <see cref="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1"/>.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.DictionaryEffectInterpreter">
            <summary>
            Provides description of effect techniques and parameters by comparing their names, semantics, 
            and annotations against a dictionary.
            </summary>
            <remarks>
            <para>
            This interpreter owns two dictionaries (see <see cref="P:DigitalRune.Graphics.Effects.DictionaryEffectInterpreter.TechniqueDescriptions"/> and 
            <see cref="P:DigitalRune.Graphics.Effects.DictionaryEffectInterpreter.ParameterDescriptions"/>), which are empty by default. The dictionary keys are 
            <strong>case-insensitive</strong> strings, e.g. "WorldViewProjection". The dictionary value is
            a delegate that returns a <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueDescription"/> or a 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterDescription"/> for the given string. New dictionary entries can be 
            added to add support for new effect techniques and parameters.
            </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.DictionaryEffectInterpreter.CreateEffectTechniqueDescription">
            <summary>
            Creates the description for the specified effect technique.
            </summary>
            <param name="technique">The effect technique.</param>
            <returns>The description of <paramref name="technique"/>.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.DictionaryEffectInterpreter.CreateEffectParameterDescription">
            <summary>
            Creates the description for the specified effect parameter.
            </summary>
            <param name="parameter">The effect parameter.</param>
            <param name="index">The index.</param>
            <returns>The description of <paramref name="parameter"/>.</returns>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectInterpreter.TechniqueDescriptions">
            <summary>
            Gets or sets factory methods for effect technique descriptions.
            </summary>
            <value>
            The factory methods for effect technique descriptions. The default value is an empty 
            dictionary.
            </value>
            <remarks>
            The key in the dictionary is a case-insensitive string. The dictionary value is a factory 
            method that creates an <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueDescription"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectInterpreter.ParameterDescriptions">
            <summary>
            Gets or sets factory methods for effect parameter descriptions.
            </summary>
            <value>
            The factory methods for effect parameter descriptions. The default value is an empty 
            dictionary.
            </value>
            <remarks>
            The key in the dictionary is a case-insensitive string, e.g. "WorldViewProjection". The 
            dictionary value is a factory method that creates an 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterDescription"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.DictionaryEffectInterpreter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.DictionaryEffectInterpreter"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.DictionaryEffectInterpreter.GetDescription(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectTechnique)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.DictionaryEffectInterpreter.GetDescription(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.EffectBinderCollection">
            <summary>
            Manages a collection of <see cref="T:DigitalRune.Graphics.Effects.IEffectBinder"/>s.
            </summary>
            <remarks>
            Null entries or duplicate entries are not allowed in this collection.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectBinderCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:DigitalRune.Graphics.Effects.EffectBinderCollection"/>. 
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> for <see cref="T:DigitalRune.Graphics.Effects.EffectBinderCollection"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectBinderCollection.InsertItem(System.Int32,DigitalRune.Graphics.Effects.IEffectBinder)">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1"/> at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="item"/> should be inserted.
            </param>
            <param name="item">The object to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>. 
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="item"/> is already contained in the collection. 
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectBinderCollection.SetItem(System.Int32,DigitalRune.Graphics.Effects.IEffectBinder)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or is greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>. 
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="item"/> is already contained in the collection. 
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.EffectInterpreterCollection">
            <summary>
            Manages a collection of <see cref="T:DigitalRune.Graphics.Effects.IEffectInterpreter"/>s.
            </summary>
            <remarks>
            Null entries or duplicate entries are not allowed in this collection.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectInterpreterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectInterpreterCollection"/>. 
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> for <see cref="T:DigitalRune.Graphics.Effects.EffectInterpreterCollection"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectInterpreterCollection.InsertItem(System.Int32,DigitalRune.Graphics.Effects.IEffectInterpreter)">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1"/> at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="item"/> should be inserted.
            </param>
            <param name="item">The object to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>. 
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="item"/> is already contained in the collection. 
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EffectInterpreterCollection.SetItem(System.Int32,DigitalRune.Graphics.Effects.IEffectInterpreter)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or is greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>. 
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="item"/> is already contained in the collection. 
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.IEffectBinder">
            <summary>
            Creates bindings for effect techniques and parameters.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.IEffectBinder.GetBinding(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Gets the binding that selects the technique for rendering the specified effect.
            </summary>
            <param name="effect">The effect.</param>
            <returns>
            The <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding"/> that selects the technique when
            <paramref name="effect"/> needs to be rendered. The method returns <see langword="null"/> if
            the effect binder is unable to provide a binding.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.IEffectBinder.GetBinding(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Gets the binding that provides the value for the specified effect parameter.
            </summary>
            <param name="effect">The effect.</param>
            <param name="parameter">The effect parameter.</param>
            <param name="opaqueData">The opaque data. Can be <see langword="null"/>.</param>
            <returns>
            The <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding"/> that should be applied to 
            <paramref name="parameter"/>, or <see langword="null"/> if the effect binder is unable to 
            provide a binding.
            </returns>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.IEffectInterpreter">
            <summary>
            Interprets effects and provides descriptions for effect techniques and parameters.
            </summary>
            <remarks>
            The <see cref="T:DigitalRune.Graphics.Effects.IEffectInterpreter"/> interprets effect techniques and parameters by looking at
            their name, semantics, and annotations. When the interpreter recognizes an effect technique or
            parameter, it returns a description which determines how the effect is used at runtime.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.IEffectInterpreter.GetDescription(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectTechnique)">
            <summary>
            Interprets the specified effect technique.
            </summary>
            <param name="effect">The effect.</param>
            <param name="technique">The effect technique.</param>
            <returns>
            The description of the effect technique, or <see langword="null"/> if the method was not
            able to interpret the effect technique.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="effect"/> or <paramref name="technique"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.IEffectInterpreter.GetDescription(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <summary>
            Interprets the specified effect parameter.
            </summary>
            <param name="effect">The effect.</param>
            <param name="parameter">The effect parameter.</param>
            <returns>
            The description of the effect parameter, or <see langword="null"/> if the method was not
            able to interpret the effect parameter.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="effect"/> or <paramref name="parameter"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.SceneEffectBinder">
            <summary>
            Provides effect bindings for rendering a <see cref="T:DigitalRune.Graphics.SceneGraph.IScene"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.SceneEffectBinder.#cctor">
            <summary>
            Initializes static members of the <see cref="T:DigitalRune.Graphics.Effects.SceneEffectBinder"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.SceneEffectBinder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.SceneEffectBinder"/> class.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.SceneEffectInterpreter">
            <summary>
            Provides the descriptions for effects used in a <see cref="T:DigitalRune.Graphics.SceneGraph.IScene"/>.
            </summary>
            <remarks>
            See <see cref="T:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics"/> for a list of supported semantics.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.SceneEffectInterpreter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.SceneEffectInterpreter"/> class.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics">
            <summary>
            Defines the standard semantics for effect parameters used in a <see cref="T:DigitalRune.Graphics.SceneGraph.IScene"/>.
            </summary>
            <remarks>
            <para>
            The standard semantic define the meaning of effect parameters. See 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterDescription"/>.
            </para>
            <para>
            <strong>Important:</strong> General semantics specified in an .fx files are case-insensitive.
            Therefore, use the <see cref="!:StringComparer.InvariantCultureIgnoreCase"/> string comparer for
            parsing .fx files. But when accessed from code (C# or VB.NET) the strings are case-sensitive!
            That means the standard semantics stored in <see cref="T:DigitalRune.Graphics.Effects.EffectParameterDescription"/> can be
            compared directly.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.Bones">
            <summary>
            The skinning matrices for mesh skinning (array of <see cref="T:Microsoft.Xna.Framework.Matrix"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.SceneNodeType">
            <summary>
            The scene node type (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.CameraDirection">
            <summary>
            The camera direction in world space (<see cref="T:Microsoft.Xna.Framework.Vector3"/> or <see cref="T:Microsoft.Xna.Framework.Vector4"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.CameraPosition">
            <summary>
            The camera position in world space (<see cref="T:Microsoft.Xna.Framework.Vector3"/> or <see cref="T:Microsoft.Xna.Framework.Vector4"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastCameraDirection">
            <summary>
            The camera direction of the last frame in world space (<see cref="T:Microsoft.Xna.Framework.Vector3"/> or 
            <see cref="T:Microsoft.Xna.Framework.Vector4"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastCameraPosition">
            <summary>
            The camera position of the last frame in world space (<see cref="T:Microsoft.Xna.Framework.Vector3"/> or 
            <see cref="T:Microsoft.Xna.Framework.Vector4"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.CameraNear">
            <summary>
            The distance of the camera near plane (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.CameraFar">
            <summary>
            The distance of the camera far plane (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LodCameraPosition">
            <summary>
            The position of the camera used as reference for LOD calculations (<see cref="T:Microsoft.Xna.Framework.Vector3"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.AmbientLight">
            <summary>
            The intensity of an ambient light (RGB as <see cref="T:Microsoft.Xna.Framework.Vector3"/> or RGBA as 
            <see cref="T:Microsoft.Xna.Framework.Vector4"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.AmbientLightAttenuation">
            <summary>
            The hemispheric attenuation factor of the ambient light (<see cref="T:System.Single"/>).
            (0 = pure ambient, no hemispheric lighting; 1 = one-sided hemispheric lighting)
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.AmbientLightUp">
            <summary>
            The up vector of the ambient light in world space (<see cref="T:Microsoft.Xna.Framework.Vector3" />
            or <see cref="T:Microsoft.Xna.Framework.Vector4"/>). (Used for hemispheric attenuation 
            <see cref="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.AmbientLightAttenuation"/>.)
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightDiffuse">
            <summary>
            The diffuse intensity of a directional light (<see cref="T:Microsoft.Xna.Framework.Vector3"/> or 
            <see cref="T:Microsoft.Xna.Framework.Vector4"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightSpecular">
            <summary>
            The specular intensity of a directional light (<see cref="T:Microsoft.Xna.Framework.Vector3"/> or 
            <see cref="T:Microsoft.Xna.Framework.Vector4"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightDirection">
            <summary>
            The light direction in world space (<see cref="T:Microsoft.Xna.Framework.Vector3"/> or <see cref="T:Microsoft.Xna.Framework.Vector4"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightTexture">
            <summary>
            The texture of a directional light (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightTextureOffset">
            <summary>
            The texture offset of a directional light (<see cref="T:Microsoft.Xna.Framework.Vector2"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightTextureScale">
            <summary>
            The texture scale of a directional light (<see cref="T:Microsoft.Xna.Framework.Vector2"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightTextureMatrix">
            <summary>
            The texture matrix of a directional light which converts positions from world
            space to the texture space of the light (<see cref="T:Microsoft.Xna.Framework.Matrix"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightShadowMap">
            <summary>
            The shadow map of a directional light shadow (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightShadowParameters">
            <summary>
            The shadow parameters of a directional light shadow.
            (The type is either struct <c>ShadowParameters</c> as defined in ShadowMap.fxh
            or struct <c>CascadedShadowParameters</c> as defined in CascadedShadowMap.fxh.)
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightShadowNumberOfCascades">
            <summary>
            The number of cascades of a directional light shadow (<see cref="T:System.Int32"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightShadowCascadeDistances">
            <summary>
            The cascade split distances of a directional light shadow (<see cref="T:Microsoft.Xna.Framework.Vector4"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightShadowViewProjections">
            <summary>
            The transform matrices of a directional light shadow (array of <see cref="T:Microsoft.Xna.Framework.Matrix"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightShadowDepthBias">
            <summary>
            The depth bias of each cascade of a directional light shadow (<see cref="T:Microsoft.Xna.Framework.Vector4"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightShadowNormalOffset">
            <summary>
            The normal offset of each cascade of a directional light shadow (<see cref="T:Microsoft.Xna.Framework.Vector4"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightShadowDepthBiasScale">
            <summary>
            The depth bias scale of each cascade of a directional light shadow (<see cref="T:Microsoft.Xna.Framework.Vector4"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightShadowDepthBiasOffset">
            <summary>
            The depth bias offset of each cascade of a directional light shadow (<see cref="T:Microsoft.Xna.Framework.Vector4"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightShadowMapSize">
            <summary>
            The shadow map size of a directional light shadow (<see cref="T:Microsoft.Xna.Framework.Vector2"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightShadowFilterRadius">
            <summary>
            The filter radius of a directional light shadow (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightShadowJitterResolution">
            <summary>
            The jitter resolution (for jitter sampling) of a directional light shadow 
            (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightShadowFadeOutRange">
            <summary>
            The relative range over which directional light shadows are faded out
            (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightShadowFadeOutDistance">
            <summary>
            The distance where a directional light shadow starts to fade out (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightShadowMaxDistance">
            <summary>
            The maximum distance up to which a directional light shadow is rendered 
            (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightShadowFog">
            <summary>
            The shadow factor that is used beyond the maximum distance of a directional light shadow 
            (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.PointLightDiffuse">
            <summary>
            The diffuse intensity of a point light (<see cref="T:Microsoft.Xna.Framework.Vector3"/> or <see cref="T:Microsoft.Xna.Framework.Vector4"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.PointLightSpecular">
            <summary>
            The specular intensity of a point light (<see cref="T:Microsoft.Xna.Framework.Vector3"/> or <see cref="T:Microsoft.Xna.Framework.Vector4"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.PointLightPosition">
            <summary>
            The position of a point light in world space (<see cref="T:Microsoft.Xna.Framework.Vector3"/> or 
            <see cref="T:Microsoft.Xna.Framework.Vector4"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.PointLightRange">
            <summary>
            The range of a point light (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.PointLightAttenuation">
            <summary>
            The attenuation exponent of a point light (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.PointLightTexture">
            <summary>
            The texture of a point light (<see cref="T:Microsoft.Xna.Framework.Graphics.TextureCube"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.PointLightTextureMatrix">
            <summary>
            The texture matrix of a point light which converts directions from world
            space to the texture space of the light (<see cref="T:Microsoft.Xna.Framework.Matrix"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.SpotlightDiffuse">
            <summary>
            The diffuse intensity of a spotlight (<see cref="T:Microsoft.Xna.Framework.Vector3"/> or <see cref="T:Microsoft.Xna.Framework.Vector4"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.SpotlightSpecular">
            <summary>
            The specular intensity of a spotlight (<see cref="T:Microsoft.Xna.Framework.Vector3"/> or <see cref="T:Microsoft.Xna.Framework.Vector4"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.SpotlightPosition">
            <summary>
            The position of a spotlight in world space (<see cref="T:Microsoft.Xna.Framework.Vector3"/> or 
            <see cref="T:Microsoft.Xna.Framework.Vector4"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.SpotlightDirection">
            <summary>
            The direction of a spotlight in world space (<see cref="T:Microsoft.Xna.Framework.Vector3"/> or 
            <see cref="T:Microsoft.Xna.Framework.Vector4"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.SpotlightRange">
            <summary>
            The range of a spotlight (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.SpotlightFalloffAngle">
            <summary>
            The falloff (umbra) angle of the spotlight in radians (<see cref="T:System.Single"/>).
            </summary>
            <seealso cref="T:DigitalRune.Graphics.Spotlight"/>
            <seealso cref="P:DigitalRune.Graphics.Spotlight.FalloffAngle"/>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.SpotlightCutoffAngle">
            <summary>
            The cutoff (penumbra) angle of the spotlight in radians (<see cref="T:System.Single"/>).
            </summary>
            <seealso cref="T:DigitalRune.Graphics.Spotlight"/>
            <seealso cref="P:DigitalRune.Graphics.Spotlight.CutoffAngle"/>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.SpotlightAttenuation">
            <summary>
            The attenuation exponent of a spotlight (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.SpotlightTexture">
            <summary>
            The texture of a spotlight (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.SpotlightTextureMatrix">
            <summary>
            The texture matrix of a spotlight which converts positions from world
            space to the texture space of the light (<see cref="T:Microsoft.Xna.Framework.Matrix"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ProjectorLightDiffuse">
            <summary>
            The diffuse intensity of a projector light (<see cref="T:Microsoft.Xna.Framework.Vector3"/> or <see cref="T:Microsoft.Xna.Framework.Vector4"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ProjectorLightSpecular">
            <summary>
            The specular intensity of a projector light (<see cref="T:Microsoft.Xna.Framework.Vector3"/> or 
            <see cref="T:Microsoft.Xna.Framework.Vector4"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ProjectorLightPosition">
            <summary>
            The position of a projector light in world space (<see cref="T:Microsoft.Xna.Framework.Vector3"/> or 
            <see cref="T:Microsoft.Xna.Framework.Vector4"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ProjectorLightDirection">
            <summary>
            The direction of a projector light in world space (<see cref="T:Microsoft.Xna.Framework.Vector3"/> or 
            <see cref="T:Microsoft.Xna.Framework.Vector4"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ProjectorLightRange">
            <summary>
            The range of a projector light (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ProjectorLightAttenuation">
            <summary>
            The attenuation exponent of a projector light (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ProjectorLightTexture">
            <summary>
            The texture that is projected by the projector light.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ProjectorLightViewProjection">
            <summary>
            The view-projection matrix of the projector light.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ProjectorLightTextureMatrix">
            <summary>
            The texture matrix of a projector light which converts positions from world
            space to the texture space of the light (<see cref="T:Microsoft.Xna.Framework.Matrix"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ShadowNear">
            <summary>
            The distance to the near plane of the shadow projection (<see cref="T:System.Single"/>). (Only valid
            during shadow map creation.)
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ShadowFar">
            <summary>
            The distance to the far plane of the shadow projection (<see cref="T:System.Single"/>). (Only valid
            during shadow map creation.)
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.EnvironmentMap">
            <summary>
            The cube map texture containing the environment (<see cref="T:Microsoft.Xna.Framework.Graphics.TextureCube"/>).
            (Environment cube maps in a scene are defined using <see cref="T:DigitalRune.Graphics.ImageBasedLight"/>s.)
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.EnvironmentMapSize">
            <summary>
            The side length of one cube map face of the environment map in texels (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.EnvironmentMapDiffuse">
            <summary>
            The intensity of diffuse environment map reflections (<see cref="T:Microsoft.Xna.Framework.Vector3"/> or <see cref="T:Microsoft.Xna.Framework.Vector4"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.EnvironmentMapSpecular">
            <summary>
            The intensity of specular environment map reflections (<see cref="T:Microsoft.Xna.Framework.Vector3"/> or <see cref="T:Microsoft.Xna.Framework.Vector4"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.EnvironmentMapRgbmMax">
            <summary>
            The max value (see also <see cref="P:DigitalRune.Graphics.RgbmEncoding.Max"/>) of the RGBM encoding in gamma
            space (<see cref="T:System.Single"/>). If the environment map is encoded using sRGB, this value
            is 1. 
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.EnvironmentMapMatrix">
            <summary>
            The texture matrix of the environment map which converts positions from world
            space to the texture space of the cube map (<see cref="T:Microsoft.Xna.Framework.Matrix"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.FogColor">
            <summary>
            The fog color (RGBA as <see cref="T:Microsoft.Xna.Framework.Vector4"/>). 
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.FogStart">
            <summary>
            The start distance of the fog (<see cref="T:System.Single"/>). 
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.FogEnd">
            <summary>
            The end distance of the fog (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.FogDensity">
            <summary>
            The density of the fog (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.FogParameters">
            <summary>
            The combined parameters of the fog; a <see cref="T:Microsoft.Xna.Framework.Vector4"/> containing:
            (start distance, end distance or 1 / density, fog curve exponent, height falloff).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DecalAlpha">
            <summary>
            The opacity of the decal (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DecalNormalThreshold">
            <summary>
            The normal threshold of the decal given as cos(α) (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DecalOptions">
            <summary>
            The decal options.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DecalOrientation">
            <summary>
            The orientation of the decal (= z-axis in world space, <see cref="T:Microsoft.Xna.Framework.Vector3"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.Position">
            <summary>
            The position of the object in world space (<see cref="T:Microsoft.Xna.Framework.Vector3"/> or <see cref="T:Microsoft.Xna.Framework.Vector4"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.World">
            <summary>
            The world matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.WorldInverse">
            <summary>
            The inverse world matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.WorldTranspose">
            <summary>
            The transpose of the world matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.WorldInverseTranspose">
            <summary>
            The transpose of the inverse world matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.View">
            <summary>
            The view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ViewInverse">
            <summary>
            The inverse of the view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ViewTranspose">
            <summary>
            The transpose of the view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ViewInverseTranspose">
            <summary>
            The transpose of the inverse view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.Projection">
            <summary>
            The projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ProjectionInverse">
            <summary>
            The inverse projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ProjectionTranspose">
            <summary>
            The transpose of the projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ProjectionInverseTranspose">
            <summary>
            The transpose of the inverse projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.WorldView">
            <summary>
            The world-view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.WorldViewInverse">
            <summary>
            The inverse world-view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.WorldViewTranspose">
            <summary>
            The transpose of the world-view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.WorldViewInverseTranspose">
            <summary>
            The transpose of the inverse world-view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ViewProjection">
            <summary>
            The view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ViewProjectionInverse">
            <summary>
            The inverse view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ViewProjectionTranspose">
            <summary>
            The transpose of the view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ViewProjectionInverseTranspose">
            <summary>
            The transpose of the inverse view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.WorldViewProjection">
            <summary>
            The world-view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.WorldViewProjectionInverse">
            <summary>
            The inverse world-view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.WorldViewProjectionTranspose">
            <summary>
            The transpose of the world-view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.WorldViewProjectionInverseTranspose">
            <summary>
            The transpose of the inverse world-view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.UnscaledWorld">
            <summary>
            Same as <see cref="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.World"/>, except that the matrix does not contain any scale factors.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.UnscaledWorldView">
            <summary>
            Same as <see cref="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.WorldView"/>, except that the matrix does not contain any scale factors.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastPosition">
            <summary>
            The position of the object in world space (<see cref="T:Microsoft.Xna.Framework.Vector3"/> or <see cref="T:Microsoft.Xna.Framework.Vector4"/>)
            of the last frame.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastWorld">
            <summary>
            The world matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>) of the last frame.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastWorldInverse">
            <summary>
            The inverse world matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>) of the last frame.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastWorldTranspose">
            <summary>
            The transpose of the world matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>) of the last frame.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastWorldInverseTranspose">
            <summary>
            The transpose of the inverse world matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>) of the last frame.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastView">
            <summary>
            The view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>) of the last frame.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastViewInverse">
            <summary>
            The inverse view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>) of the last frame.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastViewTranspose">
            <summary>
            The transpose of the view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>) of the last frame.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastViewInverseTranspose">
            <summary>
            The transpose of the inverse view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>) of the last frame.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastProjection">
            <summary>
            The projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>) of the last frame.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastProjectionInverse">
            <summary>
            The inverse projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>) of the last frame.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastProjectionTranspose">
            <summary>
            The transpose of the projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>) of the last frame.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastProjectionInverseTranspose">
            <summary>
            The transpose of the inverse projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>) of the last frame.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastWorldView">
            <summary>
            The world-view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>) of the last frame.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastWorldViewInverse">
            <summary>
            The inverse world-view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>) of the last frame.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastWorldViewTranspose">
            <summary>
            The transpose of the world-view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>) of the last frame.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastWorldViewInverseTranspose">
            <summary>
            The transpose of the inverse world-view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>) of the last frame.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastViewProjection">
            <summary>
            The view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>) of the last frame.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastViewProjectionInverse">
            <summary>
            The inverse view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>) of the last frame.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastViewProjectionTranspose">
            <summary>
            The transpose of the view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>) of the last frame.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastViewProjectionInverseTranspose">
            <summary>
            The transpose of the inverse view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>) of the last frame.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastWorldViewProjection">
            <summary>
            The world-view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>) of the last frame.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastWorldViewProjectionInverse">
            <summary>
            The inverse world-view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>) of the last frame.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastWorldViewProjectionTranspose">
            <summary>
            The transpose of the world-view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>) of the last frame.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastWorldViewProjectionInverseTranspose">
            <summary>
            The transpose of the inverse world-view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix"/>) of the last frame.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.StockEffectBinder">
            <summary>
            Provides bindings for the XNA stock effects.
            </summary>
            <remarks>
            This effect binder provides bindings for the XNA stock effects: <see cref="T:Microsoft.Xna.Framework.Graphics.AlphaTestEffect"/>, 
            <see cref="T:Microsoft.Xna.Framework.Graphics.BasicEffect"/>, <see cref="T:Microsoft.Xna.Framework.Graphics.DualTextureEffect"/>, 
            <see cref="T:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect"/>, and <see cref="T:Microsoft.Xna.Framework.Graphics.SkinnedEffect"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.StockEffectBinder.GetBinding(Microsoft.Xna.Framework.Graphics.Effect)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.StockEffectBinder.GetBinding(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.StockEffectInterpreter">
            <summary>
            Provides the descriptions for XNA stock effects.
            </summary>
            <remarks>
            This effect interpreter provides descriptions for the XNA stock effects: 
            <see cref="T:Microsoft.Xna.Framework.Graphics.AlphaTestEffect"/>, <see cref="T:Microsoft.Xna.Framework.Graphics.BasicEffect"/>, <see cref="T:Microsoft.Xna.Framework.Graphics.DualTextureEffect"/>, 
            <see cref="T:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect"/>, and <see cref="T:Microsoft.Xna.Framework.Graphics.SkinnedEffect"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.StockEffectInterpreter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.StockEffectInterpreter"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.StockEffectInterpreter.GetDescription(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectTechnique)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.StockEffectInterpreter.GetDescription(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.AlphaTestEffectBinding">
            <summary>
            Provides the logic for the <see cref="T:Microsoft.Xna.Framework.Graphics.AlphaTestEffect"/>.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.AlphaTestEffectBinding.AlphaFunction">
            <summary>
            Gets or sets the alpha compare function.
            </summary>
            <value>
            The alpha compare function. The default value is <strong>CompareFunction.Greater</strong>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.AlphaTestEffectBinding.ReferenceAlpha">
            <summary>
            Gets or sets the reference alpha value.
            </summary>
            <value>The reference alpha value. The default value is 0.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.AlphaTestEffectBinding.VertexColorEnabled">
            <summary>
            Gets or sets a value indicating whether vertex color is enabled.
            </summary>
            <value>
            <see langword="true"/> if vertex color is enabled; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.AlphaTestEffectBinding.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.AlphaTestEffectBinding"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.AlphaTestEffectBinding"/> class. (This
            constructor creates an uninitialized instance. Use this constructor only for cloning or
            other special cases!)
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.AlphaTestEffectBinding.#ctor(DigitalRune.Graphics.IGraphicsService,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.AlphaTestEffectBinding"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <param name="opaqueData">The opaque data. Can be <see langword="null"/>.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.AlphaTestEffectBinding.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.AlphaTestEffectBinding.CloneCore(DigitalRune.Graphics.Effects.EffectBinding)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.AlphaTestEffectBinding.OnInitializeBindings(DigitalRune.Graphics.IGraphicsService,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.AlphaTestEffectTechniqueBinding">
            <summary>
            Selects the shaders of a <see cref="T:Microsoft.Xna.Framework.Graphics.AlphaTestEffect"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.AlphaTestEffectTechniqueBinding.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.AlphaTestEffectTechniqueBinding.OnUpdate(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.AlphaTestEffectTechniqueBinding.OnGetTechnique(Microsoft.Xna.Framework.Graphics.Effect,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.AlphaTestParameterBinding">
            <summary>
            Binds an effect parameter to the <see cref="P:DigitalRune.Graphics.Effects.AlphaTestEffectBinding.AlphaFunction"/> of a 
            <see cref="T:Microsoft.Xna.Framework.Graphics.AlphaTestEffect"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.AlphaTestParameterBinding.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.AlphaTestParameterBinding"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.AlphaTestParameterBinding"/> class. (This
            constructor creates an uninitialized instance. Use this constructor only for cloning or
            other special cases!)
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.AlphaTestParameterBinding.#ctor(DigitalRune.Graphics.Effects.AlphaTestEffectBinding,Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.AlphaTestParameterBinding"/> class.
            </summary>
            <param name="effectBinding">The effect binding.</param>
            <param name="parameter">The effect parameter.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="effectBinding"/> or <paramref name="parameter"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.AlphaTestParameterBinding.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.AlphaTestParameterBinding.OnUpdate(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.AlphaTestParameterBinding.OnApply(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.BasicEffectBinding">
            <summary>
            Provides the logic for the <see cref="T:Microsoft.Xna.Framework.Graphics.BasicEffect"/>.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.BasicEffectBinding.LightingEnabled">
            <summary>
            Gets or sets a value indicating whether lighting is enabled.
            </summary>
            <value>
            <see langword="true"/> if lighting is enabled; otherwise, <see langword="false"/>.
            The default value is <see langword="true"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.BasicEffectBinding.PreferPerPixelLighting">
            <summary>
            Gets or sets a value indicating whether per-pixel lighting should be used.
            </summary>
            <value>
            <see langword="true"/> if to use per-pixel lighting; otherwise, <see langword="false"/> to
            use per-vertex lighting. The default value is <see langword="false"/>
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.BasicEffectBinding.TextureEnabled">
            <summary>
            Gets or sets a value indicating whether texturing is enabled.
            </summary>
            <value>
            <see langword="true"/> if texturing is enabled; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.BasicEffectBinding.VertexColorEnabled">
            <summary>
            Gets or sets a value indicating whether vertex color is enabled.
            </summary>
            <value>
            <see langword="true"/> if vertex color is enabled; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.BasicEffectBinding.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.BasicEffectBinding"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.BasicEffectBinding"/> class. (This constructor
            creates an uninitialized instance. Use this constructor only for cloning or other special
            cases!)
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.BasicEffectBinding.#ctor(DigitalRune.Graphics.IGraphicsService,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.BasicEffectBinding"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <param name="opaqueData">The opaque data. Can be <see langword="null"/>.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.BasicEffectBinding.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.BasicEffectBinding.CloneCore(DigitalRune.Graphics.Effects.EffectBinding)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.BasicEffectBinding.OnInitializeBindings(DigitalRune.Graphics.IGraphicsService,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.BasicEffectTechniqueBinding">
            <summary>
            Selects the shaders of a <see cref="T:Microsoft.Xna.Framework.Graphics.BasicEffect"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.BasicEffectTechniqueBinding.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.BasicEffectTechniqueBinding.OnUpdate(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.BasicEffectTechniqueBinding.OnGetTechnique(Microsoft.Xna.Framework.Graphics.Effect,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.DualTextureEffectBinding">
            <summary>
            Provides the logic for the <see cref="T:Microsoft.Xna.Framework.Graphics.DualTextureEffect"/>.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.DualTextureEffectBinding.VertexColorEnabled">
            <summary>
            Gets or sets a value indicating whether vertex color is enabled.
            </summary>
            <value>
            <see langword="true"/> if vertex color is enabled; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.DualTextureEffectBinding.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.DualTextureEffectBinding"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.DualTextureEffectBinding"/> class. (This
            constructor creates an uninitialized instance. Use this constructor only for cloning or
            other special cases!)
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.DualTextureEffectBinding.#ctor(DigitalRune.Graphics.IGraphicsService,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.DualTextureEffectBinding"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <param name="opaqueData">The opaque data. Can be <see langword="null"/>.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.DualTextureEffectBinding.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.DualTextureEffectBinding.CloneCore(DigitalRune.Graphics.Effects.EffectBinding)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.DualTextureEffectBinding.OnInitializeBindings(DigitalRune.Graphics.IGraphicsService,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.DualTextureEffectTechniqueBinding">
            <summary>
            Selects the shaders of a <see cref="T:Microsoft.Xna.Framework.Graphics.DualTextureEffect"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.DualTextureEffectTechniqueBinding.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.DualTextureEffectTechniqueBinding.OnUpdate(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.DualTextureEffectTechniqueBinding.OnGetTechnique(Microsoft.Xna.Framework.Graphics.Effect,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.EnvironmentMapEffectBinding">
            <summary>
            Provides the logic for the <see cref="T:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EnvironmentMapEffectBinding.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EnvironmentMapEffectBinding"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EnvironmentMapEffectBinding"/> class. (This
            constructor creates an uninitialized instance. Use this constructor only for cloning or
            other special cases!)
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EnvironmentMapEffectBinding.#ctor(DigitalRune.Graphics.IGraphicsService,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EnvironmentMapEffectBinding"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <param name="opaqueData">The opaque data. Can be <see langword="null"/>.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EnvironmentMapEffectBinding.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EnvironmentMapEffectBinding.OnInitializeBindings(DigitalRune.Graphics.IGraphicsService,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.EnvironmentMapEffectTechniqueBinding">
            <summary>
            Selects the shaders of a <see cref="T:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EnvironmentMapEffectTechniqueBinding.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EnvironmentMapEffectTechniqueBinding.OnUpdate(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.EnvironmentMapEffectTechniqueBinding.OnGetTechnique(Microsoft.Xna.Framework.Graphics.Effect,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.FogVectorParameterBinding">
            <summary>
            Binds an effect parameter to the XNA FogVector parameter.
            </summary>
            <remarks>
            This parameter binding also sets the FogEnabled flag of the effect bindings.
            This is possible because fog settings are global.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.FogVectorParameterBinding.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.FogVectorParameterBinding"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.FogVectorParameterBinding"/> class. (This
            constructor creates an uninitialized instance. Use this constructor only for cloning or
            other special cases!)
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.FogVectorParameterBinding.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.FogVectorParameterBinding"/> class.
            </summary>
            <param name="effect">The effect.</param>
            <param name="parameter">The effect parameter.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="effect"/> or <paramref name="parameter"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.FogVectorParameterBinding.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.FogVectorParameterBinding.OnUpdate(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.FogVectorParameterBinding.OnApply(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.SkinnedEffectBinding">
            <summary>
            Provides the logic for the <see cref="T:Microsoft.Xna.Framework.Graphics.SkinnedEffect"/>.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.SkinnedEffectBinding.PreferPerPixelLighting">
            <summary>
            Gets or sets a value indicating whether per-pixel lighting should be used.
            </summary>
            <value>
            <see langword="true"/> if to use per-pixel lighting; otherwise, <see langword="false"/> to
            use per-vertex lighting. The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Effects.SkinnedEffectBinding.WeightsPerVertex">
            <summary>
            Gets or sets the max number of bone weights per vertex.
            </summary>
            <value>The max number of bone weights per vertex.</value>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.SkinnedEffectBinding.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.SkinnedEffectBinding"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.SkinnedEffectBinding"/> class. (This
            constructor creates an uninitialized instance. Use this constructor only for cloning or
            other special cases!)
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.SkinnedEffectBinding.#ctor(DigitalRune.Graphics.IGraphicsService,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.SkinnedEffectBinding"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <param name="opaqueData">The opaque data. Can be <see langword="null"/>.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.SkinnedEffectBinding.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.SkinnedEffectBinding.CloneCore(DigitalRune.Graphics.Effects.EffectBinding)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.SkinnedEffectBinding.OnInitializeBindings(DigitalRune.Graphics.IGraphicsService,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Effects.SkinnedEffectTechniqueBinding">
            <summary>
            Selects the shaders of a <see cref="T:Microsoft.Xna.Framework.Graphics.SkinnedEffect"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.SkinnedEffectTechniqueBinding.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.SkinnedEffectTechniqueBinding.OnUpdate(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Effects.SkinnedEffectTechniqueBinding.OnGetTechnique(Microsoft.Xna.Framework.Graphics.Effect,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.TerrainHelper">
            <summary>
            Provides helper methods for terrain rendering.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainHelper.GetTextureLevelVector4(Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32)">
            <summary>
            Gets the texture data of the specified mipmap level as a <see cref="T:Microsoft.Xna.Framework.Vector4"/> array.
            </summary>
            <param name="texture">The texture.</param>
            <param name="level">The mipmap level to read. Currently only 0 is supported!</param>
            <returns>
            The array containing the data of the specified mipmap level.
            (One <see cref="T:Microsoft.Xna.Framework.Vector4"/> element per pixel.)
            </returns>
            <remarks>
            <para>
            This method can be used with following texture surface formats:
            <see cref="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Alpha8"/>, <see cref="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Color"/>, 
            <see cref="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Rg32"/>, <see cref="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Rgba64"/>,
            <see cref="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Single"/>, <see cref="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Vector2"/>,
            <see cref="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Vector4"/>, <see cref="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.HalfSingle"/>,
            <see cref="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.HalfVector2"/>, <see cref="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.HalfVector4"/>
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="texture"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotImplementedException">
            Invalid mipmap level. Extracting mipmap levels other than 0 is not yet implemented.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Texture format is not yet supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainHelper.GetTextureLevelSingle(Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32)">
            <summary>
            Gets the texture data of the specified mipmap level as a <see cref="T:System.Single"/> array.
            </summary>
            <param name="texture">The texture.</param>
            <param name="level">The mipmap level to read. Currently only 0 is supported!</param>
            <returns>
            The array containing the data of the specified mipmap level. 
            (One <see cref="T:System.Single"/> element per pixel. If the texture contains multiple channels,
            only the first channel (red) is copied.)
            </returns>
            <inheritdoc cref="M:DigitalRune.Graphics.TerrainHelper.GetTextureLevelVector4(Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32)"/>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainHelper.SetTextureLevel(Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32,Microsoft.Xna.Framework.Vector4[])">
            <overloads>
            <summary>
            Sets the texture data of the specified mipmap level.
            </summary>
            </overloads>
            
            <summary>
            Sets the texture data of the specified mipmap level.
            </summary>
            <param name="texture">The texture.</param>
            <param name="level">The mipmap level.</param>
            <param name="data">The data to be copied into the texture.</param>
            <remarks>
            <para>
            This method can be used with following texture formats:
            <see cref="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Alpha8"/>, <see cref="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Color"/>, 
            <see cref="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Rg32"/>, <see cref="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Rgba64"/>,
            <see cref="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Single"/>, <see cref="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Vector2"/>,
            <see cref="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Vector4"/>, <see cref="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.HalfSingle"/>,
            <see cref="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.HalfVector2"/>, <see cref="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.HalfVector4"/>
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="texture"/> or <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Texture format is not yet supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainHelper.SetTextureLevel(Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32,System.Single[])">
            <summary>
            Sets the texture data of the specified mipmap level.
            </summary>
            <param name="texture">The texture.</param>
            <param name="level">The mipmap level.</param>
            <param name="data">The data to be copied into the texture.</param>
            <remarks>
            <para>
            This method can be used with following texture formats:
            <see cref="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Alpha8"/>, <see cref="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Color"/>, 
            <see cref="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Rg32"/>, <see cref="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Rgba64"/>,
            <see cref="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Single"/>, <see cref="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Vector2"/>,
            <see cref="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Vector4"/>, <see cref="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.HalfSingle"/>,
            <see cref="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.HalfVector2"/>, <see cref="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.HalfVector4"/>
            </para>
            </remarks>
            <inheritdoc cref="M:DigitalRune.Graphics.TerrainHelper.SetTextureLevel(Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32,Microsoft.Xna.Framework.Vector4[])"/>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainHelper.TransformTexture(System.Single[],System.Single,System.Single)">
            <summary>
            Modifies the data of a texture.
            </summary>
            <param name="data">The texture data.</param>
            <param name="scale">The scale factor.</param>
            <param name="bias">The bias which is added to the scaled data.</param>
            <remarks>
            All values in <paramref name="data"/> are multiplied by <paramref name="scale"/> and then
            <paramref name="bias"/> is added.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainHelper.SmoothTexture(Microsoft.Xna.Framework.Vector4[],System.Int32,System.Int32,System.Single)">
            <overloads>
            <summary>
            Smooths the texture.
            </summary>
            </overloads>
            
            <summary>
            Smooths the texture.
            </summary>
            <param name="data">The texture data of mipmap level 0.</param>
            <param name="textureWidth">The width of the texture.</param>
            <param name="textureHeight">The height of the texture.</param>
            <param name="smoothness">
            The smoothness in the range [0, ∞). (0 means no smoothing. Values greater than 0 means more
            smoothing.)
            </param>
            <remarks>
            Use this method if the height map was loaded from an 8-bit image. 8-bit values are usually
            insufficient to represent smooth surfaces. This method removes non-smooth terrain parts
            caused by 8-bit quantization.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainHelper.SmoothTexture(System.Single[],System.Int32,System.Int32,System.Single)">
            <summary>
            Smooths the texture.
            </summary>
            <param name="data">The texture data of mipmap level 0.</param>
            <param name="textureWidth">The width of the texture.</param>
            <param name="textureHeight">The height of the texture.</param>
            <param name="smoothness">
            The smoothness: 0 means no smoothing. Values greater than 0 means more smoothing.
            </param>
            <inheritdoc cref="M:DigitalRune.Graphics.TerrainHelper.SmoothTexture(Microsoft.Xna.Framework.Vector4[],System.Int32,System.Int32,System.Single)"/>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainHelper.CreateTerrainGeometryMipLevels(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector4[],System.Boolean)">
            <overloads>
            <summary>
            Creates the mipmaps for a terrain texture.
            </summary>
            </overloads>
            
            <summary>
            Creates the mipmaps for a terrain texture.
            </summary>
            <param name="texture">The texture.</param>
            <param name="dataLevel0">
            Optional: The data of mipmap level 0, if available. (If the parameter is
            <see langword="null"/> the data is read from <paramref name="texture"/>.)
            </param>
            <param name="useNearestNeighborFilter">
            <see langword="true"/> to use nearest-neighbor filtering (= every second pixel is dropped)
            for creating mipmaps. <see langword="false"/> to use a 3x3 filter (default).
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="texture"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="texture"/> does not contain mipmaps.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainHelper.CreateTerrainGeometryMipLevels(Microsoft.Xna.Framework.Graphics.Texture2D,System.Single[],System.Boolean)">
            <summary>
            Creates the mipmaps for a terrain texture.
            </summary>
            <param name="texture">The texture.</param>
            <param name="dataLevel0">
            Optional: The data of mipmap level 0, if available. (If the parameter is
            <see langword="null"/> the data is read from <paramref name="texture"/>.)
            </param>
            <param name="useNearestNeighborFilter">
            <see langword="true"/> to use nearest-neighbor filtering (= every second pixel is dropped)
            for creating mipmaps. <see langword="false"/> to use a 3x3 filter (default).
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="texture"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="texture"/> does not contain mipmaps.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainHelper.CreateHeightTexture(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Single[],System.Int32,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.Texture2D@)">
            <summary>
            Creates a height map which can be used for terrain rendering.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="heights">The heights (= texture content of the first mipmap level).</param>
            <param name="textureWidth">The width of the texture.</param>
            <param name="textureHeight">The height of the texture.</param>
            <param name="useNearestNeighborFilter">
            <see langword="true"/> to use nearest-neighbor filtering (= every second pixel is dropped)
            for creating mipmaps. <see langword="false"/> to use a 3x3 filter (default).
            </param>
            <param name="heightTexture">
            The created height texture. If this parameter is set to a matching texture, then the content
            of this texture is updated and no new texture is created. (If this method is called with a
            texture with wrong size or format, an exception is thrown.)
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/> or <paramref name="heights"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="heightTexture"/> does not match the specified parameters.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainHelper.CreateNormalTexture(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Single[],System.Int32,System.Int32,System.Single,System.Boolean,Microsoft.Xna.Framework.Graphics.Texture2D@)">
            <summary>
            Creates a normal map which can be used for terrain rendering.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="heights">The terrain heights.</param>
            <param name="textureWidth">The width of the texture.</param>
            <param name="textureHeight">The height of the texture.</param>
            <param name="cellSize">The cell size of the height map.</param>
            <param name="useNearestNeighborFilter">
            <see langword="true"/> to use nearest-neighbor filtering (= every second pixel is dropped)
            for creating mipmaps. <see langword="false"/> to use a 3x3 filter (default).
            </param>
            <param name="normalTexture">
            The created height texture. If this parameter is set to a matching texture, then the content
            of this texture is updated and no new texture is created. (If this method is called with a
            texture with wrong size or format, an exception is thrown.)
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/> or <paramref name="heights"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="normalTexture"/> does not match the specified parameters.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainHelper.CreateHoleTexture(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Single[],System.Int32,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.Texture2D@)">
            <summary>
            Creates a hole map which can be used for terrain rendering.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="data">An array with hole information (1 = no hole, 0 = hole).</param>
            <param name="textureWidth">The width of the texture.</param>
            <param name="textureHeight">The height of the texture.</param>
            <param name="useNearestNeighborFilter">
            <see langword="true"/> to use nearest-neighbor filtering (= every second pixel is dropped)
            for creating mipmaps. <see langword="false"/> to use a 3x3 filter (default).
            </param>
            <param name="holeTexture">
            The created height texture. If this parameter is set to a matching texture, then the content
            of this texture is updated and no new texture is created. (If this method is called with a
            texture with wrong size or format, an exception is thrown.)
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/> or <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="holeTexture"/> does not match the specified parameters.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.TerrainLayer">
            <summary>
            Defines a material layer (detail textures, decals, roads, etc.) of the terrain.
            </summary>
            <remarks>
            <para>
            A terrain is split into one or more tiles. The terrain tiles defines the geometry (height,
            normals, holes) of the terrain. Each tile has a set of material layers (dirt, grass, decals,
            roads) that define the appearance. The material layers are applied (blended) one after the
            other, which means that a layer can override previous layers.
            </para>
            <para>
            Example: The first layer draws a dirt texture that covers the whole tile. The second layer
            draws a grass texture, which covers only parts of the tile defined by a blend map. Additional
            layers add roads and decals like dirt, leaves, sewer grates, etc.
            </para>
            <para>
            Each terrain tile can have its own set of terrain layers, but they can also share the same
            <see cref="T:DigitalRune.Graphics.TerrainLayer"/> instances.
            </para>
            <para>
            <strong>Materials:</strong><br/>
            Each <see cref="T:DigitalRune.Graphics.TerrainLayer"/> has a <see cref="P:DigitalRune.Graphics.TerrainLayer.Material"/> which is used to render the layer
            information. The <see cref="T:DigitalRune.Graphics.Rendering.TerrainClipmapRenderer"/> uses the material to render the layer
            information into <see cref="T:DigitalRune.Graphics.TerrainClipmap"/>s. The <see cref="T:DigitalRune.Graphics.Rendering.TerrainClipmapRenderer"/>
            requires that the material has a render pass called "Base" when it wants to render
            information, such as heights, into the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.BaseClipmap"/> and a render pass
            called "Detail" when it wants to render information, such as a grass texture, into the
            <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailClipmap"/>.
            </para>
            <para>
            <strong>Fade-in/out by distance:</strong><br/>
            The properties <see cref="P:DigitalRune.Graphics.TerrainLayer.FadeInStart"/>, <see cref="P:DigitalRune.Graphics.TerrainLayer.FadeInEnd"/>, <see cref="P:DigitalRune.Graphics.TerrainLayer.FadeOutStart"/>,
            <see cref="P:DigitalRune.Graphics.TerrainLayer.FadeOutEnd"/> can be used to define into which clipmap levels the layer is
            rendered. For example if (<see cref="P:DigitalRune.Graphics.TerrainLayer.FadeInStart"/>, <see cref="P:DigitalRune.Graphics.TerrainLayer.FadeInEnd"/>,
            <see cref="P:DigitalRune.Graphics.TerrainLayer.FadeOutStart"/>, <see cref="P:DigitalRune.Graphics.TerrainLayer.FadeOutEnd"/>) is (1, 3, 5, 7), then the layer is
            rendered into the clipmap level 1 with a low opacity. The opacity increases in level 2 and
            reaches 100% in level 3. The layer is rendered with full opacity in level 4. Then the opacity
            decreases again and reaches 0% at level 7. The default values are (0, 0,
            <see cref="F:System.Int32.MaxValue"/>, <see cref="F:System.Int32.MaxValue"/>) which means that fading is disabled
            and the terrain layer is always visible at all distances.
            </para>
            <para>
            These fade-in/out properties can be used to render details, like decals, only near the camera.
            It can also be used to have one layer draw a detailed rock texture only near the camera.
            Another layer can render a low resolution rock texture only in the distance.
            </para>
            <para>
            The fade-in/out properties are based on clipmap levels and not view-distance. (The reason: If
            the distance depends on the camera, then all cached clipmaps have to be redrawn when the
            camera moves. This needs to be avoided.)
            </para>
            <para>
            <strong>Cache invalidation:</strong><br/>
            When the <see cref="T:DigitalRune.Graphics.Terrain"/> is used with the <see cref="T:DigitalRune.Graphics.SceneGraph.TerrainNode"/>, then the terrain
            data is cached in clipmaps. Therefore, it is important to notify the terrain system when a
            tile or layer has changed and the cached data is invalid. When tiles or layers are added to or
            removed from the terrain, this happens automatically. But when the properties or the contents
            of tiles/layers are changed, the affected region needs to be invalidated explicitly by calling
            the appropriate <see cref="M:DigitalRune.Graphics.Terrain.Invalidate"/> method of the <see cref="T:DigitalRune.Graphics.Terrain"/> or the
            <see cref="T:DigitalRune.Graphics.TerrainTile"/>. For example, when the contents of a height map is changed, the
            affected region on the terrain needs to be invalidated by calling
            <see cref="M:DigitalRune.Graphics.Terrain.Invalidate(DigitalRune.Geometry.Shapes.Aabb)"/> or
            <see cref="M:DigitalRune.Graphics.Terrain.Invalidate(DigitalRune.Graphics.TerrainTile)"/>.
            </para>
            <para>
            <strong>Disposing:</strong><br/>
            <see cref="T:DigitalRune.Graphics.TerrainLayer"/>s are disposable. Derived classes should dispose all auto-generated
            resources. Resources set by the user or loaded via a content manager are not disposed by the
            <see cref="T:DigitalRune.Graphics.TerrainLayer"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainLayer.IsDisposed">
            <summary>
            Gets a value indicating whether this instance has been disposed of.
            </summary>
            <value>
            <see langword="true"/> if this instance has been disposed of; otherwise,
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainLayer.Aabb">
            <summary>
            Gets (or sets) the axis-aligned bounding box of the area that is influenced by this terrain
            layer.
            </summary>
            <value>
            The axis-aligned bounding box of the area that is influenced by this terrain layer. The
            default value is <see langword="null"/>, which means that the terrain layer affects the
            entire terrain tile.
            </value>
            <remarks>
            See <see cref="T:DigitalRune.Graphics.TerrainLayer"/> for more details.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainLayer.Material">
            <summary>
            Gets (or sets) the material that is used to render this terrain layer.
            </summary>
            <value>
            The material that is used to render this terrain layer. Must not be <see langword="null"/>.
            </value>
            <remarks>
            <para>
            A <see cref="P:DigitalRune.Graphics.TerrainLayer.Material"/> can be shared by multiple terrain layers.
            </para>
            <para>
            See <see cref="T:DigitalRune.Graphics.TerrainLayer"/> for more details.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <param name="value"> is <see langword="null"/>.
            </param>
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainLayer.MaterialInstance">
            <summary>
            Gets the material instance.
            </summary>
            <value>The material instance.</value>
            <remarks>
            The <see cref="P:DigitalRune.Graphics.TerrainLayer.MaterialInstance"/> is unique to the terrain layer. When effect parameters
            in the material instance are changed, only the current terrain layer is affected.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainLayer.FadeInStart">
            <summary>
            Gets or sets the clipmap level where this terrain layer starts to fade in.
            (This is a material parameter - see remarks.)
            </summary>
            <value>
            The clipmap level where this layer starts to fade in.
            The default value is 0.
            </value>
            <remarks>
            <para>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </para>
            <para>
            See <see cref="T:DigitalRune.Graphics.TerrainLayer"/> for more details.
            </para>
            </remarks>
            <seealso cref="P:DigitalRune.Graphics.TerrainLayer.FadeInEnd"/>
            <seealso cref="P:DigitalRune.Graphics.TerrainLayer.FadeOutStart"/>
            <seealso cref="P:DigitalRune.Graphics.TerrainLayer.FadeOutEnd"/>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainLayer.FadeInEnd">
            <summary>
            Gets or sets the clipmap level where the fade-in ends and this terrain layer is fully
            visible. (This is a material parameter - see remarks.)
            </summary>
            <value>
            The clipmap level where the fade-in ends and this terrain layer is fully visible. The
            default value is 0, which means that the terrain is immediately visible.
            </value>
            <remarks>
            <para>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </para>
            <para>
            See <see cref="T:DigitalRune.Graphics.TerrainLayer"/> for more details.
            </para>
            </remarks>
            <seealso cref="P:DigitalRune.Graphics.TerrainLayer.FadeInStart"/>
            <seealso cref="P:DigitalRune.Graphics.TerrainLayer.FadeOutStart"/>
            <seealso cref="P:DigitalRune.Graphics.TerrainLayer.FadeOutEnd"/>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainLayer.FadeOutStart">
            <summary>
            Gets or sets the clipmap level where this terrain layer starts to fade out.
            (This is a material parameter - see remarks.)
            </summary>
            <value>
            The clipmap level where this terrain layer starts to fade out. The default value is
            <see cref="F:System.Int32.MaxValue"/>, which means that the terrain layer does not fade out.
            </value>
            <remarks>
            <para>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </para>
            <para>
            See <see cref="T:DigitalRune.Graphics.TerrainLayer"/> for more details.
            </para>
            </remarks>
            <seealso cref="P:DigitalRune.Graphics.TerrainLayer.FadeInStart"/>
            <seealso cref="P:DigitalRune.Graphics.TerrainLayer.FadeInEnd"/>
            <seealso cref="P:DigitalRune.Graphics.TerrainLayer.FadeOutEnd"/>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainLayer.FadeOutEnd">
            <summary>
            Gets or sets the clipmap level where the fade-out ends and this terrain layer is not
            rendered anymore. (This is a material parameter - see remarks.)
            </summary>
            <value>
            The clipmap level where the fade-out ends and this terrain layer is not rendered anymore.
            The default value is <see cref="F:System.Int32.MaxValue"/>, which means that the terrain layer does not
            fade out.
            </value>
            <remarks>
            <para>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </para>
            <para>
            See <see cref="T:DigitalRune.Graphics.TerrainLayer"/> for more details.
            </para>
            </remarks>
            <seealso cref="P:DigitalRune.Graphics.TerrainLayer.FadeInStart"/>
            <seealso cref="P:DigitalRune.Graphics.TerrainLayer.FadeInEnd"/>
            <seealso cref="P:DigitalRune.Graphics.TerrainLayer.FadeOutStart"/>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TerrainLayer"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainLayer.Dispose">
            <summary>
            Releases all resources used by an instance of the <see cref="T:DigitalRune.Graphics.TerrainLayer"/> class.
            </summary>
            <remarks>
            <para>
            This method calls the virtual <see cref="M:DigitalRune.Graphics.TerrainLayer.Dispose(System.Boolean)"/> method, passing in
            <see langword="true"/>, and then suppresses finalization of the instance.
            </para>
            <para>
            See <see cref="T:DigitalRune.Graphics.TerrainLayer"/> for more details.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainLayer.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.TerrainLayer"/> class
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources;
            <see langword="false"/> to release only unmanaged resources.
            </param>
            <remarks>
            See <see cref="T:DigitalRune.Graphics.TerrainLayer"/> for more details.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainLayer.DigitalRune#Graphics#IInternalTerrainLayer#OnDraw(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Rectangle,DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainLayer.OnDraw(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Rectangle,DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Called when the <see cref="T:DigitalRune.Graphics.Rendering.TerrainClipmapRenderer"/> wants to draw this layer into a
            clipmap.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="rectangle">
            The screen-space rectangle of the clipmap into which to render.
            </param>
            <param name="topLeftPosition">
            The world space position of the top-left corner of the <paramref name="rectangle"/>.
            </param>
            <param name="bottomRightPosition">
            The world space position of the bottom-right corner of the <paramref name="rectangle"/>.
            </param>
            <remarks>
            The default implementation renders a single screen-space quad covering the
            <paramref name="rectangle"/>. The vertex shader will get the screen-space position in the
            "POSITION0" vertex attribute and the world space position in the "TEXCOORD0" vertex
            attribute.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainLayer.GetParameter``1(System.Boolean,System.String)">
            <summary>
            Gets an effect parameter value from the material.
            </summary>
            <typeparam name="T">The type of the effect parameter.</typeparam>
            <param name="useDetailPass">
            <see langword="false"/> to use the "Base" render pass.
            <see langword="true"/> to use the "Detail" render pass.
            </param>
            <param name="name">The effect parameter name.</param>
            <returns>The value of the effect parameter as stored in the material.</returns>
            <exception cref="T:DigitalRune.Graphics.GraphicsException">
            The material does not contain the specified render pass.<br/>
            Or, the effect does not have the specified effect parameter.<br/>
            Or, the effect parameter binding is not a <see cref="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1"/>.<br/>
            Or, the effect parameter is of a different type.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainLayer.SetParameter``1(System.String,``0)">
            <summary>
            Sets an effect parameter value in the material's "Base" and "Detail" pass.
            </summary>
            <typeparam name="T">The type of the effect parameter.</typeparam>
            <param name="name">The effect parameter name.</param>
            <param name="value">The effect parameter value.</param>
            <exception cref="T:DigitalRune.Graphics.GraphicsException">
            The material does not contain the specified render pass.<br/>
            Or, the effect does not have the specified effect parameter.<br/>
            Or, the effect parameter binding is not a <see cref="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1"/>.<br/>
            Or, the effect parameter is of a different type.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainLayer.SetParameter``1(System.Boolean,System.String,``0)">
            <summary>
            Sets an effect parameter value in the material.
            </summary>
            <typeparam name="T">The type of the effect parameter.</typeparam>
            <param name="useDetailPass">
            <see langword="false"/> to use the "Base" render pass.
            <see langword="true"/> to use the "Detail" render pass.
            </param>
            <param name="name">The effect parameter name.</param>
            <param name="value">The effect parameter value.</param>
            <exception cref="T:DigitalRune.Graphics.GraphicsException">
            The material does not contain the specified render pass.<br/>
            Or, the effect does not have the specified effect parameter.<br/>
            Or, the effect parameter binding is not a <see cref="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1"/>.<br/>
            Or, the effect parameter is of a different type.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.TerrainLayerCollection">
            <summary>
            Manages the layers of a terrain tile.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainLayerCollection.Parent">
            <summary>
            Gets the terrain tile that owns this collection.
            </summary>
            <value>The terrain tile that own this collection.</value>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainLayerCollection.#ctor(DigitalRune.Graphics.TerrainTile)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TerrainLayerCollection"/> class.
            </summary>
            <param name="parent">The terrain tile that owns this collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parent"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainLayerCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:DigitalRune.Graphics.TerrainLayerCollection"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> for <see cref="T:DigitalRune.Graphics.TerrainLayerCollection"/>.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainLayerCollection.ClearItems">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainLayerCollection.InsertItem(System.Int32,DigitalRune.Graphics.TerrainLayer)">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1"/> at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="item"/> should be inserted.
            </param>
            <param name="item">The object to insert.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainLayerCollection.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainLayerCollection.SetItem(System.Int32,DigitalRune.Graphics.TerrainLayer)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.TerrainMaterialLayer">
            <summary>
            Represents a material with tiling textures that are rendered onto the terrain.
            </summary>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Graphics.TerrainMaterialLayer"/> renders a material, such as grass, dirt, rocks, etc.,
            onto the terrain.
            </para>
            <para>
            <strong>Material textures:</strong><br/>
            The material is defined by several tiling textures:
            <list type="bullet">
            <item><see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.DiffuseTexture"/></item>
            <item><see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.SpecularTexture"/></item>
            <item><see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.NormalTexture"/></item>
            <item><see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.HeightTexture"/></item>
            </list>
            These textures repeat within the bounds of terrain tile. The property <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.TileSize"/>
            defines the scale of the textures.
            </para>
            <para>
            <strong>Blend texture:</strong><br/>
            The <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.BlendTexture"/> contains blend weights. It is a non-tiling texture which covers
            the terrain tile. (In other tools or engines this texture is called <i>splat map</i>,
            <i>control map</i>, <i>alpha map</i>, <i>material map</i>, <i>weight map</i>, or <i>mask
            texture</i>.) A blend texture can contain several blend weights (e.g. an RGBA texture can
            contain 4 blend weights - one weight per channel). The property 
            <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.BlendTextureChannel"/> determines which channel is used by the material layer.
            </para>
            <para>
            The material reads the blend weight from the blend texture and if the blend weight is greater
            than <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.BlendThreshold"/>, the material is drawn. There is a small transition zone
            around the threshold where the material fades out. This transition zone is defined by
            <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.BlendRange"/>.
            </para>
            <para>
            The <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.HeightTexture"/> of the material can be used to modify the blending. This can
            be used to create more realistic transitions between two materials. For example: One material
            layer draws a dirt texture. The next material layer blends a stone texture over the dirt
            texture. The stone material includes a height texture. This is used to create a dirt-stone
            transition where more dirt is visible in the gaps between stones (low height values).
            <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.BlendHeightInfluence"/> controls how much the height texture influences the
            blending.
            </para>
            <para>
            Noise can also be used to make transitions between two material layers visually more
            interesting. If <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.BlendNoiseInfluence"/> is greater than 0, a noise value is added to
            the blend weight to make transitions less uniform. <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.NoiseTileSize"/> controls the
            size of the tiling noise texture.
            </para>
            <para>
            <strong>Tint texture:</strong><br/>
            The <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.TintTexture"/> contains a color that is multiplied with the material. Like the
            <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.BlendTexture"/>, the <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.TintTexture"/> is a non-tiling texture which covers
            the entire terrain tile. <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.TintStrength"/> defines the influence of the
            <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.TintTexture"/>.
            </para>
            <para>
            <strong>Height-based and slope-based blending based:</strong><br/>
            The properties <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.TerrainHeightMin"/>, <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.TerrainHeightMax"/>,
            <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.TerrainSlopeMin"/>, and <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.TerrainSlopeMax"/> can be used to apply the
            material only on terrain geometry with a certain height or slope. Near these limits the
            material fades out. The fade-out range is determined by <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.TerrainHeightBlendRange"/>
            and <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.TerrainSlopeBlendRange"/>.
            </para>
            <para>
            <strong>Triplanar texture mapping:</strong><br/>
            The material textures are usually projected top-down onto the material. This may lead to
            distorted textures on very steep slopes. Triplanar texture mapping can be used to reduce
            distortions. If the triplanar texturing is enabled, the terrain normals are checked and the
            texture is projected vertically (y direction) or horizontally (x or z direction) to minimize
            distortions.
            </para>
            <para>
            Triplanar texture mapping is disabled by default (<see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.TriplanarTightening"/> = -1).
            Set <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.TriplanarTightening"/> to a positive value, e.g. 0.5, to enable triplanar
            texturing. Larger <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.TriplanarTightening"/> values make the transitions between
            different projection directions shorter.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.TileSize">
            <summary>
            Gets or sets the tile size of the textures in world space.
            (This is a material parameter - see remarks.)
            </summary>
            <value>
            The tile size of the textures in world space. The default value is 1, which means
            that the textures repeat every 1 world space unit.
            </value>
            <remarks>
            <para>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </para>
            <para>
            The <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.TileSize"/> affects the size of the <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.DiffuseTexture"/>,
            <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.SpecularTexture"/>, <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.NormalTexture"/> and <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.HeightTexture"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.DiffuseColor">
            <summary>
            Gets or sets the diffuse color. (This is a material parameter - see remarks.)
            </summary>
            <value>The diffuse color. The default value is (1, 1, 1).</value>
            <remarks>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.SpecularColor">
            <summary>
            Gets or sets the specular color. (This is a material parameter - see remarks.)
            </summary>
            <value>The specular color. The default value is (1, 1, 1).</value>
            <remarks>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.SpecularPower">
            <summary>
            Gets or sets the specular color exponent. (This is a material parameter - see remarks.)
            </summary>
            <value>The specular color exponent. The default value is 10.</value>
            <remarks>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.Alpha">
            <summary>
            Gets or sets the opacity (alpha). (This is a material parameter - see remarks.)
            </summary>
            <value>The opacity (alpha). The default value is 1.</value>
            <remarks>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.DiffuseTexture">
            <summary>
            Gets or sets the diffuse texture. (This is a material parameter - see remarks.)
            </summary>
            <value>The diffuse texture.</value>
            <remarks>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.SpecularTexture">
            <summary>
            Gets or sets the specular texture. (This is a material parameter - see remarks.)
            </summary>
            <value>The specular texture.</value>
            <remarks>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.NormalTexture">
            <summary>
            Gets or sets the normal texture. (This is a material parameter - see remarks.)
            </summary>
            <value>The normal texture.</value>
            <remarks>
            <para>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </para>
            <para>
            See <see cref="T:DigitalRune.Graphics.TerrainMaterialLayer"/> for more details.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.HeightTextureScale">
            <summary>
            Gets or sets the scale that is multiplied with samples of the height texture.
            (This is a material parameter - see remarks.)
            </summary>
            <value>
            The scale that is multiplied with samples of the height texture.
            The default value is 1.
            </value>
            <remarks>
            <para>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </para>
            <para>
            The <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.HeightTextureScale"/> and the <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.HeightTextureBias"/> can be used to
            modify the height samples read from the <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.HeightTexture"/>. The resulting height
            values is:
            </para>
            <para>
            <c>HeightTextureScale * value + HeightTextureBias</c>
            </para>
            <para>
            If the standard <see cref="T:DigitalRune.Graphics.SceneGraph.TerrainNode"/> with a <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailClipmap"/> is
            used, the resulting height values need to be in the range [0, 1]. Values outside this range
            will be clamped.
            </para>
            </remarks>
            <seealso cref="P:DigitalRune.Graphics.TerrainMaterialLayer.HeightTexture"/>
            <seealso cref="P:DigitalRune.Graphics.TerrainMaterialLayer.HeightTextureBias"/>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.HeightTextureBias">
            <summary>
            Gets or sets the bias that is added to samples of the height texture.
            (This is a material parameter - see remarks.)
            </summary>
            <value>
            The bias that is added to samples of the height texture. The default value is 0.
            </value>
            <inheritdoc cref="P:DigitalRune.Graphics.TerrainMaterialLayer.HeightTextureScale"/>
            <seealso cref="P:DigitalRune.Graphics.TerrainMaterialLayer.HeightTexture"/>
            <seealso cref="P:DigitalRune.Graphics.TerrainMaterialLayer.HeightTextureScale"/>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.HeightTexture">
            <summary>
            Gets or sets the height texture, which stores relative height values.
            (This is a material parameter - see remarks.)
            </summary>
            <value>The height texture, which stores relative height values.</value>
            <remarks>
            <para>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </para>
            <para>
            See <see cref="T:DigitalRune.Graphics.TerrainMaterialLayer"/> for more details.
            </para>
            </remarks>
            <seealso cref="P:DigitalRune.Graphics.TerrainMaterialLayer.HeightTextureBias"/>
            <seealso cref="P:DigitalRune.Graphics.TerrainMaterialLayer.HeightTextureScale"/>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.TriplanarTightening">
            <summary>
            Gets or sets the tightening factor for triplanar texture mapping. (Use -1 to disable
            triplanar texture mapping. This is a material parameter - see remarks.)
            </summary>
            <value>
            The tightening factor for triplanar mapping. To use triplanar texture mapping this factor
            should be in the range [0, sqrt(3)]. (sqrt(3) is about 0.577.) If this value is -1,
            triplanar mapping is disabled. The default value is -1.
            </value>
            <remarks>
            <para>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </para>
            <para>
            See <see cref="T:DigitalRune.Graphics.TerrainMaterialLayer"/> for more details.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.TintStrength">
            <summary>
            Gets or sets the influence of the <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.TintTexture"/>.
            (This is a material parameter - see remarks.)
            </summary>
            <value>The influence of the <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.TintTexture"/>.</value>
            <remarks>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </remarks>
            <seealso cref="P:DigitalRune.Graphics.TerrainMaterialLayer.TintTexture"/>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.TintTexture">
            <summary>
            Gets or sets the tint texture. (This is a material parameter - see remarks.)
            </summary>
            <value>The tint texture.</value>
            <remarks>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </remarks>
            <seealso cref="P:DigitalRune.Graphics.TerrainMaterialLayer.TintStrength"/>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.BlendThreshold">
            <summary>
            Gets or sets the threshold for the blend weights.
            (This is a material parameter - see remarks.)
            </summary>
            <value>The threshold for the blend weights. The default value is 0.5.</value>
            <remarks>
            <para>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </para>
            <para>
            See <see cref="T:DigitalRune.Graphics.TerrainMaterialLayer"/> for more details.
            </para>
            </remarks>
            <seealso cref="P:DigitalRune.Graphics.TerrainMaterialLayer.BlendRange"/>
            <seealso cref="P:DigitalRune.Graphics.TerrainMaterialLayer.BlendTexture"/>
            <seealso cref="P:DigitalRune.Graphics.TerrainMaterialLayer.BlendTextureChannel"/>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.BlendRange">
            <summary>
            Gets or sets the blend range. (This is a material parameter - see remarks.)
            </summary>
            <value>The blend range. The default value is 1.</value>
            <remarks>
            <para>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </para>
            <para>
            See <see cref="T:DigitalRune.Graphics.TerrainMaterialLayer"/> for more details.
            </para>
            </remarks>
            <seealso cref="P:DigitalRune.Graphics.TerrainMaterialLayer.BlendThreshold"/>
            <seealso cref="P:DigitalRune.Graphics.TerrainMaterialLayer.BlendTexture"/>
            <seealso cref="P:DigitalRune.Graphics.TerrainMaterialLayer.BlendTextureChannel"/>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.BlendHeightInfluence">
            <summary>
            Gets or sets the influence of the <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.HeightTexture"/> on the blend weight.
            (This is a material parameter - see remarks.)
            </summary>
            <value>
            <para>
            The influence of the <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.HeightTexture"/> on the blend weight in the range [-1, 1].
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>= 0</term>
            <description>The height values do not influence blending.</description>
            </item>
            <item>
            <term>&gt; 0</term>
            <description>
            This material layer overwrites previous material layers where the height values are large.
            </description>
            </item>
            <item>
            <term>&lt; 0</term>
            <description>
            This material layer overwrites previous material layers where the height values are small.
            </description>
            </item>
            </list>
            <para>
            The default value is 0.
            </para>
            <para>
            For optimal results, the <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.HeightTexture"/> should be normalized.
            </para>
            </value>
            <remarks>
            <para>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </para>
            <para>
            See <see cref="T:DigitalRune.Graphics.TerrainMaterialLayer"/> for more details.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.BlendNoiseInfluence">
            <summary>
            Gets or sets the influence of the noise on the blend weight.
            (This is a material parameter - see remarks.)
            </summary>
            <value>The influence of the noise on the blend weight. The default value is 0.</value>
            <remarks>
            <para>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </para>
            <para>
            See <see cref="T:DigitalRune.Graphics.TerrainMaterialLayer"/> for more details.
            </para>
            </remarks>
            <seealso cref="P:DigitalRune.Graphics.TerrainMaterialLayer.NoiseTileSize"/>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.BlendTextureChannel">
            <summary>
            Gets or sets the texture channel of the <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.BlendTexture"/> which contains the blend
            weight for this material. (This is a material parameter - see remarks.)
            </summary>
            <value>
            <para>
            The texture channel of the <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.BlendTexture"/> which contains the blend weight for
            this material. This values is in the range [0, 3]:
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>0</term>
            <description>Red channel</description>
            </item>
            <item>
            <term>1</term>
            <description>Green channel</description>
            </item>
            <item>
            <term>2</term>
            <description>Blue channel</description>
            </item>
            <item>
            <term>3</term>
            <description>Alpha channel</description>
            </item>
            </list>
            <para>
            The default value is 0.
            </para>
            </value>
            <remarks>
            <para>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </para>
            <para>
            See <see cref="T:DigitalRune.Graphics.TerrainMaterialLayer"/> for more details.
            </para>
            </remarks>
            <seealso cref="P:DigitalRune.Graphics.TerrainMaterialLayer.BlendRange"/>
            <seealso cref="P:DigitalRune.Graphics.TerrainMaterialLayer.BlendThreshold"/>
            <seealso cref="P:DigitalRune.Graphics.TerrainMaterialLayer.BlendTexture"/>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.BlendTexture">
            <summary>
            Gets or sets the texture which contains the blend weights.
            (This is a material parameter - see remarks.)
            </summary>
            <value>The texture which contains the blend weights.</value>
            <remarks>
            <para>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </para>
            <para>
            See <see cref="T:DigitalRune.Graphics.TerrainMaterialLayer"/> for more details.
            </para>
            </remarks>
            <seealso cref="P:DigitalRune.Graphics.TerrainMaterialLayer.BlendRange"/>
            <seealso cref="P:DigitalRune.Graphics.TerrainMaterialLayer.BlendThreshold"/>
            <seealso cref="P:DigitalRune.Graphics.TerrainMaterialLayer.BlendTextureChannel"/>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.NoiseTileSize">
            <summary>
            Gets or sets the size of the tiling noise map in world space units.
            (This is a material parameter - see remarks.)
            </summary>
            <value>
            The size of the tiling noise map in world space units. The default value is 1.
            </value>
            <remarks>
            <para>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </para>
            <para>
            See <see cref="T:DigitalRune.Graphics.TerrainMaterialLayer"/> for more details.
            </para>
            </remarks>
            <seealso cref="P:DigitalRune.Graphics.TerrainMaterialLayer.BlendNoiseInfluence"/>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.TerrainHeightMin">
            <summary>
            Gets or sets the min terrain height in world space. The material is not rendered below this
            height. (This is a material parameter - see remarks.)
            </summary>
            <value>
            The min terrain height in world space. The material is not rendered below this height. The
            default value is -1e20.
            </value>
            <remarks>
            <para>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </para>
            <para>
            See <see cref="T:DigitalRune.Graphics.TerrainMaterialLayer"/> for more details.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.TerrainHeightMax">
            <summary>
            Gets or sets the max terrain height in world space. The material is not rendered above this
            height. (This is a material parameter - see remarks.)
            </summary>
            <value>
            The min terrain height in world space. The material is not rendered above this height. The
            default value is 1e20.
            </value>
            <remarks>
            <para>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </para>
            <para>
            See <see cref="T:DigitalRune.Graphics.TerrainMaterialLayer"/> for more details.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.TerrainHeightBlendRange">
            <summary>
            Gets or sets the range for terrain height-based blending in world space units.
            (This is a material parameter - see remarks.)
            </summary>
            <value>
            The range for terrain height-based blending in world space units. The default value is 1.
            </value>
            <remarks>
            <para>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </para>
            <para>
            See <see cref="T:DigitalRune.Graphics.TerrainMaterialLayer"/> for more details.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.TerrainSlopeMin">
            <summary>
            Gets or sets the min terrain slope in radians. The material is not rendered if the terrain
            is flatter than this slope. (This is a material parameter - see remarks.)
            </summary>
            <value>
            The min terrain slope in radians. The material is not rendered if the terrain is flatter
            than this slope. The default value is -π rad (= 180°).
            </value>
            <remarks>
            <para>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </para>
            <para>
            See <see cref="T:DigitalRune.Graphics.TerrainMaterialLayer"/> for more details.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.TerrainSlopeMax">
            <summary>
            Gets or sets the max terrain slope in radians. The material is not rendered if the terrain
            is steeper than this slope. (This is a material parameter - see remarks.)
            </summary>
            <value>
            The max terrain slope in radians. The material is not rendered if the terrain is steeper
            than this slope. The default value is π rad (= 180°).
            </value>
            <remarks>
            <para>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </para>
            <remarks>
            <para>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </para>
            <para>
            See <see cref="T:DigitalRune.Graphics.TerrainMaterialLayer"/> for more details.
            </para>
            </remarks>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.TerrainSlopeBlendRange">
            <summary>
            Gets or sets the range for terrain slope-based blending in radians.
            (This is a material parameter - see remarks.)
            </summary>
            <value>
            The range for terrain slope-based blending in radians. The default value is 0.1745 rad (= 
            10°).
            </value>
            <remarks>
            <para>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </para>
            <para>
            See <see cref="T:DigitalRune.Graphics.TerrainMaterialLayer"/> for more details.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainMaterialLayer.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TerrainMaterialLayer"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TerrainMaterialLayer"/> class with the default
            material.
            </summary>
            <param name="graphicService">The graphic service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainMaterialLayer.#ctor(DigitalRune.Graphics.Material)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TerrainMaterialLayer"/> class with a custom
            material.
            </summary>
            <param name="material">The material.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="material"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.TerrainRoadLayer">
            <summary>
            Represents a road which is rendered onto the terrain.
            </summary>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Graphics.TerrainRoadLayer"/> renders a mesh which represents a road (or other road-like
            structures, e.g. skid marks). The road is represented by a <see cref="P:DigitalRune.Graphics.TerrainRoadLayer.Submesh"/> which can be
            set using <see cref="M:DigitalRune.Graphics.TerrainRoadLayer.SetMesh(DigitalRune.Graphics.Submesh,DigitalRune.Geometry.Shapes.Aabb,System.Single,System.Boolean)"/>.
            </para>
            <para>
            Material textures <see cref="P:DigitalRune.Graphics.TerrainRoadLayer.DiffuseTexture"/>, <see cref="P:DigitalRune.Graphics.TerrainRoadLayer.SpecularTexture"/>,
            <see cref="P:DigitalRune.Graphics.TerrainRoadLayer.NormalTexture"/> and <see cref="P:DigitalRune.Graphics.TerrainRoadLayer.HeightTexture"/> are rendered along the road. The
            u-axis of the texture is mapped to the width of the road; the v-axis is mapped to the
            direction of the road. The textures are repeated along the road direction. The property
            <seealso cref="P:DigitalRune.Graphics.TerrainRoadLayer.TileSize"/> determines the scale of tiling. (Textures are not tiled along the
            u-axis.)
            </para>
            <para>
            The helper methods <see cref="M:DigitalRune.Graphics.TerrainRoadLayer.CreateMesh(Microsoft.Xna.Framework.Graphics.GraphicsDevice,DigitalRune.Mathematics.Interpolation.Path3F,System.Single,System.Int32,System.Single,DigitalRune.Graphics.Submesh@,DigitalRune.Geometry.Shapes.Aabb@,System.Single@)"/>, <see cref="M:DigitalRune.Graphics.TerrainRoadLayer.ClampRoadToTerrain(DigitalRune.Mathematics.Interpolation.Path3F,DigitalRune.Geometry.Shapes.HeightField)"/> and
            <see cref="M:DigitalRune.Graphics.TerrainRoadLayer.ClampTerrainToRoad(DigitalRune.Geometry.Shapes.HeightField,DigitalRune.Mathematics.Interpolation.Path3F,System.Single,System.Single,System.Int32,System.Single)"/> can be used to create a road mesh and to clamp a road mesh to
            a terrain or to carve a road into a terrain.
            </para>
            <para>
            Important: The terrain road layer is only rendered on tiles where the layer is added. If the
            road stretches over multiple tiles, it needs to be added to all tiles. (An instance of
            <see cref="T:DigitalRune.Graphics.TerrainRoadLayer"/> can be shared by multiple terrain tiles.)
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainRoadLayer.Submesh">
            <summary>
            Gets the mesh that represents the road.
            </summary>
            <value>
            The mesh that represents the road. The default value is <see langword="null"/>.
            </value>
            <remarks>
            Use <see cref="M:DigitalRune.Graphics.TerrainRoadLayer.SetMesh(DigitalRune.Graphics.Submesh,DigitalRune.Geometry.Shapes.Aabb,System.Single,System.Boolean)"/> to set this mesh.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainRoadLayer.TileSize">
            <summary>
            Gets or sets the tile size of the road textures in world space.
            (This is a material parameter - see remarks.)
            </summary>
            <value>The tile size of the road textures in world space. The default value is 1.</value>
            <remarks>
            <para>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </para>
            <para>
            The road textures repeat along the road. The road direction is mapped to the v-axis texture
            space. The default value is 1, which means that the textures repeat every 1 world space unit
            along the road.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainRoadLayer.DiffuseColor">
            <summary>
            Gets or sets the diffuse color. (This is a material parameter - see remarks.)
            </summary>
            <value>The diffuse color. The default value is (1, 1, 1).</value>
            <remarks>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainRoadLayer.SpecularColor">
            <summary>
            Gets or sets the specular color. (This is a material parameter - see remarks.)
            </summary>
            <value>The specular color. The default value is (1, 1, 1).</value>
            <remarks>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainRoadLayer.SpecularPower">
            <summary>
            Gets or sets the specular color exponent. (This is a material parameter - see remarks.)
            </summary>
            <value>The specular color exponent. The default value is 10.</value>
            <remarks>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainRoadLayer.Alpha">
            <summary>
            Gets or sets the opacity (alpha). (This is a material parameter - see remarks.)
            </summary>
            <value>The opacity (alpha). The default value is 1.</value>
            <remarks>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainRoadLayer.DiffuseTexture">
            <summary>
            Gets or sets the diffuse texture. (This is a material parameter - see remarks.)
            </summary>
            <value>The diffuse texture.</value>
            <remarks>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainRoadLayer.SpecularTexture">
            <summary>
            Gets or sets the specular texture. (This is a material parameter - see remarks.)
            </summary>
            <value>The specular texture.</value>
            <remarks>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainRoadLayer.NormalTexture">
            <summary>
            Gets or sets the normal texture. (This is a material parameter - see remarks.)
            </summary>
            <value>The normal texture.</value>
            <remarks>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainRoadLayer.HeightTextureScale">
            <summary>
            Gets or sets the scale that is multiplied with samples of the height texture.
            (This is a material parameter - see remarks.)
            </summary>
            <value>
            The scale that is multiplied with samples of the height texture. The default value is 1.
            </value>
            <remarks>
            <para>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </para>
            <para>
            The <see cref="P:DigitalRune.Graphics.TerrainRoadLayer.HeightTextureScale"/> and the <see cref="P:DigitalRune.Graphics.TerrainRoadLayer.HeightTextureBias"/> can be used to
            modify the height samples read from the <see cref="P:DigitalRune.Graphics.TerrainRoadLayer.HeightTexture"/>. The resulting height
            values is:
            </para>
            <para>
            <c>HeightTextureScale * value + HeightTextureBias</c>
            </para>
            <para>
            If the standard <see cref="T:DigitalRune.Graphics.SceneGraph.TerrainNode"/> with a <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailClipmap"/> is
            used, the resulting height values need to be in the range [0, 1]. Values outside this range
            will be clamped.
            </para>
            </remarks>
            <seealso cref="P:DigitalRune.Graphics.TerrainRoadLayer.HeightTexture"/>
            <seealso cref="P:DigitalRune.Graphics.TerrainRoadLayer.HeightTextureBias"/>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainRoadLayer.HeightTextureBias">
            <summary>
            Gets or sets the bias that is added to samples of the height texture.
            (This is a material parameter - see remarks.)
            </summary>
            <value>
            The bias that is added to samples of the height texture. The default value is 0.
            </value>
            <inheritdoc cref="P:DigitalRune.Graphics.TerrainRoadLayer.HeightTextureScale"/>
            <seealso cref="P:DigitalRune.Graphics.TerrainRoadLayer.HeightTexture"/>
            <seealso cref="P:DigitalRune.Graphics.TerrainRoadLayer.HeightTextureScale"/>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainRoadLayer.HeightTexture">
            <summary>
            Gets or sets the height texture. (This is a material parameter - see remarks.)
            </summary>
            <value>The height texture.</value>
            <remarks>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </remarks>
            <seealso cref="P:DigitalRune.Graphics.TerrainRoadLayer.HeightTextureBias"/>
            <seealso cref="P:DigitalRune.Graphics.TerrainRoadLayer.HeightTextureScale"/>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainRoadLayer.BorderBlendRange">
            <summary>
            Gets or sets a value which determines how the sides of the road mesh fade out.
            (This is a material parameter - see remarks.)
            </summary>
            <value>
            A value which determines how the sides of the road mesh fade out.
            <see cref="P:DigitalRune.Graphics.TerrainRoadLayer.BorderBlendRange"/> controls the fade-out ranges for the 4 sides of the road:
            (left, start, right, end). The values determines the range in texture coordinates where the
            opacity of the road texture fades out. The default value is (0, 0, 0, 0).
            </value>
            <remarks>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainRoadLayer.RoadLength">
            <summary>
            Gets the length of the road in world space units.
            (This is a material parameter - see remarks.)
            </summary>
            <value>The length of the road in world space units. The default value is 1.</value>
            <remarks>
            <para>
            This is material parameter. Changing this property affects all terrain layers that share
            the same material.
            </para>
            <para>
            The road length needs to be precomputed. The property affects the tiling of the textures
            along the road direction.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainRoadLayer.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TerrainRoadLayer"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TerrainRoadLayer"/> class with the default
            material.
            </summary>
            <param name="graphicService">The graphic service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainRoadLayer.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainRoadLayer.SetMesh(DigitalRune.Graphics.Submesh,DigitalRune.Geometry.Shapes.Aabb,System.Single,System.Boolean)">
            <summary>
            Sets the road mesh and related properties.
            </summary>
            <param name="submesh">The submesh that represents the road.</param>
            <param name="aabb">The axis-aligned bounding box of the mesh.</param>
            <param name="roadLength">The length of the road in world space units.</param>
            <param name="disposeWithRoadLayer">
            <see langword="true" /> to automatically dispose of the mesh when the
            <see cref="T:DigitalRune.Graphics.TerrainRoadLayer"/> is disposed of; otherwise, <see langword="false"/>.
            </param>
            <remarks>
            <see cref="M:DigitalRune.Graphics.TerrainRoadLayer.CreateMesh(Microsoft.Xna.Framework.Graphics.GraphicsDevice,DigitalRune.Mathematics.Interpolation.Path3F,System.Single,System.Int32,System.Single,DigitalRune.Graphics.Submesh@,DigitalRune.Geometry.Shapes.Aabb@,System.Single@)"/> can be used to create a suitable mesh.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainRoadLayer.OnDraw(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Rectangle,DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainRoadLayer.CreateMesh(Microsoft.Xna.Framework.Graphics.GraphicsDevice,DigitalRune.Mathematics.Interpolation.Path3F,System.Single,System.Int32,System.Single,DigitalRune.Graphics.Submesh@,DigitalRune.Geometry.Shapes.Aabb@,System.Single@)">
            <summary>
            Creates a road mesh for use with a <see cref="T:DigitalRune.Graphics.TerrainRoadLayer"/>.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="path">The path that represents the road.</param>
            <param name="defaultWidth">The default road width.</param>
            <param name="maxNumberOfIterations">
            The maximum number of iterations (used when tessellating the path).
            </param>
            <param name="tolerance">
            The tolerance in world space units (used when tessellating the path).
            </param>
            <param name="submesh">
            The resulting road mesh - or <see langword="null"/> if <paramref name="path"/> is empty.
            </param>
            <param name="aabb">The axis-aligned bounding box of the road mesh.</param>
            <param name="roadLength">The length of the road.</param>
            <remarks>
            <para>
            A road is defined by the specified 3D path. The path keys can be of type
            <see cref="T:DigitalRune.Graphics.TerrainRoadPathKey"/>. This allows to add additional information to the path,
            like varying road <see cref="P:DigitalRune.Graphics.TerrainRoadPathKey.Width"/>. If the path keys are of any
            other <see cref="T:DigitalRune.Mathematics.Interpolation.PathKey3F"/> type, the <paramref name="defaultWidth"/> is used.
            </para>
            <para>
            To create the road mesh, the path is tessellated. <paramref name="maxNumberOfIterations"/>
            and <paramref name="tolerance"/> define how detailed the tessellation will be.
            </para>
            <para>
            <strong>Limitations:</strong>
            </para>
            <list type="bullet">
            <item>
            The path should not have any gaps.
            </item>
            <items>
            The path should be sufficiently smooth. Tight curves can lead to tessellation problems.
            </items>
            </list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/> or <paramref name="path"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainRoadLayer.ClampRoadToTerrain(DigitalRune.Mathematics.Interpolation.Path3F,DigitalRune.Geometry.Shapes.HeightField)">
            <summary>
            Clamps a road path to the terrain height.
            </summary>
            <param name="road">The path that represents the road.</param>
            <param name="terrain">The terrain represented by a <see cref="T:DigitalRune.Geometry.Shapes.HeightField"/>.</param>
            <remarks>
            The y position of each path key is set to the terrain height at the xz position.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="terrain"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainRoadLayer.ClampTerrainToRoad(DigitalRune.Geometry.Shapes.HeightField,DigitalRune.Mathematics.Interpolation.Path3F,System.Single,System.Single,System.Int32,System.Single)">
            <summary>
            Clamps the terrain height to the road ("carves the road into the terrain").
            </summary>
            <param name="terrain">The terrain represented by a <see cref="T:DigitalRune.Geometry.Shapes.HeightField"/>.</param>
            <param name="road">The path that represents the road.</param>
            <param name="defaultWidth">The default road width.</param>
            <param name="defaultSideFalloff">The default side falloff.</param>
            <param name="maxNumberOfIterations">
            The maximum number of iterations (used when tessellating the path).
            </param>
            <param name="tolerance">
            The tolerance in world space units (used when tessellating the path).
            </param>
            <remarks>
            <para>
            A road is defined by the specified 3D path. The path keys can be of type
            <see cref="T:DigitalRune.Graphics.TerrainRoadPathKey"/>. This allows to add additional information to the path,
            like varying road <see cref="P:DigitalRune.Graphics.TerrainRoadPathKey.Width"/> and 
            <see cref="P:DigitalRune.Graphics.TerrainRoadPathKey.SideFalloff"/>. If the path keys are of any
            other <see cref="T:DigitalRune.Mathematics.Interpolation.PathKey3F"/> type, the <paramref name="defaultWidth"/> and
            <paramref name="defaultSideFalloff"/> are used.
            </para>
            <para>
            The heights of the given height field are adjusted to the road height - the road is
            "carved" into the terrain. At the side of the roads the terrain heights fall off smoothly
            to the existing terrain heights. The influence range on each side is defined by the
            <see cref="P:DigitalRune.Graphics.TerrainRoadPathKey.SideFalloff"/> in the <see cref="T:DigitalRune.Graphics.TerrainRoadPathKey"/>s or
            by the <paramref name="defaultSideFalloff"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="terrain"/> or <paramref name="road"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.TerrainRoadPathKey">
            <summary>
            Defines a <see cref="T:DigitalRune.Mathematics.Interpolation.PathKey3F"/> for a <see cref="T:DigitalRune.Mathematics.Interpolation.Path3F"/> which defines a road.
            </summary>
            <remarks>
            <para>
            Roads (see <see cref="T:DigitalRune.Graphics.TerrainRoadLayer"/>) are usually defined by 3D paths. A 3D path is a
            curve which goes through several path keys. Each path key defines a point on the curve and the
            spline interpolation between the point and the next point. When dealing with roads, you can
            use the <see cref="T:DigitalRune.Graphics.TerrainRoadPathKey"/> class for the path keys to provide additional
            information.
            </para>
            <para>
            <see cref="P:DigitalRune.Graphics.TerrainRoadPathKey.Width"/> defines the absolute with of the road at the path key.
            <see cref="P:DigitalRune.Graphics.TerrainRoadPathKey.SideFalloff"/> defines an additional border of the road where the road influences
            the terrain height. This property is used when the road is "carved" into a terrain (see
            <see cref="M:DigitalRune.Graphics.TerrainRoadLayer.ClampTerrainToRoad(DigitalRune.Geometry.Shapes.HeightField,DigitalRune.Mathematics.Interpolation.Path3F,System.Single,System.Single,System.Int32,System.Single)"/>. For example, if a road with a width of 5
            and a side falloff of 4 is carved into a terrain, the center 5 units contain the actual
            road and the terrain height is adjusted to match the road. The terrain height next to the road
            is interpolated between the original height and the road. The total width of the terrain
            influenced by the road is <see cref="P:DigitalRune.Graphics.TerrainRoadPathKey.SideFalloff"/> (left) + <see cref="P:DigitalRune.Graphics.TerrainRoadPathKey.Width"/> +
            <see cref="P:DigitalRune.Graphics.TerrainRoadPathKey.SideFalloff"/> (right) = 13 units.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainRoadPathKey.Width">
            <summary>
            Gets or sets the width of the road.
            </summary>
            <value>The width of the road. The default value is 5.</value>
            <remarks>
            See <see cref="T:DigitalRune.Graphics.TerrainRoadPathKey"/> for more details.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainRoadPathKey.SideFalloff">
            <summary>
            Gets or sets the side falloff.
            </summary>
            <value>The side falloff. The default value is 4.</value>
            <remarks>
            See <see cref="T:DigitalRune.Graphics.TerrainRoadPathKey"/> for more details.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainRoadPathKey.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TerrainRoadPathKey"/> class.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.TerrainTile">
            <summary>
            Defines the geometry (height, normals, holes) and material of a rectangular terrain region.
            </summary>
            <remarks>
            <para>
            A terrain is split into one or more tiles. The terrain tiles defines the geometry (height,
            normals, holes) of the terrain. Each tile has a set of material layers (dirt, grass, decals,
            roads) that define the appearance. The material layers are applied (blended) one after the
            other, which means that a layer can override previous layers.
            </para>
            <para>
            <strong>Geometry textures:</strong><br/> The <see cref="P:DigitalRune.Graphics.TerrainTile.HeightTexture"/> defines height values
            (absolute heights in world space) of the terrain. 
            </para>
            <para>
            <see cref="P:DigitalRune.Graphics.TerrainTile.NormalTexture"/> contains the terrain normal vectors. This texture encodes the
            normal vectors like a standard "green-up" normal map, i.e. the world space +x component of the
            normal is stored in the red channel. The world space up (+y) component is stored in the blue
            channel. The <i>negative</i> world space z component is stored in the green channel.
            </para>
            <para>
            <see cref="P:DigitalRune.Graphics.TerrainTile.HoleTexture"/> defines holes in the terrain. The texture is used like an alpha mask
            texture. If the alpha channel contains 0, then there is a hole in the terrain.
            </para>
            <para>
            <strong>Tile dimensions:</strong><br/><see cref="P:DigitalRune.Graphics.TerrainTile.OriginX"/> and <see cref="P:DigitalRune.Graphics.TerrainTile.OriginZ"/> define
            the tile origin in world space - which corresponds to center of the first texel of the
            textures. <see cref="P:DigitalRune.Graphics.TerrainTile.CellSize"/> defines the horizontal distance between two height values.
            The texture coordinate u is aligned with the positive x-axis. The texture coordinate
            v is aligned with the positive z-axis. This means, if the cell/texel size is 1 world space
            unit and the texture is 1025 x 513 texels large, then the terrain tile covers the area between
            (OriginX, *, OriginZ) and (OriginX + 1024, *, OriginZ + 512).
            </para>
            <para>
            <strong>Mipmaps:</strong><br/> All textures should contain mipmaps. Ideally, the mipmaps are
            generated using 3 x 3 downsampling instead of the usual 2 x 2 downsampling. - Suitable
            textures can be created using the <see cref="T:DigitalRune.Graphics.TerrainHelper"/> class.
            </para>
            <para>
            <strong>Miscellaneous:</strong><br/> Please notes that the normal vectors depend on the scale
            of the terrain. That means, if height values in the <see cref="P:DigitalRune.Graphics.TerrainTile.HeightTexture"/> are scaled,
            then the normal map has to be updated too. The normal map also needs to be updated if the
            <see cref="P:DigitalRune.Graphics.TerrainTile.CellSize"/> is changed! (This is not done automatically. Normal textures can be
            created using the <see cref="T:DigitalRune.Graphics.TerrainHelper"/>.)
            </para>
            <para>
            <see cref="P:DigitalRune.Graphics.TerrainTile.OriginX"/> and <see cref="P:DigitalRune.Graphics.TerrainTile.OriginZ"/> should always be an integer multiple of the
            <see cref="P:DigitalRune.Graphics.TerrainTile.CellSize"/>. For example, if the cell size is 0.5, valid origin values are -0.5, 0,
            0.5, 1, etc.
            </para>
            <para>
            <strong>Cache invalidation:</strong><br/> When the <see cref="P:DigitalRune.Graphics.TerrainTile.Terrain"/> is used with the
            <see cref="T:DigitalRune.Graphics.SceneGraph.TerrainNode"/>, then the terrain data is cached in clipmaps. Therefore, it is
            important to notify the terrain system when a tile or layer has changed and the cached data is
            invalid. When tiles or layers are added to or removed from the terrain, this happens
            automatically. But when the properties or the contents of tiles/layers are changed, the
            affected region needs to be invalidated explicitly by calling the appropriate
            <see cref="M:DigitalRune.Graphics.Terrain.Invalidate"/> method of the <see cref="P:DigitalRune.Graphics.TerrainTile.Terrain"/> or the
            <see cref="T:DigitalRune.Graphics.TerrainTile"/>. For example, when the contents of a height map is changed, the
            affected region on the terrain needs to be invalidated by calling
            <see cref="M:DigitalRune.Graphics.Terrain.Invalidate(DigitalRune.Geometry.Shapes.Aabb)"/> or
            <see cref="M:DigitalRune.Graphics.Terrain.Invalidate(DigitalRune.Graphics.TerrainTile)"/>.
            </para>
            <para>See <see cref="P:DigitalRune.Graphics.TerrainTile.Terrain"/> and <see cref="T:DigitalRune.Graphics.TerrainLayer"/> for more information.</para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainTile.IsDisposed">
            <summary>
            Gets a value indicating whether this instance has been disposed of.
            </summary>
            <value>
            <see langword="true"/> if this instance has been disposed of; otherwise,
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainTile.Terrain">
            <summary>
            Gets the terrain that owns this terrain tile.
            </summary>
            <value>The terrain that owns this terrain tile.</value>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainTile.Aabb">
            <summary>
            Gets the axis-aligned bounding box of the terrain tile. 
            (Vertical min and max values are not set!)
            </summary>
            <value>The axis-aligned bounding box of the terrain tile.</value>
            <remarks>
            The min and max y values of this <see cref="P:DigitalRune.Graphics.TerrainTile.Aabb"/> are 0 and should be ignored. Only the
            x and z values are set.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainTile.DigitalRune#Graphics#IInternalTerrainLayer#Aabb">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainTile.DigitalRune#Graphics#IInternalTerrainLayer#FadeInStart">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainTile.DigitalRune#Graphics#IInternalTerrainLayer#FadeOutEnd">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainTile.Material">
            <summary>
            Gets or sets the material that is used to render the geometry of this terrain tile.
            </summary>
            <value>The material that is used to render the geometry of this terrain layer.</value>
            <remarks>
            If the <see cref="P:DigitalRune.Graphics.TerrainTile.Material"/> is <see langword="null"/>, no geometry (heights, normals,
            holes) are rendered for this terrain tile.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainTile.MaterialInstance">
            <summary>
            Gets the material instance.
            </summary>
            <value>The material instance.</value>
            <remarks>
            The <see cref="P:DigitalRune.Graphics.TerrainTile.MaterialInstance"/> is unique to the terrain tile. When effect parameters
            in the material instance are changed, only the current terrain tile is affected.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainTile.Layers">
            <summary>
            Gets the terrain layers.
            </summary>
            <value>The terrain layers.</value>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainTile.OriginX">
            <summary>
            Gets or sets the world space origin of this terrain tile on the x-axis.
            </summary>
            <value>
            The world space origin of this terrain tile on the x-axis. The default value is 0.
            </value>
            <remarks>
            The origin should be an integer multiple of the <see cref="P:DigitalRune.Graphics.TerrainTile.CellSize"/>!
            </remarks>
            <seealso cref="P:DigitalRune.Graphics.TerrainTile.OriginZ"/>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainTile.OriginZ">
            <summary>
            Gets or sets the world space origin of this terrain tile on the z-axis.
            </summary>
            <value>
            The world space origin of this terrain tile on the z-axis. The default value is 0.
            </value>
            <remarks>
            The origin should be an integer multiple of the <see cref="P:DigitalRune.Graphics.TerrainTile.CellSize"/>!
            </remarks>
            <seealso cref="P:DigitalRune.Graphics.TerrainTile.OriginX"/>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainTile.CellSize">
            <summary>
            Gets or sets the world space size of one cell in the height texture.
            </summary>
            <value>
            The world space size of one cell in the height texture. The default value is 1.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainTile.WidthX">
            <summary>
            Gets the world space size of this terrain tile along the x-axis.
            </summary>
            <value>The world space size of this terrain tile along the x-axis.</value>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainTile.WidthZ">
            <summary>
            Gets the world space size of this terrain tile along the z-axis.
            </summary>
            <value>The world space size of this terrain tile along the z-axis.</value>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainTile.HeightTexture">
            <summary>
            Gets or sets the height texture which stores absolute height values in the Red channel.
            </summary>
            <value>The height texture which stores absolute height values in the Red channel.</value>
            <remarks>
            See <see cref="T:DigitalRune.Graphics.TerrainTile"/> for more details.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainTile.NormalTexture">
            <summary>
            Gets or sets the normal texture which stores normal vectors.
            </summary>
            <value>The normal texture which stores normal vectors.</value>
            <remarks>
            See <see cref="T:DigitalRune.Graphics.TerrainTile"/> for more details.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainTile.HoleTexture">
            <summary>
            Gets or sets the hole texture which stores hole information in the Alpha channel.
            </summary>
            <value>The hole texture which stores hole information in the Alpha channel.</value>
            <remarks>
            See <see cref="T:DigitalRune.Graphics.TerrainTile"/> for more details.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainTile.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TerrainTile"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TerrainTile"/> class with a default
            material.
            </summary>
            <param name="graphicsService">The graphic service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainTile.#ctor(DigitalRune.Graphics.IGraphicsService,DigitalRune.Graphics.Material)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TerrainTile"/> class with the specified
            material.
            </summary>
            <param name="graphicsService">The graphic service.</param>
            <param name="material">The material. Can be <see langword="null"/> - see remarks.</param>
            <remarks>
            The specified material is used to render the terrain geometry (heights, normals, holes) into
            the clipmaps. When the <paramref name="material"/> is <see langword="null"/>, no geometry is
            rendered into the terrain tile.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainTile.Dispose">
            <summary>
            Releases all resources used by an instance of the <see cref="T:DigitalRune.Graphics.TerrainTile"/> class.
            </summary>
            <remarks>
            This method calls the virtual <see cref="M:DigitalRune.Graphics.TerrainTile.Dispose(System.Boolean)"/> method, passing in
            <see langword="true"/>, and then suppresses finalization of the instance.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainTile.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.TerrainTile"/> class
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources;
            <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainTile.OnCreateMaterial(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Called when a new <see cref="T:DigitalRune.Graphics.TerrainTile"/> is created without explicitly specifying a
            <see cref="P:DigitalRune.Graphics.TerrainTile.Material"/>.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <returns>The default material.</returns>
            <remarks>
            <strong>Notes to Inheritors:</strong>
            This method may be executed in the constructor of the <see cref="T:DigitalRune.Graphics.TerrainTile"/> class.
            Therefore, the <see cref="T:DigitalRune.Graphics.TerrainTile"/> instance may not be fully initialized when this
            method is called!
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainTile.Invalidate">
            <overloads>
            <summary>
            Invalidates the data cached by the renderer.
            </summary>
            </overloads>
            
            <summary>
            Invalidates the terrain tile in the data cached by the renderer.
            </summary>
            <inheritdoc cref="M:DigitalRune.Graphics.Terrain.Invalidate"/>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainTile.Invalidate(DigitalRune.Graphics.TerrainLayer)">
            <summary>
            Invalidates the specified terrain layer in the data cached by the renderer.
            </summary>
            <param name="layer">The terrain layer which should be invalidated.</param>
            <inheritdoc cref="M:DigitalRune.Graphics.Terrain.Invalidate"/>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="layer"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainTile.DigitalRune#Graphics#IInternalTerrainLayer#OnDraw(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Rectangle,DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.TerrainTileCollection">
            <summary>
            Manages the tiles of a terrain.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainTileCollection.#ctor(DigitalRune.Graphics.Terrain)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TerrainTileCollection"/> class.
            </summary>
            <param name="owner">The <see cref="T:DigitalRune.Graphics.Terrain"/> that owns this collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="owner"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainTileCollection.GetParent(DigitalRune.Graphics.TerrainTile)">
            <summary>
            Gets the parent of an object.
            </summary>
            <param name="child">The child object.</param>
            <returns>The parent of <paramref name="child"/>.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainTileCollection.SetParent(DigitalRune.Graphics.TerrainTile,DigitalRune.Graphics.Terrain)">
            <summary>
            Sets the parent of the given object.
            </summary>
            <param name="child">The child object.</param>
            <param name="parent">The parent to set.</param>
        </member>
        <member name="T:DigitalRune.Graphics.OceanWaves">
            <summary>
            Represents ocean waves computed using Fast Fourier Transformation and a statistical wave
            spectrum.
            </summary>
            <remarks>
            <para>
            This class uses Fast Fourier Transformation (FFT) on the GPU to compute waves from many
            (several thousand) sine waves. The input wave spectrum is defined by a statistical spectrum of
            ocean waves. The <see cref="P:DigitalRune.Graphics.OceanWaves.TextureSize"/> defines the number of waves which are computed. If
            <see cref="P:DigitalRune.Graphics.OceanWaves.TextureSize"/> is 256, then the 256 x 256 waves are evaluated! The resulting wave
            textures tile seamlessly.
            </para>
            <para>
            This class only stores the settings and final textures. The <see cref="T:DigitalRune.Graphics.Rendering.WaterWavesRenderer"/>
            must be used to generated the textures at runtime. <see cref="T:DigitalRune.Graphics.Rendering.WaterWavesRenderer"/> is a scene
            node renderer which handles <see cref="T:DigitalRune.Graphics.SceneGraph.WaterNode"/>s. If a <see cref="T:DigitalRune.Graphics.SceneGraph.WaterNode"/> references
            <see cref="T:DigitalRune.Graphics.OceanWaves"/>, the renderer creates the displacement/normal map textures and stores
            them in the <see cref="P:DigitalRune.Graphics.WaterWaves.DisplacementMap"/> and <see cref="P:DigitalRune.Graphics.WaterWaves.NormalMap"/>
            properties.
            </para>
            <para>
            <strong>CPU Queries:</strong><br/>
            <see cref="P:DigitalRune.Graphics.OceanWaves.EnableCpuQueries"/> can be set to <see langword="true"/> to also perform a CPU FFT
            on the CPU. The size of the CPU FFT is defined by <see cref="P:DigitalRune.Graphics.OceanWaves.CpuSize"/>. <see cref="P:DigitalRune.Graphics.OceanWaves.CpuSize"/>
            is usually a lot smaller than <see cref="P:DigitalRune.Graphics.OceanWaves.TextureSize"/> (e.g. 16). The CPU simulation is only
            an approximation of the exact simulation on the GPU.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.OceanWaves.TextureSize">
            <summary>
            Gets or sets the size of the displacement/normal map in texels.
            </summary>
            <value>
            The size of the displacement/normal map in texels. Must be a power of two (e.g. 2, 4, 8,
            etc.). The default value is 256.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is less than 2.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is not a power of two.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.OceanWaves.TileSize">
            <summary>
            Gets or sets the size of a single tile (one texture repetition) in world space.
            </summary>
            <value>
            The size of a single tile (one texture repetition) in world space. The default value is 10.
            </value>
            <inheritdoc cref="P:DigitalRune.Graphics.WaterWaves.TileSize"/>
        </member>
        <member name="P:DigitalRune.Graphics.OceanWaves.Seed">
            <summary>
            Gets or sets the seed of the random number generator.
            </summary>
            <value>The seed of the random number generator.</value>
        </member>
        <member name="P:DigitalRune.Graphics.OceanWaves.Gravity">
            <summary>
            Gets or sets the gravity.
            </summary>
            <value>The gravity. The default value is 9.81.</value>
        </member>
        <member name="P:DigitalRune.Graphics.OceanWaves.Wind">
            <summary>
            Gets or sets the wind velocity.
            </summary>
            <value>The wind velocity. The default value is (10, 0, 10).</value>
        </member>
        <member name="P:DigitalRune.Graphics.OceanWaves.HeightScale">
            <summary>
            Gets or sets the height scale factor.
            </summary>
            <value>The height scale factor. The default value is 0.01.</value>
            <remarks>
            This factor is used to scale the wave height. (It is NOT the wave height in world space 
            units.)
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.OceanWaves.Directionality">
            <summary>
            Gets or sets the directionality of the waves.
            </summary>
            <value>
            The directionality of the waves. Must be greater than 0. The default value is 1.
            </value>
            <remarks>
            Higher <see cref="P:DigitalRune.Graphics.OceanWaves.Directionality"/> values will make more waves flow in the wind direction,
            with less waves deviating from the wind direction.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> must be greater than 0.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.OceanWaves.Choppiness">
            <summary>
            Gets or sets the choppiness factor which scales the horizontal displacement.
            </summary>
            <value>
            The choppiness factor which scales the horizontal displacement. The default value is 1.
            </value>
            <remarks>
            Use a <see cref="P:DigitalRune.Graphics.OceanWaves.Choppiness"/> of 0 to get very round waves (no horizontal displacement of 
            vertices). Use values greater than 0 to create choppy waves.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.OceanWaves.SmallWaveSuppression">
            <summary>
            Gets or sets the small wave suppression.
            </summary>
            <value>The small wave suppression.</value>
            <remarks>
            This property can be used to suppress small waves. If this value is 0.01, then waves which
            are smaller then 1% of the highest wave are suppressed. The default value is 0.0001.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.OceanWaves.EnableCpuQueries">
            <summary>
            Gets or sets a value indicating whether CPU queries using <see cref="M:DigitalRune.Graphics.OceanWaves.GetDisplacement(System.Single,System.Single,DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@)"/> are
            enabled.
            </summary>
            <value>
            <see langword="true" /> if CPU queries using <see cref="M:DigitalRune.Graphics.OceanWaves.GetDisplacement(System.Single,System.Single,DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@)"/> are enabled;
            otherwise, <see langword="false" />. The default value is <see langword="false"/>.
            </value>
            <remarks>
            <para>
            If <see cref="P:DigitalRune.Graphics.OceanWaves.EnableCpuQueries"/> is <see langword="false"/>, the ocean wave simulation is
            only performed on the GPU. If <see cref="P:DigitalRune.Graphics.OceanWaves.EnableCpuQueries"/> is <see langword="true"/>, the
            ocean wave simulation is performed on the GPU and the CPU. The CPU simulation is necessary
            to enable queries using <see cref="M:DigitalRune.Graphics.OceanWaves.GetDisplacement(System.Single,System.Single,DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@)"/>.
            </para>
            <para>
            <see cref="P:DigitalRune.Graphics.OceanWaves.TextureSize"/> defines the size of the simulation grid on the GPU;
            <see cref="P:DigitalRune.Graphics.OceanWaves.CpuSize"/> defines the size of the simulation grid on the CPU. Since the CPU
            simulation is slower <see cref="P:DigitalRune.Graphics.OceanWaves.CpuSize"/> should be a lot smaller than
            <see cref="P:DigitalRune.Graphics.OceanWaves.TextureSize"/> (e.g. 16 vs. 256).
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.OceanWaves.CpuSize">
            <summary>
            Gets or sets the simulation size for CPU queries using <see cref="M:DigitalRune.Graphics.OceanWaves.GetDisplacement(System.Single,System.Single,DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@)"/>.
            </summary>
            <value>
            The simulation size for CPU queries using <see cref="M:DigitalRune.Graphics.OceanWaves.GetDisplacement(System.Single,System.Single,DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@)"/>. Must be a power of
            two. The default value is 16.
            </value>
            <inheritdoc cref="P:DigitalRune.Graphics.OceanWaves.EnableCpuQueries"/>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is less than 2.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is not a power of two.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.OceanWaves.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.OceanWaves"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.OceanWaves.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.OceanWaves"/> class 
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources; 
            <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.OceanWaves.GetDisplacement(System.Single,System.Single,DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@)">
            <summary>
            Gets the surface displacement caused by the water waves.
            </summary>
            <param name="x">The x position in world space.</param>
            <param name="z">The z position in world space.</param>
            <param name="displacement">The displacement vector in world space.</param>
            <param name="normal">The normal vector in world space.</param>
            <returns>
            <see langword="true"/> if successful; otherwise, <see langword="false"/> if the results are
            invalid because the CPU simulation has not been performed.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            <see cref="P:DigitalRune.Graphics.OceanWaves.EnableCpuQueries"/> is <see langword="false"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.UserDefinedWaves">
            <summary>
            Provides a user-defined displacement and normal texture that define the water surface.
            </summary>
            <remarks>
            This class adds setters to the <see cref="T:DigitalRune.Graphics.WaterWaves"/> properties. All properties have to be
            specified by the user.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.UserDefinedWaves.DisplacementMap">
            <summary>
            Gets or sets the displacement map.
            </summary>
            <inheritdoc cref="P:DigitalRune.Graphics.WaterWaves.DisplacementMap"/>
        </member>
        <member name="P:DigitalRune.Graphics.UserDefinedWaves.NormalMap">
            <summary>
            Gets or sets the normal map (using standard encoding, see remarks).
            </summary>
            <inheritdoc cref="P:DigitalRune.Graphics.WaterWaves.NormalMap"/>
        </member>
        <member name="P:DigitalRune.Graphics.UserDefinedWaves.TileSize">
            <summary>
            Gets or sets the size of a single tile (one texture repetition) in world space.
            </summary>
            <inheritdoc cref="P:DigitalRune.Graphics.WaterWaves.TileSize"/>
        </member>
        <member name="P:DigitalRune.Graphics.UserDefinedWaves.TileCenter">
            <summary>
            Gets or sets the center of the first tile in world space.
            </summary>
            <inheritdoc cref="P:DigitalRune.Graphics.WaterWaves.TileCenter"/>
        </member>
        <member name="P:DigitalRune.Graphics.UserDefinedWaves.IsTiling">
            <summary>
            Gets or sets a value indicating whether the displacement map can be tiled seamlessly
            across the water surface.
            </summary>
            <inheritdoc cref="P:DigitalRune.Graphics.WaterWaves.IsTiling"/>
        </member>
        <member name="T:DigitalRune.Graphics.Water">
            <summary>
            Defines the visual properties of a body of water, e.g. a river, a lake or an ocean.
            </summary>
            <remarks>
            <para>
            This class defines the appearance of a body of water. Two normal maps
            (<see cref="P:DigitalRune.Graphics.Water.NormalMap0"/> and <see cref="P:DigitalRune.Graphics.Water.NormalMap1"/>) define the wave ripple structure on
            the water surface. The normal maps are scrolled over the water surface to create the sense of
            an animated water surface.
            </para>
            <para>
            The water surface is rendered using a specular highlight, a reflection and the refracted
            scene under the water surface. Underwater is lit using light extinction and scattering,
            similar to exponential fog. <see cref="P:DigitalRune.Graphics.Water.UnderwaterFogDensity"/> defines the extinction
            properties which create the water color.
            </para>
            <para>
            <strong>Cloning:</strong> When the <see cref="T:DigitalRune.Graphics.Water"/> is cloned the normal map textures
            are not duplicated. The textures are copied by reference.
            </para>
            </remarks>
            <seealso cref="T:DigitalRune.Graphics.SceneGraph.WaterNode"/>
        </member>
        <member name="P:DigitalRune.Graphics.Water.NormalMap0">
            <summary>
            Gets or sets the first normal map.
            </summary>
            <value>The first normal map.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Water.NormalMap1">
            <summary>
            Gets or sets the second normal map.
            </summary>
            <value>The second normal map.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Water.NormalMap0Scale">
            <summary>
            Gets or sets the scale of the first normal map.
            </summary>
            <value>The scale of the first normal map. The default value is 1.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Water.NormalMap1Scale">
            <summary>
            Gets or sets the scale of the second normal map.
            </summary>
            <value>The scale of the second normal map. The default value is 1.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Water.NormalMap0Velocity">
            <summary>
            Gets or sets the scroll velocity of the first normal map.
            </summary>
            <value>The scroll velocity of the first normal map.</value>
            <remarks>
            This velocity defines the movement direction and speed of the normal map relative to the
            local space of the <see cref="T:DigitalRune.Graphics.SceneGraph.WaterNode"/>. The y component of this vector is usually
            ignored because water waves are only moving horizontally.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Water.NormalMap1Velocity">
            <summary>
            Gets or sets the scroll velocity of the second normal map.
            </summary>
            <value>The scroll velocity of the second normal map.</value>
            <inheritdoc cref="P:DigitalRune.Graphics.Water.NormalMap0Velocity"/>
        </member>
        <member name="P:DigitalRune.Graphics.Water.NormalMap0Strength">
            <summary>
            Gets or sets the strength of the first normal map.
            </summary>
            <value>The strength of the first normal map. The default value is 1.</value>
            <remarks>
            Modify this value to change the intensity of the normal maps. Lower values make the water
            surface smoother. The water surface is not influenced by the normal map when this value is
            0.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Water.NormalMap1Strength">
            <summary>
            Gets or sets the strength of the second normal map.
            </summary>
            <value>The strength of the second normal map. The default value is 1.</value>
            <inheritdoc cref="P:DigitalRune.Graphics.Water.NormalMap0Strength"/>
        </member>
        <member name="P:DigitalRune.Graphics.Water.SpecularColor">
            <summary>
            Gets or sets the tint color of the specular highlight.
            </summary>
            <value>The tint color of the specular highlight. The default value is (1, 1, 1).</value>
        </member>
        <member name="P:DigitalRune.Graphics.Water.SpecularPower">
            <summary>
            Gets or sets the specular exponent which defines the size of the specular highlight.
            </summary>
            <value>The specular exponent which defines the size of the specular highlight.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Water.ReflectionColor">
            <summary>
            Gets or sets the tint color of the reflection.
            </summary>
            <value>The tint color of the reflection. The default value is (1, 1, 1).</value>
        </member>
        <member name="P:DigitalRune.Graphics.Water.ReflectionDistortion">
            <summary>
            Gets or sets the intensity of distortion effects for any reflections.
            </summary>
            <value>
            The intensity of distortion effects for any reflections. The default value is 0.1.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Water.RefractionColor">
            <summary>
            Gets or sets the tint color of the refraction.
            </summary>
            <value>The tint color of the refraction. The default value is (1, 1, 1).</value>
        </member>
        <member name="P:DigitalRune.Graphics.Water.RefractionDistortion">
            <summary>
            Gets or sets the intensity of distortion effects for any refractions.
            </summary>
            <value>
            The intensity of distortion effects for any refractions. The default value is 0.1.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Water.UnderwaterFogDensity">
            <summary>
            Gets or sets the underwater fog density, which defines how far you can see underwater.
            </summary>
            <value>The underwater fog density for red, green and blue.</value>
            <remarks>
            If this value is high, the light extinction in the water is high. If this value is low,
            the water is more transparent. Natural water has a higher extinction of red, which creates
            blue/green water. 
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Water.FresnelBias">
            <summary>
            Gets or sets the bias for the Fresnel effect approximation.
            </summary>
            <value>The bias for the Fresnel effect approximation. The default value is 0.02.</value>
            <remarks>
            <see cref="P:DigitalRune.Graphics.Water.FresnelBias"/> is usually equal to 1 - <see cref="P:DigitalRune.Graphics.Water.FresnelScale"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Water.FresnelScale">
            <summary>
            Gets or sets the scale for the Fresnel effect approximation.
            </summary>
            <value>The scale for the Fresnel effect approximation. The default value is 0.98.</value>
            <inheritdoc cref="P:DigitalRune.Graphics.Water.FresnelBias"/>
        </member>
        <member name="P:DigitalRune.Graphics.Water.FresnelPower">
            <summary>
            Gets or sets the exponent for the Fresnel effect.
            </summary>
            <value>The exponent for the Fresnel effect. The default value is 5.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Water.IntersectionSoftness">
            <summary>
            Gets or sets the intersection softness.
            </summary>
            <value>The intersection softness. The default value is 0.5.</value>
            <remarks>
            The water effect fades out when the water surface is intersected by geometry. This avoids
            sharp water edges. The fade out effect depends on the distance from the water surface to
            the geometry. The <see cref="P:DigitalRune.Graphics.Water.IntersectionSoftness"/> defines the distance where the water
            effect fades out. If <see cref="P:DigitalRune.Graphics.Water.IntersectionSoftness"/> is 0.5, the water is fully visible
            when the distance to the underwater geometry is 0.5 world space units.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Water.WaterColor">
            <summary>
            Gets or sets the color of the water.
            </summary>
            <value>The color of the water.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Water.ScatterColor">
            <summary>
            Gets or sets the color/intensity of subsurface scattering effect.
            </summary>
            <value>The color/intensity of subsurface scattering effect.</value>
            <remarks>
            The upper parts of waves are usually lighter because some light enters the back side of the
            wave and comes back out at the front side. <see cref="P:DigitalRune.Graphics.Water.ScatterColor"/> determines the 
            intensity of this effect.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Water.FoamMap">
            <summary>
            Gets or sets the foam map.
            </summary>
            <value>The foam map.</value>
            <remarks>
            Foam is automatically blended to the water when the distance between the water surface and
            intersecting geometry is low (see <see cref="P:DigitalRune.Graphics.Water.FoamShoreIntersection"/> or at the top of high
            waves (see <see cref="P:DigitalRune.Graphics.Water.FoamCrestMin"/> and <see cref="P:DigitalRune.Graphics.Water.FoamCrestMax"/>).
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Water.FoamMapScale">
            <summary>
            Gets or sets the scale of foam map.
            </summary>
            <value>
            The scale of the foam map.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Water.FoamDistortion">
            <summary>
            Gets or sets a factor indicating how much foam is distorted by waves.
            </summary>
            <value>
            The factor indicating how much foam is distorted by waves.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Water.FoamColor">
            <summary>
            Gets or sets the color of the foam.
            </summary>
            <value>
            The color of the foam.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Water.FoamShoreIntersection">
            <summary>
            Gets or sets the amount of foam where the water intersects geometry (e.g. the shore).
            </summary>
            <value>
            The amount of foam where the water intersects geometry (e.g. the shore).
            </value>
            <remarks>
            Foam is automatically rendered where water intersects geometry, e.g. at the shore or
            where rocks intersect the water. <see cref="P:DigitalRune.Graphics.Water.FoamShoreIntersection"/> defines the 
            distance from the intersection up to which foam is rendered. For example, if 
            <see cref="P:DigitalRune.Graphics.Water.FoamShoreIntersection"/> is 0.5, then foam starts when the distance between
            the water surface an the geometry is 0.5 world space units.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Water.FoamCrestMin">
            <summary>
            Gets or sets the wave crest height where foam starts.
            </summary>
            <value>
            The wave crest height where foam starts
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Water.FoamCrestMax">
            <summary>
            Gets or sets the wave crest height where foam is fully visible.
            </summary>
            <value>
            The wave crest height where foam is fully visible.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Water.CausticsSampleCount">
            <summary>
            Gets or sets the number of samples used to compute caustics.
            </summary>
            <value>
            The number of samples used to compute caustics.
            </value>
            <remarks>
            <para>
            <strong>Important:</strong> Currently, the <see cref="T:DigitalRune.Graphics.Rendering.WaterRenderer"/> renders caustics only 
            for <see cref="T:DigitalRune.Graphics.SceneGraph.WaterNode"/>s with <see cref="T:DigitalRune.Graphics.WaterWaves"/>.
            </para>
            <para>
            Caustics are computed by sampling the water normal map of <see cref="T:DigitalRune.Graphics.WaterWaves"/>. The
            shader takes N x N samples where N is <see cref="P:DigitalRune.Graphics.Water.CausticsSampleCount"/>. 
            <see cref="P:DigitalRune.Graphics.Water.CausticsSampleOffset"/> defines the distance between samples in world space 
            units. <see cref="P:DigitalRune.Graphics.Water.CausticsDistortion"/> defines how much the normal maps influence the
            caustics computation. <see cref="P:DigitalRune.Graphics.Water.CausticsPower"/> defines the sharpness of the caustics;
            very similar to the specular power/exponent of Phong shading.
            <see cref="P:DigitalRune.Graphics.Water.CausticsIntensity"/> defines max brightness of the caustics.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Water.CausticsSampleOffset">
            <summary>
            Gets or sets the caustics sample offset.
            </summary>
            <value>
            The caustics sample offset.
            </value>
            <inheritdoc cref="P:DigitalRune.Graphics.Water.CausticsSampleCount"/>
        </member>
        <member name="P:DigitalRune.Graphics.Water.CausticsDistortion">
            <summary>
            Gets or sets the caustics distortion.
            </summary>
            <value>
            The caustics distortion.
            </value>
            <inheritdoc cref="P:DigitalRune.Graphics.Water.CausticsSampleCount"/>
        </member>
        <member name="P:DigitalRune.Graphics.Water.CausticsPower">
            <summary>
            Gets or sets the sharpness of caustics
            </summary>
            <value>
            The sharpness of caustics. 
            </value>
            <inheritdoc cref="P:DigitalRune.Graphics.Water.CausticsSampleCount"/>
        </member>
        <member name="P:DigitalRune.Graphics.Water.CausticsIntensity">
            <summary>
            Gets or sets the maximal brightness of caustics.
            </summary>
            <value>
            The maximal brightness of caustics.
            </value>
            <inheritdoc cref="P:DigitalRune.Graphics.Water.CausticsSampleCount"/>
        </member>
        <member name="M:DigitalRune.Graphics.Water.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Water"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Water.Clone">
            <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.Water"/> that is a clone (deep copy) of the current instance.
            </summary>
            <returns>
            A new <see cref="T:DigitalRune.Graphics.Water"/> that is a clone (deep copy) of the current instance.
            </returns>
            <remarks>
            <para>
            See class documentation of <see cref="T:DigitalRune.Graphics.Water"/> (Section "Cloning") for more information 
            about cloning.
            </para>
            <para>
            <strong>Notes to Inheritors:</strong> The method <see cref="M:DigitalRune.Graphics.Water.Clone"/> calls 
            <see cref="M:DigitalRune.Graphics.Water.CreateInstanceCore"/> which is responsible for creating a new instance of the 
            <see cref="T:DigitalRune.Graphics.Water"/> derived class and <see cref="M:DigitalRune.Graphics.Water.CloneCore(DigitalRune.Graphics.Water)"/> to create a copy of the 
            current instance. Classes that derive from <see cref="T:DigitalRune.Graphics.Water"/> need to implement 
            <see cref="M:DigitalRune.Graphics.Water.CreateInstanceCore"/> and <see cref="M:DigitalRune.Graphics.Water.CloneCore(DigitalRune.Graphics.Water)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Water.CreateInstance">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Water"/> class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            This is a private method, and the actual object-specific implementations for the behavior 
            are dependent on the override implementation of the <see cref="T:DigitalRune.Graphics.Water"/> method, which this 
            method calls internally. 
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cannot clone <see cref="T:DigitalRune.Graphics.Water"/>. A derived class does not implement 
            <see cref="M:DigitalRune.Graphics.Water.CreateInstanceCore"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Water.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Graphics.Water"/>
            derived class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            <para>
            Do not call this method directly (except when calling base in an implementation). This
            method is called internally by the <see cref="M:DigitalRune.Graphics.Water.Clone"/> method whenever a new instance of the
            <see cref="T:DigitalRune.Graphics.Water"/> derived class must implement this method. A typical implementation is to
            simply call the default constructor and return the result.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Water.CloneCore(DigitalRune.Graphics.Water)">
            <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Water"/>.
            </summary>
            <param name="source">The object to clone.</param>
            <remarks>
            <strong>Notes to Inheritors:</strong> Every <see cref="T:DigitalRune.Graphics.Water"/> derived class must implement
            this method. A typical implementation is to call <c>base.CloneCore(this)</c> to copy all 
            properties of the base class and then copy all properties of the derived class.
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.WaterFlow">
            <summary>
            Defines the direction and speed of water flow.
            </summary>
            <remarks>
            <para>
            This class can be used to make the water of a <see cref="T:DigitalRune.Graphics.SceneGraph.WaterNode"/> flow in user-defined
            directions and with user-defined speed.
            </para>
            <para>
            <strong>Defining Flow:</strong><br/>
            Water flow is defined by three influences:
            <list type="bullet">
            <item>
            <see cref="P:DigitalRune.Graphics.WaterFlow.BaseVelocity"/> defines a uniform constant flow which is applied to the whole
            water surface.
            </item>
            <item>
            Water flow can also be defined by surface slope of the water surface. The slope is defined by 
            the vertex normals of the water <see cref="P:DigitalRune.Graphics.SceneGraph.WaterNode.Volume"/>. Water is usually running 
            downhill. <see cref="P:DigitalRune.Graphics.WaterFlow.SurfaceSlopeSpeed"/> defines the speed at which water flows down an
            inclined water surface.
            </item>
            <item>
            A <see cref="P:DigitalRune.Graphics.WaterFlow.FlowMap"/> texture can be used to define a detailed, complex flow pattern.
            <see cref="P:DigitalRune.Graphics.WaterFlow.FlowMapSpeed"/> scales the speed defined by the flow map.
            </item>
            </list>
            </para>
            <para>
            <strong>Speed and Normal Strength Limits:</strong><br/>
            Flow speed from all three influences (base velocity, surface slope and flow map) is summed up
            and clamped to <see cref="P:DigitalRune.Graphics.WaterFlow.MaxSpeed"/>. The intensity of normal maps should be reduced if the
            water moves faster. The normal map strength have full strength when the flow speed is
            zero. The normal map strength is reduced to <see cref="P:DigitalRune.Graphics.WaterFlow.MinStrength"/> when the flow speed
            reaches its maximum (<see cref="P:DigitalRune.Graphics.WaterFlow.MaxSpeed"/>).
            </para>
            <para>
            <strong>Reference frame:</strong><br/>
            The <see cref="P:DigitalRune.Graphics.WaterFlow.BaseVelocity"/> is relative to the local space of the <see cref="T:DigitalRune.Graphics.SceneGraph.WaterNode"/>.
            The <see cref="P:DigitalRune.Graphics.WaterFlow.FlowMap"/> is also relative to the <see cref="T:DigitalRune.Graphics.SceneGraph.WaterNode"/>; it is aligned with
            the local axes of the node. It fills the local AABB, and the map is always projected top-down.
            </para>
            <para>
            <strong>Rendering Flow:</strong><br/>
            Water flow is created by scrolling the normal maps of the water into the flow direction. If
            two points on the water surface have a different flow direction or flow speed, then this
            creates distortion. To hide the distortions, two layers of normal maps are alternated:
            One normal map layer fades in, is scrolled and before it gets too distorted it fades out. At
            the same time a second normal map layer is added but with a half cycle offset.
            <see cref="P:DigitalRune.Graphics.WaterFlow.CycleDuration"/> defines the cycle period. The normal map cycling can cause pulsing
            artifacts. Noise can be used to hide this artifact, by giving each point on the water surface
            a different cycle offset. <see cref="P:DigitalRune.Graphics.WaterFlow.NoiseMapScale"/> defines the scale of the applied noise
            texture in x and z direction. <see cref="P:DigitalRune.Graphics.WaterFlow.NoiseMapStrength"/> defines how much noise is applied
            to each pixel (= how much a cycle can be offset). The noise map itself is always generated
            automatically.
            </para>
            <para>
            <strong>Limitations:</strong> Currently, the <see cref="T:DigitalRune.Graphics.Rendering.WaterRenderer"/> does not render
            <see cref="T:DigitalRune.Graphics.WaterFlow"/> when the <see cref="T:DigitalRune.Graphics.SceneGraph.WaterNode"/> also uses <see cref="T:DigitalRune.Graphics.WaterWaves"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.WaterFlow.BaseVelocity">
            <summary>
            Gets or sets the uniform, constant velocity applied to the whole water surface.
            </summary>
            <value>
            The uniform, constant velocity applied to the whole water surface.
            The default value is (0, 0, 0).
            </value>
            <remarks>
            The y component of the velocity is usually irrelevant because water flows only horizontally
            across the water surface.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.WaterFlow.SurfaceSlopeSpeed">
            <summary>
            Gets or sets the scale factor for surface-slope-based flow.
            </summary>
            <value>The scale factor for surface-slope-based flow.</value>
            <remarks>
            Vertex normals of the water <see cref="P:DigitalRune.Graphics.SceneGraph.WaterNode.Volume"/> can be used to define flow.
            Water is always flowing downhill. <see cref="P:DigitalRune.Graphics.WaterFlow.SurfaceSlopeSpeed"/> defines the speed at which
            water flows down an inclined water surface.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.WaterFlow.FlowMap">
            <summary>
            Gets or sets the texture which defines the flow direction and speed.
            </summary>
            <value>The texture which defines the flow direction and speed.</value>
            <remarks>
            <para>
            The RG channels stores horizontal flow direction. The B channel stores the
            flow speed. The water pixel shader will apply the flow map flow like this:
            </para>
            <para>
            Given a flow map value f = (r, g, b), the 3D flow velocity is 
              <c>flowVelocity.xz = (f.rg * 2 - 1) * f.b * FlowMapSpeed</c>.
            (The component flowVelocity.y is always 0.)
            </para>
            <para>
            The <see cref="P:DigitalRune.Graphics.WaterFlow.FlowMap"/> is also relative to the <see cref="T:DigitalRune.Graphics.SceneGraph.WaterNode"/>; it is aligned
            with the local axes of the node. It fills the local AABB, and the map is always projected
            top-down.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.WaterFlow.FlowMapSpeed">
            <summary>
            Gets or sets the scale factor for flow-map-based flow.
            </summary>
            <value>The scale factor for flow-map-based flow.</value>
        </member>
        <member name="P:DigitalRune.Graphics.WaterFlow.CycleDuration">
            <summary>
            Gets or sets the cycle duration in seconds of a normal map layer.
            </summary>
            <value>The cycle duration in seconds of a normal map layer</value>
            <remarks>
            <para>
            Flow animation is usually created by moving a normal map layer over the water plane. If
            different pixels move the water plane in different directions, the normal map gets
            distorted. Therefore, the animation has to alternate between two normal map layers. Each
            normal map layer is moved and reset while the other normal map is visible.
            <see cref="P:DigitalRune.Graphics.WaterFlow.CycleDuration"/> defines how long each normal map layer is shown before it is
            reset. Too short cycle times can create an unwanted "pulsing" effect. Too long cycle times
            can create unwanted visible distortions.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.WaterFlow.NoiseMapScale">
            <summary>
            Gets or sets the world space scale of the noise map.
            </summary>
            <value>The world space scale of the noise map.</value>
            <remarks>
            Noise can be used to remove unwanted visual artifacts of flow rendering. A noise value is
            applied to each surface pixel. <see cref="P:DigitalRune.Graphics.WaterFlow.NoiseMapScale"/> defines the horizontal frequency
            of the noise. Increasing <see cref="P:DigitalRune.Graphics.WaterFlow.NoiseMapScale"/> stretches the noise, reducing the
            frequency.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.WaterFlow.NoiseMapStrength">
            <summary>
            Gets or sets the noise strength.
            </summary>
            <value>The noise strength.</value>
            <remarks>
            Noise can be used to remove unwanted visual artifacts of flow rendering. A noise value is
            applied to each surface pixel. <see cref="P:DigitalRune.Graphics.WaterFlow.NoiseMapStrength"/> defines how much noise is
            applied per pixel.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.WaterFlow.MaxSpeed">
            <summary>
            Gets or sets the maximal speed limit.
            </summary>
            <value>The maximal speed limit.</value>
            <remarks>
            Flow speed from all three influences (base velocity, surface slope and flow map) is summed
            up and clamped to <see cref="P:DigitalRune.Graphics.WaterFlow.MaxSpeed"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.WaterFlow.MinStrength">
            <summary>
            Gets or sets the minimum strength of the normal maps.
            </summary>
            <value>The minimum strength of the normal maps.</value>
            <remarks>
            The intensity of normal maps should be reduced if the water moves faster. The normal maps
            have full strength when the flow speed is zero. The normal map strength is reduced
            to <see cref="P:DigitalRune.Graphics.WaterFlow.MinStrength"/> when the flow speed reaches its maximum (<see cref="P:DigitalRune.Graphics.WaterFlow.MaxSpeed"/>).
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.WaterFlow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.WaterFlow"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.WaterFlow.Dispose">
            <summary>
            Releases all resources used by an instance of the <see cref="T:DigitalRune.Graphics.WaterFlow"/> class.
            </summary>
            <remarks>
            This method calls the virtual <see cref="M:DigitalRune.Graphics.WaterFlow.Dispose(System.Boolean)"/> method, passing in 
            <see langword="true"/>, and then suppresses finalization of the instance.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.WaterFlow.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.WaterFlow"/> class 
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources; 
            <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:DigitalRune.Graphics.WaterWaves">
            <summary>
            Defines a displacement of the water surface to create waves.
            </summary>
            <remarks>
            <para>
            Water waves are defined using a <see cref="P:DigitalRune.Graphics.WaterWaves.DisplacementMap"/> and a <see cref="P:DigitalRune.Graphics.WaterWaves.NormalMap"/>.
            These maps are used to deform the water surface (usually by displacing the vertices in the
            vertex shader).
            </para>
            <para>
            <see cref="P:DigitalRune.Graphics.WaterWaves.DisplacementMap"/> and <see cref="P:DigitalRune.Graphics.WaterWaves.NormalMap"/> are expected to have the same
            resolution. The <see cref="P:DigitalRune.Graphics.WaterWaves.DisplacementMap"/> can be <see langword="null"/> if only the normal
            map should be used.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.WaterWaves.DisplacementMap">
            <summary>
            Gets (or sets) the displacement map.
            </summary>
            <value>The displacement map.</value>
            <remarks>
            The R channel contains the x displacement. The G channel contains the y (height)
            displacement. The B channel contains the z displacement.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.WaterWaves.NormalMap">
            <summary>
            Gets (or sets) the normal map (using standard encoding, see remarks).
            </summary>
            <value>The normal map (using standard encoding, see remarks).</value>
            <remarks>
            The normal map value will be decoded in the shader using 
            <c>normal = tex2D(NormalSampler, texCoord) * 2 - 1</c>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.WaterWaves.TileSize">
            <summary>
            Gets (or sets) the size of a single tile (one texture repetition) in world space.
            </summary>
            <value>The size of a single tile (one texture repetition) in world space.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The tile size must be positive and finite.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.WaterWaves.TileCenter">
            <summary>
            Gets (or sets) the center of the first tile in world space.
            </summary>
            <value>
            The center of the first tile in world space. (Only x and z are relevant. y is ignored.)
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.WaterWaves.IsTiling">
            <summary>
            Gets (or sets) a value indicating whether the displacement map can be tiled seamlessly
            across the water surface.
            </summary>
            <value>
            <see langword="true"/> if the texture repeats seamlessly; otherwise,
            <see langword="false"/>.
            </value>
        </member>
        <member name="M:DigitalRune.Graphics.WaterWaves.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.WaterWaves"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.WaterWaves.Dispose">
            <summary>
            Releases all resources used by an instance of the <see cref="T:DigitalRune.Graphics.WaterWaves"/> class.
            </summary>
            <remarks>
            This method calls the virtual <see cref="M:DigitalRune.Graphics.WaterWaves.Dispose(System.Boolean)"/> method, passing in 
            <see langword="true"/>, and then suppresses finalization of the instance.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.WaterWaves.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.WaterWaves"/> class
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources; 
            <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:DigitalRune.Graphics.DelegateGraphicsScreen">
            <summary>
            A <see cref="T:DigitalRune.Graphics.GraphicsScreen"/> that calls user-defined methods to update and render the 
            screen.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.DelegateGraphicsScreen.UpdateCallback">
            <summary>
            Gets or sets the update callback method.
            </summary>
            <value>The update callback method. (Can be <see langword="null"/>.)</value>
            <remarks>
            This method is called by the <see cref="T:DigitalRune.Graphics.DelegateGraphicsScreen"/> when 
            <see cref="M:DigitalRune.Graphics.DelegateGraphicsScreen.OnUpdate(System.TimeSpan)"/> is called. The second parameter is the elapsed time since the last 
            frame.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.DelegateGraphicsScreen.RenderCallback">
            <summary>
            Gets or sets the render callback method.
            </summary>
            <value>The render callback method. (Can be <see langword="null"/>.)</value>
            <remarks>
            This method is called by the <see cref="T:DigitalRune.Graphics.DelegateGraphicsScreen"/> when 
            <see cref="M:DigitalRune.Graphics.DelegateGraphicsScreen.OnRender(DigitalRune.Graphics.RenderContext)"/> is called.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.DelegateGraphicsScreen.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.DelegateGraphicsScreen"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
        </member>
        <member name="M:DigitalRune.Graphics.DelegateGraphicsScreen.#ctor(DigitalRune.Graphics.IGraphicsService,System.Action{DigitalRune.Graphics.GraphicsScreen,System.TimeSpan},System.Action{DigitalRune.Graphics.RenderContext})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.DelegateGraphicsScreen"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <param name="updateCallback">
            The update callback method. (Can be <see langword="null"/>.)
            </param>
            <param name="renderCallback">
            The render callback method. (Can be <see langword="null"/>.)
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.DelegateGraphicsScreen.OnUpdate(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.DelegateGraphicsScreen.OnRender(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.GraphicsException">
            <summary>
            The exception that is raised when an error occurs in DigitalRune Graphics.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsException.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.GraphicsException"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.GraphicsException"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.GraphicsException"/> class with a specified
            error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.GraphicsException"/> class with a specified
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">
            The exception that is the cause of the current exception, or <see langword="null"/> if no
            inner exception is specified.
            </param>
        </member>
        <member name="T:DigitalRune.Graphics.GraphicsManager">
            <summary>
            Manages graphics-related objects, like graphics screens and presentation targets, and graphics
            resources.
            </summary>
            <remarks>
            <para>
            This class implements the <see cref="T:DigitalRune.Graphics.IGraphicsService"/> for a 3D application or game. (See
            also <see cref="T:DigitalRune.Graphics.IGraphicsService"/> for more information.)
            </para>
            <para>
            The method <see cref="M:DigitalRune.Graphics.GraphicsManager.Update(System.TimeSpan)"/> must be called once per frame to update the graphics service
            and the registered graphics screens. The methods <see cref="M:DigitalRune.Graphics.GraphicsManager.Render(System.Boolean)"/> or
            <see cref="M:DigitalRune.Graphics.GraphicsManager.Render(DigitalRune.Graphics.Interop.IPresentationTarget)"/> must be called to render the screens.
            <see cref="M:DigitalRune.Graphics.GraphicsManager.Render(System.Boolean)"/> renders the screens to the back buffer; the XNA game will
            automatically display this back buffer in the game window.
            </para>
            <para>
            The method <see cref="M:DigitalRune.Graphics.GraphicsManager.Render(DigitalRune.Graphics.Interop.IPresentationTarget)"/> or
            <see cref="M:DigitalRune.Graphics.GraphicsManager.Render(DigitalRune.Graphics.Interop.IPresentationTarget,System.Collections.Generic.IList{DigitalRune.Graphics.GraphicsScreen})"/> can be used to display
            graphics in a Windows Forms or WPF application. These methods render the graphics screens into
            a <i>presentation target</i>. A presentation target (see interface
            <see cref="T:DigitalRune.Graphics.Interop.IPresentationTarget"/>) is a Windows Forms control or a WPF control where the
            graphics can be displayed.
            </para>
            <para>
            <strong>Windows Forms:</strong>
            Windows Forms applications can host a <see cref="!:FormsPresentationTarget"/>. The methods
            <see cref="M:DigitalRune.Graphics.GraphicsManager.Render(DigitalRune.Graphics.Interop.IPresentationTarget)"/> or
            <see cref="M:DigitalRune.Graphics.GraphicsManager.Render(DigitalRune.Graphics.Interop.IPresentationTarget,System.Collections.Generic.IList{DigitalRune.Graphics.GraphicsScreen})"/> can be used to render a scene
            into this presentation target. The method first renders the graphics screens into the back
            buffer and then displays the result in the specified presentation target. The method
            <see cref="M:DigitalRune.Graphics.GraphicsManager.Present(DigitalRune.Graphics.Interop.IPresentationTarget)"/> can be used to display the current back buffer content in a presentation
            target (without re-rendering the screens).
            </para>
            <para>
            <strong>WPF:</strong>
            WPF applications can host an <see cref="!:ElementPresentationTarget"/> (legacy) or a
            <see cref="!:D3DImagePresentationTarget"/> (recommended, MonoGame only).
            The methods <see cref="M:DigitalRune.Graphics.GraphicsManager.Render(DigitalRune.Graphics.Interop.IPresentationTarget)"/> or
            <see cref="M:DigitalRune.Graphics.GraphicsManager.Render(DigitalRune.Graphics.Interop.IPresentationTarget,System.Collections.Generic.IList{DigitalRune.Graphics.GraphicsScreen})"/> can be used to render a scene
            directly into a <see cref="!:D3DImagePresentationTarget"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.GraphicsManager.IsDisposed">
            <summary>
            Gets a value indicating whether this instance has been disposed of.
            </summary>
            <value>
            <see langword="true"/> if this instance has been disposed of; otherwise,
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.GraphicsManager.Content">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Graphics.GraphicsManager.RenderTargetPool">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Graphics.GraphicsManager.GraphicsDevice">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Graphics.GraphicsManager.Screens">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Graphics.GraphicsManager.GameForm">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Graphics.GraphicsManager.PresentationTargets">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Graphics.GraphicsManager.EffectInterpreters">
            <inheritdoc/>
            <remarks>
            <para>
            Per default, the collection contains a <see cref="T:DigitalRune.Graphics.Effects.StockEffectInterpreter"/>,
            a <see cref="T:DigitalRune.Graphics.Effects.DefaultEffectInterpreter"/>, a <see cref="T:DigitalRune.Graphics.Effects.SceneEffectInterpreter"/> and a 
            <see cref="T:DigitalRune.Graphics.Effects.Dxsas08EffectInterpreter"/>.
            </para>
            <para>
            Effect interpreters at the start of the collection have higher priority.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.GraphicsManager.EffectBinders">
            <inheritdoc/>
            <remarks>
            <para>
            Per default, the collection contains a <see cref="T:DigitalRune.Graphics.Effects.StockEffectBinder"/>, a
            <see cref="T:DigitalRune.Graphics.Effects.DefaultEffectBinder"/>, and a <see cref="T:DigitalRune.Graphics.Effects.SceneEffectBinder"/>.
            </para>
            <para>
            Effect binders at the start of the collection have higher priority.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.GraphicsManager.Data">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Graphics.GraphicsManager.Time">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Graphics.GraphicsManager.DeltaTime">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Graphics.GraphicsManager.Frame">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsManager.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.GameWindow,Microsoft.Xna.Framework.Content.ContentManager)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.GraphicsManager"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.GraphicsManager"/> class.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="gameWindow">
            The game window in Windows. <see langword="null"/> on non-Windows platforms (Xbox 360, 
            Windows Phone 7, etc.).
            </param>
            <param name="content">
            The content manager that can be used to load predefined DigitalRune Graphics content (e.g. 
            post-processing effects, lookup textures, etc.).
            </param>
            <remarks>
            Use this constructor in Windows if <see cref="P:DigitalRune.Graphics.GraphicsManager.PresentationTargets"/> are used.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/> or <paramref name="content"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsManager.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.GraphicsManager"/> class.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="content">
            The content manager that can be used to load predefined DigitalRune Graphics content
            (e.g. post-processing effects, lookup textures, etc.).
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsManager.Dispose">
            <summary>
            Releases all resources used by an instance of the <see cref="T:DigitalRune.Graphics.GraphicsManager"/> class.
            </summary>
            <remarks>
            This method calls the virtual <see cref="M:DigitalRune.Graphics.GraphicsManager.Dispose(System.Boolean)"/> method, passing in
            <see langword="true"/>, and then suppresses finalization of the instance.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsManager.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.GraphicsManager"/> class
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources;
            <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsManager.CreateRenderContext">
            <summary>
            Creates a new render context.
            </summary>
            <returns>The render context.</returns>
            <remarks>
            <strong>Notes to Inheritors:</strong> Derived classes can override this method to return a
            custom render context. The base implementation returns a new instance of 
            <see cref="T:DigitalRune.Graphics.RenderContext"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsManager.OnPresentationTargetsChanged(System.Object,DigitalRune.Collections.CollectionChangedEventArgs{DigitalRune.Graphics.Interop.IPresentationTarget})">
            <summary>
            Called when presentation targets are added or removed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">
            The <see cref="T:DigitalRune.Collections.CollectionChangedEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsManager.Update(System.TimeSpan)">
            <summary>
            Updates the graphics service and the registered graphics screens.
            </summary>
            <param name="deltaTime">The elapsed time since the last update.</param>
            <remarks>
            <para>
            This methods
            </para>
            <list type="bullet">
            <item>updates <see cref="P:DigitalRune.Graphics.GraphicsManager.DeltaTime"/>,</item>
            <item>increments <see cref="P:DigitalRune.Graphics.GraphicsManager.Frame"/>,</item>
            <item>
            updates the graphics screens, i.e. calls <see cref="M:DigitalRune.Graphics.GraphicsScreen.Update(System.TimeSpan)"/> of all graphics
            screens registered in the <see cref="P:DigitalRune.Graphics.GraphicsManager.Screens"/> collection
            </item>
            <item>and performs other internal tasks.</item>
            </list>
            <para>
            This method needs to be called once per frame before calling <see cref="M:DigitalRune.Graphics.GraphicsManager.Render(System.Boolean)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsManager.Render(System.Boolean)">
            <overloads>
            <summary>
            Renders the graphics screens to the back buffer or another presentation target.
            </summary>
            </overloads>
            
            <summary>
            Renders the graphics screens to the back buffer.
            </summary>
            <param name="forceRendering">
            If set to <see langword="true"/> the screens are rendered even if the game window is
            currently hidden. If set to <see langword="false"/>, the rendering is skipped if the game
            window is currently not visible.
            </param>
            <returns>
            <see langword="true"/> if the graphics screens were rendered; <see langword="false"/> if 
            rendering was skipped because the game window is currently not visible.
            </returns>
            <remarks>
            The graphics screens are rendered to the back buffer using the viewport which is currently
            set in the graphics device.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsManager.Render(DigitalRune.Graphics.Interop.IPresentationTarget)">
            <summary>
            Renders the registered graphics screens into the given presentation target.
            </summary>
            <param name="presentationTarget">The presentation target.</param>
            <returns>
            <see langword="true"/> if the graphics screens where rendered; <see langword="false"/> if
            rendering was skipped because the presentation target is currently not visible or invalid.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="presentationTarget"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsManager.Render(DigitalRune.Graphics.Interop.IPresentationTarget,System.Collections.Generic.IList{DigitalRune.Graphics.GraphicsScreen})">
            <summary>
            Renders the specified graphics screens into the given presentation target.
            </summary>
            <param name="presentationTarget">The presentation target.</param>
            <param name="screens">The graphics screens to be rendered.</param>
            <returns>
            <see langword="true"/> if the graphics screens where rendered; <see langword="false"/> if
            rendering was skipped because the presentation target is currently not visible or invalid.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="presentationTarget"/> or <paramref name="screens"/> is
            <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsManager.Present(DigitalRune.Graphics.Interop.IPresentationTarget)">
            <summary>
            Presents the current back buffer target into the specified presentation target. (Windows
            Forms only!)
            </summary>
            <param name="presentationTarget">The presentation target.</param>
            <returns>
            <see langword="true"/> if the back buffer was presented successfully; 
            <see langword="false"/> if the operation was skipped because the presentation target is 
            currently not visible or invalid.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="presentationTarget"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsManager.RenderScreens(System.Collections.Generic.IList{DigitalRune.Graphics.GraphicsScreen})">
            <summary>
            Renders all visible <see cref="T:DigitalRune.Graphics.GraphicsScreen" />s.
            </summary>
            <param name="screens">The graphics screens.</param>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsManager.GetIndexOfFirstVisibleScreen(System.Collections.Generic.List{DigitalRune.Graphics.GraphicsScreen})">
            <summary>
            Gets the index of first (backmost) visible graphics screen.
            </summary>
            <param name="screens">The graphics screens.</param>
            <returns>
            The index of the visible graphics screen. (The returned index is a conservative value.
            <see cref="P:DigitalRune.Graphics.GraphicsScreen.IsVisible" /> should be checked for all graphics screens.)
            </returns>
        </member>
        <member name="T:DigitalRune.Graphics.GraphicsResourceEx`1">
            <summary>
            Stores additional data for a graphics resource.
            </summary>
            <typeparam name="T">The type of graphics resource.</typeparam>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Graphics.GraphicsResourceEx`1"/> represents additional information attached to a graphics
            resource. For example: The <see cref="T:DigitalRune.Graphics.Effects.EffectEx"/> extends the <see cref="T:Microsoft.Xna.Framework.Graphics.Effect"/>.
            </para>
            <para>
            The <see cref="T:DigitalRune.Graphics.GraphicsResourceEx`1"/> is stored in the <see cref="P:Microsoft.Xna.Framework.Graphics.GraphicsResource.Tag"/>
            property. Note that accessing the <see cref="P:Microsoft.Xna.Framework.Graphics.GraphicsResource.Tag"/> property is slow because
            XNA internally uses some complex store instead of simple backing fields. It is therefore
            recommended to cache the reference to the <see cref="T:DigitalRune.Graphics.GraphicsResourceEx`1"/> object where
            needed!
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.GraphicsResourceEx`1.Id">
            <summary>Temporary ID set during rendering.</summary>
        </member>
        <member name="P:DigitalRune.Graphics.GraphicsResourceEx`1.Resource">
            <summary>
            Gets the graphics resource.
            </summary>
            <value>The graphics resource.</value>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsResourceEx`1.Initialize(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes additional information for a graphics resource.
            </summary>
            <param name="graphicsService">The graphics service.</param>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsResourceEx`1.GetOrCreate``1(`0,DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Gets or creates the <see cref="T:DigitalRune.Graphics.GraphicsResourceEx`1"/> object for a graphics resource.
            </summary>
            <typeparam name="TEx">The derived type.</typeparam>
            <param name="resource">The graphics resource.</param>
            <param name="graphicsService">The graphics service. Can be <see langword="null"/>.</param>
            <returns>
            The additional information attached to <paramref name="resource"/>.
            </returns>
            <exception cref="T:DigitalRune.Graphics.GraphicsException">
            The <see cref="P:Microsoft.Xna.Framework.Graphics.GraphicsResource.Tag"/> property is already used.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.GraphicsScreen">
            <summary>
            Provides the base class for graphics screens, which implement the rendering pipeline and draw 
            game content.
            </summary>
            <remarks>
            <para>
            A graphics screen represents a layer in a 3D application. Multiple screens might be stacked on 
            one another, for example: 
            <list type="bullet">
            <item>
            <description>
            The back (first) screen renders a 3D world.
            </description>
            </item>
            <item>
            <description>
            In front of the first screen is another screen that renders the HUD.
            </description>
            </item>
            <item>
            <description>
            In front of these layers is a graphics screen that renders a GUI. For example an 
            "Options Dialog".
            </description>
            </item>
            </list>
            </para>
            <para>
            To display a graphics screen it must be added to a <see cref="T:DigitalRune.Graphics.IGraphicsService"/> (see 
            property <see cref="P:DigitalRune.Graphics.IGraphicsService.Screens"/>). The graphics service renders screens back to
            front.
            </para>
            <para>
            Each class that derives from <see cref="T:DigitalRune.Graphics.GraphicsScreen"/> can override the methods 
            <see cref="M:DigitalRune.Graphics.GraphicsScreen.OnUpdate(System.TimeSpan)"/> and <see cref="M:DigitalRune.Graphics.GraphicsScreen.OnRender(DigitalRune.Graphics.RenderContext)"/>. <see cref="M:DigitalRune.Graphics.GraphicsScreen.OnUpdate(System.TimeSpan)"/> is usually called 
            once per frame and the screen can update its internal state in this method. 
            <see cref="M:DigitalRune.Graphics.GraphicsScreen.OnUpdate(System.TimeSpan)"/> is called by the <see cref="T:DigitalRune.Graphics.GraphicsManager"/> in its 
            <see cref="M:DigitalRune.Graphics.GraphicsManager.Update(System.TimeSpan)"/> method. 
            </para>
            <para>
            Each screen implements its own rendering pipeline by overriding <see cref="M:DigitalRune.Graphics.GraphicsScreen.OnRender(DigitalRune.Graphics.RenderContext)"/>. That 
            means, a screen that renders a 3D world can implement a different render pipeline than a 
            screen that draws the HUD or a GUI on top. Each graphics screen can use its own type of scene 
            management. <see cref="M:DigitalRune.Graphics.GraphicsScreen.OnRender(DigitalRune.Graphics.RenderContext)"/> is called by the <see cref="T:DigitalRune.Graphics.GraphicsManager"/> when one of 
            its <strong>Render</strong>-methods is called. Special notes: If a screen is fully covered by 
            another screen, the graphics service might not call <see cref="M:DigitalRune.Graphics.GraphicsScreen.OnRender(DigitalRune.Graphics.RenderContext)"/>. On the other hand, 
            if the application has several <see cref="T:DigitalRune.Graphics.Interop.IPresentationTarget"/>s, it can happen that 
            <see cref="M:DigitalRune.Graphics.GraphicsScreen.OnRender(DigitalRune.Graphics.RenderContext)"/> is called several times per frame. 
            </para>
            <para>
            <see cref="M:DigitalRune.Graphics.GraphicsScreen.OnUpdate(System.TimeSpan)"/> and <see cref="M:DigitalRune.Graphics.GraphicsScreen.OnRender(DigitalRune.Graphics.RenderContext)"/> are usually not called in a frame if
            the screen is invisible (e.g. if <see cref="P:DigitalRune.Graphics.GraphicsScreen.IsVisible"/> is <see langword="false"/> or
            if the screen is totally covered by another screen).
            </para>
            <para>
            The property <see cref="P:DigitalRune.Graphics.GraphicsScreen.Coverage"/> indicates whether a screen covers the entire view or 
            whether a screen is partially transparent. The property needs to be set by each graphics
            screen depending on the content which is going to be rendered. The graphics service reads the 
            property to determine which screens need to be rendered. 
            </para>
            </remarks>
            <seealso cref="T:DigitalRune.Graphics.GraphicsScreenCollection"/>
            <seealso cref="T:DigitalRune.Graphics.GraphicsManager"/>
        </member>
        <member name="P:DigitalRune.Graphics.GraphicsScreen.GraphicsService">
            <summary>
            Gets the graphics service.
            </summary>
            <value>The graphics service.</value>
        </member>
        <member name="P:DigitalRune.Graphics.GraphicsScreen.Name">
            <summary>
            Gets or sets the name of this graphics screen.
            </summary>
            <value>
            The name of the graphics screen. The default value is <see langword="null"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.GraphicsScreen.Coverage">
            <summary>
            Gets or sets a value indicating whether the screen covers the entire view or only a part of 
            it.
            </summary>
            <value>
            The <see cref="T:DigitalRune.Graphics.GraphicsScreenCoverage"/>. When not sure what to return, use
            <see cref="F:DigitalRune.Graphics.GraphicsScreenCoverage.Partial"/> (default value).
            </value>
            <remarks>
            This property is a hint that indicates whether other <see cref="T:DigitalRune.Graphics.GraphicsScreen"/>s that lie 
            in the background need to be rendered. When <see cref="P:DigitalRune.Graphics.GraphicsScreen.Coverage"/> is set to 
            <see cref="F:DigitalRune.Graphics.GraphicsScreenCoverage.Partial"/> screens in the background are rendered first.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.GraphicsScreen.IsVisible">
            <summary>
            Gets or sets a value indicating whether this instance is visible.
            </summary>
            <value>
            <see langword="true"/> if this instance is visible; otherwise, <see langword="false"/>.
            The default value is <see langword="true"/>.
            </value>
            <remarks>
            If <see cref="P:DigitalRune.Graphics.GraphicsScreen.IsVisible"/> is false, <see cref="M:DigitalRune.Graphics.GraphicsScreen.OnUpdate(System.TimeSpan)"/> and <see cref="M:DigitalRune.Graphics.GraphicsScreen.OnRender(DigitalRune.Graphics.RenderContext)"/>
            are not called.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.GraphicsScreen.RenderPreviousScreensToTexture">
            <summary>
            Gets or sets a value indicating whether the previous graphics screens should render into an
            off-screen render target.
            </summary>
            <value>
            <see langword="true"/> if graphics screens below this screen should render into an
            off-screen render target; otherwise, <see langword="false"/> to render into the back buffer. 
            The default value is <see langword="false"/>.
            </value>
            <remarks>
            Usually, each graphics screen renders into a back buffer, but in some cases a graphics 
            screen wants to further process the result of the previous graphics screens. This can be 
            used, for example, to apply post-processing effects to the result of the graphics screens.
            In this case <see cref="P:DigitalRune.Graphics.GraphicsScreen.RenderPreviousScreensToTexture"/> is set to <see langword="true"/>.
            <see cref="P:DigitalRune.Graphics.GraphicsScreen.SourceTextureFormat"/> defines the format of the off-screen render target.
            The result of the previous screens is available as the 
            <see cref="P:DigitalRune.Graphics.RenderContext.SourceTexture"/> in the <see cref="T:DigitalRune.Graphics.RenderContext"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.GraphicsScreen.SourceTextureFormat">
            <summary>
            Gets or sets the source texture format.
            </summary>
            <value>
            The source texture format, or <see langword="null"/> to use the same format as the device 
            back buffer. The default value is <see langword="null"/>.
            </value>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsScreen.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.GraphicsScreen"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsScreen.Update(System.TimeSpan)">
            <summary>
            Updates the state of the graphics screen.
            </summary>
            <param name="deltaTime">The time that has elapsed since the last update.</param>
            <remarks>
            <para>
            A graphics screen can update its internal state in this method.
            </para>
            <para>
            This method is called automatically by the <see cref="T:DigitalRune.Graphics.GraphicsManager"/> once per frame
            before the screen needs to be rendered. The screens are updated in front-to-back order as
            they are registered in the <see cref="T:DigitalRune.Graphics.GraphicsManager"/>. Only visible screens are updated.
            That means, if a screen is hidden by another screen in front of it, it is not updated. The
            <see cref="T:DigitalRune.Graphics.GraphicsManager"/> checks the <see cref="P:DigitalRune.Graphics.GraphicsScreen.Coverage"/> property of the foreground
            screens to determine whether a screen in the background is visible.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsScreen.OnUpdate(System.TimeSpan)">
            <summary>
            Called when <see cref="M:DigitalRune.Graphics.GraphicsScreen.Update(System.TimeSpan)"/> is called.
            </summary>
            <param name="deltaTime">The time that has elapsed since the last update.</param>
            <remarks>
            This method is automatically called by <see cref="M:DigitalRune.Graphics.GraphicsScreen.Update(System.TimeSpan)"/>, but only if the
            screen is visible (see <see cref="P:DigitalRune.Graphics.GraphicsScreen.IsVisible"/>). Derived classes can override
            this method to update the state of the screen, for example, to advance
            time dependent animations.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsScreen.Render(DigitalRune.Graphics.RenderContext)">
            <summary>
            Renders the graphics screen.
            </summary>
            <param name="context">The render context.</param>
            <remarks>
            <para>
            This method implements the rendering pipeline of the graphics screen.
            </para>
            <para>
            It is called automatically by the <see cref="T:DigitalRune.Graphics.GraphicsManager"/> to render the screen. The
            screens are rendered in back-to-front order. That means the screens in the background are
            rendered first. The <see cref="T:DigitalRune.Graphics.GraphicsManager"/> checks the <see cref="P:DigitalRune.Graphics.GraphicsScreen.Coverage"/>
            property of the foreground screens to determine whether a screen in the background needs to
            be rendered.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="context"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsScreen.OnRender(DigitalRune.Graphics.RenderContext)">
            <summary>
            Called when <see cref="M:DigitalRune.Graphics.GraphicsScreen.Render(DigitalRune.Graphics.RenderContext)"/> is called.
            </summary>
            <param name="context">The render context.</param>
            <remarks>
            <para>
            This method implements the rendering pipeline of the graphics screen.
            </para>
            <para>
            This method is automatically called by <see cref="M:DigitalRune.Graphics.GraphicsScreen.Render(DigitalRune.Graphics.RenderContext)"/>, but only if the
            screen is visible (see <see cref="P:DigitalRune.Graphics.GraphicsScreen.IsVisible"/>). Derived classes can override
            this method to draw game content. <paramref name="context"/> is guaranteed to be not
            <see langword="null"/>.
            </para>
            <para>
            If the previous graphics screen has been rendered into an off-screen render target (see
            property <see cref="P:DigitalRune.Graphics.GraphicsScreen.RenderPreviousScreensToTexture"/>), then the results is
            available as the <see cref="P:DigitalRune.Graphics.RenderContext.SourceTexture"/> in the
            <see cref="T:DigitalRune.Graphics.RenderContext"/>.
            </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.GraphicsScreenCollection">
            <summary>
            Manages a collection of <see cref="T:DigitalRune.Graphics.GraphicsScreen"/>s.
            </summary>
            <remarks>
            <para>
            When a new <see cref="T:DigitalRune.Graphics.GraphicsScreen"/> is added to the collection it is inserted at the end 
            of the list. The item at index 0 is considered the backmost graphics screen. The item at index
            (<see cref="P:System.Collections.ObjectModel.Collection`1.Count"/> - 1) is considered the foremost graphics screen. The 
            graphics service renders graphics screens back to front.
            </para>
            <para>
            Note: The default enumerator (see <see cref="M:DigitalRune.Collections.NotifyingCollection`1.GetEnumerator"/>) 
            iterates the items from back to front.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.GraphicsScreenCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:DigitalRune.Graphics.GraphicsScreen"/> with the specified name.
            </summary>
            <value>
            The graphics screen with the given name, or <see langword="null"/> if no matching graphics
            screen is found.
            </value>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsScreenCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.GraphicsScreenCollection"/> class.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.GraphicsScreenCoverage">
            <summary>
            Defines whether a <see cref="T:DigitalRune.Graphics.GraphicsScreen"/> covers the screens behind it.
            </summary>
            <remarks>
            When not sure what to set, use <see cref="F:DigitalRune.Graphics.GraphicsScreenCoverage.Partial"/> (safe option).
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.GraphicsScreenCoverage.Partial">
            <summary>
            The <see cref="T:DigitalRune.Graphics.GraphicsScreen"/> does not cover the entire view. (The screen draws only to 
            a certain regions or some pixels are transparent). Screens in the background are partially 
            visible.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.GraphicsScreenCoverage.Full">
            <summary>
            The <see cref="T:DigitalRune.Graphics.GraphicsScreen"/> is fully opaque and covers the entire view. Screens in the 
            background are completely hidden.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.IGraphicsService">
            <summary>
            Manages graphics-related objects, like graphics screens and presentation targets, and graphics
            resources.
            </summary>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Graphics.IGraphicsService"/> is the main interface for graphics-related tasks. It
            provides access to
            </para>
            <list type="bullet">
            <item>
            the <see cref="P:DigitalRune.Graphics.IGraphicsService.GraphicsDevice"/>,
            </item>
            <item>
            the game main window (see <see cref="P:DigitalRune.Graphics.IGraphicsService.GameForm"/>, Windows only),
            </item>
            <item>
            the graphics screens (see <see cref="P:DigitalRune.Graphics.IGraphicsService.Screens"/> collection)
            </item>
            <item>
            the presentation targets (see <see cref="P:DigitalRune.Graphics.IGraphicsService.PresentationTargets"/> collection)
            </item>
            <item>
            and other properties.
            </item>
            </list>
            <para>
            <strong>Graphics screens: </strong>
            A <see cref="T:DigitalRune.Graphics.GraphicsScreen"/> renders game content, like the 3D scene or the HUD. The
            graphics service manages a collection of graphics screens, which are rendered back to front.
            </para>
            <para>
            <strong>Presentation targets:</strong>
            By default, the output is written into the back buffer. Optionally, the output can be written
            into a <i>presentation target</i>. A presentation target (see interface
            <see cref="T:DigitalRune.Graphics.Interop.IPresentationTarget"/>) is either a Windows Forms control
            (<see cref="!:FormsPresentationTarget"/>) or a WPF control (<see cref="!:ElementPresentationTarget"/>,
            <see cref="!:D3DImagePresentationTarget"/>) where the graphics can be displayed.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.IGraphicsService.Content">
            <summary>
            Gets the content manager that can be used to load predefined DigitalRune Graphics content
            (e.g. predefined shaders, post-processing effects, lookup textures, etc.).
            </summary>
            <value>The content manager.</value>
        </member>
        <member name="P:DigitalRune.Graphics.IGraphicsService.RenderTargetPool">
            <summary>
            Gets or sets the render target pool.
            </summary>
            <value>The render target pool.</value>
        </member>
        <member name="P:DigitalRune.Graphics.IGraphicsService.GraphicsDevice">
            <summary>
            Gets the graphics device.
            </summary>
            <value>The graphics device.</value>
        </member>
        <member name="P:DigitalRune.Graphics.IGraphicsService.GameForm">
            <summary>
            Gets the main form (main window) of the 
            <see cref="T:Microsoft.Xna.Framework.Game"/>. 
            </summary>
            <value>
            The game window form (<strong>System.Windows.Forms.Form</strong>). This property is set on 
            Windows (desktop) and is <see langword="null"/> on all other platforms. 
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.IGraphicsService.PresentationTargets">
            <summary>
            A collection of all presentation targets.
            </summary>
            <value>The presentation targets.</value>
            <remarks>
            <para>
            This property is not available on the following platforms: Silverlight, Windows Phone 7, 
            Xbox 360.
            </para>
            <para>
            A presentation target (see interface <see cref="T:DigitalRune.Graphics.Interop.IPresentationTarget"/>) is either a Windows
            Forms control or a WPF control where the graphics can be displayed.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.IGraphicsService.EffectInterpreters">
            <summary>
            Gets or sets the effect interpreters.
            </summary>
            <value>The effect interpreters.</value>
            <remarks>
            <para>
            User-defined <see cref="T:DigitalRune.Graphics.Effects.IEffectInterpreter"/> can be added to the collection to support new 
            effect techniques and parameters.
            </para>
            <para>
            Any changes to <see cref="P:DigitalRune.Graphics.IGraphicsService.EffectInterpreters"/> or <see cref="P:DigitalRune.Graphics.IGraphicsService.EffectBinders"/> need to be 
            made before the actual <see cref="T:DigitalRune.Graphics.Effects.EffectBinding"/>s are created. The 
            <see cref="T:DigitalRune.Graphics.Effects.IEffectInterpreter"/>s and <see cref="T:DigitalRune.Graphics.Effects.IEffectBinder"/>s are automatically applied
            when an new <see cref="T:DigitalRune.Graphics.Effects.EffectBinding"/> is created.
            </para>
            <para>
            Effect interpreters at the start of the collection have higher priority.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.IGraphicsService.EffectBinders">
            <summary>
            Gets or sets the effect binders.
            </summary>
            <value>The effect binders.</value>
            <remarks>
            <para>
            User-defined <see cref="T:DigitalRune.Graphics.Effects.IEffectBinder"/> can be added to the collection to support new 
            effect techniques and parameter bindings.
            </para>
            <para>
            Any changes to <see cref="P:DigitalRune.Graphics.IGraphicsService.EffectInterpreters"/> or <see cref="P:DigitalRune.Graphics.IGraphicsService.EffectBinders"/> need to be 
            made before the actual <see cref="T:DigitalRune.Graphics.Effects.EffectBinding"/>s are created. The 
            <see cref="T:DigitalRune.Graphics.Effects.IEffectInterpreter"/>s and <see cref="T:DigitalRune.Graphics.Effects.IEffectBinder"/>s are automatically applied
            when an new <see cref="T:DigitalRune.Graphics.Effects.EffectBinding"/> is created.
            </para>
            <para>
            Effect binders at the start of the collection have higher priority.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.IGraphicsService.Screens">
            <summary>
            Gets or sets the graphics screens.
            </summary>
            <value>The collection of <see cref="T:DigitalRune.Graphics.GraphicsScreen"/>s.</value>
            <remarks>
            <para>
            This <see cref="T:DigitalRune.Graphics.GraphicsScreenCollection"/> manages the graphics screens to be rendered.
            Graphics screens are rendered back (index 0) to front (index Count - 1).
            </para>
            <para>
            The graphics service only renders fully or partially visible screens. The property
            <see cref="P:DigitalRune.Graphics.GraphicsScreen.Coverage"/> of a <see cref="T:DigitalRune.Graphics.GraphicsScreen"/> indicates whether
            its content covers the entire screen and occludes screens with lower index, or whether it is
            partially transparent. The graphics service reads the <see cref="P:DigitalRune.Graphics.GraphicsScreen.Coverage"/> 
            property to determine which screens need to be rendered.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.IGraphicsService.Time">
            <summary>
            Gets or sets the total elapsed time.
            </summary>
            <value>The total elapsed time.</value>
            <remarks>
            <para>
            This value can be used to control time-based animations. In effects it can be used with the
            <see cref="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.Time"/> semantic.
            </para>
            <para>
            This value is automatically set by the graphics service. It is computed by continuously
            summing up the <see cref="P:DigitalRune.Graphics.IGraphicsService.DeltaTime"/> values.
            </para>
            <para>
            <strong>Important:</strong><br/>
            If the time in seconds is cast to a single precision floating point number
            (<see cref="T:System.Single"/>), then it will become unusable after several hours or days - depending
            on the required resolution. Therefore, this value must be reset regularly in long-running
            applications. To reset the time just set this property back to <code>TimeSpan.Zero</code>.
            It is best to reset this value when the user does not notice the change, i.e. when entering
            a new level or a full-screen menu.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.IGraphicsService.DeltaTime">
            <summary>
            Gets the elapsed time since the last frame.
            </summary>
            <value>The elapsed time since the last frame.</value>
            <remarks>
            This value is equal to the delta time parameter which was passed to the most recent call of
            <see cref="M:DigitalRune.Graphics.GraphicsManager.Update(System.TimeSpan)"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.IGraphicsService.Frame">
            <summary>
            Gets the number of the current frame.
            </summary>
            <value>The number of the current frame.</value>
            <remarks>
            <para>
            This number is incremented by the graphics service at the start of each frame. The initial
            value is -1, which indicates that nothing has been rendered so far.
            </para>
            <para>
            When the frame number exceeds the max integer value <see cref="F:System.Int32.MaxValue"/>, then it
            restarts at 0.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.IGraphicsService.Data">
            <summary>
            Gets custom data associated with this graphics service or the graphics device.
            </summary>
            <value>The dictionary with user-defined data.</value>
            <remarks>
            Some resources, like default textures, should exist only once per graphics device. Such 
            resources can be stored in this dictionary. The disposable objects (i.e. objects that 
            implement <see cref="T:System.IDisposable"/>) in this dictionary will be automatically disposed when 
            the graphics device is disposed.
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.Interop.IPresentationTarget">
            <summary>
            Provides a window handle (HWND) which can be used to present a 3D scene.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Interop.IPresentationTarget.GraphicsService">
            <summary>
            Gets or sets the graphics service.
            </summary>
            <value>The graphics service.</value>
            <remarks>
            This property is automatically set when a presentation target is added to a graphics 
            service. Do not set this property manually!
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Interop.IPresentationTarget.Handle">
            <summary>
            Gets the window handle (HWND).
            </summary>
            <value>
            The window handle (HWND) of the control. Can be <see cref="F:System.IntPtr.Zero"/> in which case the 
            presentation target should be ignored.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Interop.IPresentationTarget.Width">
            <summary>
            Gets the width of the presentation target in pixels.
            </summary>
            <value>The width of the presentation target in pixels.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Interop.IPresentationTarget.Height">
            <summary>
            Gets the height of the presentation target in pixels.
            </summary>
            <value>The height of the presentation target in pixels.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Interop.IPresentationTarget.IsVisible">
            <summary>
            Gets or sets a value indicating whether the presentation target is displayed.
            </summary>
            <value>
            <see langword="true"/> if the presentation target is visible; otherwise,
            <see langword="false"/>.
            </value>
            <remarks>
            For the graphics engine: It is not necessary to render to invisible presentation targets.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Interop.IPresentationTarget.BeginRender(DigitalRune.Graphics.RenderContext)">
            <summary>
            Called by the <see cref="T:DigitalRune.Graphics.GraphicsManager"/> before rendering into the presentation target.
            </summary>
            <param name="context">The render context.</param>
            <returns>
            <see langword="true"/> if successful; otherwise, <see langword="false"/> if the presentation
            target is not available.
            </returns>
            <remarks>
            If this method returns <see langword="false"/>, no graphics screen are rendered into the
            presentation target.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Interop.IPresentationTarget.EndRender(DigitalRune.Graphics.RenderContext)">
            <summary>
            Called by the <see cref="T:DigitalRune.Graphics.GraphicsManager"/> after rendering into the presentation target.
            </summary>
            <param name="context">The render context.</param>
            <remarks>
            This method is always called - even if <see cref="M:DigitalRune.Graphics.Interop.IPresentationTarget.BeginRender(DigitalRune.Graphics.RenderContext)"/> returned
            <see langword="false"/>.
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.Interop.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Graphics.Interop"/> namespace provides types that enable
            interoperability between the XNA Framework, MonoGame, Windows Forms, and the Windows
            Presentation Foundation (WPF).
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Interop.PresentationTargetCollection">
            <summary>
            Manages a collection of <see cref="T:DigitalRune.Graphics.Interop.IPresentationTarget"/>s.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Interop.PresentationTargetCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Interop.PresentationTargetCollection"/> class.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Interop.SwapChainPresentationTarget">
            <summary>
            Represents a UWP <strong>SwapChainPanel</strong> control that implements
            <see cref="T:DigitalRune.Graphics.Interop.IPresentationTarget"/> to host a 3D view. (Only available on the Universal Windows
            Platform.)
            </summary>
            <remarks>
            <para>
            <strong>Thread-safety:</strong><br/> The <see cref="T:DigitalRune.Graphics.Interop.SwapChainPresentationTarget"/> can be used
            if the game loop runs in a parallel thread. In this case, the property <see cref="P:DigitalRune.Graphics.Interop.SwapChainPresentationTarget.Lock"/> must
            be set to an object that is locked when the game loop is running. The
            <see cref="T:DigitalRune.Graphics.Interop.SwapChainPresentationTarget"/> uses this lock when it access the graphics service.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Interop.SwapChainPresentationTarget.DigitalRune#Graphics#Interop#IPresentationTarget#GraphicsService">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Graphics.Interop.SwapChainPresentationTarget.DigitalRune#Graphics#Interop#IPresentationTarget#Handle">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Graphics.Interop.SwapChainPresentationTarget.GraphicsService">
            <summary>
            Gets the graphics service.
            </summary>
            <value>The graphics service.</value>
            <inheritdoc cref="P:DigitalRune.Graphics.Interop.IPresentationTarget.GraphicsService"/>
        </member>
        <member name="P:DigitalRune.Graphics.Interop.SwapChainPresentationTarget.DigitalRune#Graphics#Interop#IPresentationTarget#Width">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Graphics.Interop.SwapChainPresentationTarget.DigitalRune#Graphics#Interop#IPresentationTarget#Height">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Graphics.Interop.SwapChainPresentationTarget.DigitalRune#Graphics#Interop#IPresentationTarget#IsVisible">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Graphics.Interop.SwapChainPresentationTarget.Lock">
            <summary>
            Gets or sets the synchronization object that is used to lock operations on graphics data.
            </summary>
            <value>The lock object.</value>
            <remarks>
            This property must be set when the game loop runs in a parallel thread instead of the UI
            thread.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Interop.SwapChainPresentationTarget.DigitalRune#Graphics#Interop#IPresentationTarget#BeginRender(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Interop.SwapChainPresentationTarget.DigitalRune#Graphics#Interop#IPresentationTarget#EndRender(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.ColorEncoding">
            <summary>
            Defines how a color value is encoded in a texel of a texture.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.ColorEncoding.Rgb">
            <summary>
            Linear (not encoded) RGB values.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.ColorEncoding.SRgb">
            <summary>
            sRGB encoding of color values.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.ColorEncoding.Rgbe">
            <summary>
            RGBE encoding of color values.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.ColorEncoding.Rgbm">
            <summary>
            RGBM encoding of color values with a maximum value of 50.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.ColorEncoding.LogLuv">
            <summary>
            LogLuv encoding of color values.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.LogLuvEncoding">
            <summary>
            Represents LogLuv encoding of color values.
            </summary>
            <seealso href="http://www.anyhere.com/gward/papers/jgtpap1.pdf">The LogLuv Encoding for Full Gamut, High Dynamic Range Images</seealso>
            <seealso href="http://realtimecollisiondetection.net/blog/?p=15">Converting RGB to LogLuv in a fragment shader</seealso>.
        </member>
        <member name="T:DigitalRune.Graphics.RgbEncoding">
            <summary>
            Represents the default encoding of color values.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.RgbeEncoding">
            <summary>
            Represents RGBE encoding of color values.
            </summary>
            <remarks>
            The Radiance RGBE format stores a high-dynamic range RGB value as RGB with an exponent in the 
            alpha channel.
            </remarks>
            <seealso href="http://en.wikipedia.org/wiki/RGBE_image_format">RGBE image format</seealso>
        </member>
        <member name="T:DigitalRune.Graphics.RgbmEncoding">
            <summary>
            Represents RGBM encoding of color values.
            </summary>
            <remarks>
            The RGBM format stores a high-dynamic range RGB value as RGB with a multiplier in the alpha 
            channel.
            </remarks>
            <seealso href="http://graphicrants.blogspot.com/2009/04/rgbm-color-encoding.html">RGBM color encoding</seealso>
        </member>
        <member name="P:DigitalRune.Graphics.RgbmEncoding.Max">
            <summary>
            Gets the maximum value for R, G, and B in linear color space.
            </summary>
            <value>The maximum value for R, G, and B in linear color space.</value>
        </member>
        <member name="M:DigitalRune.Graphics.RgbmEncoding.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.RgbmEncoding" /> class.
            </summary>
            <param name="max">The maximum value for R, G and B in linear color space.</param>
        </member>
        <member name="T:DigitalRune.Graphics.SRgbEncoding">
            <summary>
            Represents sRGB encoding of color values.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Ephemeris">
            <summary>
            Computes the physically-based properties of sky objects like the sun and the moon.
            </summary>
            <remarks>
            <para>
            In astronomy and celestial navigation, an ephemeris (plural: ephemerides; from the Greek word
            ἐφημερίς ephēmeris "diary", "journal") gives the positions of astronomical objects in the sky
            at a given time or times. The class <see cref="T:DigitalRune.Graphics.Ephemeris"/> can be used to retrieve the 
            positions of the sun and the moon. It also computes transformations which can be used to
            convert between different astronomical coordinate system. Further, the light contributions of
            the sun and the moon are estimated.
            </para>
            <para>
            The input for all computations are the position (specified using <see cref="P:DigitalRune.Graphics.Ephemeris.Latitude"/>,
            <see cref="P:DigitalRune.Graphics.Ephemeris.Longitude"/> and <see cref="P:DigitalRune.Graphics.Ephemeris.Altitude"/>) and the current <see cref="P:DigitalRune.Graphics.Ephemeris.Time"/>. All
            derived values are computed when <see cref="M:DigitalRune.Graphics.Ephemeris.Update"/> is called. That means, 
            <see cref="M:DigitalRune.Graphics.Ephemeris.Update"/> must be called every time the input properties are changed. It is not
            called automatically, so <see cref="M:DigitalRune.Graphics.Ephemeris.Update"/> must be called at least once.
            </para>
            <para>
            Following coordinate systems are used. All coordinate system are right-handed and can be used
            with cartesian coordinates (X, Y, Z) or polar coordinates (latitude, longitude).
            </para>
            <para>
            <strong>Ecliptic Coordinate System:</strong><br/>
            This coordinate system is relative to the plane defined by the path of the sun or (which is
            the same) the plane in which the earth moves around the sun.  That means, in the ecliptic
            system the latitude of the sun or the earth is always 0.<br/>
            Latitude and longitude are 0 at the vernal equinox. Latitude in this space is also called
            declination. Longitude is also called right ascension.<br/>
            Regarding Cartesian coordinates, the x and y axes are in the plane of the earth orbit. x is
            the axis where latitude and longitude are 0, which is equal to the vernal equinox. +z points
            north. The origin of the coordinate system can be the sun (heliocentric) or the earth
            (geocentric).
            </para>
            <para>
            <strong>Equatorial Coordinate System:</strong><br/>
            This coordinate system is relative to the plane defined by the earth's equator. Latitude and
            longitude are 0 at the vernal equinox.<br/>
            Regarding Cartesian coordinates, the x and y axes are in the plane of the equator. x is the
            axis where latitude and longitude are 0, which is equal to the vernal equinox. +y points east.
            +z points north. The origin of the coordinate system can be the sun (heliocentric) or the
            earth (geocentric).
            </para>
            <para>
            <strong>Geographic Coordinate System:</strong><br/>
            This coordinate system is relative to the plane defined by the earth's equator. This system is
            like the Equatorial system but the longitude is 0 at Greenwich. This means, the difference to
            the Equatorial system is a constant longitude offset. This coordinate system is well known
            from school and globes. The properties <see cref="P:DigitalRune.Graphics.Ephemeris.Latitude"/>, <see cref="P:DigitalRune.Graphics.Ephemeris.Longitude"/> are
            relative to the Geographic Coordinate System.<br/>
            Regarding Cartesian coordinates, the x and y axes are in the plane of the equator. x is the
            axis where latitude and longitude are 0, which is in the line of Greenwich. +y points east. +z
            points north.
            </para>
            <para>
            <strong>World Space:</strong><br/>
            This coordinate system is relative to a place on the earth. Computer game levels use this
            coordinate system. It is also known as "Horizontal Coordinate System" or "Horizon Coordinates".
            The origin of this space is defined by <see cref="P:DigitalRune.Graphics.Ephemeris.Latitude"/>, <see cref="P:DigitalRune.Graphics.Ephemeris.Longitude"/> (in the
            Geographic coordinate system) and <see cref="P:DigitalRune.Graphics.Ephemeris.Altitude"/>.<br/>
            Regarding Cartesian coordinates, +x points east, +y points up, -z points north.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Ephemeris.Latitude">
            <summary>
            Gets or sets the latitude of the world space origin (using the Geographic coordinate space).
            </summary>
            <value>
            The latitude in degrees in the range [-90, 90]. (90° is at the north pole.)
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Ephemeris.Longitude">
            <summary>
            Gets or sets the longitude of the world space origin (using the Geographic coordinate space).
            </summary>
            <value>
            The longitude in degrees in the range [-180, 180]. (East is positive.)
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Ephemeris.Altitude">
            <summary>
            Gets or sets the altitude (elevation) in meters above the mean sea level.
            </summary>
            <value>The altitude (elevation) in meters above the mean sea level.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Ephemeris.Time">
            <summary>
            Gets or sets the date and time relative to Coordinated Universal Time (UTC).
            </summary>
            <value>
            The date and time relative to Coordinated Universal Time (UTC). The property is initialized
            with <see cref="P:System.DateTimeOffset.UtcNow"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Ephemeris.SunPosition">
            <summary>
            Gets the sun position in world space in meters.
            </summary>
            <value>The sun position in world space in meters.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Ephemeris.SunDirectionRefracted">
            <summary>
            Gets the direction to the sun as seen from within the atmosphere considering optical 
            refraction.
            </summary>
            <value>
            The direction to the sun as seen from within the atmosphere considering optical refraction.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Ephemeris.MoonPosition">
            <summary>
            Gets the moon position in world space.
            </summary>
            <value>The moon position in world space in meters.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Ephemeris.MoonPhaseAngle">
            <summary>
            Gets the moon phase angle.
            </summary>
            <value>
            The moon phase angle in radians in the range [0, 2π]. A new moon has a phase angle of
            0. A full moon has a phase angle of π. 
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Ephemeris.MoonPhaseRelative">
            <summary>
            Gets the moon phase as a relative value.
            </summary>
            <value>The moon phase in the range [0, 1], where 0 is new moon and 1 is full moon.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Ephemeris.EclipticToEquatorial">
            <summary>
            Gets the rotation matrix which converts directions from the ecliptic coordinate system to
            the equatorial coordinate system.
            </summary>
            <value>
            The rotation matrix which converts directions from the ecliptic coordinate system to the
            equatorial coordinate system.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Ephemeris.EquatorialToWorld">
            <summary>
            Gets the transformation matrix which converts directions from the equatorial coordinate
            system to the world space.
            </summary>
            <value>
            The transformation matrix which converts directions from the equatorial coordinate system to
            the world space.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Ephemeris.EquatorialToGeographic">
            <summary>
            Gets the rotation matrix which converts directions from the equatorial coordinate system to
            the geographic coordinate system.
            </summary>
            <value>
            The rotation matrix which converts directions from the equatorial coordinate system to the
            geographic coordinate system.
            </value>
        </member>
        <member name="M:DigitalRune.Graphics.Ephemeris.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Ephemeris"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Ephemeris.Update">
            <summary>
            Computes the derived values, like sun/moon positions, transformation matrices and light
            intensities. This method must be called when the location or time has changed.
            </summary>
            <remarks>
            This method must be called when the input properties <see cref="P:DigitalRune.Graphics.Ephemeris.Latitude"/>,
            <see cref="P:DigitalRune.Graphics.Ephemeris.Longitude"/>, <see cref="P:DigitalRune.Graphics.Ephemeris.Altitude"/>, or <see cref="P:DigitalRune.Graphics.Ephemeris.Time"/>) have changed.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Ephemeris.InRange(System.Double)">
            <summary>
            Clamps an angle to the interval [0, 2π].
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Ephemeris.ToCartesian(System.Double,System.Double,System.Double)">
            <summary>
            Converts polar coordinates to Cartesian coordinates.
            </summary>
            <param name="radius">The radius.</param>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
            <returns>The position in Cartesian coordinates.</returns>
            <remarks>
            The Cartesian coordinate system is right handed; y points east; z points up.
            In other words: Latitude and longitude are relative to +x; z increases with latitude. 
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Ephemeris.ToJulianDate(System.DateTimeOffset,System.Boolean)">
            <summary>
            Converts the specified <see cref="T:System.DateTimeOffset"/> to the Julian Date.
            </summary>
            <param name="dateTimeOffset">The <see cref="T:System.DateTimeOffset"/>.</param>
            <param name="terrestrialTime">
            Specifying terrestrial time means you want atomic clock time, not corrected by leap seconds 
            to account for slowing of the earth's rotation, as opposed to GMT which does account for 
            leap seconds.
            </param>
            <returns>
            Days and fractions since noon Universal Time on January 1, 4713 BCE on the Julian calendar.
            </returns>
            <remarks>
            Julian Dates are used for astronomical calculations (such as our own ephemeris model) and 
            represent days and fractions since noon Universal Time on January 1, 4713 BCE on the Julian 
            calendar. Note that due to precision limitations of 64-bit doubles, the resolution of the 
            date returned may be as low as within 8 hours.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Ephemeris.ToEpoch2000Centuries(System.DateTimeOffset,System.Boolean)">
            <summary>
            Converts the specified <see cref="T:System.DateTimeOffset"/> to the number of centuries since 
            January 1, 2000.
            </summary>
            <param name="dateTimeOffset">The <see cref="T:System.DateTimeOffset"/>.</param>
            <param name="terrestrialTime">
            Specifying terrestrial time means you want atomic clock time, not corrected by leap seconds 
            to account for slowing of the earth's rotation, as opposed to GMT which does account for 
            leap seconds.
            </param>
            <returns>The fractional number of centuries elapsed since January 1, 2000.</returns>
            <remarks>
            This method converts a date to centuries and fraction since January 1, 2000. Used for
            internal astronomical calculations. Since this number is smaller than that returned by
            <see cref="M:DigitalRune.Graphics.Ephemeris.ToJulianDate(System.DateTimeOffset,System.Boolean)"/>, it is of higher precision.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Ephemeris.ToEpoch1990Days(System.DateTimeOffset,System.Boolean)">
            <summary>
            Converts the specified <see cref="T:System.DateTimeOffset"/> to the number of days since 
            January 1, 1990.
            </summary>
            <param name="dateTimeOffset">The <see cref="T:System.DateTimeOffset"/>.</param>
            <param name="terrestrialTime">
            Specifying terrestrial time means you want atomic clock time, not corrected by leap seconds 
            to account for slowing of the earth's rotation, as opposed to GMT which does account for 
            leap seconds.
            </param>
            <returns>The fractional number of days elapsed since January 1, 1990.</returns>
            <remarks>
            This method converts a date to days elapsed since January 1, 1990 on the Julian calendar. 
            Used for internal astronomical calculations. Since this number is smaller than that returned 
            by <see cref="M:DigitalRune.Graphics.Ephemeris.ToJulianDate(System.DateTimeOffset,System.Boolean)"/>, it is of higher precision.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Ephemeris.Refract(System.Double)">
            <summary>
            Simulates atmospheric refraction for objects close to the horizon.
            </summary>
            <param name="elevation">The elevation angle of the object above the horizon.</param>
            <returns>
            The elevation angle of the object above the horizon after simulating atmospheric refraction.
            </returns>
            <remarks>
            This method does not model variations in atmosphere pressure and temperature.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Ephemeris.ExtraterrestrialSunlight">
            <summary>
            Gets the extraterrestrial sunlight intensity based on NASA data.
            </summary>
            <value>The sunlight intensity outside the earth's atmosphere in [lux].</value>
        </member>
        <member name="M:DigitalRune.Graphics.Ephemeris.GetSunlight(System.Single,System.Single,DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@)">
            <summary>
            Computes the sunlight intensity.
            </summary>
            <param name="altitude">
            The altitude (elevation) of the observer's position in meters above the mean sea level.
            </param>
            <param name="turbidity">
            The turbidity, which measures how polluted the air is. The values should be in the range 
            [1.8, 20]. A turbidity of 2 describes a clear day whereas a turbidity of 20 represents thick
            haze. A commonly used value is 2.2.
            </param>
            <param name="sunDirection">The direction from the observer's position to the sun.</param>
            <param name="directSunlight">The direct sunlight illuminance in [lux].</param>
            <param name="scatteredSunlight">
            The scattered sunlight illuminance (= ambient light, indirect light or "skylight"
            contribution of the sun) in [lux].
            </param>
            <remarks>
            <para>
            The light values are computed for the earth using NASA data, experimental data and a 
            physically-based model of the atmosphere.
            </para>
            <para>
            All light values are computed for a cloudless sky. When the sky is cloudy, reduce the direct
            light and increase the scattered/ambient light. Additionally you will want to increase the
            ambient light at night to model light pollution.
            </para>
            <para>
            <strong>Thread-Safety:</strong> This method is <strong>not</strong> thread-safe, i.e. it 
            must not be called simultaneously from multiple threads.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Ephemeris.GetMoonlight(System.Single,System.Single,DigitalRune.Mathematics.Algebra.Vector3D,System.Single,DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@)">
            <summary>
            Computes the moonlight intensity.
            </summary>
            <param name="altitude">
            The altitude (elevation) of the observer's position in meters above the mean sea level.
            </param>
            <param name="turbidity">
            The turbidity, which measures how polluted the air is. The values should be in the range 
            [1.8, 20]. A turbidity of 2 describes a clear day whereas a turbidity of 20 represents thick
            haze. A commonly used value is 2.2.
            </param>
            <param name="moonPosition">The moon position in world space.</param>
            <param name="phaseAngle">
            The moon phase angle in radians in the range [0, 2π]. A new moon has a phase angle of 0. A 
            full moon has a phase angle of π. 
            </param>
            <param name="directMoonlight">The direct moonlight illuminance in [lux].</param>
            <param name="scatteredMoonlight">
            The scattered moonlight illuminance (= ambient light, indirect light or "skylight"
            contribution of the moon) in [lux].
            </param>
            <inheritdoc cref="M:DigitalRune.Graphics.Ephemeris.GetSunlight(System.Single,System.Single,DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@)"/>
        </member>
        <member name="T:DigitalRune.Graphics.VisiblePlanets">
            <summary>
            The planets which are visible to the naked eye.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Spectrum">
            <summary>
            Represents a spectrum of electromagnetic energy.
            </summary>
            <remarks>
            <para>
            This class represents a spectrum of the visible light. The array <see cref="P:DigitalRune.Graphics.Spectrum.Powers"/> contains
            <see cref="F:DigitalRune.Graphics.Spectrum.NumberOfSamples"/> elements. Each element describes the power of a frequency in the
            range of visible light (380 to 780 nm). The interval between two samples is 
            <see cref="F:DigitalRune.Graphics.Spectrum.SampleWidth"/>.
            </para>
            <para>
            This class also models the passage of this energy through the earth atmosphere under given
            conditions, and converts the spectrum to XYZ color data. See 
            <see cref="M:DigitalRune.Graphics.Spectrum.ApplyAtmosphericTransmittance(System.Double,System.Double,System.Double,DigitalRune.Graphics.Spectrum,DigitalRune.Graphics.Spectrum)"/>.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.Spectrum.NumberOfSamples">
            <summary>
            The number of samples.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Spectrum.SampleWidth">
            <summary>
            The interval between two frequency samples.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Spectrum.Powers">
            <summary>
            Gets the array of spectral powers, from 380 - 780 nm sampled at 5 nm intervals.
            </summary>
            <value>
            The array of spectral powers, from 380 - 780 nm sampled at 5 nm intervals.
            </value>
        </member>
        <member name="M:DigitalRune.Graphics.Spectrum.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Spectrum"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Spectrum.ToXYZ">
            <summary>
            Converts the spectrum to XYZ color information.
            </summary>
            <returns>The XYZ color in [lux] (illuminance).</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Spectrum.ApplyAtmosphericTransmittance(System.Double,System.Double,System.Double,DigitalRune.Graphics.Spectrum,DigitalRune.Graphics.Spectrum)">
            <summary>
            Computes direct and indirect light information when this spectrum passes through the earth's
            atmosphere.
            </summary>
            <param name="zenithAngle">
            The angle between the zenith and the direction of the light source emitting the simulated 
            spectrum in radian.
            </param>
            <param name="turbidity">
            The simulated atmospheric turbidity in the range [1.8, 20.0]. A turbidity of 2 describes a 
            clear day whereas a turbidity of 20 represents thick haze. A commonly used value is 2.2.
            </param>
            <param name="altitude">The simulated altitude in meters above mean sea level.</param>
            <param name="directIrradiance">
            Output: The spectral energy directly from the light source that survives transmission 
            through the atmosphere.
            </param>
            <param name="scatteredIrradiance">
            Output: The spectral energy scattered by the atmosphere, which makes up "skylight" (ambient
            light from the sky).
            </param>
            <remarks>
            <para>
            This method simulates the passage of this spectrum through earth's atmosphere, employing the
            National Renewable Energy Lab's "Bird model". Two new spectra, representing the direct and
            scattered irradiance resulting from passage through the atmosphere, are returned.
            </para>
            <para>
            If the light source is below the horizon, this model returns 0. Thus, it cannot be used to
            compute twilight.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Spectrum.SetLunarSpectrum(System.Single)">
            <summary>
            Sets this instance to the spectrum of light emanating from the moon using an approximation.
            </summary>
            <param name="moonLuminance">The moon luminance.</param>
            <remarks>
            This lunar spectrum is a simple approximation that just ramps up linearly from 380-780 nm
            from 0.7 to 1.35. This spectrum is multiplied by the average luminance of the moon for a
            specific phase and distance.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Spectrum.SetSolarSpectrum">
            <summary>
            Sets this spectrum to the extraterrestrial solar spectrum, based on NASA data.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.GraphicsHelper">
            <summary>
            Provides helper methods for graphics-related tasks.
            </summary>
            <remarks>
            <para>
            This class provides several default render state objects (e.g. <see cref="F:DigitalRune.Graphics.GraphicsHelper.BlendStateAdd"/>).
            These default render state objects are only created once per graphics device and are reused.
            This objects must not be modified.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.GraphicsHelper._maxSimultaneousTextures">
            <summary>
            The maximum number of textures that can be simultaneously bound to the fixed-function 
            pipeline sampler stages.
            </summary>
            <remarks>
            Shader model 2.0 - 4.0 support 16 samplers.
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.GraphicsHelper.ProjectorBiasMatrix">
            <summary>
            A bias matrix that converts a vector from clip space to texture space.
            </summary>
            <remarks>
            (x, y) coordinates in clip space range from (-1, -1) at the bottom left to (1, 1) at the top
            right. For texturing the top left should be (0, 0) and the bottom right should be (1, 1).
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.GetMaxPrimitivesPerCall(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Gets the max number of primitives per draw call.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <returns>The max number of primitives per draw call.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="F:DigitalRune.Graphics.GraphicsHelper.Gamma">
            <summary>
            The gamma value.
            </summary>
            <remarks>
            Use 2.0 for approximate gamma (default) and 2.2 for exact gamma.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.FromGamma(System.Single)">
            <overloads>
            <summary>
            Converts a color value from gamma space to linear space.
            </summary>
            </overloads>
            
            <summary>
            Converts a color value from gamma space to linear space.
            </summary>
            <param name="color">The color in gamma space.</param>
            <returns>The color value in linear space.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.FromGamma(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Converts a color value from gamma space to linear space.
            </summary>
            <param name="color">The color in gamma space.</param>
            <returns>The color value in linear space.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.FromGamma(DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Converts a color value from gamma space to linear space.
            </summary>
            <param name="color">The color in gamma space.</param>
            <returns>The color value in linear space.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.ToGamma(System.Single)">
            <overloads>
            <summary>
            Converts a color value from linear space to gamma space.
            </summary>
            </overloads>
            
            <summary>
            Converts a color value from linear space to gamma space.
            </summary>
            <param name="color">The color in linear space.</param>
            <returns>The color value in gamma space.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.ToGamma(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Converts a color value from linear space to gamma space.
            </summary>
            <param name="color">The color in linear space.</param>
            <returns>The color value in gamma space.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.ToGamma(DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Converts a color value from linear space to gamma space.
            </summary>
            <param name="color">The color in linear space.</param>
            <returns>The color value in gamma space.</returns>
        </member>
        <member name="F:DigitalRune.Graphics.GraphicsHelper.XYZToRGB">
            <summary>
            A matrix which converts colors from the CIE XYZ color space to the sRGB color space.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.GraphicsHelper.RGBToXYZ">
            <summary>
            A matrix which converts colors from the sRGB color space to the CIE XYZ color space.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.GraphicsHelper.LuminanceWeights">
            <summary>
            The weights for red, green and blue to convert a color to a luminance.
            </summary>
            <remarks>
            These weights were chosen according to ITU Rec 709 (HDTV; same as sRGB). To convert a color
            to luminance use the dot product: <c>Vector3F.Dot(color, LuminanceWeights)</c>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.ConvertXYZToYxy(DigitalRune.Mathematics.Algebra.Vector3F,System.Single@,System.Single@,System.Single@)">
            <summary>
            Converts a color from CIE XYZ color space to CIE Yxy.
            </summary>
            <param name="XYZ">The XYZ.</param>
            <param name="Y">Y.</param>
            <param name="x">x.</param>
            <param name="y">y.</param>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.ConvertYxyToXYZ(System.Single,System.Single,System.Single)">
            <summary>
            Converts a color from the CIE Yxy color space to CIE XYZ.
            </summary>
            <param name="Y">The Y.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>The XYZ color value.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.GetUniqueColor(System.Object)">
            <summary>
            Gets a unique color for an object.
            </summary>
            <param name="obj">The object.</param>
            <returns>A unique color.</returns>
            <remarks>
            The color is created from the hash code of the object. For most cases this is unique but
            this is not guaranteed.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.ResetTextures(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Sets the textures of all samplers to <see langword="null"/>.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.ResetSamplerStates(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Sets the textures of all samplers to <see cref="F:Microsoft.Xna.Framework.Graphics.SamplerState.PointWrap"/>
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <remarks>
            This method can be used if the sampler states must be reset. For example, in XNA if an 
            effect change the MipMapLodBias, then the same bias will be used by the next effects
            unless they explicitly set the bias back to 0. In this case, this method helps to reset
            the sampler states.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.GetSpriteBatch(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Gets a shared <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> instance.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <returns>The shared <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> instance.</returns>
            <remarks>
            For a certain <paramref name="graphicsService"/>, this method always returns the same
            <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> instance. Whenever <see cref="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Begin(Microsoft.Xna.Framework.Graphics.SpriteSortMode,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect,System.Nullable{Microsoft.Xna.Framework.Matrix})"/> is called,
            <see cref="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.End"/> must be called before someone else can use the
            <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/>.This <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> instance must not be used
            concurrently in parallel threads, and it must not be disposed.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.GetCubeMapForwardDirection(Microsoft.Xna.Framework.Graphics.CubeMapFace)">
            <summary>
            Gets the camera forward direction for rendering into a cube map face.
            </summary>
            <param name="cubeMapFace">The cube map face.</param>
            <returns>
            The camera forward direction required to render the content of the
            given cube map face.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.GetCubeMapUpDirection(Microsoft.Xna.Framework.Graphics.CubeMapFace)">
            <summary>
            Gets the camera up direction for rendering into a cube map face.
            </summary>
            <param name="cubeMapFace">The cube map face.</param>
            <returns>
            The camera up direction required to render the content of the
            given cube map face.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.GetDistanceAttenuation(System.Single,System.Single,System.Single)">
            <summary>
            Computes the light attenuation factor for a given distance.
            </summary>
            <param name="distance">The distance to the light's origin.</param>
            <param name="range">The range of the light.</param>
            <param name="exponent">The falloff exponent.</param>
            <returns>The light attenuation factor.</returns>
            <remarks>
            <para>
            The intensity of the light continually decreases from the origin up to range. At a distance 
            of range the light intensity is 0. This method computes the attenuation factor at a given 
            distance. 
            </para>
            <para>
            The attenuation factor is computed as follows:
            <list type="table">
            <listheader>
            <term>Distance</term>
            <description>Attenuation Factor</description>
            </listheader>
            <item>
            <term>distance ≤ 0</term>
            <description>1</description>
            </item>
            <item>
            <term>0 &lt; distance &lt; 1</term>
            <description>1 - (distance / range)<sup>exponent</sup></description>
            </item>
            <item>
            <term>distance ≥ 1</term>
            <description>0</description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.GetAngularAttenuation(System.Single,System.Single,System.Single)">
            <summary>
            Computes the angular attenuation (spotlight falloff) for a given angle.
            </summary>
            <param name="angle">The angle relative to the main light direction in radians.</param>
            <param name="falloffAngle">The falloff angle.</param>
            <param name="cutoffAngle">The cutoff angle.</param>
            <returns>
            The angular attenuation of the light intensity. (1 when <paramref name="angle"/> is less 
            than or equal to <paramref name="falloffAngle"/>. 0 when <paramref name="angle"/> is 
            greater than or equal to <paramref name="cutoffAngle"/>.)
            </returns>
            <remarks>
            <para>
            The falloff between <paramref name="falloffAngle"/> and <paramref name="cutoffAngle"/> is 
            computed using a smoothstep function (see 
            <see cref="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.HermiteSmoothStep(System.Single)"/>).
            </para>
            <para>
            <i>angularAttenuation</i> = smoothstep((cos(<i>angle</i>) - cos(<i>cutoffAngle</i>)) /
            (cos(<i>falloffAngle</i>) - cos(<i>cutoffAngle</i>)))
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.GetLightContribution(DigitalRune.Graphics.SceneGraph.LightNode,DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
            <summary>
            Gets a factor that is an approximation of the perceived light contribution of the given 
            light falling on an object at the given world space position.
            </summary>
            <param name="lightNode">The light node.</param>
            <param name="position">The position in world space.</param>
            <param name="chromacityWeight">
            The weight that determines how important chromacity is compared to the uncolored light 
            intensity, ranging from 0 (not important) to 1 very important. Chromacity is the color bias 
            of a light. For example, 0.7 is a good value for this parameter.
            </param>
            <returns>
            A value that is proportional to the perceived contribution of the light. If the value is
            high, then the light node is important for the scene.
            </returns>
            <remarks>
            This method computes an approximation which can be use to sort lights by importance.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="lightNode"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.DrawQuad(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Rectangle)">
            <overloads>
            <summary>
            Draws a screen-aligned quad.
            </summary>
            </overloads>
            
            <summary>
            Draws a screen-aligned quad.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="rectangle">
            The rectangle describing vertex positions of the quad. (This can be in pixels or in another
            unit depending on the current vertex shader.)
            </param>
            <remarks>
            <para>
            The quad vertices use the vertex type <see cref="T:Microsoft.Xna.Framework.Graphics.VertexPositionTexture"/>.
            </para>
            <para>
            The upper left corner of the quad uses the texture coordinate (0, 0), the lower right corner
            of the quad uses the texture coordinate (0, 1).
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.DrawQuad(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Rectangle,DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Draws a screen-aligned quad.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="rectangle">
            The rectangle describing vertex positions of the quad. (This can be in pixels or in another
            unit depending on the current vertex shader.)
            </param>
            <param name="texCoordTopLeft">
            The texture coordinates of the top left vertex of the quad.
            </param>
            <param name="texCoordBottomRight">
            The texture coordinates of the bottom right vertex of the quad.</param>
            <remarks>
            <para>
            The quad vertices use the vertex type <see cref="T:Microsoft.Xna.Framework.Graphics.VertexPositionTexture"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.DrawQuad(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.VertexPositionTexture,Microsoft.Xna.Framework.Graphics.VertexPositionTexture)">
            <summary>
            Draws a screen-aligned quad.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="topLeft">The top left vertex.</param>
            <param name="bottomRight">The bottom right vertex.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.DrawFullScreenQuad(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Draws a full-screen quad.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <remarks>
            <para>
            The quad will fill the current viewport. The vertex positions are in pixels. (The vertex
            shader must work like VSScreenSpaceDraw() in "PostProcessing.fxh".)
            </para>
            <para>
            The quad vertices use the vertex type <see cref="T:Microsoft.Xna.Framework.Graphics.VertexPositionTexture"/>.
            </para>
            <para>
            The upper left corner of the quad uses the texture coordinate (0, 0), the lower right corner
            of the quad uses the texture coordinate (0, 1).
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.GetFrustumFarCorners(DigitalRune.Graphics.Projection,Microsoft.Xna.Framework.Vector3[])">
            <overloads>
            <summary>
            Gets the view space positions of the 4 far corners of the viewing frustum.
            </summary>
            </overloads>
            
            <summary>
            Gets the view space positions of the 4 far corners of the viewing frustum.
            </summary>
            <param name="projection">The projection.</param>
            <param name="frustumFarCorners">
            A 4 element array that will be initialized with the frustum far corners.
            </param>
            <remarks>
            <paramref name="frustumFarCorners"/> will be initialized with the 4 corner positions (in 
            view space) of the far plane of the projection frustum. The order of the corners is: 
            top-left, top-right, bottom-left, bottom-right.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="projection"/> or <paramref name="frustumFarCorners"/> is 
            <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="frustumFarCorners"/> has wrong length. Expected length: 4.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.GetFrustumFarCorners(DigitalRune.Graphics.Projection,DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F,Microsoft.Xna.Framework.Vector3[])">
            <summary>
            Gets the view space positions of the 4 far corners of a quad at the far plane of the viewing
            frustum.
            </summary>
            <param name="projection">The projection.</param>
            <param name="topLeftTexCoord">The top left texture coordinate.</param>
            <param name="bottomRightTexCoord">The bottom right texture coordinate.</param>
            <param name="frustumFarCorners">
            A 4 element array that will be initialized with the frustum far corners.
            </param>
            <remarks>
            <paramref name="frustumFarCorners"/> will be initialized with the 4 corner positions (in 
            view space) of a quad on the far plane of the projection frustum. The order of the corners
            is: top-left, top-right, bottom-left, bottom-right. The position of the quad is 
            determined by <paramref name="topLeftTexCoord"/> and <paramref name="bottomRightTexCoord"/>.
            If <paramref name="topLeftTexCoord"/> is (0, 0) and <paramref name="bottomRightTexCoord"/>
            is (1, 1), then the result is the same as in 
            <see cref="M:DigitalRune.Graphics.GraphicsHelper.GetFrustumFarCorners(DigitalRune.Graphics.Projection,Microsoft.Xna.Framework.Vector3[])"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="projection"/> or <paramref name="frustumFarCorners"/> is 
            <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="frustumFarCorners"/> has wrong length. Expected length: 4.
            </exception>
        </member>
        <member name="F:DigitalRune.Graphics.GraphicsHelper.DepthStencilStateNoWriteEqual">
            <summary>
            A default state object for disabled depth buffer writes and a depth buffer function of 
            "Equal".
            </summary>
            <remarks>
            <para>
            This default state object has the following settings:
            </para>
            <para>
            <c>
            DepthBufferWriteEnable = false<br/>
            DepthBufferFunction = CompareFunction.Equal
            </c>
            </para>
            <para>
            This instance must not be modified!
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.GraphicsHelper.DepthStencilStateNoWriteLessEqual">
            <summary>
            A default state object for disabled depth buffer writes and a depth buffer function of 
            "LessEqual".
            </summary>
            <remarks>
            <para>
            This default state object has the following settings:
            </para>
            <para>
            <c>
            DepthBufferWriteEnable = false<br/>
            DepthBufferFunction = CompareFunction.LessEqual
            </c>
            </para>
            <para>
            This instance must not be modified!
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.GraphicsHelper.DepthStencilStateNoWriteGreaterEqual">
            <summary>
            A default state object for disabled depth buffer writes and a depth buffer function of 
            "GreaterEqual".
            </summary>
            <remarks>
            <para>
            This default state object has the following settings:
            </para>
            <para>
            <c>
            DepthBufferWriteEnable = false<br/>
            DepthBufferFunction = CompareFunction.GreaterEqual
            </c>
            </para>
            <para>
            This instance must not be modified!
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.GraphicsHelper.DepthStencilStateNoWriteGreater">
            <summary>
            A default state object for disabled depth buffer writes and a depth buffer function of 
            "Greater".
            </summary>
            <remarks>
            <para>
            This default state object has the following settings:
            </para>
            <para>
            <c>
            DepthBufferWriteEnable = false<br/>
            DepthBufferFunction = CompareFunction.Greater
            </c>
            </para>
            <para>
            This instance must not be modified!
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.GraphicsHelper.DepthStencilStateAlways">
            <summary>
            A default state object for enabled depth buffer writes and a disabled depth buffer test.
            </summary>
            <remarks>
            <para>
            This default state object has the following settings:
            </para>
            <para>
            <c>
            DepthBufferWriteEnable = true <br/>
            DepthBufferFunction = CompareFunction.Always
            </c>
            </para>
            <para>
            This instance must not be modified!
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.GraphicsHelper.DepthStencilStateOnePassStencilFail">
            <summary>
            A default state object for rendering stencil volumes using the single pass Z-fail
            algorithm (Carmack's Reverse).
            </summary>
            <remarks>
            <para>
            This instance must not be modified!
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.GraphicsHelper.DepthStencilStateStencilNotEqual0">
            <summary>
            A default state object for rendering where the stencil is not 0 and also resetting the
            stencil.
            </summary>
            <remarks>
            <para>
            This instance must not be modified!
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.GraphicsHelper.DepthStencilStateStencilEqual0">
            <summary>
            A default state object for rendering where the stencil is 0 and also resetting the stencil.
            </summary>
            <remarks>
            <para>
            This instance must not be modified!
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.GraphicsHelper.BlendStateAdd">
            <summary>
            A default state object for additive blending (colors and alpha values are accumulated).
            </summary>
            <remarks>
            <para>
            This default state object has the following settings:
            </para>
            <para>
            <c>
            AlphaBlendFunction = BlendFunction.Add<br/>
            AlphaDestinationBlend = Blend.One<br/>
            AlphaSourceBlend = Blend.One<br/>
            ColorBlendFunction = BlendFunction.Add<br/>
            ColorDestinationBlend = Blend.One<br/>
            ColorSourceBlend = Blend.One
            </c>
            </para>
            <para>
            This instance must not be modified!
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.GraphicsHelper.BlendStateMultiply">
            <summary>
            A default state object for multiplicative blending (colors and alpha values are multiplied).
            </summary>
            <remarks>
            <para>
            This default state object has the following settings:
            </para>
            <para>
            <c>
            AlphaBlendFunction = BlendFunction.Add<br/>
            AlphaDestinationBlend = Blend.SourceAlpha<br/>
            AlphaSourceBlend = Blend.Zero<br/>
            ColorBlendFunction = BlendFunction.Add<br/>
            ColorDestinationBlend = Blend.SourceColor<br/>
            ColorSourceBlend = Blend.Zero
            </c>
            </para>
            <para>
            This instance must not be modified!
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.GraphicsHelper.BlendStateNoColorWrite">
            <summary>
            A default state object for disabled color writes.
            </summary>
            <remarks>
            <para>
            This default state object has the following settings:
            </para>
            <para>
            <c>
            ColorWriteChannels = ColorWriteChannels.None
            </c>
            </para>
            <para>
            This instance must not be modified!
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.GraphicsHelper.BlendStateWriteRed">
            <summary>
            A default state object for color writes in the red channel.
            </summary>
            <remarks>
            <para>
            This default state object has the following settings:
            </para>
            <para>
            <c>
            ColorWriteChannels = ColorWriteChannels.Red
            </c>
            </para>
            <para>
            This instance must not be modified!
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.GraphicsHelper.BlendStateWriteBlue">
            <summary>
            A default state object for color writes in the blue channel.
            </summary>
            <remarks>
            <para>
            This default state object has the following settings:
            </para>
            <para>
            <c>
            ColorWriteChannels = ColorWriteChannels.Blue
            </c>
            </para>
            <para>
            This instance must not be modified!
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.GraphicsHelper.BlendStateWriteGreen">
            <summary>
            A default state object for color writes in the green channel.
            </summary>
            <remarks>
            <para>
            This default state object has the following settings:
            </para>
            <para>
            <c>
            ColorWriteChannels = ColorWriteChannels.Green
            </c>
            </para>
            <para>
            This instance must not be modified!
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.GraphicsHelper.BlendStateWriteAlpha">
            <summary>
            A default state object for color writes in the alpha channel.
            </summary>
            <remarks>
            <para>
            This default state object has the following settings:
            </para>
            <para>
            <c>
            ColorWriteChannels = ColorWriteChannels.Alpha
            </c>
            </para>
            <para>
            This instance must not be modified!
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.GraphicsHelper.BlendStateWriteSingleChannel">
            <summary>
            A 4-element array containing <see cref="F:DigitalRune.Graphics.GraphicsHelper.BlendStateWriteRed"/>, 
            <see cref="F:DigitalRune.Graphics.GraphicsHelper.BlendStateWriteGreen"/>, <see cref="F:DigitalRune.Graphics.GraphicsHelper.BlendStateWriteBlue"/> and
            <see cref="F:DigitalRune.Graphics.GraphicsHelper.BlendStateWriteAlpha"/>.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.GraphicsHelper.RasterizerStateCullClockwise">
            <summary>
            A rasterizer state object with settings for culling primitives with clockwise winding order.
            </summary>
            <remarks>
            <para>
            This state is identical to the built-in state <see cref="F:Microsoft.Xna.Framework.Graphics.RasterizerState.CullClockwise"/> in
            XNA. The only difference is that <see cref="P:Microsoft.Xna.Framework.Graphics.RasterizerState.MultiSampleAntiAlias"/> is set
            to <see langword="false"/>, which improves line rendering when MSAA is disabled.
            </para>
            <para>This instance must not be modified!</para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.GraphicsHelper.RasterizerStateCullCounterClockwise">
            <summary>
            A rasterizer state object with settings for culling primitives with counter-clockwise
            winding order.
            </summary>
            <remarks>
            <para>
            This state is identical to the built-in state
            <see cref="F:Microsoft.Xna.Framework.Graphics.RasterizerState.CullCounterClockwise"/> in XNA. The only difference is that
            <see cref="P:Microsoft.Xna.Framework.Graphics.RasterizerState.MultiSampleAntiAlias"/> is set to <see langword="false"/>, which
            improves line rendering when MSAA is disabled.
            </para>
            <para>This instance must not be modified!</para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.GraphicsHelper.RasterizerStateCullNone">
            <summary>
            A rasterizer state object with settings for not culling primitives.
            </summary>
            <remarks>
            <para>
            This state is identical to the built-in state <see cref="F:Microsoft.Xna.Framework.Graphics.RasterizerState.CullNone"/> in XNA.
            The only difference is that <see cref="P:Microsoft.Xna.Framework.Graphics.RasterizerState.MultiSampleAntiAlias"/> is set to
            <see langword="false"/>, which improves line rendering when MSAA is disabled.
            </para>
            <para>This instance must not be modified!</para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.GraphicsHelper.RasterizerStateWireFrame">
            <summary>
            A default state object for wire-frame rendering.
            </summary>
            <remarks>
            <para>
            This default state object has the following settings:
            </para>
            <para>
            <c>
            CullMode = CullMode.None<br/>
            FillMode = FillMode.WireFrame<br/>
            MultiSampleAntiAlias = false
            </c>
            </para>
            <para>
            This instance must not be modified!
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.Project(Microsoft.Xna.Framework.Graphics.Viewport,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Matrix44F)">
            <overloads>
            <summary>
            Projects a position into screen space.
            </summary>
            </overloads>
            
            <summary>
            Projects a position from object space into screen space.
            </summary>
            <param name="viewport">The viewport.</param>
            <param name="position">The position in object space.</param>
            <param name="projection">The projection matrix.</param>
            <param name="view">The view matrix.</param>
            <param name="world">The world matrix.</param>
            <returns>
            The position in screen space: The x- and y-components define the pixel position. The 
            z-component defines the depth in clip space. (The depth of the clipping volume ranges from 
            <see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MinDepth"/> to <see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MaxDepth"/> - usually [0, 1].)
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.Project(Microsoft.Xna.Framework.Graphics.Viewport,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Matrix44F)">
            <summary>
            Projects a position from world space into screen space.
            </summary>
            <param name="viewport">The viewport.</param>
            <param name="position">The position in world space.</param>
            <param name="projection">The projection matrix.</param>
            <param name="view">The view matrix.</param>
            <returns>
            The position in screen space: The x- and y-components define the pixel position. The 
            z-component defines the depth in clip space. (The depth of the clipping volume ranges from 
            <see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MinDepth"/> to <see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MaxDepth"/> - usually [0, 1].)
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.Project(Microsoft.Xna.Framework.Graphics.Viewport,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Matrix44F)">
            <summary>
            Projects a position from world space into screen space.
            </summary>
            <param name="viewport">The viewport.</param>
            <param name="position">The position in view space.</param>
            <param name="projection">The projection matrix.</param>
            <returns>
            The position in screen space: The x- and y-components define the pixel position. The 
            z-component defines the depth in clip space mapped to the range
            [<see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MinDepth"/>, <see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MaxDepth"/>] (usually [0, 1]).
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.ProjectToViewport(Microsoft.Xna.Framework.Graphics.Viewport,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Matrix44F)">
            <summary>
            Projects a position from world space into viewport.
            </summary>
            <param name="viewport">The viewport.</param>
            <param name="position">The position in view space.</param>
            <param name="projection">The projection matrix.</param>
            <returns>
            The position in the viewport: The x- and y-components define the pixel position
            in the range [0, viewport width/height]. The z-component defines the depth in clip space.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.Unproject(Microsoft.Xna.Framework.Graphics.Viewport,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Matrix44F)">
            <overloads>
            <summary>
            Projects a position back from screen space.
            </summary>
            </overloads>
            
            <summary>
            Projects a position from screen space into object space.
            </summary>
            <param name="viewport">The <see cref="T:Microsoft.Xna.Framework.Graphics.Viewport"/>.</param>
            <param name="position">
            The position in screen space: The x- and y-components define the pixel position. The 
            z-component defines the depth in clip space. (The depth of the clipping volume ranges from 
            <see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MinDepth"/> to <see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MaxDepth"/> - usually [0, 1].)
            </param>
            <param name="projection">The projection matrix.</param>
            <param name="view">The view matrix.</param>
            <param name="world">The world matrix.</param>
            <returns>The position in object space.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.Unproject(Microsoft.Xna.Framework.Graphics.Viewport,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Matrix44F)">
            <summary>
            Projects a position from screen space into world space.
            </summary>
            <param name="viewport">The <see cref="T:Microsoft.Xna.Framework.Graphics.Viewport"/>.</param>
            <param name="position">
            The position in screen space: The x- and y-components define the pixel position. The 
            z-component defines the depth in clip space. (The depth of the clipping volume ranges from 
            <see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MinDepth"/> to <see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MaxDepth"/> - usually [0, 1].)
            </param>
            <param name="projection">The projection matrix.</param>
            <param name="view">The view matrix.</param>
            <returns>The position in world space.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.Unproject(Microsoft.Xna.Framework.Graphics.Viewport,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Matrix44F)">
            <summary>
            Projects a position from screen space into view space.
            </summary>
            <param name="viewport">The <see cref="T:Microsoft.Xna.Framework.Graphics.Viewport"/>.</param>
            <param name="position">
            The position in screen space: The x- and y-components define the pixel position. The 
            z-component defines the depth in clip space. (The depth of the clipping volume ranges from 
            <see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MinDepth"/> to <see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MaxDepth"/> - usually [0, 1].)
            </param>
            <param name="projection">The projection matrix.</param>
            <returns>The position in view space.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.GetScissorRectangle(DigitalRune.Graphics.SceneGraph.CameraNode,Microsoft.Xna.Framework.Graphics.Viewport,DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
            <overloads>
            <summary>
            Gets a scissor rectangle that encloses the specified object.
            </summary>
            </overloads>
            
            <summary>
            Gets a scissor rectangle that encloses the specified sphere.
            </summary>
            <param name="cameraNode">The camera node.</param>
            <param name="viewport">The viewport.</param>
            <param name="positionWorld">The sphere center in world space.</param>
            <param name="radius">The sphere radius.</param>
            <returns>The scissor rectangle.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cameraNode"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.GetScissorRectangle(DigitalRune.Graphics.SceneGraph.CameraNode,Microsoft.Xna.Framework.Graphics.Viewport,DigitalRune.Geometry.IGeometricObject)">
            <summary>
            Gets a scissor rectangle that encloses the specified geometric object.
            </summary>
            <param name="cameraNode">The camera node.</param>
            <param name="viewport">The viewport.</param>
            <param name="geometricObject">The geometric object.</param>
            <returns>The scissor rectangle.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cameraNode"/> or <paramref name="geometricObject"/> is 
            <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.GetViewportRectangle(DigitalRune.Graphics.SceneGraph.CameraNode,Microsoft.Xna.Framework.Graphics.Viewport,DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
            <overloads>
            <summary>
            Gets a rectangle that encloses the specified object in the viewport.
            </summary>
            </overloads>
            
            <summary>
            Gets the rectangle that encloses the specified sphere in the viewport.
            </summary>
            <param name="cameraNode">The camera node.</param>
            <param name="viewport">The viewport.</param>
            <param name="positionWorld">The sphere center in world space.</param>
            <param name="radius">The sphere radius.</param>
            <returns>The rectangle that encloses the sphere.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cameraNode"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.GetViewportRectangle(DigitalRune.Graphics.SceneGraph.CameraNode,Microsoft.Xna.Framework.Graphics.Viewport,DigitalRune.Geometry.IGeometricObject)">
            <summary>
            Gets the rectangle that encloses the specified geometric object in the viewport.
            </summary>
            <param name="cameraNode">The camera node.</param>
            <param name="viewport">The viewport.</param>
            <param name="geometricObject">The geometric object.</param>
            <returns>The rectangle that encloses <paramref name="geometricObject"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cameraNode"/> or <paramref name="geometricObject"/> is 
            <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.GetBounds(DigitalRune.Graphics.SceneGraph.CameraNode,DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
            <summary>
            Gets the bounds of the specified sphere relative to the viewport.
            </summary>
            <param name="cameraNode">The camera node.</param>
            <param name="positionWorld">The sphere center in world space.</param>
            <param name="radius">The sphere radius.</param>
            <returns>
            The bounds (left, top, right, bottom) where each entry is in the range [0, 1].
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cameraNode"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.GetBounds(DigitalRune.Graphics.SceneGraph.CameraNode,DigitalRune.Geometry.IGeometricObject)">
            <overloads>
            <summary>
            Gets a the bounds of the specified object relative to the viewport.
            </summary>
            </overloads>
            
            <summary>
            Gets a the bounds of the specified geometric object relative to the viewport.
            </summary>
            <param name="cameraNode">The camera node.</param>
            <param name="geometricObject">The geometric object.</param>
            <returns>
            The bounds (left, top, right, bottom) where each entry is in the range [0, 1].
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cameraNode"/> or <paramref name="geometricObject"/> is 
            <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.GetScreenSize(DigitalRune.Graphics.SceneGraph.CameraNode,Microsoft.Xna.Framework.Graphics.Viewport,DigitalRune.Geometry.IGeometricObject)">
            <summary>
            Estimates the size of an object in pixels.
            </summary>
            <param name="cameraNode">The camera node with perspective projection.</param>
            <param name="viewport">The viewport.</param>
            <param name="geometricObject">The geometric object.</param>
            <returns>
            The estimated width and height of <paramref name="geometricObject"/> in pixels.
            </returns>
            <remarks>
            The method assumes that the object is fully visible by the camera, i.e. it does not perform
            frustum culling. It estimates the size of <paramref name="geometricObject"/> based on its 
            bounding shape.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cameraNode"/> or <paramref name="geometricObject"/> is 
            <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.GetViewNormalizedDistance(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.SceneGraph.CameraNode)">
            <overloads>
            <summary>
            Gets the view-normalized distance ("LOD distance").
            </summary>
            </overloads>
            
            <summary>
            Calculates the view-normalized distance ("LOD distance") of the specified scene node.
            </summary>
            <param name="sceneNode">The scene node.</param>
            <param name="cameraNode">The camera node.</param>
            <returns>The view-normalized distance.</returns>
            <remarks>
            <para>
            The <i>view-normalized distance</i> is defined as:
            </para>
            <para>
            <i>distance<sub>normalized</sub></i> = <i>distance</i> / <i>yScale</i>
            </para>
            <para>
            where <i>distance</i> is the 3D Euclidean distance between the camera and the object.
            <i>yScale</i> is the second diagonal entry of the projection matrix.
            </para>
            <para>
            For symmetric perspective projections the above equation is the same as
            </para>
            <para>
            <i>distance<sub>normalized</sub></i> = <i>distance</i> * tan(<i>fov<sub>Y</sub></i> / 2)
            </para>
            <para>
            where <i>fov<sub>Y</sub></i> is the camera's vertical field-of-view.
            </para>
            <para>
            In other words, the view-normalized distance is the camera distance times a camera 
            correction factor. The correction factor accounts for the camera field-of-view. The 
            resulting value is inversely proportional to the screen size of the object and independent
            of the current field-of-view. It can be used to specify LOD distances or similar metrics.
            </para>
            <para>
            Note that tan(<i>fov<sub>Y</sub></i>/2) is 1 if the <i>fov<sub>Y</sub></i> = 90°. This means 
            that distance and view-normalized distance are identical for a camera with a vertical 
            field-of-view of 90°. (This 90° FOV camera is the "reference camera".)
            </para>
            <para>
            The view-normalized distance is only defined for cameras with perspective projections. The 
            result is undefined for orthographic projections!
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.GraphicsHelper.GetViewNormalizedDistance(System.Single,DigitalRune.Mathematics.Algebra.Matrix44F)">
            <summary>
            Converts the specified distance to a view-normalized distance ("LOD distance").
            </summary>
            <param name="distance">The 3D Euclidean distance between the object and the camera.</param>
            <param name="projection">The projection transformation.</param>
            <returns>The view-normalized distance.</returns>
            <inheritdoc cref="M:DigitalRune.Graphics.GraphicsHelper.GetViewNormalizedDistance(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.SceneGraph.CameraNode)"/>
        </member>
        <member name="T:DigitalRune.Graphics.InstanceData">
            <summary>
            Describes a custom vertex format that contains instance data for hardware instancing.
            </summary>
            <remarks>
            <para>
            When hardware instancing is used in the <see cref="T:DigitalRune.Graphics.Rendering.MeshRenderer"/>, the vertex attribute
            semantic "BLENDWEIGHT" is used to add instance information to each vertex. The instance
            information is stored in 4 float4 vectors (<see cref="F:DigitalRune.Graphics.InstanceData.Register0"/> to
            <see cref="F:DigitalRune.Graphics.InstanceData.Register3"/>).
            </para>
            <para>
            By default, the <see cref="T:DigitalRune.Graphics.Rendering.MeshRenderer"/> uses <see cref="F:DigitalRune.Graphics.InstanceData.Register0"/> to
            <see cref="F:DigitalRune.Graphics.InstanceData.Register2"/> to store the first 3 rows<sup>1</sup> of the world matrix. The 4th row
            is always (0, 0, 0, 1); hence, we can use <see cref="F:DigitalRune.Graphics.InstanceData.Register3"/> to store additional data.
            The <see cref="T:DigitalRune.Graphics.Rendering.MeshRenderer"/> uses <see cref="F:DigitalRune.Graphics.InstanceData.Register3"/> to store
            <see cref="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.InstanceColor"/> and
            <see cref="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.InstanceAlpha"/>.
            </para>
            <para>
            <sup>1</sup> If the world matrix is stored in a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/> (DigitalRune data
            type), <see cref="F:DigitalRune.Graphics.InstanceData.Register0"/> to <see cref="F:DigitalRune.Graphics.InstanceData.Register2"/> store the first 3 rows of the world
            matrix. If we are talking about a world matrix in a <see cref="T:Microsoft.Xna.Framework.Matrix"/> (XNA data type),
            <see cref="F:DigitalRune.Graphics.InstanceData.Register0"/> to <see cref="F:DigitalRune.Graphics.InstanceData.Register2"/> store the first 3 columns of the world
            matrix. World matrices in DigitalRune Mathematics and XNA are transposed (see documentation of
            DigitalRune Mathematics).
            </para>
            <para>
            The above paragraphs describe how the <see cref="T:DigitalRune.Graphics.Rendering.MeshRenderer"/> and the default DigitalRune
            material shaders use hardware instancing. However, you can use this vertex structure to store
            any other form of instance data in 4 float4 vectors. You need to create a special shader which
            knows how to interpret the data.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.InstanceData.VertexDeclaration">
            <summary>
            The vertex declaration.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.InstanceData.Register0">
            <summary>
            The first instance data register.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.InstanceData.Register1">
            <summary>
            The second instance data register.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.InstanceData.Register2">
            <summary>
            The third instance data register.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.InstanceData.Register3">
            <summary>
            The fourth instance data register.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.InstanceData.SizeInBytes">
            <summary>
            Gets the size of the <see cref="T:DigitalRune.Graphics.InstanceData"/> structure in bytes.
            </summary>
            <value>The size of the vertex in bytes.</value>
        </member>
        <member name="M:DigitalRune.Graphics.InstanceData.#ctor(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.InstanceData"/> struct.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.InstanceData"/> struct.
            </summary>
            <param name="register0">The first instance data register.</param>
            <param name="register1">The second instance data register.</param>
            <param name="register2">The third instance data register.</param>
            <param name="register3">The fourth instance data register.</param>
        </member>
        <member name="M:DigitalRune.Graphics.InstanceData.#ctor(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.InstanceData"/> struct.
            </summary>
            <param name="world">The world matrix.</param>
            <param name="color">The instance color (RGBA).</param>
            <remarks>
            The first three columns of the world matrix is stored in <see cref="F:DigitalRune.Graphics.InstanceData.Register0"/> to
            <see cref="F:DigitalRune.Graphics.InstanceData.Register2"/>. The color is stored in <see cref="F:DigitalRune.Graphics.InstanceData.Register3"/>.
             </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.InstanceData.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.InstanceData"/> struct.
            </summary>
            <param name="scale">The instance scale.</param>
            <param name="pose">The instance pose.</param>
            <param name="color">The instance color (RGBA).</param>
            <remarks>
            A world matrix is created from <paramref name="scale"/> and <paramref name="pose"/>.
            The first three columns of the world matrix is stored in <see cref="F:DigitalRune.Graphics.InstanceData.Register0"/> to
            <see cref="F:DigitalRune.Graphics.InstanceData.Register2"/>. The color is stored in <see cref="F:DigitalRune.Graphics.InstanceData.Register3"/>.
             </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.InstanceData.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> and this instance are the same type and 
            represent the same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.InstanceData.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="P:DigitalRune.Graphics.InstanceData.Microsoft#Xna#Framework#Graphics#IVertexType#VertexDeclaration">
            <summary>
            Gets the vertex declaration.
            </summary>
            <value>The vertex declaration.</value>
        </member>
        <member name="M:DigitalRune.Graphics.InstanceData.op_Equality(DigitalRune.Graphics.InstanceData,DigitalRune.Graphics.InstanceData)">
            <summary>
            Compares two objects to determine whether they are the same.
            </summary>
            <param name="left">Object to the left of the equality operator.</param>
            <param name="right">Object to the right of the equality operator.</param>
            <returns>
            <see langword="true"/> if the objects are the same; <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.InstanceData.op_Inequality(DigitalRune.Graphics.InstanceData,DigitalRune.Graphics.InstanceData)">
            <summary>
            Compares two objects to determine whether they are different. 
            </summary>
            <param name="left">Object to the left of the inequality operator.</param>
            <param name="right">Object to the right of the inequality operator.</param>
            <returns>
            <see langword="true"/> if the objects are different; <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.InstanceData.ToString">
            <summary>
            Retrieves a string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.NoiseHelper">
            <summary>
            Contains helper method for the Noise shaders.
            </summary>
            <remarks>
            This static class creates the required lookup textures. The textures are cached and re-used
            as long as the <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice"/> is the same.
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.NoiseHelper.DefaultJitterMapWidth">
            <summary>
            The width of the default jitter map in texels. 
            (Used in shadow mask renderers, DefaultEffectBinder.)
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.NoiseHelper.Gradients3D">
            <summary>
            Gradients for Improved Perlin Noise in 3D.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.NoiseHelper.Gradients4D">
            <summary>
            Gradients for Improved Perlin Noise in 4D.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.NoiseHelper.GetNoiseTextures(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Gets the noise textures from <see cref="P:DigitalRune.Graphics.IGraphicsService.Data"/>. If necessary a new entry 
            is created.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <returns>A noise textures.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.NoiseHelper.GetNoiseTexture(DigitalRune.Graphics.IGraphicsService,System.Int32,System.Int32)">
             <overloads>
             <summary>
             Gets a tileable noise texture.
             </summary>
             </overloads>
            
             <summary>
             Gets a tileable noise texture.
             </summary>
             <param name="graphicsService">The graphics service.</param>
             <param name="size">The width of the quadratic texture in pixels.</param>
             <param name="numberOfOscillations">
             Defines the scale/detail of the noise. The noise changes smoothly from dark to light and
             back, like a sine function. This value defines the max. number of such oscillations. For
             example, if this value is 10, then the noise texture will contain 5 to 10 oscillations.
             </param>
             <returns>A texture containing Perlin noise.</returns>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="graphicsService" /> is <see langword="null" />.
             </exception>
             <exception cref="T:System.ArgumentOutOfRangeException">
             <paramref name="size" /> or <paramref name="numberOfOscillations" /> is less than 1.
             </exception>
             <remarks>
             This method returns a quadratic RGBA texture that contains noise. Each channel contains a
             different 8-bit noise value, i.e. the texture contains 4 different Perlin noise images.
             </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.NoiseHelper.GetNoiseTexture(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Gets a tileable noise texture.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <returns>A texture containing Perlin noise.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
            <remarks>
            This method returns a quadratic RGBA texture that contains noise. Each channel contains a
            different 8-bit noise value, i.e. the texture contains 4 different Perlin noise images.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.NoiseHelper.GetGrainTexture(DigitalRune.Graphics.IGraphicsService,System.Int32)">
            <summary>
            Gets a grain texture.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <param name="size">The width of the texture in pixels.</param>
            <returns>A grain texture.</returns>
            <remarks>
            This method returns a quadratic RGBA texture that contains random color values. (For each 
            pixel, each channel contains a random 8-bit value). This method will always return the same 
            texture if it is called for the same <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice"/> and the same size.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="size"/> is less than 1.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.NoiseHelper.GetPermutationTexture(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Gets the permutation lookup texture (used in 4D noise, but not in the optimized 3D noise).
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <returns>The permutation lookup texture.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.NoiseHelper.GetPermutation3DTexture(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Gets the optimized permutation lookup texture for 3D Perlin noise.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <returns>The permutation lookup texture.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.NoiseHelper.GetGradient3DTexture(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Gets the optimized gradient lookup texture for 3D Perlin noise.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <returns>The gradient lookup texture.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.NoiseHelper.GetGradient4DTexture(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Gets the gradient lookup texture for 4D Perlin noise.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <returns>The gradient lookup texture.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.NoiseHelper.GetDitherTexture(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Gets a 16x16 dither map.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <returns>A 16x16 dither map.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.RenderContextHelper">
            <summary>
            Provides helper methods for the <see cref="T:DigitalRune.Graphics.RenderContext"/> type.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.RenderContextHelper.IsHdrEnabled(DigitalRune.Graphics.RenderContext)">
            <summary>
            Determines whether the current <see cref="P:DigitalRune.Graphics.RenderContext.RenderTarget"/> is 
            <see cref="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.HdrBlendable"/>.
            </summary>
            <param name="context">The render context.</param>
            <returns>
            <see langword="true" /> if the current <see cref="P:DigitalRune.Graphics.RenderContext.RenderTarget"/> is 
            <see cref="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.HdrBlendable"/>; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.RenderContextHelper.Validate(DigitalRune.Graphics.RenderContext,Microsoft.Xna.Framework.Graphics.GraphicsResource)">
            <summary>
            Validates the render context of the specified graphics resource. (Throws an exception if the
            graphics device is invalid.)
            </summary>
            <param name="context">The render context.</param>
            <param name="resource">The graphics resource.</param>
            <exception cref="T:DigitalRune.Graphics.GraphicsException">
            Invalid render context.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.RenderContextHelper.ThrowIfCameraMissing(DigitalRune.Graphics.RenderContext)">
            <summary>
            Throws a <see cref="T:DigitalRune.Graphics.GraphicsException"/> if <see cref="P:DigitalRune.Graphics.RenderContext.CameraNode"/> is not 
            set.
            </summary>
            <param name="context">The render context.</param>
            <exception cref="T:DigitalRune.Graphics.GraphicsException">
            The camera node is not set in render context.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.RenderContextHelper.ThrowIfLodCameraMissing(DigitalRune.Graphics.RenderContext)">
            <summary>
            Throws a <see cref="T:DigitalRune.Graphics.GraphicsException"/> if <see cref="P:DigitalRune.Graphics.RenderContext.LodCameraNode"/> is not 
            set.
            </summary>
            <param name="context">The render context.</param>
            <exception cref="T:DigitalRune.Graphics.GraphicsException">
            The LOD camera node is not set in render context.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.RenderContextHelper.ThrowIfGBuffer0Missing(DigitalRune.Graphics.RenderContext)">
            <summary>
            Throws a <see cref="T:DigitalRune.Graphics.GraphicsException" /> if <see cref="P:DigitalRune.Graphics.RenderContext.GBuffer0"/> is not 
            set.
            </summary>
            <param name="context">The render context.</param>
            <exception cref="T:DigitalRune.Graphics.GraphicsException">
            G-buffer 0 is not set in render context.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.RenderContextHelper.ThrowIfGBuffer1Missing(DigitalRune.Graphics.RenderContext)">
            <summary>
            Throws a <see cref="T:DigitalRune.Graphics.GraphicsException" /> if <see cref="P:DigitalRune.Graphics.RenderContext.GBuffer1"/> is not 
            set.
            </summary>
            <param name="context">The render context.</param>
            <exception cref="T:DigitalRune.Graphics.GraphicsException">
            G-buffer 1 is not set in render context.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.RenderContextHelper.ThrowIfRenderPassMissing(DigitalRune.Graphics.RenderContext)">
            <summary>
            Throws a <see cref="T:DigitalRune.Graphics.GraphicsException" /> if <see cref="P:DigitalRune.Graphics.RenderContext.RenderPass"/> is not 
            set.
            </summary>
            <param name="context">The render context.</param>
            <exception cref="T:DigitalRune.Graphics.GraphicsException">
            Render pass is not set in render context.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.RenderContextHelper.ThrowIfSceneMissing(DigitalRune.Graphics.RenderContext)">
            <summary>
            Throws a <see cref="T:DigitalRune.Graphics.GraphicsException" /> if <see cref="P:DigitalRune.Graphics.RenderContext.Scene"/> is not set.
            </summary>
            <param name="context">The render context.</param>
            <exception cref="T:DigitalRune.Graphics.GraphicsException">
            Scene is not set in render context.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.RenderStateSnapshot">
            <summary>
            Stores/restores render states.
            </summary>
            <remarks>
            This struct type gets a snapshot of the current graphics device render states when it is
            created. It restores the saved render states when <see cref="M:DigitalRune.Graphics.RenderStateSnapshot.Restore"/> is called. 
            Only the following states of the <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice"/> are stored: 
            <see cref="T:Microsoft.Xna.Framework.Graphics.BlendState"/>, <see cref="T:Microsoft.Xna.Framework.Graphics.DepthStencilState"/> and <see cref="T:Microsoft.Xna.Framework.Graphics.RasterizerState"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.RenderStateSnapshot.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.RenderStateSnapshot" /> struct.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <exception cref="T:System.ArgumentNullException">graphicsDevice</exception>
        </member>
        <member name="M:DigitalRune.Graphics.RenderStateSnapshot.Restore">
            <summary>
            Restores the graphics device state that was stored in the constructor of this instance.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.RenderTargetFormat">
            <summary>
            Describes the size and format of a texture or a render target.
            </summary>
            <remarks>
            <para>
            All properties are <see cref="T:System.Nullable"/>. A value of <see langword="null"/> means that the
            property is undefined. For example, if <see cref="P:DigitalRune.Graphics.RenderTargetFormat.Width"/> is <see langword="null"/>, then
            it is undefined and the user may choose any suitable width.
            </para>
            <para>
            A <see cref="T:DigitalRune.Graphics.RenderTargetFormat"/> can be also be used to describe cube maps. In this case
            the <see cref="P:DigitalRune.Graphics.RenderTargetFormat.Width"/> defines the size of the cube map and <see cref="P:DigitalRune.Graphics.RenderTargetFormat.Height"/> should be
            ignored because cube map faces are always quadratic.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.RenderTargetFormat.Width">
            <summary>
            Gets or sets the width (in pixels).
            </summary>
            <value>
            The width (in pixels) or <see langword="null"/> if the width is undefined.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative or 0.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.RenderTargetFormat.Height">
            <summary>
            Gets or sets the height (in pixels).
            </summary>
            <value>
            The height (in pixels) or <see langword="null"/> if the height is undefined.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative or 0.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.RenderTargetFormat.Mipmap">
            <summary>
            Gets or sets a value indicating whether the texture uses mipmapping.
            </summary>
            <value>
            <see langword="true"/> to enable a full mipmap chain to be generated.
            <see langword="false"/> to disable mipmapping. 
            <see langword="null"/> if the mipmapping behavior is undefined.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.RenderTargetFormat.SurfaceFormat">
            <summary>
            Gets or sets the surface format.
            </summary>
            <value>
            The surface format or <see langword="null"/> if the surface format is undefined.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.RenderTargetFormat.DepthStencilFormat">
            <summary>
            Gets or sets the depth/stencil buffer format.
            </summary>
            <value>
            The depth/stencil buffer format or <see langword="null"/> if the depth/stencil format is 
            undefined.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.RenderTargetFormat.MultiSampleCount">
            <summary>
            Gets or sets the number of sample locations during multisampling.
            </summary>
            <value>
            The number of sample locations during multisampling or <see langword="null"/> if the 
            number of sample locations is undefined.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.RenderTargetFormat.RenderTargetUsage">
            <summary>
            Gets or sets the render target usage.
            </summary>
            <value>
            The render target usage or <see langword="null"/> if the usage is undefined.
            </value>
        </member>
        <member name="M:DigitalRune.Graphics.RenderTargetFormat.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{Microsoft.Xna.Framework.Graphics.SurfaceFormat},System.Nullable{Microsoft.Xna.Framework.Graphics.DepthFormat})">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.RenderTargetFormat" /> struct.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.RenderTargetFormat"/> struct.
            </summary>
            <param name="width">
            The width or <see langword="null"/> if the width is undefined.
            </param>
            <param name="height">
            The height or <see langword="null"/> if the height is undefined.
            </param>
            <param name="mipmap">
            <see langword="true"/> to enable a full mipmap chain. <see langword="false"/> to disable 
            mipmapping. <see langword="null"/> if the mipmapping behavior is undefined.
            </param>
            <param name="surfaceFormat">
            The surface format or <see langword="null"/> if the surface format is undefined.
            </param>
            <param name="depthStencilFormat">
            The depth/stencil format or <see langword="null"/> if the depth/stencil format is undefined.
            </param>
            <remarks>
            The <see cref="P:DigitalRune.Graphics.RenderTargetFormat.MultiSampleCount"/> is initialized with 0. The 
            <see cref="P:DigitalRune.Graphics.RenderTargetFormat.RenderTargetUsage"/> is initialized with 
            <see cref="F:Microsoft.Xna.Framework.Graphics.RenderTargetUsage.DiscardContents"/>.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> or <paramref name="height"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.RenderTargetFormat.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{Microsoft.Xna.Framework.Graphics.SurfaceFormat},System.Nullable{Microsoft.Xna.Framework.Graphics.DepthFormat},System.Nullable{System.Int32},System.Nullable{Microsoft.Xna.Framework.Graphics.RenderTargetUsage})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.RenderTargetFormat"/> struct.
            </summary>
            <param name="width">The width or <see langword="null"/> if the width is undefined.</param>
            <param name="height">
            The height or <see langword="null"/> if the height is undefined.
            </param>
            <param name="mipmap">
            <see langword="true"/> to enable a full mipmap chain. <see langword="false"/> to disable
            mipmapping. <see langword="null"/> if the mipmapping behavior is undefined.
            </param>
            <param name="surfaceFormat">
            The surface format or <see langword="null"/> if the surface format is undefined.
            </param>
            <param name="depthStencilFormat">
            The depth/stencil format or <see langword="null"/> if the depth/stencil format is undefined.
            </param>
            <param name="multiSampleCount">
            The number of sample locations during multisampling or <see langword="null"/> if the 
            number of sample locations is undefined.
            </param>
            <param name="usage">
            The render target usage or <see langword="null"/> if the usage is undefined.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            width;The width must not be 0 or negative. or height;The height must not be 0 or negative.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> or <paramref name="height"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.RenderTargetFormat.#ctor(Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.RenderTargetFormat"/> struct.
            </summary>
            <param name="renderTarget2D">
            The <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/> from which the settings are copied. Can be 
            <see langword="null"/> to set all properties to undefined.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.RenderTargetFormat.#ctor(Microsoft.Xna.Framework.Graphics.RenderTargetCube)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.RenderTargetFormat"/> struct.
            </summary>
            <param name="renderTargetCube">
            The <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTargetCube"/> from which the settings are copied. Can be 
            <see langword="null"/> to set all properties to undefined.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.RenderTargetFormat.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.RenderTargetFormat"/> struct.
            </summary>
            <param name="texture2D">
            The <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/> from which the settings are copied. Can be 
            <see langword="null"/> to set all properties to undefined.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.RenderTargetFormat.#ctor(Microsoft.Xna.Framework.Graphics.TextureCube)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.RenderTargetFormat"/> struct.
            </summary>
            <param name="textureCube">
            The <see cref="T:Microsoft.Xna.Framework.Graphics.TextureCube"/> from which the settings are copied. Can be 
            <see langword="null"/> to set all properties to undefined.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.RenderTargetFormat.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to this instance;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.RenderTargetFormat.Equals(DigitalRune.Graphics.RenderTargetFormat)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.RenderTargetFormat.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures
            like a hash table. 
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.RenderTargetFormat.op_Equality(DigitalRune.Graphics.RenderTargetFormat,DigitalRune.Graphics.RenderTargetFormat)">
            <summary>
            Compares <see cref="T:DigitalRune.Graphics.RenderTargetFormat"/> to determine whether they are the same.
            </summary>
            <param name="left">The first <see cref="T:DigitalRune.Graphics.RenderTargetFormat"/>.</param>
            <param name="right">The second <see cref="T:DigitalRune.Graphics.RenderTargetFormat"/>.</param>
            <returns>
            <see langword="true"/> if the <paramref name="left"/> and <paramref name="right"/> are the 
            same; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.RenderTargetFormat.op_Inequality(DigitalRune.Graphics.RenderTargetFormat,DigitalRune.Graphics.RenderTargetFormat)">
            <summary>
            Compares <see cref="T:DigitalRune.Graphics.RenderTargetFormat"/> to determine whether they are different.
            </summary>
            <param name="left">The first <see cref="T:DigitalRune.Graphics.RenderTargetFormat"/>.</param>
            <param name="right">The second <see cref="T:DigitalRune.Graphics.RenderTargetFormat"/>.</param>
            <returns>
            <see langword="true"/> if the <paramref name="left"/> and <paramref name="right"/> are 
            different; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.RenderTargetFormat.IsCompatibleWith(DigitalRune.Graphics.RenderTargetFormat)">
            <summary>
            Determines whether this instance is compatible with the specified render target format.
            </summary>
            <param name="format">The format to compare with this instance.</param>
            <returns>
            <see langword="true" /> if this instance is compatible with the given format; otherwise, 
            <see langword="false" />.
            </returns>
            <remarks>
            This instance is compatible with the specified format if all properties are equal or if a
            property of this instance is undefined. This method returns <see langword="false"/> if a
            property in this instance has a value, but is undefined in the specified format.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.RenderTargetFormat.IsCompatibleWith(Microsoft.Xna.Framework.Graphics.Texture)">
            <summary>
            Determines whether this instance is compatible with the specified render target format.
            </summary>
            <param name="texture">The format to compare with this instance.</param>
            <returns>
            <see langword="true" /> if this instance is compatible with the given format; otherwise, 
            <see langword="false" />.
            </returns>
            <remarks>
            This instance is compatible with the specified format if all properties are equal or if a
            property of this instance is undefined. This method returns <see langword="false"/> if a
            property in this instance has a value, but is undefined in the specified format.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="texture"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.RenderTargetPool">
            <summary>
            Manages a pool of reusable render targets.
            </summary>
            <remarks>
            <para>
            This class manages a list of render targets. To get a render target call the
            <strong>Obtain2D</strong> or <strong>ObtainCube</strong> method. After the render target is
            not needed any more call <strong>Recycle</strong>. Once per frame, <see cref="M:DigitalRune.Graphics.RenderTargetPool.Update"/> must
            be called. This method updates internal render target usage data and removes render targets
            which have not been used for a while (see property <see cref="P:DigitalRune.Graphics.RenderTargetPool.FrameLimit"/>).
            <see cref="M:DigitalRune.Graphics.RenderTargetPool.Clear"/> should be called when the graphics settings of the game have changed, e.g.
            when the size of the back buffer is changed, or at certain events, e.g. when a new level is
            loaded.
            </para>
            <para>
            <strong>Thread-Safety:</strong> This class is <strong>not</strong> thread-safe.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.RenderTargetPool.GraphicsService">
            <summary>
            Gets the graphics service.
            </summary>
            <value>The graphics service.</value>
        </member>
        <member name="P:DigitalRune.Graphics.RenderTargetPool.FrameLimit">
            <summary>
            Gets or sets the number of frames a recycled render target will be cached before it is 
            released.
            </summary>
            <value>
            The number of frames a recycled render target will be cached before it is released. The 
            default value is 10.
            </value>
            <remarks>
            When a render target is recycled (see <see cref="M:DigitalRune.Graphics.RenderTargetPool.Recycle(Microsoft.Xna.Framework.Graphics.RenderTarget2D)"/>) and re-added to
            the pool of render targets, a frame counter for this render target is set to 0. Each frame 
            the counter of all render targets in the pool is incremented. If a counter gets equal to or 
            larger than <see cref="P:DigitalRune.Graphics.RenderTargetPool.FrameLimit"/>, the render target is disposed. This mechanism is used 
            to avoid that render targets, which are not needed anymore, are kept alive.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.RenderTargetPool.Enabled">
            <summary>
            Gets or sets a value indicating whether render target pooling is enabled.
            </summary>
            <value>
            <see langword="true"/> if render target pooling is enabled; otherwise,
            <see langword="false"/>. The default value is <see langword="true"/>.
            </value>
            <remarks>
            Setting <see cref="P:DigitalRune.Graphics.RenderTargetPool.Enabled"/> to <see langword="false"/> clears the render target pool and
            disables pooling. The <strong>Obtain</strong>/<strong>Recycle</strong> methods can be called
            normally. But internally no render targets are reused.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.RenderTargetPool.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.RenderTargetPool"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.RenderTargetPool.Dispose">
            <summary>
            Releases all resources used by an instance of the <see cref="T:DigitalRune.Graphics.RenderTargetPool"/> class.
            </summary>
            <remarks>
            This method calls the virtual <see cref="M:DigitalRune.Graphics.RenderTargetPool.Dispose(System.Boolean)"/> method, passing in
            <see langword="true"/>, and then suppresses finalization of the instance.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.RenderTargetPool.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.RenderTargetPool"/>
            class
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources;
            <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.RenderTargetPool.Clear">
            <summary>
            Removes all cached render targets.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.RenderTargetPool.Obtain2D(DigitalRune.Graphics.RenderTargetFormat)">
            <summary>
            Obtains a 2D render target that matches the given specification.
            </summary>
            <param name="format">
            The render target format. If a property in the format is <see langword="null"/>, then the 
            value of the back buffer is used. 
            </param>
            <returns>A render target with the given specified format.</returns>
            <remarks>
            This method returns a render target from the pool. If no suitable, free render target is 
            found, a new one is created.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.RenderTargetPool.ObtainCube(DigitalRune.Graphics.RenderTargetFormat)">
            <summary>
            Obtains a cube map render target that matches the given specification.
            </summary>
            <param name="format">
            The render target format. If a property in the format is <see langword="null"/>, then the
            value of the back buffer is used. The <see cref="P:DigitalRune.Graphics.RenderTargetFormat.Width"/> is used to
            define the size of the cube map. <see cref="P:DigitalRune.Graphics.RenderTargetFormat.Height"/> is ignored.
            </param>
            <returns>A cube map render target with the specified format.</returns>
            <remarks>
            This method returns a render target from the pool. If no suitable, free render target is 
            found, a new one is created.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.RenderTargetPool.Recycle(Microsoft.Xna.Framework.Graphics.Texture)">
            <overloads>
            <summary>
            Releases a render target and puts it back into the pool for future reuse.
            </summary>
            </overloads>
            
            <summary>
            Releases a render target and puts it back into the pool for future reuse.
            </summary>
            <param name="renderTarget">The render target.</param>
            <exception cref="T:System.ArgumentException">
            The type of <paramref name="renderTarget"/> is not supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.RenderTargetPool.Recycle(Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
            <summary>
            Releases a render target and puts it back into the pool for future reuse.
            </summary>
            <param name="renderTarget">The render target.</param>
        </member>
        <member name="M:DigitalRune.Graphics.RenderTargetPool.Recycle(Microsoft.Xna.Framework.Graphics.RenderTargetCube)">
            <summary>
            Releases a render target and puts it back into the pool for future reuse.
            </summary>
            <param name="renderTarget">The render target.</param>
        </member>
        <member name="M:DigitalRune.Graphics.RenderTargetPool.Update">
            <summary>
            Manages the cached render targets.
            </summary>
            <remarks>
            This method must be called once per frame. It disposes render targets that are not needed
            anymore (see <see cref="P:DigitalRune.Graphics.RenderTargetPool.FrameLimit"/>).
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.ShapeMeshCache">
            <summary>
            Creates and caches <see cref="T:DigitalRune.Graphics.Submesh"/>es for <see cref="T:DigitalRune.Geometry.Shapes.Shape"/>s.
            </summary>
            <remarks>
            <para>
            Whenever you have a shape and need a submesh, you can use this class.
            The returned submesh must not be modified because it might be shared. Every time you use the 
            submesh, check if it was disposed. This happens if the shape was changed.
            </para>
            <para>
            This class can also keep submeshes alive (using a strong reference) for a certain amount of 
            time. This is useful for the <see cref="T:DigitalRune.Graphics.Rendering.DebugRenderer"/>, which get the submeshes regularly.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.ShapeMeshCache.IsDisposed">
            <summary>
            Gets a value indicating whether this instance has been disposed of.
            </summary>
            <value>
            <see langword="true"/> if this instance has been disposed of; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.ShapeMeshCache.MeshRelativeError">
            <summary>
            Gets or sets the allowed relative mesh error.
            </summary>
            <value>The allowed relative error for meshes; in the range ]0, 1[.</value>
            <remarks>
            If triangle meshes are generated to draw curved shapes, the meshes are approximated with 
            this relative error value. 
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.ShapeMeshCache.MeshIterationLimit">
            <summary>
            Gets or sets the iteration limit for approximated meshes.
            </summary>
            <value>The iteration limit for approximated meshes. (Must be greater than 0.)</value>
            <remarks>
            If the mesh is generated by an iterative algorithm, no more than 
            <see cref="P:DigitalRune.Graphics.ShapeMeshCache.MeshIterationLimit"/> iterations are performed.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is 0 or negative.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.ShapeMeshCache.NormalAngleLimit">
            <summary>
            Gets or sets the normal angle limit which determines when vertex normal vectors of neighbor
            triangles can be merged.
            </summary>
            <value>
            The normal angle limit in radians. If the angle between two normal vectors is less than this
            value, the normals can be merged.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.ShapeMeshCache.MeshCacheFrameLimit">
            <summary>
            Gets or sets the number of frames an unused submesh will be cached before it can be garbage
            collected.
            </summary>
            <value>
            The number of frames an unused submeshes will be cached before it can be garbage collected.
            </value>
        </member>
        <member name="M:DigitalRune.Graphics.ShapeMeshCache.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.ShapeMeshCache"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.ShapeMeshCache.Dispose">
            <summary>
            Releases all resources used by an instance of the <see cref="T:DigitalRune.Graphics.ShapeMeshCache"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.ShapeMeshCache.Update">
            <summary>
            Updates the cache, ages all cached entries, and removes expired entries.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.ShapeMeshCache.GetMesh(DigitalRune.Geometry.Shapes.Shape,DigitalRune.Graphics.Submesh@,DigitalRune.Mathematics.Algebra.Matrix44F@)">
            <summary>
            Gets the submesh (vertex and index buffers) for a shape.
            </summary>
            <param name="shape">The shape.</param>
            <param name="submesh">
            The created or cached submesh. This is never <see langword="null"/>!
            </param>
            <param name="matrix">
            The optional matrix which has to be applied to submesh.
            </param>
            <remarks>
            Meshes are retrieved from a cache. If no matching submesh is cached, a new submesh is
            created and cached for future use. The returned submesh must not be modified! Before you use
            the submesh check if it was disposed - this happens if the shape was changed!
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="shape" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.PackedTexture">
            <summary>
            Defines a texture which has been packed into a texture atlas.
            </summary>
            <remarks>
            <para>
            A texture atlas is a large image containing a collection of textures. It is often more 
            efficient to pack multiple textures into a texture atlas which can be treated as a single unit
            by the graphics hardware. The <see cref="T:DigitalRune.Graphics.PackedTexture"/> represents a single texture within 
            the texture atlas.
            </para>
            <para>
            <strong>Tile Sets:</strong><br/>
            A packed texture can further be divided into tiles (= tile set). A tile set is a collection
            of images ("sprites" or "tiles"). All tiles have the same size and are packed in a regular
            grid: <see cref="P:DigitalRune.Graphics.PackedTexture.NumberOfColumns"/> defines the number of tiles in x direction and 
            <see cref="P:DigitalRune.Graphics.PackedTexture.NumberOfRows"/> defines the number of tiles in y direction. 
            </para>
            <para>
            <strong>2D Animations:</strong><br/>
            A tile set can be used for 2D animations ("flipbook animations", "sprite sheet animations"): 
            The tile set contains a sequence of images (animation frames). Cycling through the images in 
            rapid succession creates the illusion of movement.
            </para>
            <para>
            When a tile set is used for animation, the top-left tile contains the first animation frame, 
            the second tile in the upper row contains the second animation frame, and so on. The 
            bottom-right tile contains the last animation frame.
            </para>
            <para>
            <strong>Important:</strong> Most renderers require that the animation frames are tightly 
            packed and the tile set does not contain empty tiles. For example, an animation consisting of 
            3 frames can be packed as a 1x3 or 3x1 tile set, but not as 2x2!
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PackedTexture.Name">
            <summary>
            Gets or sets the name of the texture.
            </summary>
            <value>The name of the texture.</value>
        </member>
        <member name="P:DigitalRune.Graphics.PackedTexture.TextureAtlas">
            <summary>
            Gets or sets the texture atlas containing the packed texture.
            </summary>
            <value>The texture atlas that contains the packed texture.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.PackedTexture.TextureAtlasEx">
            <summary>
            Gets the <see cref="T:DigitalRune.Graphics.Texture2DEx"/>.
            </summary>
            <value>The <see cref="T:DigitalRune.Graphics.Texture2DEx"/>.</value>
        </member>
        <member name="P:DigitalRune.Graphics.PackedTexture.Offset">
            <summary>
            Gets or sets the offset of the packed texture in the texture atlas in UV coordinates.
            </summary>
            <value>
            The offset of the packed texture in the texture atlas. The offset is given in UV coordinates
            where (0, 0) is the upper-left corner and (1, 1) is the lower-right corner of the texture 
            atlas.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.PackedTexture.Scale">
            <summary>
            Gets or sets the scale of the packed texture relative to the texture atlas.
            </summary>
            <value>
            The scale of the packed texture in the texture atlas. The scale is relative to the texture
            atlas. Example: a value of (0.5, 0.5) indicates that the packed texture is half the width 
            and height of the texture atlas.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.PackedTexture.NumberOfColumns">
            <summary>
            Gets or sets the number of columns in the tile set.
            </summary>
            <value>The number of columns in the tile set. The default value is 1.</value>
            <seealso cref="P:DigitalRune.Graphics.PackedTexture.NumberOfRows"/>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is out of range.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.PackedTexture.NumberOfRows">
            <summary>
            Gets or sets the number of rows in the tile set.
            </summary>
            <value>The number of rows in the tile set. The default value is 1.</value>
            <seealso cref="P:DigitalRune.Graphics.PackedTexture.NumberOfColumns"/>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PackedTexture.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PackedTexture" /> class for a single texture.
            </summary>
            <param name="texture">The texture atlas that contains the packed texture.</param>
        </member>
        <member name="M:DigitalRune.Graphics.PackedTexture.#ctor(System.String,Microsoft.Xna.Framework.Graphics.Texture2D,DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PackedTexture" /> class.
            </summary>
            <param name="name">
            The original asset name of the packed texture. Can be <see langword="null"/> or empty.
            </param>
            <param name="texture">The texture atlas that contains the packed texture.</param>
            <param name="offset">The UV offset of the packed texture in the texture atlas.</param>
            <param name="scale">The scale of the packed texture relative to the texture atlas.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="texture"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PackedTexture.#ctor(System.String,Microsoft.Xna.Framework.Graphics.Texture2D,DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PackedTexture" /> class.
            </summary>
            <param name="name">
            The original asset name of the packed texture. Can be <see langword="null"/> or empty.
            </param>
            <param name="texture">The texture atlas that contains the packed texture.</param>
            <param name="offset">The UV offset of the packed texture in the texture atlas.</param>
            <param name="scale">The scale of the packed texture relative to the texture atlas.</param>
            <param name="numberOfColumns">The number of columns in the tile set.</param>
            <param name="numberOfRows">The number of rows in the tile set.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="texture"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="numberOfColumns"/> or <paramref name="numberOfRows"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PackedTexture.GetTextureCoordinates(DigitalRune.Mathematics.Algebra.Vector2F,System.Single)">
            <summary>
            Converts texture coordinates.
            </summary>
            <param name="texCoord">The texture coordinates of the unpacked texture.</param>
            <param name="animationTime">
            For tile sets: The normalized animation time. (0 = start of the animation, 1 = end of 
            animation)
            </param>
            <returns>The texture coordinate in the texture atlas.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.PackedTexture.GetBounds(System.Single)">
            <summary>
            Gets the bounds of the packed texture in pixel.
            </summary>
            <param name="animationTime">
            For tile sets: The normalized animation time. (0 = start of the animation, 1 = end of 
            animation)
            </param>
            <returns>The bounds of the packed texture in pixel.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.Texture2DEx">
            <summary>
            Provides additional data for a <see cref="T:Microsoft.Xna.Framework.Graphics.Texture"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Texture2DEx.From(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Gets the <see cref="T:DigitalRune.Graphics.Texture2DEx"/> for the specified <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/>.
            </summary>
            <param name="texture">The texture.</param>
            <returns>The <see cref="T:DigitalRune.Graphics.Texture2DEx"/>.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.TextureHelper">
            <summary>
            Provides helper methods for textures.
            </summary>
            <remarks>
            <para>
            This class provides several default textures (e.g. <see cref="M:DigitalRune.Graphics.TextureHelper.GetDefaultTexture2DWhite(DigitalRune.Graphics.IGraphicsService)"/>).
            These default textures are only created once per graphics device and are reused. These
            textures must not be modified.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.TextureHelper.GetDefaultTextures(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Gets the default textures from <see cref="P:DigitalRune.Graphics.IGraphicsService.Data"/>. If necessary a new entry
            is created.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.TextureHelper.GetDefaultTexture2DBlack(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Gets a black 2D texture with 1x1 pixels.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <returns>A black 2D texture with 1x1 pixels.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.TextureHelper.GetDefaultTexture2DBlack4F(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Gets a black 2D texture with 1x1 pixels using Vector4 format.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <returns>A black 2D texture with 1x1 pixels.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.TextureHelper.GetDefaultTexture2DWhite(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Gets a white 2D texture with 1x1 pixels.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <returns>A white 2D texture with 1x1 pixels.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.TextureHelper.GetDefaultNormalTexture(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Gets a 1x1 normal map. The normal vector is (0, 0, 1).
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <returns>
            A 1x1 normal map. The normal stored in the map is (0, 0, 1).
            The returned normal map can be used for effects which expect an uncompressed normal map
            and for effects which expect a DXT5nm normal map.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.TextureHelper.GetDefaultTexture3DBlack(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Gets a black 3D texture with 1x1 pixels.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <returns>A black 3D texture with 1x1 pixels.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.TextureHelper.GetDefaultTexture3DWhite(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Gets a white 3D texture with 1x1 pixels.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <returns>A white 3D texture with 1x1 pixels.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.TextureHelper.GetDefaultTextureCubeBlack(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Gets a cubemap texture where each face consists of 1 black pixel.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <returns>A cubemap texture where each face consists of 1 black pixel.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.TextureHelper.GetDefaultTextureCubeWhite(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Gets a cubemap texture where each face consists of 1 white pixel.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <returns>A cubemap texture where each face consists of 1 white pixel.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.TextureHelper.GetNormalsFittingTexture(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Gets the normals fitting texture for calculating "best fit" normals.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <returns>The normals fitting texture.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.TextureHelper.IsFloatingPointFormat(Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
            <summary>
            Determines whether the specified surface format is a floating-point format.
            </summary>
            <param name="format">The surface format.</param>
            <returns>
            <see langword="true"/> if the specified format is a floating-point format; otherwise, 
            <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Invalid format specified.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.VertexPosition">
            <summary>
            Describes a custom vertex format structure that contains only the vertex position (no normals,
            texture coordinates or other vertex data).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.VertexPosition.VertexDeclaration">
            <summary>
            The vertex declaration.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.VertexPosition.Position">
            <summary>
            The vertex position.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.VertexPosition.SizeInBytes">
            <summary>
            Gets the size of the <see cref="T:DigitalRune.Graphics.VertexPosition"/> structure in bytes.
            </summary>
            <value>The size of the vertex in bytes.</value>
        </member>
        <member name="M:DigitalRune.Graphics.VertexPosition.#ctor(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.VertexPosition"/> struct.
            </summary>
            <param name="position">The position of the vertex.</param>
        </member>
        <member name="M:DigitalRune.Graphics.VertexPosition.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> and this instance are the same type and 
            represent the same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.VertexPosition.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="P:DigitalRune.Graphics.VertexPosition.Microsoft#Xna#Framework#Graphics#IVertexType#VertexDeclaration">
            <summary>
            Gets the vertex declaration.
            </summary>
            <value>The vertex declaration.</value>
        </member>
        <member name="M:DigitalRune.Graphics.VertexPosition.op_Equality(DigitalRune.Graphics.VertexPosition,DigitalRune.Graphics.VertexPosition)">
            <summary>
            Compares two objects to determine whether they are the same. 
            </summary>
            <param name="left">Object to the left of the equality operator.</param>
            <param name="right">Object to the right of the equality operator.</param>
            <returns>
            <see langword="true"/> if the objects are the same; <see langword="false"/> otherwise. 
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.VertexPosition.op_Inequality(DigitalRune.Graphics.VertexPosition,DigitalRune.Graphics.VertexPosition)">
            <summary>
            Compares two objects to determine whether they are different. 
            </summary>
            <param name="left">Object to the left of the inequality operator.</param>
            <param name="right">Object to the right of the inequality operator.</param>
            <returns>
            <see langword="true"/> if the objects are different; <see langword="false"/> otherwise. 
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.VertexPosition.ToString">
            <summary>
            Retrieves a string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.VertexPositionNormal">
            <summary>
            Describes a custom vertex format structure that contains position and normal vector.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.VertexPositionNormal.VertexDeclaration">
            <summary>
            The vertex declaration.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.VertexPositionNormal.Position">
            <summary>
            The vertex position.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.VertexPositionNormal.Normal">
            <summary>
            The vertex normal vector.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.VertexPositionNormal.SizeInBytes">
            <summary>
            Gets the size of the <see cref="T:DigitalRune.Graphics.VertexPositionNormal"/> structure in bytes.
            </summary>
            <value>The size of the vertex in bytes.</value>
        </member>
        <member name="M:DigitalRune.Graphics.VertexPositionNormal.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.VertexPositionNormal"/> struct.
            </summary>
            <param name="position">The position of the vertex.</param>
            <param name="normal">The normal of the vertex.</param>
        </member>
        <member name="M:DigitalRune.Graphics.VertexPositionNormal.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> and this instance are the same type and 
            represent the same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.VertexPositionNormal.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="P:DigitalRune.Graphics.VertexPositionNormal.Microsoft#Xna#Framework#Graphics#IVertexType#VertexDeclaration">
            <summary>
            Gets the vertex declaration.
            </summary>
            <value>The vertex declaration.</value>
        </member>
        <member name="M:DigitalRune.Graphics.VertexPositionNormal.op_Equality(DigitalRune.Graphics.VertexPositionNormal,DigitalRune.Graphics.VertexPositionNormal)">
            <summary>
            Compares two objects to determine whether they are the same. 
            </summary>
            <param name="left">Object to the left of the equality operator.</param>
            <param name="right">Object to the right of the equality operator.</param>
            <returns>
            <see langword="true"/> if the objects are the same; <see langword="false"/> otherwise. 
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.VertexPositionNormal.op_Inequality(DigitalRune.Graphics.VertexPositionNormal,DigitalRune.Graphics.VertexPositionNormal)">
            <summary>
            Compares two objects to determine whether they are different. 
            </summary>
            <param name="left">Object to the left of the inequality operator.</param>
            <param name="right">Object to the right of the inequality operator.</param>
            <returns>
            <see langword="true"/> if the objects are different; <see langword="false"/> otherwise. 
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.VertexPositionNormal.ToString">
            <summary>
            Retrieves a string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.VertexPositionNormalColor">
            <summary>
            Describes a custom vertex format structure that contains position, normal vector and color.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.VertexPositionNormalColor.VertexDeclaration">
            <summary>
            The vertex declaration.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.VertexPositionNormalColor.Position">
            <summary>
            The vertex position.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.VertexPositionNormalColor.Normal">
            <summary>
            The vertex normal vector.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.VertexPositionNormalColor.Color">
            <summary>
            The vertex color.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.VertexPositionNormalColor.SizeInBytes">
            <summary>
            Gets the size of the <see cref="T:DigitalRune.Graphics.VertexPositionNormalColor"/> structure in bytes.
            </summary>
            <value>The size of the vertex in bytes.</value>
        </member>
        <member name="M:DigitalRune.Graphics.VertexPositionNormalColor.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.VertexPositionNormalColor"/> struct.
            </summary>
            <param name="position">The position of the vertex.</param>
            <param name="normal">The normal of the vertex.</param>
            <param name="color">The color of the vertex.</param>
        </member>
        <member name="M:DigitalRune.Graphics.VertexPositionNormalColor.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> and this instance are the same type and 
            represent the same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.VertexPositionNormalColor.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="P:DigitalRune.Graphics.VertexPositionNormalColor.Microsoft#Xna#Framework#Graphics#IVertexType#VertexDeclaration">
            <summary>
            Gets the vertex declaration.
            </summary>
            <value>The vertex declaration.</value>
        </member>
        <member name="M:DigitalRune.Graphics.VertexPositionNormalColor.op_Equality(DigitalRune.Graphics.VertexPositionNormalColor,DigitalRune.Graphics.VertexPositionNormalColor)">
            <summary>
            Compares two objects to determine whether they are the same. 
            </summary>
            <param name="left">Object to the left of the equality operator.</param>
            <param name="right">Object to the right of the equality operator.</param>
            <returns>
            <see langword="true"/> if the objects are the same; <see langword="false"/> otherwise. 
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.VertexPositionNormalColor.op_Inequality(DigitalRune.Graphics.VertexPositionNormalColor,DigitalRune.Graphics.VertexPositionNormalColor)">
            <summary>
            Compares two objects to determine whether they are different. 
            </summary>
            <param name="left">Object to the left of the inequality operator.</param>
            <param name="right">Object to the right of the inequality operator.</param>
            <returns>
            <see langword="true"/> if the objects are different; <see langword="false"/> otherwise. 
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.VertexPositionNormalColor.ToString">
            <summary>
            Retrieves a string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.VertexPositionNormalColorTexture">
            <summary>
            Describes a custom vertex format structure that contains position, normal vector, color and
            texture coordinates.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.VertexPositionNormalColorTexture.VertexDeclaration">
            <summary>
            The vertex declaration.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.VertexPositionNormalColorTexture.Position">
            <summary>
            The vertex position.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.VertexPositionNormalColorTexture.Normal">
            <summary>
            The vertex normal vector.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.VertexPositionNormalColorTexture.Color">
            <summary>
            The vertex color.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.VertexPositionNormalColorTexture.TextureCoordinate">
            <summary>
            The UV texture coordinates.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.VertexPositionNormalColorTexture.SizeInBytes">
            <summary>
            Gets the size of the <see cref="T:DigitalRune.Graphics.VertexPositionNormalColor"/> structure in bytes.
            </summary>
            <value>The size of the vertex in bytes.</value>
        </member>
        <member name="M:DigitalRune.Graphics.VertexPositionNormalColorTexture.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.VertexPositionNormalColor"/> struct.
            </summary>
            <param name="position">The position of the vertex.</param>
            <param name="normal">The normal of the vertex.</param>
            <param name="color">The color of the vertex.</param>
            <param name="textureCoordinate">The UV texture coordinates.</param>
        </member>
        <member name="M:DigitalRune.Graphics.VertexPositionNormalColorTexture.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> and this instance are the same type and 
            represent the same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.VertexPositionNormalColorTexture.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="P:DigitalRune.Graphics.VertexPositionNormalColorTexture.Microsoft#Xna#Framework#Graphics#IVertexType#VertexDeclaration">
            <summary>
            Gets the vertex declaration.
            </summary>
            <value>The vertex declaration.</value>
        </member>
        <member name="M:DigitalRune.Graphics.VertexPositionNormalColorTexture.op_Equality(DigitalRune.Graphics.VertexPositionNormalColorTexture,DigitalRune.Graphics.VertexPositionNormalColorTexture)">
            <summary>
            Compares two objects to determine whether they are the same. 
            </summary>
            <param name="left">Object to the left of the equality operator.</param>
            <param name="right">Object to the right of the equality operator.</param>
            <returns>
            <see langword="true"/> if the objects are the same; <see langword="false"/> otherwise. 
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.VertexPositionNormalColorTexture.op_Inequality(DigitalRune.Graphics.VertexPositionNormalColorTexture,DigitalRune.Graphics.VertexPositionNormalColorTexture)">
            <summary>
            Compares two objects to determine whether they are different. 
            </summary>
            <param name="left">Object to the left of the inequality operator.</param>
            <param name="right">Object to the right of the inequality operator.</param>
            <returns>
            <see langword="true"/> if the objects are different; <see langword="false"/> otherwise. 
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.VertexPositionNormalColorTexture.ToString">
            <summary>
            Retrieves a string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.VertexTexture">
            <summary>
            Describes a custom vertex format structure that contains only the texture coordinates (no 
            position, normal or other vertex data).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.VertexTexture.VertexDeclaration">
            <summary>
            The vertex declaration.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.VertexTexture.TextureCoordinate">
            <summary>
            The UV texture coordinates.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.VertexTexture.SizeInBytes">
            <summary>
            Gets the size of the <see cref="T:DigitalRune.Graphics.VertexTexture"/> structure in bytes.
            </summary>
            <value>The size of the vertex in bytes.</value>
        </member>
        <member name="M:DigitalRune.Graphics.VertexTexture.#ctor(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.VertexTexture"/> struct.
            </summary>
            <param name="textureCoordinate">The UV texture coordinate of the vertex.</param>
        </member>
        <member name="M:DigitalRune.Graphics.VertexTexture.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.VertexTexture" /> struct.
            </summary>
            <param name="u">The u texture coordinate.</param>
            <param name="v">The v texture coordinate.</param>
        </member>
        <member name="M:DigitalRune.Graphics.VertexTexture.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> and this instance are the same type and 
            represent the same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.VertexTexture.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="P:DigitalRune.Graphics.VertexTexture.Microsoft#Xna#Framework#Graphics#IVertexType#VertexDeclaration">
            <summary>
            Gets the vertex declaration.
            </summary>
            <value>The vertex declaration.</value>
        </member>
        <member name="M:DigitalRune.Graphics.VertexTexture.op_Equality(DigitalRune.Graphics.VertexTexture,DigitalRune.Graphics.VertexTexture)">
            <summary>
            Compares two objects to determine whether they are the same. 
            </summary>
            <param name="left">Object to the left of the equality operator.</param>
            <param name="right">Object to the right of the equality operator.</param>
            <returns>
            <see langword="true"/> if the objects are the same; <see langword="false"/> otherwise. 
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.VertexTexture.op_Inequality(DigitalRune.Graphics.VertexTexture,DigitalRune.Graphics.VertexTexture)">
            <summary>
            Compares two objects to determine whether they are different. 
            </summary>
            <param name="left">Object to the left of the inequality operator.</param>
            <param name="right">Object to the right of the inequality operator.</param>
            <returns>
            <see langword="true"/> if the objects are different; <see langword="false"/> otherwise. 
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.VertexTexture.ToString">
            <summary>
            Retrieves a string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Graphics"/> namespace provides types for rendering 3D graphics.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.PostProcessing.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Graphics.PostProcessing"/> namespace provides support for image
            post-processing.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.PostProcessing.PostProcessHelper">
            <summary>
            Provides default instances of post-processors that are used frequently.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessHelper.GetDownsampleFilter(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Gets a default <see cref="T:DigitalRune.Graphics.PostProcessing.DownsampleFilter"/> that can be used to downsample an image into
            a low-resolution render target.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <returns>The default <see cref="T:DigitalRune.Graphics.PostProcessing.DownsampleFilter"/>.</returns>
            <inheritdoc cref="T:DigitalRune.Graphics.PostProcessing.PostProcessHelper"/>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessHelper.GetUpsampleFilter(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Gets a default <see cref="T:DigitalRune.Graphics.PostProcessing.UpsampleFilter"/> that can be used to upsample a low-resolution
            image. (Internal only. Properties of <see cref="T:DigitalRune.Graphics.PostProcessing.UpsampleFilter"/> need to be set before
            use.)
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <returns>The default <see cref="T:DigitalRune.Graphics.PostProcessing.DownsampleFilter"/>.</returns>
            <inheritdoc cref="T:DigitalRune.Graphics.PostProcessing.PostProcessHelper"/>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessHelper.GetCopyFilter(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Gets a default <see cref="T:DigitalRune.Graphics.PostProcessing.CopyFilter"/> that can be used to copy a texture into a render
            target.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <returns>The default <see cref="T:DigitalRune.Graphics.PostProcessing.CopyFilter"/>.</returns>
            <inheritdoc cref="T:DigitalRune.Graphics.PostProcessing.PostProcessHelper"/>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.PostProcessing.PostProcessor">
            <summary>
            Performs scene post-processing, like filtering, color manipulation, etc.
            </summary>
            <remarks>
            <para>
            A post-processor reads a source texture, which must be specified in the 
            <see cref="P:DigitalRune.Graphics.RenderContext.SourceTexture"/> property of the <see cref="T:DigitalRune.Graphics.RenderContext"/>. It 
            processes the source texture and writes its output to a render target, which must be specified
            in the <see cref="P:DigitalRune.Graphics.RenderContext.RenderTarget"/> property of the <see cref="T:DigitalRune.Graphics.RenderContext"/>.
            The render target can be <see langword="null"/> to write into the back buffer of the graphics
            device.
            </para>
            <para>
            The post-processor will always call 
            <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice"/>.<see cref="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetRenderTarget(Microsoft.Xna.Framework.Graphics.RenderTarget2D)"/>
            for the specified render target - that means it is not necessary that the render target is
            currently set in the graphics device.
            </para>
            <para>
            In general, the <see cref="P:DigitalRune.Graphics.RenderContext.SourceTexture"/> and the 
            <see cref="P:DigitalRune.Graphics.RenderContext.RenderTarget"/> must not reference the same render target. 
            Only if the post-processor uses multi-pass rendering internally, or if the post-processor is 
            a <see cref="T:DigitalRune.Graphics.PostProcessing.PostProcessorChain"/> consisting of several post-processors, then the source 
            texture and the render target can reference the same object. That means, it depends on the
            used post-processor whether it is possible or not. If it is not possible, and the same render
            target is used as the source texture and the target, then XNA will throw an exception.
            </para>
            <para>
            Post-processors can be chained together: See class <see cref="T:DigitalRune.Graphics.PostProcessing.PostProcessorChain"/> for more 
            information.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.PostProcessor.IsDisposed">
            <summary>
            Gets a value indicating whether this post-processor has been disposed of.
            </summary>
            <value>
            <see langword="true"/> if this instance has been disposed of; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.PostProcessor.GraphicsService">
            <summary>
            Gets the graphics service.
            </summary>
            <value>The graphics service.</value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.PostProcessor.Enabled">
            <summary>
            Gets or sets a value indicating whether this post-processor is enabled.
            </summary>
            <value>
            <see langword="true"/> if enabled; otherwise, <see langword="false"/>. The default value is 
            <see langword="true"/>.
            </value>
            <remarks>
            <para>
            The methods <see cref="M:DigitalRune.Graphics.PostProcessing.PostProcessor.OnEnable"/> and <see cref="M:DigitalRune.Graphics.PostProcessing.PostProcessor.OnDisable"/> will be called automatically 
            when this property changes. 
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.PostProcessor.Name">
            <summary>
            Gets or sets the name of the post-processor.
            </summary>
            <value>The name of the post-processor.</value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.PostProcessor.DefaultTargetFormat">
            <summary>
            Gets or sets the default target format.
            (This property is used by the <see cref="T:DigitalRune.Graphics.PostProcessing.PostProcessorChain"/>).
            </summary>
            <value>
            The default target format. Per default, the <see cref="P:DigitalRune.Graphics.RenderTargetFormat.Width"/>,
            <see cref="P:DigitalRune.Graphics.RenderTargetFormat.Height"/> and <see cref="P:DigitalRune.Graphics.RenderTargetFormat.SurfaceFormat"/>
            are undefined. <see cref="P:DigitalRune.Graphics.RenderTargetFormat.Mipmap"/> is <see langword="false"/>, and
            <see cref="P:DigitalRune.Graphics.RenderTargetFormat.DepthStencilFormat"/> is <strong>DepthFormat.None</strong>.
            </value>
            <remarks>
            This property is used by the <see cref="T:DigitalRune.Graphics.PostProcessing.PostProcessorChain"/> to choose the format of the
            intermediate render target if this processor is executed in the middle of the 
            <see cref="T:DigitalRune.Graphics.PostProcessing.PostProcessorChain"/>. For example, this is used by the <see cref="T:DigitalRune.Graphics.PostProcessing.HdrFilter"/>
            to convert a <strong>HdrBlendable</strong> input texture to an LDR <strong>Color</strong>
            (R8G8B8A8) texture.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessor.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.PostProcessor"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessor.Dispose">
            <summary>
            Releases all resources used by an instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.PostProcessor"/> class.
            </summary>
            <remarks>
            This method calls the virtual <see cref="M:DigitalRune.Graphics.PostProcessing.PostProcessor.Dispose(System.Boolean)"/> method, passing in 
            <see langword="true"/>, and then suppresses finalization of the instance.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessor.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.PostProcessor"/> class 
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources; 
            <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessor.OnEnable">
            <summary>
            Called when this post-processor is enabled.
            </summary>
            <remarks>
            <para>
            This method is called when the post-processor was previously disabled
            (<see cref="P:DigitalRune.Graphics.PostProcessing.PostProcessor.Enabled"/> = <see langword="false"/>) and was set to enabled
            (<see cref="P:DigitalRune.Graphics.PostProcessing.PostProcessor.Enabled"/> = <see langword="true"/>).
            </para>
            <para>
            Please note: Post-processors are enabled per default. <see cref="M:DigitalRune.Graphics.PostProcessing.PostProcessor.OnEnable"/> is not executed
            for new post-processors.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessor.OnDisable">
            <summary>
            Called when this post-processor is disabled.
            </summary>
            <remarks>
            This method is called when the post-processor was previously enabled
            (<see cref="P:DigitalRune.Graphics.PostProcessing.PostProcessor.Enabled"/> = <see langword="true"/>) and was set to disabled
            (<see cref="P:DigitalRune.Graphics.PostProcessing.PostProcessor.Enabled"/> = <see langword="false"/>).
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessor.Process(DigitalRune.Graphics.RenderContext)">
            <summary>
            Performs the post-processing using the <see cref="P:DigitalRune.Graphics.RenderContext.SourceTexture"/>
            and the <see cref="P:DigitalRune.Graphics.RenderContext.RenderTarget"/> specified in the render context.
            </summary>
            <param name="context">The render context.</param>
            <remarks>
            <para>
            The <see cref="M:DigitalRune.Graphics.PostProcessing.PostProcessor.Process(DigitalRune.Graphics.RenderContext)"/> method will automatically call <see cref="M:DigitalRune.Graphics.PostProcessing.PostProcessor.OnProcess(DigitalRune.Graphics.RenderContext)"/>. 
            The method <see cref="M:DigitalRune.Graphics.PostProcessing.PostProcessor.OnProcess(DigitalRune.Graphics.RenderContext)"/> needs to be implemented in derived class to perform the 
            post-processing.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="context"/> is <see langword="null"/>. 
            </exception>
            <exception cref="T:DigitalRune.Graphics.GraphicsException">
            <see cref="P:DigitalRune.Graphics.RenderContext.SourceTexture"/> is <see langword="null"/>. 
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessor.OnProcess(DigitalRune.Graphics.RenderContext)">
            <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
            <param name="context">The render context.</param>
            <remarks>
            <para>
            This method is automatically called in <see cref="M:DigitalRune.Graphics.PostProcessing.PostProcessor.Process(DigitalRune.Graphics.RenderContext)"/>. It will not be 
            called if the post-processor is disabled, or if the specified <paramref name="context"/>
            or the <see cref="P:DigitalRune.Graphics.RenderContext.SourceTexture"/> is <see langword="null"/>. 
            </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.PostProcessing.PostProcessorChain">
            <summary>
            Chains together a group of post-processors.
            </summary>
            <remarks>
            <para>
            Post-processors can be added to a <see cref="T:DigitalRune.Graphics.PostProcessing.PostProcessorChain"/>. A post-processor chain is 
            itself a post-processor. When the post-processor chain is executed (by calling 
            <see cref="M:DigitalRune.Graphics.PostProcessing.PostProcessor.Process(DigitalRune.Graphics.RenderContext)"/>), it will automatically call 
            <see cref="M:DigitalRune.Graphics.PostProcessing.PostProcessor.Process(DigitalRune.Graphics.RenderContext)"/> of all contained post-processors.
            </para>
            <para>
            By default, a post-processor in a chain reads the output of the previous post-processor and 
            writes the result into an intermediate render target. 
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.PostProcessorChain.Count">
            <summary>
            Gets the number of post-processors contained in the post-processor chain.
            </summary>
            <value>The number of post-processors contained in the post-processor chain.</value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.PostProcessorChain.System#Collections#Generic#ICollection{DigitalRune#Graphics#PostProcessing#PostProcessor}#IsReadOnly">
            <summary>
            Gets a value indicating whether this collection is read-only.
            </summary>
            <value>
            <see langword="true"/> if this collection is read-only; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.PostProcessorChain.Item(System.Int32)">
            <summary>
            Gets or sets the post-processor at the specified index.
            </summary>
            <value>The post-processor at the specified index.</value>
            <param name="index">The zero-based index of the post-processor to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or equal to or greater than <see cref="P:DigitalRune.Graphics.PostProcessing.PostProcessorChain.Count"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>. The <see cref="T:DigitalRune.Graphics.PostProcessing.PostProcessorChain"/> 
            does not allow <see langword="null"/> values.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.PostProcessorChain.Item(System.String)">
            <summary>
            Gets the <see cref="T:DigitalRune.Graphics.PostProcessing.PostProcessor"/> with the specified name.
            </summary>
            <param name="name">The name of the post-processor.</param>
            <value>
            The post-processor with the given name, or <see langword="null"/> if no match was found.
            </value>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.PostProcessorChain"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.System#Collections#Generic#IEnumerable{DigitalRune#Graphics#PostProcessing#PostProcessor}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the post-processor chain. 
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator"/> for post-processor chain.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.Add(DigitalRune.Graphics.PostProcessing.PostProcessor)">
            <summary>
            Appends a post-processor to the post-processor chain.
            </summary>
            <param name="postProcessor">
            The post-processor to add to the post-processor chain.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="postProcessor"/> is <see langword="null"/>. The post-processor chain does 
            not allow <see langword="null"/> values.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.Clear">
            <summary>
            Removes all post-processors from the post-processor chain.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.Contains(DigitalRune.Graphics.PostProcessing.PostProcessor)">
            <summary>
            Determines whether the post-processor chain contains a specific post-processor.
            </summary>
            <param name="postProcessor">The post-processor to locate in the post-processor chain.</param>
            <returns>
            <see langword="true"/> if <paramref name="postProcessor"/> is found in the 
            post-processor chain; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.System#Collections#Generic#ICollection{DigitalRune#Graphics#PostProcessing#PostProcessor}#CopyTo(DigitalRune.Graphics.PostProcessing.PostProcessor[],System.Int32)">
            <summary>
            Copies the elements of the post-processor chain to an <see cref="T:System.Array"/>, starting 
            at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from 
            post-processor chain. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional. Or <paramref name="arrayIndex"/> is equal to 
            or greater than the length of <paramref name="array"/>. Or the number of elements in the 
            source post-processor chain is greater than the available space from 
            <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.Remove(DigitalRune.Graphics.PostProcessing.PostProcessor)">
            <summary>
            Removes the first occurrence of a specific post-processor from the post-processor chain.
            </summary>
            <param name="postProcessor">
            The post-processor to remove from the post-processor chain.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="postProcessor"/> was successfully removed from the 
            post-processor chain; otherwise, <see langword="false"/>. This method also returns 
            <see langword="false"/> if <paramref name="postProcessor"/> is not found in the original 
            post-processor chain.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.IndexOf(DigitalRune.Graphics.PostProcessing.PostProcessor)">
            <summary>
            Determines the index of a specific post-processor in the post-processor chain.
            </summary>
            <param name="postProcessor">The post-processor to locate in the post-processor chain.</param>
            <returns>
            The index of <paramref name="postProcessor"/> if found in the post-processor chain; 
            otherwise, -1.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.Insert(System.Int32,DigitalRune.Graphics.PostProcessing.PostProcessor)">
            <summary>
            Inserts a post-processor into the post-processor chain at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="postProcessor"/> should be inserted.
            </param>
            <param name="postProcessor">
            The post-processor to insert into the post-processor chain.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in the post-processor chain.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="postProcessor"/> is <see langword="null"/>. The post-processor chain does 
            not allow <see langword="null"/> values.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.RemoveAt(System.Int32)">
            <summary>
            Removes the post-processor at the specified index from the post-processor chain.
            </summary>
            <param name="index">The zero-based index of the post-processor to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in the post-processor chain.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.Contains(System.String)">
            <overloads>
            <summary>
            Determines whether the post-processor chain contains a specific post-processor.
            </summary>
            </overloads>
            
            <summary>
            Determines whether the post-processor chain contains a post-processor with the specified
            name.
            </summary>
            <param name="name">
            The name of the post-processor to locate in the post-processor chain.
            </param>
            <returns>
            <see langword="true"/> if a post-processor with the given name is found in the 
            post-processor chain; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.IndexOf(System.String)">
            <overloads>
            <summary>
            Determines the index of a specific post-processor in the post-processor chain.
            </summary>
            </overloads>
            
            <summary>
            Determines the index of the post-processor with the specified name in the post-processor 
            chain.
            </summary>
            <param name="name">
            The name of the post-processor to locate in the post-processor chain.
            </param>
            <returns>
            The index of the post-processor if found in the post-processor chain; otherwise, -1.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.OnProcess(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.Process(System.Collections.Generic.IList{DigitalRune.Graphics.PostProcessing.PostProcessor},DigitalRune.Graphics.RenderContext)">
            <summary>
            Performs post-processing using the specified collection of processors. 
            </summary>
            <param name="processors">The post-processors.</param>
            <param name="context">The render context.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="context"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.IsLastOutputProcessor(System.Collections.Generic.IList{DigitalRune.Graphics.PostProcessing.PostProcessor},System.Int32)">
            <summary>
            Returns <see langword="true"/> if the given processor is the last processor that renders 
            into the back buffer. 
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.PostProcessing.BloomFilter">
            <summary>
            Adds a bloom effect to an LDR (low dynamic range) image.
            </summary>
            <remarks>
            Bloom is also called "glare".
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.BloomFilter.Intensity">
            <summary>
            Gets or sets the bloom intensity factor.
            </summary>
            <value>The bloom intensity factor.</value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.BloomFilter.Saturation">
            <summary>
            Gets or sets the bloom saturation.
            </summary>
            <value>The bloom saturation.</value>
            <remarks>
            The saturation of the bloom effect is controlled with this property. Use values less than 1 
            to decrease saturation. Use values greater than 1 to increase saturation.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.BloomFilter.Threshold">
            <summary>
            Gets or sets the brightness threshold.
            </summary>
            <value>The brightness threshold.</value>
            <remarks>
            This is a luminance value. Areas with a smaller luminance value are cut off.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.BloomFilter.DownsampleFactor">
            <summary>
            Gets or sets the downsample factor.
            </summary>
            <value>
            The downsample factor. This value must be greater than 0. The default value is 2.
            </value>
            <remarks>
            To improve performance, the effect is computed on a downsampled color buffer. The width and 
            height of the source image are downsampled by this factor.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is 0 or negative.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.BloomFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.BloomFilter"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.BloomFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.PostProcessing.Blur">
            <summary>
            Blurs the image using a convolution filter.
            </summary>
            <remarks>
            <para>
            Per default, a box blur is performed. The type of blur can be changed using
            <list type="bullet">
            <item>
            <description><see cref="M:DigitalRune.Graphics.PostProcessing.Blur.InitializeBoxBlur(System.Int32,System.Boolean)"/>, </description>
            </item>
            <item>
            <description><see cref="M:DigitalRune.Graphics.PostProcessing.Blur.InitializeGaussianBlur(System.Int32,System.Single,System.Boolean)"/>, </description>
            </item>
            <item>
            <description><see cref="M:DigitalRune.Graphics.PostProcessing.Blur.InitializePoissonBlur"/>, </description>
            </item>
            <item>
            <description>
            or by changing the sample <see cref="P:DigitalRune.Graphics.PostProcessing.Blur.Offsets"/> and sample <see cref="P:DigitalRune.Graphics.PostProcessing.Blur.Weights"/> directly.
            </description>
            </item>
            </list>
            </para>
            <para>
            Many convolution blur filters are separable and can be performed in two passes (a horizontal
            blur and a vertical blur). If this is the case, <see cref="P:DigitalRune.Graphics.PostProcessing.Blur.IsSeparable"/> can be set to
            <see langword="true"/> and two passes will be performed. In the second pass, the x and y
            values in <see cref="P:DigitalRune.Graphics.PostProcessing.Blur.Offsets"/> are switched internally.
            </para>
            <para>
            <strong>Limitations:</strong><br/>
            Anisotropic or joint bilateral filtering in log-space is not supported. When
            <see cref="P:DigitalRune.Graphics.PostProcessing.Blur.FilterInLogSpace"/> is set, the properties <see cref="P:DigitalRune.Graphics.PostProcessing.Blur.IsAnisotropic"/> and
            <see cref="P:DigitalRune.Graphics.PostProcessing.Blur.IsBilateral"/> are ignored.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.Blur.MaxNumberOfSamples">
            <summary>
            Gets the maximum number of samples that are supported.
            </summary>
            <value>The maximum number of samples.</value>
            <remarks>
            This constant value determines the length of the arrays <see cref="P:DigitalRune.Graphics.PostProcessing.Blur.Offsets"/> and 
            <see cref="P:DigitalRune.Graphics.PostProcessing.Blur.Weights"/>, and the max. allowed <see cref="P:DigitalRune.Graphics.PostProcessing.Blur.NumberOfSamples"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.Blur.NumberOfSamples">
            <summary>
            Gets or sets the number of samples.
            </summary>
            <value>
            The number of samples. This value must be greater than 0 and less than 
            <see cref="P:DigitalRune.Graphics.PostProcessing.Blur.MaxNumberOfSamples"/>.
            </value>
            <remarks>
            This property determines how many samples ("taps") will be performed to blur each pixel.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is less than 1 or more than <see cref="P:DigitalRune.Graphics.PostProcessing.Blur.MaxNumberOfSamples"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.Blur.Offsets">
            <summary>
            Gets the sample offsets.
            </summary>
            <value>
            The sample offsets in pixels. For example, a value of (1, 0) can be set to sample 1 pixel
            to the right.
            </value>
            <remarks>
            Only the first <see cref="P:DigitalRune.Graphics.PostProcessing.Blur.NumberOfSamples"/> elements of this array are used. 
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.Blur.Weights">
            <summary>
            Gets or sets the weights of the samples.
            </summary>
            <value>The weights.</value>
            <remarks>
            Only the first <see cref="P:DigitalRune.Graphics.PostProcessing.Blur.NumberOfSamples"/> elements of this array are used. 
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.Blur.Scale">
            <summary>
            Gets or sets the scale that is applied to the offsets.
            </summary>
            <value>The scale applied to the offsets.</value>
            <remarks>
            Usually, a scale of 1 is used, but some blur kernels, like the Poisson disk kernel require a
            scale greater than 1. (The <see cref="P:DigitalRune.Graphics.PostProcessing.Blur.Offsets"/> of a Poisson disk kernel are usually 
            defined for a range of [-1, 1]. The scale determines the effective size (radius) of the 
            Poisson disk. See also <see cref="M:DigitalRune.Graphics.PostProcessing.Blur.InitializePoissonBlur"/>.)
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.Blur.IsAnisotropic">
            <summary>
            Gets or sets a value indicating whether to use an anisotropic filter kernel.
            </summary>
            <value>
            <see langword="true"/> if the filter kernel is anisotropic; otherwise,
            <see langword="false"/>. The default value is <see langword="false"/>.
            </value>
            <remarks>
            <para>
            By default an isotropic filter kernel is used, which means that the filter is equal in all
            dimensions. The specified filter is equally applied to all pixels in x- and y-direction.
            </para>
            <para>
            In contrast, an anisotropic filter kernel is adjusted for each pixel. Surface position and
            normal are read from the G-buffer and the filter kernel is scaled and rotated to match the
            underlying surface.
            </para>
            <para>
            Currently, anisotropic filtering is only supported for separable filter kernels.
            <see cref="P:DigitalRune.Graphics.PostProcessing.Blur.IsSeparable"/> must be set to <see langword="true"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.Blur.IsBilateral">
            <summary>
            Gets or sets a value indicating whether joint bilateral filtering (= edge-aware filtering)
            is enabled.
            </summary>
            <value>
            <see langword="true"/> if joint bilateral filtering is enabled; otherwise,
            <see langword="false"/>. The default value is <see langword="false"/>.
            </value>
            <remarks>
            <para>
            Joint bilateral filtering (= edge-aware filtering) can be enabled to blur surfaces in a 3D
            scene and prevent filtering across object boundaries and depth discontinuities.
            </para>
            <para>
            <i>Bilateral filtering</i> means that the filter kernels is only applied to pixels that are
            close (e.g. geometric similarity or photometric similarity). In this case the sample weights
            (e.g. the Gaussian weights) are scaled by a range function. <i>Joint</i> or <i>cross
            bilateral filtering</i> means that the range function is applied to a second image instead
            of the image that is being processed.
            </para>
            <para>
            When <see cref="P:DigitalRune.Graphics.PostProcessing.Blur.IsBilateral"/> is enabled the depth of each sample is read from the depth
            buffer (G-buffer 0). The sample weights are weighted based on the depth difference to the
            current pixel. Samples near the current pixel (small depth difference) contribute more than
            distant samples (large depth difference).
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.Blur.EdgeSoftness">
            <summary>
            Gets or sets the edge softness for bilateral filtering.
            </summary>
            <value>
            The edge softness for bilateral filtering in world space units. The default value is 0.1.
            </value>
            <remarks>
            <para>
            When <see cref="P:DigitalRune.Graphics.PostProcessing.Blur.IsBilateral"/> is enabled, an edge-aware blur is used to avoid blurring over
            depth discontinuities. The sensitivity of the edge-aware blur is defined by 
            <see cref="P:DigitalRune.Graphics.PostProcessing.Blur.EdgeSoftness"/>. The value is the max allowed depth difference of two pixel in
            world space units (at 1 unit in front of the camera). Pixels that closer than this threshold 
            are blurred together; pixels which are farther apart are ignored.
            </para>
            <para>
            Decrease the value to make edges crisper. Increase to make edges softer.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.Blur.DepthScaling">
            <summary>
            Gets or sets a value that controls how scene depth influences the filter scale.
            (Only used by anisotropic or bilateral blurs.)
            </summary>
            <value>The depth scaling value in the range [0, 1]. The default value is 0.7.</value>
            <remarks>
            <para>
            This property is only relevant for anisotropic (<see cref="P:DigitalRune.Graphics.PostProcessing.Blur.IsAnisotropic"/>) or bilateral
            (<see cref="P:DigitalRune.Graphics.PostProcessing.Blur.IsBilateral"/>) filters.
            </para>
            <para>
            Setting <see cref="P:DigitalRune.Graphics.PostProcessing.Blur.DepthScaling"/> to 0 disables depth scaling. The filter radius is
            constant over the entire scene.
            </para>
            <para>
            If <see cref="P:DigitalRune.Graphics.PostProcessing.Blur.DepthScaling"/> is 1, then the filter radius is scaled with scene depth,
            getting smaller in the distance. The filter radius at a distance of 1 unit is 100%. The
            filter radius at infinity is 0.
            </para>
            <para>
            The value can be between 0 and 1, for example: If <see cref="P:DigitalRune.Graphics.PostProcessing.Blur.DepthScaling"/> is 0.7, the 
            filter radius decreases slowly with scene depth. The filter radius at a distance of 1 unit
            is 100%. The filter radius at infinity is 30%.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.Blur.IsSeparable">
            <summary>
            Gets or sets a value indicating whether the configured blur filter is separable.
            </summary>
            <value>
            <see langword="true"/> if this instance is separable; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            Filters like a box blur or a Gaussian blur are separable. This means, the result of an n x n
            blur is equal to an n x 1 blur followed by an 1 x n blur. If this flag is set, this 
            processor will perform a blur pass in two steps: First, the image blurred using the 
            configured <see cref="P:DigitalRune.Graphics.PostProcessing.Blur.Offsets"/>. Then, the x and y values of the <see cref="P:DigitalRune.Graphics.PostProcessing.Blur.Offsets"/> are 
            swapped and the blurred image is blurred again.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.Blur.NumberOfPasses">
            <summary>
            Gets or sets the number of blur passes.
            </summary>
            <value>The number of passes. The default value is 1.</value>
            <remarks>
            <para>
            If this value is greater than 1, the processor will perform several consecutive blur passes.
            </para>
            <para>
            Note: If <see cref="P:DigitalRune.Graphics.PostProcessing.Blur.IsSeparable"/> is set, the effective number of passes is 2 * 
            <see cref="P:DigitalRune.Graphics.PostProcessing.Blur.NumberOfPasses"/> because each blur step is performed in two passes.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is less than 1.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.Blur.FilterInLogSpace">
            <summary>
            Gets or sets a value indicating whether log-space filtering is used.
            </summary>
            <value>
            <see langword="true"/> if log-space filtering is used; otherwise, <see langword="false"/>.
            The default is <see langword="false"/>.
            </value>
            <remarks>
            Log-space filtering must be applied for <i>Exponential Shadow Maps</i>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.Blur.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.Blur"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.Blur.InitializePoissonBlur">
            <summary>
            Computes sample offsets and weights for a 13-tap Poisson disk filter kernel.
            </summary>
            <remarks>
            The Poisson disk blur is 1-pass effect. <see cref="P:DigitalRune.Graphics.PostProcessing.Blur.IsSeparable"/> is set to 
            <see langword="false"/> and the <see cref="P:DigitalRune.Graphics.PostProcessing.Blur.Scale"/> is set to 5. The scale determines the 
            size (radius) of the Poisson disk. (The <see cref="P:DigitalRune.Graphics.PostProcessing.Blur.Offsets"/> of a Poisson disk kernel are 
            usually defined for a range of [-1, 1]. The scale determines the effective size (radius) of 
            the Poisson disk.)
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.Blur.InitializeBoxBlur(System.Int32,System.Boolean)">
            <summary>
            Computes sample offsets and weights for box blur filter kernel.
            </summary>
            <param name="numberOfSamples">
            The number of samples. This value must be an odd number (e.g. 3, 5, 7, ...).
            </param>
            <param name="useHardwareFiltering">
            If set to <see langword="true"/> hardware filtering is used to increase the blur effect; 
            otherwise, hardware filtering is not used. Use <see langword="false"/> if you are filtering
            floating-point textures.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="numberOfSamples"/> is zero or negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="numberOfSamples"/> is an even number. A box blur requires an odd number of
            samples.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.Blur.InitializeGaussianBlur(System.Int32,System.Single,System.Boolean)">
            <summary>
            Computes sample offsets and weights for Gaussian blur filter kernel.
            </summary>
            <param name="numberOfSamples">
            The number of samples. This value must be an odd number (e.g. 3, 5, 7, ...).
            </param>
            <param name="standardDeviation">The standard deviation.</param>
            <param name="useHardwareFiltering">
            If set to <see langword="true"/> hardware filtering is used to increase the blur effect;
            otherwise, hardware filtering is not used. Use <see langword="false"/> if you are filtering
            floating-point textures.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="numberOfSamples"/> is zero or negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="numberOfSamples"/> is an even number. A Gaussian blur requires an odd number of
            samples.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.Blur.OnProcess(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.PostProcessing.CameraMotionBlur">
            <summary>
            Creates a motion blur that depends on the camera movement.
            </summary>
            <remarks>
            This effect blurs the image depending on the camera motion. It does not blur moving objects
            when the camera is standing still. This effect assumes that the camera uses a symmetric (not 
            skewed) frustum.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.CameraMotionBlur.NumberOfSamples">
            <summary>
            Gets or sets the number of samples used to compute a blurred pixel.
            </summary>
            <value>The number of samples. The default value is 8.</value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.CameraMotionBlur.Strength">
            <summary>
            Gets or sets the strength.
            </summary>
            <value>The strength. The default value is 0.6.</value>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.CameraMotionBlur.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.CameraMotionBlur"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.CameraMotionBlur.OnProcess(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.PostProcessing.CieSkyFilter">
            <summary>
            Attenuates an image using the luminance distribution of the CIE Sky Model.
            </summary>
            <remarks>
            <para>
            The CIE Sky Model describes how luminance is distributed in the sky. Several weather types 
            can be modeled, see <see cref="F:DigitalRune.Graphics.PostProcessing.CieSkyFilter.Parameters"/>. This post-processor reads the source texture and
            attenuates it by a factor determined by the luminance distribution.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.PostProcessing.CieSkyFilter.Parameters">
            <summary>
            The parameters of the CIE sky luminance distribution.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.CieSkyFilter.SunDirection">
            <summary>
            Gets or sets the direction to the sun.
            </summary>
            <value>The direction to the sun. This vector is automatically normalized.</value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.CieSkyFilter.Exposure">
            <summary>
            Gets or sets the exposure factor used to scale the source texture.
            </summary>
            <value>The exposure factor used to scale the source texture. The default value is 1.</value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.CieSkyFilter.Strength">
            <summary>
            Gets or sets the strength of the attenuation.
            </summary>
            <value>The strength of the attenuation in the range [0, 1]. The default value is 1.</value>
            <remarks>
            If this value is 1, the original CIE sky luminance distribution is used. This makes only
            sense if the render pipeline uses HDR. For LDR the effect should be lessened using lower
            values for <see cref="P:DigitalRune.Graphics.PostProcessing.CieSkyFilter.Strength"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.CieSkyFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.CieSkyFilter"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.CieSkyFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter">
            <summary>
            Modifies an image using a color lookup table (a.k.a. "color grading").
            </summary>
            <remarks>
            <para>
            This processor uses a 3D volume texture as a color lookup table to transform the colors of an 
            image. <see cref="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.LookupTextureA"/> can be set directly. But it is usually easier to load it 
            from a 2D texture. The method <see cref="M:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.CreateLookupTexture2D(Microsoft.Xna.Framework.Graphics.GraphicsDevice)"/> creates a 
            default 2D lookup texture (without any color transformations). Use 
            <see cref="M:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.ConvertLookupTexture(Microsoft.Xna.Framework.Graphics.Texture2D)"/> to convert a 2D lookup texture to a 3D lookup texture.
            </para>
            <para>
            <strong>Workflow:</strong><br/>
            To define a color lookup texture, the artist can use following steps:
            <list type="number">
            <item>
            Make a screenshot of the game and load it in <b>Photoshop</b>.
            </item>
            <item>
            Load the default lookup texture in <b>Photoshop</b>.
            </item>
            <item>
            Copy the lookup texture in <b>Photoshop</b> and paste it into the document with the 
            screenshot.
            </item>
            <item>
            Apply color manipulations to the screenshot and the lookup texture. (Usually using adjustment 
            layers.)
            </item>
            <item>
            Select the lookup table inside the screenshot. (Select the layer with the lookup table and use
            the menu <b>Select | Load Selection</b>.)
            </item>
            <item>
            Select the menu <b>Edit | Copy Merged</b> to select the lookup table including the 
            adjustments.
            </item>
            <item>
            Paste the lookup texture into a new image and save it.
            </item>
            </list>
            </para>
            <para>
            (Of course the color lookup texture can also be created in any other image editing tool.)
            </para>
            <para>
            <strong>Interpolation between lookup textures:</strong><br/>
            Optionally, you can set a second lookup texture in <see cref="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.LookupTextureB"/> and use
            <see cref="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.InterpolationParameter"/> to interpolate between both. This can be used to
            gradually change the color correction when transitioning to a new zone in the game level. If
            only <see cref="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.LookupTextureA"/> or <see cref="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.LookupTextureB"/> is set, then one lookup
            texture is applied with the specified <see cref="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.Strength"/> and 
            <see cref="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.InterpolationParameter"/> is ignored.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.LookupTexture">
            <summary>
            Gets or sets the primary color lookup texture (a 3D texture). Same as
            <see cref="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.LookupTextureA"/>.
            </summary>
            <value>
            The primary color lookup texture. The default value is <see langword="null"/> (no
            transformation).
            </value>
            <remarks>
            <para>
            The 3D color lookup texture can be set from a 2D texture using
            <see cref="M:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.SetLookupTexture(Microsoft.Xna.Framework.Graphics.Texture2D)"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.LookupTextureA">
            <summary>
            Gets or sets the primary color lookup texture (a 3D texture).
            </summary>
            <value>
            The primary color lookup texture. The default value is <see langword="null"/> (no
            transformation).
            </value>
            <remarks>
            Use <see cref="M:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.ConvertLookupTexture(Microsoft.Xna.Framework.Graphics.Texture2D)"/> to convert a 2D lookup texture to a 3D lookup
            texture.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.LookupTextureB">
            <summary>
            Gets or sets a secondary, optional color lookup texture (a 3D texture).
            </summary>
            <value>
            The secondary, optional color lookup texture. The default value is <see langword="null"/>
            (no transformation).
            </value>
            <remarks>
            <para>
            If this <see cref="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.LookupTextureB"/> is not <see langword="null"/>, then the filter 
            interpolates the color correction result of <see cref="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.LookupTextureA"/> and 
            <see cref="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.LookupTextureB"/>. <see cref="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.InterpolationParameter"/> defines the interpolation
            weight: Set <see cref="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.InterpolationParameter"/> to 0 to use only
            <see cref="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.LookupTextureA"/>. Set <see cref="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.InterpolationParameter"/> to 1 to use only
            <see cref="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.LookupTextureB"/>. Use a value in the range ]0, 1[ to apply both lookup textures
            and interpolate the results.
            </para>
            <para>
            If only one of the lookup textures is set, then this lookup texture is applied and
            <see cref="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.InterpolationParameter"/> is ignored.
            </para>
            <para>
            <see cref="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.LookupTextureA"/> and <see cref="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.LookupTextureB"/> must have the same size.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.Strength">
            <summary>
            Gets or sets the strength of the effect.
            </summary>
            <value>
            The strength factor. If this value is 0.0, the source image is not changed. If this value is 
            1.0, the colors of the source image are converted based on the lookup texture. If this value
            is between 0.0 and 1.0, a linear interpolation between the source image and the color graded
            image is returned. The default value is 1.0.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.InterpolationParameter">
            <summary>
            Gets or sets the interpolation parameter for interpolating between the result of
            <see cref="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.LookupTextureA"/> and <see cref="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.LookupTextureB"/>.
            </summary>
            <value>
            The interpolation parameter for interpolating between the result of
            <see cref="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.LookupTextureA"/> and <see cref="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.LookupTextureB"/>. The default value is 0.
            </value>
            <inheritdoc cref="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.LookupTextureB"/>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.SetLookupTexture(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Sets the 3D lookup texture (<see cref="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.LookupTextureA"/>).
            (Overwrites the existing 3D lookup texture.)
            </summary>
            <param name="lookupTexture2D">The lookup texture as a 2D texture.</param>
            <remarks>
            This method overwrites the content of the existing 3D <see cref="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.LookupTextureA"/>. If the
            existing texture does not have the correct size, it is replaced by a new 3D lookup texture.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="lookupTexture2D"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="lookupTexture2D"/> is not a color texture or does not have the expected 
            format.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.CreateLookupTexture2D(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <overloads>
            <summary>
            Creates the default 2D lookup texture (no color transformations).
            </summary>
            </overloads>
            
            <summary>
            Creates the default 2D lookup texture (no color transformations) with 16 entries per color
            channel.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <returns>The default 2D lookup texture which contains no color transformations.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.CreateLookupTexture2D(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
            <summary>
            Creates the default 2D lookup texture (no color transformations) with the specified lookup
            table size.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="size">
            The size of the lookup table (= the number of entries per color channel). The recommended
            size is 16.
            </param>
            <returns>The default 2D lookup texture which contains no color transformations.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="size"/> is 0 or negative.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.ConvertLookupTexture(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Converts a 2D lookup texture to a 3D lookup texture.
            </summary>
            <param name="texture2D">The 2D lookup texture.</param>
            <returns>The 3D lookup texture.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="texture2D"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="texture2D"/> is not a color texture or does not have the expected format.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.PostProcessing.ColorEncoder">
            <summary>
            Changes the <see cref="T:DigitalRune.Graphics.ColorEncoding"/> of a texture.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.ColorEncoder.SourceEncoding">
            <summary>
            Gets or sets the <see cref="T:DigitalRune.Graphics.ColorEncoding"/> of the source texture.
            </summary>
            <value>
            The <see cref="T:DigitalRune.Graphics.ColorEncoding"/> of the source texture. The default encoding is 
            <see cref="F:DigitalRune.Graphics.ColorEncoding.Rgb"/>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.ColorEncoder.TargetEncoding">
            <summary>
            Gets or sets the <see cref="T:DigitalRune.Graphics.ColorEncoding"/> of the render target.
            </summary>
            <value>
            The <see cref="T:DigitalRune.Graphics.ColorEncoding"/> of the render target. The default encoding is 
            <see cref="F:DigitalRune.Graphics.ColorEncoding.Rgb"/>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.ColorEncoder.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.ColorEncoder"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.ColorEncoder.VerifyEncoding(DigitalRune.Graphics.ColorEncoding)">
            <summary>
            Throws exception if the encoding is not supported.
            </summary>
            <param name="encoding">The encoding.</param>
            <exception cref="T:System.NotSupportedException">
            The given color encoding is not supported by the <see cref="T:DigitalRune.Graphics.PostProcessing.ColorEncoder"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.ColorEncoder.OnProcess(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.PostProcessing.CopyFilter">
            <summary>
            Copies a texture into a render target.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.CopyFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.CopyFilter"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.CopyFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.PostProcessing.DepthOfFieldFilter">
            <summary>
            Creates a depth-of-field effect.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.DepthOfFieldFilter.NearBlurDistance">
            <summary>
            Gets or sets the near distance where the blur starts to decrease.
            </summary>
            <value>The near blur distance.</value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.DepthOfFieldFilter.NearFocusDistance">
            <summary>
            Gets or sets the near distance where the objects start to be in focus.
            </summary>
            <value>The near focus distance.</value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.DepthOfFieldFilter.FarFocusDistance">
            <summary>
            Gets or sets the far distance where objects start to get blurry.
            </summary>
            <value>The far focus distance.</value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.DepthOfFieldFilter.FarBlurDistance">
            <summary>
            Gets or sets the far distance after which objects are maximal blurred.
            </summary>
            <value>The far blur distance.</value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.DepthOfFieldFilter.DownsampleFactor">
            <summary>
            Gets or sets the downsample factor.
            </summary>
            <value>
            The downsample factor. This value must be greater than 0. The default value is 2.
            </value>
            <remarks>
            To improve performance, depth of field is computed on a downsampled depth buffer. 
            The width and height of the depth buffer are downsampled by this factor.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is less than 1.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.DepthOfFieldFilter.BlurStrength">
            <summary>
            Gets or sets the blur strength.
            </summary>
            <value>
            The blur strength. 0 means "no blur". Values greater 0 increase the blur effect.
            The default value is 1. 
            </value>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.DepthOfFieldFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.DepthOfFieldFilter"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.DepthOfFieldFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.PostProcessing.DownsampleFilter">
            <summary>
            Reduces the resolution of an input texture.
            </summary>
            <remarks>
            <para>
            This post-processor reduces the resolution of the <see cref="P:DigitalRune.Graphics.RenderContext.SourceTexture"/>
            to match the target <see cref="P:DigitalRune.Graphics.RenderContext.Viewport"/>. 
            </para>
            <para>
            If this post-processor is used in a <see cref="T:DigitalRune.Graphics.PostProcessing.PostProcessorChain"/>, you can use the 
            property <see cref="P:DigitalRune.Graphics.PostProcessing.PostProcessor.DefaultTargetFormat"/> to specify the target resolution.
            </para>
            <para>
            Render targets are downsampled by averaging samples. However, some render targets might
            require a different downsample function. The <see cref="T:DigitalRune.Graphics.PostProcessing.DownsampleFilter"/> will
            check if the source texture is the depth buffer (<see cref="P:DigitalRune.Graphics.RenderContext.GBuffer0"/>), 
            and when this is the case, it will perform a special downsampling.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.DownsampleFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.DownsampleFilter"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.DownsampleFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.PostProcessing.EdgeFilter">
            <summary>
            Renders silhouette outlines and creases edge using edge detection.
            </summary>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Graphics.PostProcessing.EdgeFilter"/> reads the G-buffer (depth and normals) and creates silhouette
            outlines and crease edges. For example:
            </para>
            <para>
            <img src="../media/EdgeFilter.jpg" />
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.EdgeFilter.EdgeWidth">
            <summary>
            Gets or sets the width of the edge outline in pixel.
            </summary>
            <value>The width of the edges in pixel. The default value 2.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative or 0.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.EdgeFilter.DepthThreshold">
            <summary>
            Gets or sets the depth threshold for edge detection.
            </summary>
            <value>
            The depth threshold for edge detection in the range [0, 1]. The default value is 0.001.
            </value>
            <remarks>
            <para>
            Edges with a depth difference below the threshold are not detected. Use the following 
            equation to convert a distance in world space to the depth threshold:
            </para>
            <para>
            <i>depthThreshold</i> = <i>minDistance</i> / <i>farPlaneDistance</i>
            </para>
            <para>
            where <i>minDistance</i> is the minimal distance in world space unit that is required to
            detect an edge. <i>farPlaneDistance</i> is the distance to the far view plane.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.EdgeFilter.DepthSensitivity">
            <summary>
            Gets or sets the depth sensitivity of the edge detection.
            </summary>
            <value>The depth sensitivity of the edge detection [0, ∞]. The default value is 100.</value>
            <remarks>
            <para>
            The sensitivity defines the range at which edges are fully detected. The right sensitivity 
            can be found through the following equation: If <i>minDistance</i> is the minimal distance 
            in world space unit that is required to detect edges, <i>maxDistance</i> is the distance at
            which an edge is fully detected (100% certainty), and <i>farPlaneDistance</i> is the 
            distance to the far view plane, then
            </para>
            <para>
            <i>depthSensitivity</i> = <i>farPlaneDistance</i> / (<i>maxDistance</i> - <i>minDistance</i>
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.EdgeFilter.NormalThreshold">
            <summary>
            Gets or sets the normal vector threshold of the edge detection.
            </summary>
            <value>The normal vector threshold of the edge detection. The default value is 0.1.</value>
            <remarks>
            <para>
            The normal vector of the source image is used to find crease edges. The normal threshold
            determines the minimum difference between normal vectors that is required to detect an edge.
            Use the following equation to convert from angles to the normal threshold:
            </para>
            <para>
            <i>normalThreshold</i> = 1 - cos(α)
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.EdgeFilter.NormalSensitivity">
            <summary>
            Gets or sets the normal vector sensitivity of the edge detection.
            </summary>
            <value>The normal vector sensitivity [0, ∞]. The default value is 2.</value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.EdgeFilter.SilhouetteColor">
            <summary>
            Gets or sets the color of the silhouette edges.
            </summary>
            <value>The color of the silhouette edges.</value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.EdgeFilter.CreaseColor">
            <summary>
            Gets or sets the color of the crease edges.
            </summary>
            <value>The color of the crease edges.</value>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.EdgeFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.EdgeFilter"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.EdgeFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.PostProcessing.EffectPostProcessor">
            <summary>
            Performs post-processing using a custom <see cref="T:Microsoft.Xna.Framework.Graphics.Effect"/> and automatically bound effect 
            parameters.
            </summary>
            <remarks>
            This post processor takes an <see cref="P:DigitalRune.Graphics.PostProcessing.EffectPostProcessor.EffectBinding"/> and uses automatically generated 
            effect parameter bindings to set the effect parameters. All passes of the first technique in 
            the effect are executed. (Most effects will use only one pass. If the effect defines several 
            passes, then all passes are executed using the same source image and all render into the same 
            render target - so multiple passes only make sense if a form of alpha blending is configured 
            in the effect.)
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.EffectPostProcessor.EffectBinding">
            <summary>
            Gets the effect binding.
            </summary>
            <value>The effect binding.</value>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.EffectPostProcessor.#ctor(DigitalRune.Graphics.IGraphicsService,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.EffectPostProcessor"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <param name="effect">The effect.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> or <paramref name="effect"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.EffectPostProcessor.OnProcess(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.PostProcessing.FxaaFilter">
            <summary>
            Applies <i>Fast Approximate Anti-Aliasing</i> (FXAA).
            </summary>
            <remarks>
            FXAA should be applied to a texture in sRGB space (= gamma-corrected, non-linear color 
            values). FXAA detects edges based on the luminance. If the source texture already contains the
            image luminance in the alpha channel, then you can set <see cref="P:DigitalRune.Graphics.PostProcessing.FxaaFilter.ComputeLuminance"/> to 
            <see langword="false"/>. Per default, the luminance is computed in a separate pass.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.FxaaFilter.ComputeLuminance">
            <summary>
            Gets or sets a value indicating whether the luminance should be computed
            in a separate pass.
            </summary>
            <value>
            <see langword="true"/> if the luminance should be computed; otherwise, 
            <see langword="false"/> if the source texture already contains the luminance
            in the alpha channel of the image. The default value is <see langword="true"/>.
            </value>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.FxaaFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.FxaaFilter"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.FxaaFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.PostProcessing.GodRayFilter">
            <summary>
            Adds crepuscular rays ("god rays") to a scene.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.GodRayFilter.Scale">
            <summary>
            Gets or sets the scale of the light shafts.
            </summary>
            <value>The sampling density. The default value is 1.</value>
            <remarks>
            If this value is 1, we sample at equidistant points to the light source. If this value
            is less than 1, we sample at half of this range but with the same number of samples.
            Lowering this value creates shorter light shafts with higher sampling density.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.GodRayFilter.Weight">
            <summary>
            Gets or sets the weight of samples along the light ray.
            </summary>
            <value>The weight of samples along the light ray. The default value is 0.5.</value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.GodRayFilter.Decay">
            <summary>
            Gets or sets the decay factor.
            </summary>
            <value>The decay factor. The default value is 0.9.</value>
            <remarks>
            If this value is 1, all samples have equal weight. If this value is less than
            1, samples further away from the current pixel will have less influence.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.GodRayFilter.Exposure">
            <summary>
            Gets or sets the exposure.
            </summary>
            <value>The exposure. The default value is 0.1.</value>
            <remarks>
            This is an overall factor that applied to the light shaft image.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.GodRayFilter.LightDirection">
            <summary>
            Gets or sets the light direction.
            </summary>
            <value>The normalized light direction.</value>
            <remarks>
            The direction of the light rays (pointing away from the light source).
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.GodRayFilter.LightRadius">
            <summary>
            Gets or sets the light radius.
            </summary>
            <value>The light radius. The default value is 0.2.</value>
            <remarks>
            <para>
            The light radius determines the size of the area around the sun from which light shafts
            originate. The light radius is relative to the screen height, i.e. if the light
            radius is 1 then it is equal to the screen height.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.GodRayFilter.Intensity">
            <summary>
            Gets or sets the intensity.
            </summary>
            <value>The intensity. The default value is (1, 1, 1).</value>
            <remarks>
            This is an overall factor that applied to the light shaft image. It can be used like
            an exposure factor or a tint color.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.GodRayFilter.DownsampleFactor">
            <summary>
            Gets or sets the downsample factor.
            </summary>
            <value>
            The downsample factor. This value must be greater than 0. The default value is 4.
            </value>
            <remarks>
            To improve performance, god rays are computed on a downsampled depth buffer. The width and
            height of the depth buffer are downsampled by this factor.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.GodRayFilter.NumberOfSamples">
            <summary>
            Gets or sets the number of samples.
            </summary>
            <value>The number of samples.</value>
            <remarks>
            To create light shafts, a ray from the current pixel to the light source
            is sampled. This value determines the number of samples.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.GodRayFilter.NumberOfPasses">
            <summary>
            Gets or sets the number of blur passes.
            </summary>
            <value>
            The number of blur passes. The default value is 2.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.GodRayFilter.Softness">
            <summary>
            Gets or sets the softness.
            </summary>
            <value>The softness.</value>
            <remarks>
            If this value is 0, then the god rays are added using additive blending. If this value is
            1, then the god rays are added using the softer "Screen" blending.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.GodRayFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.GodRayFilter"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.GodRayFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.PostProcessing.GrainFilter">
            <summary>
            Adds a film grain effect.
            </summary>
            <remarks>
            This processor adds noise to the source texture.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.GrainFilter.ScaleWithLuminance">
            <summary>
            Gets or sets a value indicating whether noise is blended equally to all pixels or whether 
            more noise is blended to dark pixels.
            </summary>
            <value>
            <see langword="true"/> if more noise is added to darker pixels; otherwise, 
            <see langword="false"/>. The default value is <see langword="true"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.GrainFilter.LuminanceThreshold">
            <summary>
            Gets or sets the luminance threshold. (Noise is only added to pixels with a luminance below 
            this threshold. This value is ignored if <see cref="P:DigitalRune.Graphics.PostProcessing.GrainFilter.ScaleWithLuminance"/> is 
            <see langword="false"/>.)
            </summary>
            <value>The luminance threshold. The default value is 1.</value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.GrainFilter.Strength">
            <summary>
            Gets or sets the strength of the grain effect.
            </summary>
            <value>The effect strength. The default value is 0.1.</value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.GrainFilter.GrainScale">
            <summary>
            Gets or sets the grain scale.
            </summary>
            <value>
            The grain scale. The default value is 1. Larger values than 1 make the noise pixels larger.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.GrainFilter.IsAnimated">
            <summary>
            Gets or sets a value indicating whether the noise is animated.
            </summary>
            <value>
            <see langword="true" /> if the noise is animated; otherwise, <see langword="false" />
            if the noise is static. The default value is <see langword="true" />.
            </value>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.GrainFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.GrainFilter"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.GrainFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.PostProcessing.HdrFilter">
            <summary>
            Performs HDR tone mapping supporting bloom/glare, dynamic eye adaption and scotopic vision.
            </summary>
            <remarks>
            <para>
            This post-processor is also responsible for converting the input texture from an HDR format
            (usually <strong>HdrBlendable</strong>) to an LDR format. Therefore, the surface format
            in <see cref="P:DigitalRune.Graphics.PostProcessing.PostProcessor.DefaultTargetFormat"/> is set to <strong>Color</strong>.
            </para>
            <para>
            This post-processor stores luminance information of a frame for use in the next frame. The 
            information is stored with the currently active camera node. When there is a cut in the scene 
            (i.e. a new level is loaded or the view changes significantly), the method 
            <see cref="M:DigitalRune.Graphics.SceneGraph.CameraNode.InvalidateViewDependentData"/> of the camera node needs to be called 
            to reset the luminance information. Further, this post-processor expects that it is called 
            once per frame for a certain camera node. It might not work as expected if it is called 
            several times per frame (e.g. to process different views using the same camera).
            </para>
            <para>
            <strong>Exposure and Middle Gray</strong><br/>
            The <see cref="T:DigitalRune.Graphics.PostProcessing.HdrFilter"/> computes the average brightness of the scene and applies a
            brightness scale factor ("exposure") so that the average brightness of the final image is
            equal to <see cref="P:DigitalRune.Graphics.PostProcessing.HdrFilter.MiddleGray"/>. That means, if you are in a dark cave, the filter will
            make the image a lot brighter. If you are in a white dessert, it will make the image darker.
            Both images will have the same average brightness defined by <see cref="P:DigitalRune.Graphics.PostProcessing.HdrFilter.MiddleGray"/>.
            The brightness scale factor is limited by <see cref="P:DigitalRune.Graphics.PostProcessing.HdrFilter.MinExposure"/> and 
            <see cref="P:DigitalRune.Graphics.PostProcessing.HdrFilter.MaxExposure"/>. That means, if you set <see cref="P:DigitalRune.Graphics.PostProcessing.HdrFilter.MinExposure"/> =
            <see cref="P:DigitalRune.Graphics.PostProcessing.HdrFilter.MaxExposure"/> = 1, then there will be no brightness change.
            If your scene is very bright or very dark, then you have to adjust <see cref="P:DigitalRune.Graphics.PostProcessing.HdrFilter.MiddleGray"/>. 
            Use <see cref="P:DigitalRune.Graphics.PostProcessing.HdrFilter.MinExposure"/> and <see cref="P:DigitalRune.Graphics.PostProcessing.HdrFilter.MaxExposure"/> to limit the allowed brightness 
            changes.
            </para>
            <para>
            <strong>Night Tone mapping with Blue Shift (Scotopic Vision):</strong><br/>
            The human visual system perceives low luminance scenes (e.g. night scenes) different than
            well-lit scenes. Under daylight the cones in the human eye dominate and create the normal
            color image (photopic vision). The cones start to lose sensitivity at about 3.4 cd/m², and
            the rods start to get more dominant. A dark scene perceived by the rods (scotopic vision) is
            monochrome with a blue shift. This <see cref="T:DigitalRune.Graphics.PostProcessing.HdrFilter"/> supports physically-based night 
            tone mapping. Per default it is disabled. The blue shift is controlled using the properties
            <see cref="P:DigitalRune.Graphics.PostProcessing.HdrFilter.EnableBlueShift"/>, <see cref="P:DigitalRune.Graphics.PostProcessing.HdrFilter.BlueShiftColor"/>, <see cref="P:DigitalRune.Graphics.PostProcessing.HdrFilter.BlueShiftCenter"/> and
            <see cref="P:DigitalRune.Graphics.PostProcessing.HdrFilter.BlueShiftRange"/>. Depending on the lighting in the scene, 
            <see cref="P:DigitalRune.Graphics.PostProcessing.HdrFilter.BlueShiftColor"/> might need to be scaled. It is also possible to use a different
            color for a more dramatic effect. <see cref="P:DigitalRune.Graphics.PostProcessing.HdrFilter.BlueShiftCenter"/> and 
            <see cref="P:DigitalRune.Graphics.PostProcessing.HdrFilter.BlueShiftRange"/> might also need to be changed if the scene is not lit using
            physically-based light intensities and lighting models.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.HdrFilter.BloomIntensity">
            <summary>
            Gets or sets the bloom intensity factor.
            </summary>
            <value>The bloom intensity factor. The default value is 1.</value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.HdrFilter.BloomThreshold">
            <summary>
            Gets or sets the brightness threshold.
            </summary>
            <value>The brightness threshold.</value>
            <remarks>
            This is a luminance value. Areas with a smaller luminance value are cut off.
            The default value is 0.2.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.HdrFilter.DownsampleFactor">
            <summary>
            Gets or sets the downsample factor.
            </summary>
            <value>
            The downsample factor. This value must be greater than 0. The default value is 2.
            </value>
            <remarks>
            To improve performance, the bloom effect is computed on a downsampled color buffer. 
            The width and height of the source image are downsampled by this factor.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is 0 or negative.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.HdrFilter.MiddleGray">
            <summary>
            Gets or sets the average gray level.
            </summary>
            <value>The average gray level. The default value is 0.18.</value>
            <remarks>
            The average luminance of the scene is mapped to this gray value.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.HdrFilter.MinExposure">
            <summary>
            Gets or sets the min exposure factor.
            </summary>
            <value>The min exposure.</value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.HdrFilter.MaxExposure">
            <summary>
            Gets or sets the max exposure factor.
            </summary>
            <value>The max exposure.</value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.HdrFilter.UseGeometricMean">
            <summary>
            Gets or sets a value indicating whether the average luminance is computed using the 
            geometric mean.
            </summary>
            <value>
            <see langword="true"/> if the geometric mean is used for the average luminance; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.HdrFilter.AdaptionSpeed">
            <summary>
            Gets or sets the adaption speed of the eye.
            </summary>
            <value>The adaption speed in the range [0, ∞[. Use small values like 0.02.</value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.HdrFilter.UseAdaption">
            <summary>
            Gets or sets a value indicating whether dynamic eye adaption should be used.
            </summary>
            <value>
            <see langword="true"/> if dynamic eye adaption is used; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            If dynamic eye adaption is used, the luminance of the previous frames will influence the 
            luminance values of the current frame. This models the behavior of the human eye: The eye 
            slowly adapts to new lighting conditions. 
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.HdrFilter.EnableBlueShift">
            <summary>
            Gets or sets a value indicating whether a blue shift is applied to scenes with low average
            luminance.
            </summary>
            <value>
            <see langword="true" /> if a blue shift is applied to scenes with low average luminance;
            otherwise, <see langword="false" />. The default value is <see langword="false" />.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.HdrFilter.BlueShiftColor">
            <summary>
            Gets or sets the color of the blue shift.
            </summary>
            <value>The blue shift color. The default value is (1.05/4, 0.97/4, 1.27/4).</value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.HdrFilter.BlueShiftCenter">
            <summary>
            Gets or sets scene luminance where 50% blue shift is applied
            </summary>
            <value>The blue shift center. The default value is 0.04.</value>
            <remarks>
            <para>
            The blue shift depends on the average scene luminance. If the average scene luminance is
            equal to to <see cref="P:DigitalRune.Graphics.PostProcessing.HdrFilter.BlueShiftCenter"/>, then the resulting image is the average of the
            normal image and a fully blue shifted image.
            </para>
            <para>
            The default value of <see cref="P:DigitalRune.Graphics.PostProcessing.HdrFilter.BlueShiftCenter"/> is 0.04. This value is suitable for a
            scene that is rendered using physically-based lighting, i.e. light intensities are based on
            real world light intensities and luminance values are in cd/m². If the scene lighting is not
            physically-based, then this value needs to be adapted.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.HdrFilter.BlueShiftRange">
            <summary>
            Gets or sets the range of the blue shift.
            </summary>
            <value>The range of the blue shift. The default value is 1.</value>
            <remarks>
            <para>
            This value defines the luminance range where the blue shift is applied. For a human eye and
            physically-based lighting, this value should be 1. With this default value, the blue shift
            is 100% when the average scene luminance is 0. The blue shift is 50% when the luminance is 
            equal to <see cref="P:DigitalRune.Graphics.PostProcessing.HdrFilter.BlueShiftCenter"/>. The blue shift is approx. 1% when the luminance is 
            <see cref="P:DigitalRune.Graphics.PostProcessing.HdrFilter.BlueShiftCenter"/> x 100. (The cones in the human eye start to lose their
            sensitivity at 3.4 cd/m².)
            </para>
            <para>
            <see cref="P:DigitalRune.Graphics.PostProcessing.HdrFilter.BlueShiftRange"/> is proportional to the luminance range on a logarithmic scale.
            That means, if the <see cref="P:DigitalRune.Graphics.PostProcessing.HdrFilter.BlueShiftRange"/> is 1, the 1% point is at 
            <see cref="P:DigitalRune.Graphics.PostProcessing.HdrFilter.BlueShiftCenter"/> x 100. If the <see cref="P:DigitalRune.Graphics.PostProcessing.HdrFilter.BlueShiftRange"/> is set to 0.5, the
            1% point is at <see cref="P:DigitalRune.Graphics.PostProcessing.HdrFilter.BlueShiftCenter"/> x 10 (= 100<sup>0.5</sup>). If the 
            <see cref="P:DigitalRune.Graphics.PostProcessing.HdrFilter.BlueShiftRange"/> is set to 2, the 1% point is at 
            <see cref="P:DigitalRune.Graphics.PostProcessing.HdrFilter.BlueShiftCenter"/> x 10000 (= 100<sup>2</sup>).
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.HdrFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.HdrFilter"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.HdrFilter.Reset">
            <summary>
            Resets the dynamic internal states, especially dynamic luminance adaption.
            </summary>
            <remarks>
            This method should be called if there was a cut in the visual scene and the next frame is
            very different from the last frame.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.HdrFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.PostProcessing.HorizontalBlur">
            <summary>
            Blurs the input texture using a horizontal blur filter. (Experimental)
            </summary>
            <remarks>
            This horizontal blur is expensive and should be executed on a downsampled (and maybe blurred) 
            image.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.HorizontalBlur.NumberOfPasses">
            <summary>
            Gets or sets the number of passes.
            </summary>
            <value>The number of passes. The default value is 3.</value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.HorizontalBlur.NumberOfSamples">
            <summary>
            Gets or sets the number of samples.
            </summary>
            <value>The number of samples. This should be an even number. The default value is 8.</value>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.HorizontalBlur.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.HorizontalBlur"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.HorizontalBlur.OnProcess(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.PostProcessing.KawaseBlur">
            <summary>
            Blurs the input texture using the Kawase bloom filter.
            </summary>
            <remarks>
            Kawase bloom filter blurs the image using several fullscreen passes. 
            <see cref="P:DigitalRune.Graphics.PostProcessing.KawaseBlur.NumberOfPasses"/> is 8 per default.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.KawaseBlur.NumberOfPasses">
            <summary>
            Gets or sets the number of passes.
            </summary>
            <value>The number of passes. The default value is 8.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is 0 or negative.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.KawaseBlur.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.KawaseBlur"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.KawaseBlur.OnProcess(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.PostProcessing.LuminanceFilter">
            <summary>
            Computes the minimum, average and maximum luminance of a texture.
            </summary>
            <remarks>
            <para>
            The render target should be a 1 x 1 texture with 3 floating-point channels (e.g. 
            HalfVector4). The luminance info is stored in this order: (minimum, average, maximum). That
            means, the minimum luminance is stored in the "red" channel, and so on.
            </para>
            <para>
            This post-processor stores luminance information of a frame for use in the next frame. The 
            information is stored with the currently active camera node. When there is a cut in the scene 
            (i.e. a new level is loaded or the view changes significantly), the method 
            <see cref="M:DigitalRune.Graphics.SceneGraph.CameraNode.InvalidateViewDependentData"/> of the camera node needs to be called 
            to reset the luminance information. Further, this post-processor expects that it is called 
            once per frame for a certain camera node. It might not work as expected if it is called 
            several times per frame (e.g. to process different views using the same camera).
            </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.PostProcessing.LuminanceFilter.ViewDependentData">
            <summary>
            View-dependent information stored per camera node.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.LuminanceFilter.AdaptionSpeed">
            <summary>
            Gets or sets the adaption speed of the eye.
            </summary>
            <value>The adaption speed in the range [0, ∞[. Use small values like 0.02.</value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.LuminanceFilter.UseAdaption">
            <summary>
            Gets or sets a value indicating whether dynamic eye adaption should be used.
            </summary>
            <value>
            <see langword="true"/> if dynamic eye adaption is used; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            If dynamic eye adaption is used, the luminance of the previous frames will influence the 
            luminance values of the current frame. This can be used in HDR rendering to model the 
            behavior of the human eye behavior: The eye slowly adapts to new lighting conditions. 
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.LuminanceFilter.UseGeometricMean">
            <summary>
            Gets or sets a value indicating whether the average luminance is computed using the 
            geometric mean.
            </summary>
            <value>
            <see langword="true"/> if the geometric mean is used for the average luminance; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.LuminanceFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.LuminanceFilter"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.LuminanceFilter.OnDisable">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.LuminanceFilter.Reset">
            <summary>
            Resets this luminance adaption.
            </summary>
            <remarks>
            This method should be called if there was a cut in the visual scene and the next frame is
            very different from the last frame.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.LuminanceFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.PostProcessing.MadFilter">
            <summary>
            Scales the color of an image and adds an offset. (MAD = Multiply/Add).
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.MadFilter.Scale">
            <summary>
            Gets or sets the scale factor.
            </summary>
            <value>The scale factor. The default is (1, 1, 1).</value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.MadFilter.Offset">
            <summary>
            Gets or sets the offset.
            </summary>
            <value>The offset. The default value is (0, 0, 0).</value>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.MadFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.MadFilter"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.MadFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.PostProcessing.NormalMapDistortionFilter">
            <summary>
            Distorts the image using information from a normal map.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.NormalMapDistortionFilter.NormalMap">
            <summary>
            Gets or sets the normal map that defines the perturbation.
            </summary>
            <value>The normal map.</value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.NormalMapDistortionFilter.Offset">
            <summary>
            Gets or sets the offset that is applied to texture lookups in the <see cref="P:DigitalRune.Graphics.PostProcessing.NormalMapDistortionFilter.NormalMap"/>.
            </summary>
            <value>The offset for normal map lookups.</value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.NormalMapDistortionFilter.Scale">
            <summary>
            Gets or sets the scale applied to the <see cref="P:DigitalRune.Graphics.PostProcessing.NormalMapDistortionFilter.NormalMap"/>.
            </summary>
            <value>The scale. The default value is (1,1).</value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.NormalMapDistortionFilter.Strength">
            <summary>
            Gets or sets the strength of the distortion.
            </summary>
            <value>
            The strength. 0 means no distortion. Distortion increases with values greater than 0.
            The default value is 10.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.NormalMapDistortionFilter.BlurLevel">
            <summary>
            Gets or sets the blur level.
            </summary>
            <value>The blur level. Set to 0 for no blur. Set to 1 for a 4 tap blur.</value>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.NormalMapDistortionFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.NormalMapDistortionFilter"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.NormalMapDistortionFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.PostProcessing.ObjectMotionBlur">
            <summary>
            Creates a motion blur using velocity buffers.
            </summary>
            <remarks>
            This effect needs two velocity buffers in the render context:
            (<see cref="F:DigitalRune.Graphics.RenderContextKeys.VelocityBuffer"/> and 
            <see cref="F:DigitalRune.Graphics.RenderContextKeys.LastVelocityBuffer"/> (optional).
            In each buffer a velocity vector is stored per pixel. The velocity vector shows the movement 
            (relative to texture space) that this pixel has moved. One velocity buffer should contain the 
            velocity vectors of the current frame and the other optional one the velocity vectors of the 
            last frame.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.ObjectMotionBlur.NumberOfSamples">
            <summary>
            Gets or sets the number of samples.
            </summary>
            <value>
            The number of samples. It is recommended to use an odd number of samples when using the
            soft-edge blur. The default value is 9.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.ObjectMotionBlur.SoftenEdges">
            <summary>
            Gets or sets a value indicating whether the edges of motion blurred objects should be 
            softened.
            </summary>
            <value>
            <see langword="true"/> if edges should be softened; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            Simple motion blur effects blur the moving objects but they do not soften the silhouette of 
            the moving object. If <see cref="P:DigitalRune.Graphics.PostProcessing.ObjectMotionBlur.SoftenEdges"/> is set to <see langword="true"/>, the 
            silhouette is blurred as well, which creates visually better results but costs more 
            performance.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.ObjectMotionBlur.UseLastVelocityBuffer">
            <summary>
            Gets or sets a value indicating whether last velocity buffer should be used in addition to
            the current velocity buffer to expand the blurred region.
            </summary>
            <value>
            <see langword="true"/> if the velocity buffer of the last frame is used in addition to the
            current velocity buffer; otherwise, <see langword="false"/>. The default value is 
            <see langword="false"/>.
            </value>
            <remarks>
            This flag is not relevant if <see cref="P:DigitalRune.Graphics.PostProcessing.ObjectMotionBlur.SoftenEdges"/> is <see langword="true"/>. If
            <see cref="P:DigitalRune.Graphics.PostProcessing.ObjectMotionBlur.UseLastVelocityBuffer"/> is <see langword="true"/>, the current 
            <see cref="T:DigitalRune.Graphics.RenderContext"/> should contain the velocity buffer of the last frame
            (property <see cref="F:DigitalRune.Graphics.RenderContextKeys.LastVelocityBuffer"/>). If the render context does 
            not contain the buffer, then the visual result is the same as if 
            <see cref="P:DigitalRune.Graphics.PostProcessing.ObjectMotionBlur.UseLastVelocityBuffer"/> is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.ObjectMotionBlur.MaxBlurRadius">
            <summary>
            Gets or sets the max blur radius in pixels.
            </summary>
            <value>The max blur radius in pixels. The default value is 20.</value>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.ObjectMotionBlur.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.ObjectMotionBlur"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.ObjectMotionBlur.OnProcess(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.PostProcessing.RadialBlur">
            <summary>
            Creates a radial blur effect.
            </summary>
            <remarks>
            The screen is blurred radially from the center to the border. The blur increases from the 
            center to <see cref="P:DigitalRune.Graphics.PostProcessing.RadialBlur.MaxBlurRadius"/>. All pixels beyond <see cref="P:DigitalRune.Graphics.PostProcessing.RadialBlur.MaxBlurRadius"/> use the 
            maximal blur. Pixels in the screen center are blurred less.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.RadialBlur.MaxBlurRadius">
            <summary>
            Gets or sets the radius in the range [0, 1] where the maximum blur is reached.
            </summary>
            <value>The max blur radius. The default value is 1.</value>
            <remarks>
            0 means full blur starts in the screen center. 1 means full blur is reached at screen 
            border.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.RadialBlur.MaxBlurAmount">
            <summary>
            Gets or sets the range of texels that are blurred at <see cref="P:DigitalRune.Graphics.PostProcessing.RadialBlur.MaxBlurRadius"/>.
            </summary>
            <value>
            The range of texels that are blurred at <see cref="P:DigitalRune.Graphics.PostProcessing.RadialBlur.MaxBlurRadius"/> relative to the viewport
            size. The default value is 0.04 (= 4% of viewport size).
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.RadialBlur.NumberOfSamples">
            <summary>
            Gets or sets the number of samples that are used in the blur.
            </summary>
            <value>The number of samples. The default value is 5.</value>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.RadialBlur.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.RadialBlur"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.RadialBlur.OnProcess(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.PostProcessing.SaoFilter">
            <summary>
            Creates a <i>Screen-Space Ambient Occlusion</i> (SSAO) effect using the "Scalable Ambient
            Obscurance" method to approximate ambient occlusion in real-time. 
            </summary>
            <remarks>
            <para>
            This class implements SSAO using the "Scalable Ambient Obscurance" method. This method creates
            a higher quality result, but might be slower than the SSAO method used by the
            <see cref="T:DigitalRune.Graphics.PostProcessing.SsaoFilter"/>.
            </para>
            <para>
            To improve the performance of this post processor the G-Buffer 0 should be mipmapped. If the
            G-Buffer 0 texture does not use mip maps, then this effect might be slow with a large sampling
            <see cref="P:DigitalRune.Graphics.PostProcessing.SaoFilter.Radius"/> or when the scene is close to the camera.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.SaoFilter.Strength">
            <summary>
            Gets or sets the strength of the ambient occlusion.
            </summary>
            <value>
            The strength. 0 means no ambient occlusion; 1 means full ambient occlusion.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.SaoFilter.MaxOcclusion">
            <summary>
            Gets or sets the max ambient occlusion value.
            </summary>
            <value>The max ambient occlusion in the range [0, 1]. The default value is 1.</value>
            <remarks>
            If <see cref="P:DigitalRune.Graphics.PostProcessing.SaoFilter.MaxOcclusion"/> is less than 1, the occlusion is clamped. Very occluded
            spots will be gray instead of black. Lowering the <see cref="P:DigitalRune.Graphics.PostProcessing.SaoFilter.MaxOcclusion"/> helps to
            make the ambient occlusion more uniform and avoid very dark spots.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.SaoFilter.Radius">
            <summary>
            Gets or sets the sample radius in world space units.
            </summary>
            <value>The sample radius in world space units. The default value is 0.5.</value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.SaoFilter.MinBias">
            <summary>
            Gets or sets the minimum bias used to avoid sampling artifacts.
            </summary>
            <value>The minimum bias in world space units. The default value is 0.02.</value>
            <remarks>
            <para>
            The bias is similar to the depth bias used in shadow mapping. It avoids dark ambient 
            occlusion spots on flat surface or very flat concave edges. 
            </para>
            <para>
            The effective bias is at least <see cref="P:DigitalRune.Graphics.PostProcessing.SaoFilter.MinBias"/>. It increases with distance from the 
            camera with a rate defined by <see cref="P:DigitalRune.Graphics.PostProcessing.SaoFilter.Bias"/>. To remove dark ambient occlusion spots,
            near the camera increase <see cref="P:DigitalRune.Graphics.PostProcessing.SaoFilter.MinBias"/>. To remove dark ambient occlusion spots
            in the distance, increase <see cref="P:DigitalRune.Graphics.PostProcessing.SaoFilter.Bias"/>. 
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.SaoFilter.Bias">
            <summary>
            Gets or sets the bias used to avoid sampling artifacts.
            </summary>
            <value>The bias. The default value is 0.0004.</value>
            <inheritdoc cref="P:DigitalRune.Graphics.PostProcessing.SaoFilter.MinBias" />
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.SaoFilter.NumberOfSamples">
            <summary>
            Gets or sets the number of samples.
            </summary>
            <value>The number of samples; must be greater than 0. The default value is 11.</value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.SaoFilter.SampleDistribution">
            <summary>
            Gets or sets the sample distribution.
            </summary>
            <value>The sample distribution. The default value is 7.</value>
            <remarks>
            This property influences how the samples are distributed in the sampled disk. Normally,
            you do not need to change this value. However, if <see cref="P:DigitalRune.Graphics.PostProcessing.SaoFilter.NumberOfSamples"/> is changed
            and the samples align or are not distributed uniformly, you can change the value. You can
            try any value equal to or greater than 1.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.SaoFilter.BlurScale">
            <summary>
            Gets or sets the blur scale.
            </summary>
            <value>The blur scale. The default value is 2.</value>
            <remarks>
            This factor is used to scale the samples offsets used when blurring the computed ambient
            occlusion. Increasing this factor creates a smoother ambient occlusion but may lead to
            dithering/checker board artifacts. Normally, the blur scale will be 2 or 3.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.SaoFilter.EdgeSharpness">
            <summary>
            Gets or sets the edge sharpness.
            </summary>
            <value>The edge sharpness. The default value is 1.</value>
            <remarks>
            <para>
            The computed ambient occlusion is blurred using an edge aware blur to avoid blurring over
            depth discontinuities. The sensitivity of the edge aware blur is defined by 
            <see cref="P:DigitalRune.Graphics.PostProcessing.SaoFilter.EdgeSharpness"/>. If <see cref="P:DigitalRune.Graphics.PostProcessing.SaoFilter.EdgeSharpness"/> is 0, the blur is a normal
            blur ignoring edges.
            </para>
            <para>
            Increase value to make edges crisper. Decrease value to reduce temporal flicker.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.SaoFilter.EdgeSoftness">
            <summary>
            Gets or sets the edge softness.
            </summary>
            <value>The edge softness in world space units. The default value is 0.5.</value>
            <remarks>
            <para>
            The computed ambient occlusion is blurred using an edge-aware blur to avoid blurring over
            depth discontinuities. The sensitivity of the edge-aware blur is defined by 
            <see cref="P:DigitalRune.Graphics.PostProcessing.SaoFilter.EdgeSoftness"/>. The value is the max allowed depth difference of two pixel in
            world space units. Pixels that closer than this threshold are blurred together; pixels which
            are farther apart are ignored.
            </para>
            <para>
            Decrease the value to make edges crisper. Increase the value to reduce temporal flicker.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.SaoFilter.CombineWithSource">
            <summary>
            Gets or sets a value indicating whether the ambient occlusion should be applied to the
            source image - or if a black-white AO image is produced, ignoring the source image.
            </summary>
            <value>
            <see langword="true"/> if the ambient occlusion buffer is applied to the source image;
            the result is the source image where occluded pixels are darkened. <see langword="false"/>
            if the source image is ignored and the processor produces a grayscale image (white =
            not occluded, black = fully occluded). The default value is <see langword="true"/>.
            </value>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.SaoFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.SsaoFilter"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.SaoFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.PostProcessing.SaturationFilter">
            <summary>
            Changes the saturation of the input texture.
            </summary>
            <remarks>
            This filter assumes that the saturation of the input texture is 1. The saturation of each 
            pixel is changed to the given target <see cref="P:DigitalRune.Graphics.PostProcessing.SaturationFilter.Saturation"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.SaturationFilter.Saturation">
            <summary>
            Gets or sets the saturation.
            </summary>
            <value>
            The saturation. A value of 0 creates a grayscale image. A value of 1 leaves the source image
            unchanged. Values greater than 1 increase the saturation. The default value is 0.
            </value>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.SaturationFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.SaturationFilter"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.SaturationFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.PostProcessing.SepiaFilter">
            <summary>
            Converts a colored image to sepia colors.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.SepiaFilter.Strength">
            <summary>
            Gets or sets the strength of the effect.
            </summary>
            <value>
            The strength factor. If this value is 0.0, the source image is not changed. If this value is 
            1.0, the source image is converted to sepia. If this value is between 0.0 and 1.0, a linear 
            interpolation between the source image and the sepia image is returned. The default value is
            1.0.
            </value>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.SepiaFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.SepiaFilter"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.SepiaFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.PostProcessing.SharpeningFilter">
            <summary>
            Applies a sharpening effect using edge detection with the Laplacian operator.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.SharpeningFilter.Sharpness">
            <summary>
            Gets or sets the sharpness factor in the range [0, ∞[.
            </summary>
            <value>The sharpness factor in the range [0, ∞[. The default value is 0.5.</value>
            <remarks>
            If this value is 0, the original image is returned. If this value is greater than 0, a 
            sharpened image is returned.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.SharpeningFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.SharpeningFilter"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.SharpeningFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.PostProcessing.SimpleMotionBlur">
            <summary>
            Creates a very simple motion blur effect by mixing the old blurred scene with the new scene.
            </summary>
            <remarks>
            <para>
            This post-processor stores information of a frame for use in the next frame. The information
            is stored with the currently active camera node. When there is a cut in the scene (i.e. a new
            level is loaded or the view changes significantly), the method 
            <see cref="M:DigitalRune.Graphics.SceneGraph.CameraNode.InvalidateViewDependentData"/> of the camera node needs to be called
            to reset the information. Further, this post-processor expects that it is called once per
            frame for a certain camera node. It might not work as expected if it is called several times
            per frame (e.g. to process different views using the same camera).
            </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.PostProcessing.SimpleMotionBlur.ViewDependentData">
            <summary>
            View-dependent information stored per camera node.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.SimpleMotionBlur.Strength">
            <summary>
            Gets or sets the strength of the blur effect in the range [0, 1[.
            </summary>
            <value>The strength. The default value 0.8.</value>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.SimpleMotionBlur.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.SimpleMotionBlur"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.SimpleMotionBlur.OnDisable">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.SimpleMotionBlur.Reset">
            <summary>
            Resets the motion blur effect. (The next frame will not be blurred.)
            </summary>
            <remarks>
            This method should be called if there was a cut in the visual scene and the next frame
            should not be blurred.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.SimpleMotionBlur.OnProcess(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.PostProcessing.SmaaFilter">
            <summary>
            Applies <i>Enhanced Subpixel Morphological Anti-Aliasing</i> (SMAA).
            </summary>
            <remarks>
            SMAA should be applied to a texture in sRGB space (= gamma-corrected, non-linear color 
            values).
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.SmaaFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.SmaaFilter"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.SmaaFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.PostProcessing.SsaoFilter">
            <summary>
            Creates a <i>Screen-Space Ambient Occlusion</i> (SSAO) effect to approximate ambient 
            occlusion in real-time.
            </summary>
            <remarks>
            <para>
            The default values are suitable for typical scenes, where 1 world space unit = 1 meter. If the
            rendered scenes have a different scale, the property <see cref="P:DigitalRune.Graphics.PostProcessing.SsaoFilter.MaxDistances"/> needs to be 
            adjusted.
            </para>
            <para>
            A different SSAO method with higher quality is implemented in the <see cref="T:DigitalRune.Graphics.PostProcessing.SaoFilter"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.SsaoFilter.Strength">
            <summary>
            Gets or sets the strength of the ambient occlusion.
            </summary>
            <value>
            The strength. 0 means, not ambient occlusion. 1 means, full ambient occlusion. 
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.SsaoFilter.Radii">
            <summary>
            Gets or sets the inner and outer ambient occlusion radius.
            </summary>
            <value>
            The ambient occlusion radii, given as a vector with 2 components: (inner radius, outer 
            radius). The values are relative to the screen size. The default value is (0.01, 0.02). 
            </value>
            <remarks>
            Depending on the current <see cref="P:DigitalRune.Graphics.PostProcessing.SsaoFilter.Quality"/>, the SSAO shader samples occlusion at 
            one or two distances around a pixel. A smaller radius creates smaller and more pronounced
            ambient occlusion shadows. A larger radius creates a wider and softer shadow. With high 
            quality settings, the shader samples ambient occlusion at two radii to catch details
            and soft occlusion shadows.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.SsaoFilter.Scale">
            <summary>
            Gets or sets the scale factors.
            </summary>
            <value>
            The scale factors, given as a vector with 2 components: (min scale factor, max scale 
            factor). The default is (0.5, 2).
            </value>
            <remarks>
            The shader uses random sample offsets around each pixel to sample occlusion. Each sample
            offset is scaled by a random value. <see cref="P:DigitalRune.Graphics.PostProcessing.SsaoFilter.Scale"/> defines the min and max size of
            this random scale factor. For example: If <see cref="P:DigitalRune.Graphics.PostProcessing.SsaoFilter.Scale"/> is (1, 1), then the sample
            offsets are not scaled. If <see cref="P:DigitalRune.Graphics.PostProcessing.SsaoFilter.Scale"/> is (0.5, 2), then the random offsets
            are scaled with random values between 0.5 and 2.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.SsaoFilter.MaxDistances">
            <summary>
            Gets or sets the max distances for ambient occlusion.
            </summary>
            <value>
            The max distances, given as a vector with 2 components: (max distance for the inner radius,
            max distance for the outer radius). The values are specified in world space units. The 
            default is (0.5, 1.0).
            </value>
            <remarks>
            <para>
            To avoid dark halos around objects, the ambient occlusion disappears if the distance between
            a shaded point and its occluder is greater than <see cref="P:DigitalRune.Graphics.PostProcessing.SsaoFilter.MaxDistances"/>. 
            <see cref="P:DigitalRune.Graphics.PostProcessing.SsaoFilter.MaxDistances"/> allows to define separate max distance values for the inner and
            the outer sampling radius (see <see cref="P:DigitalRune.Graphics.PostProcessing.SsaoFilter.Radii"/>).
            </para>
            <para>
            The max distances are given in world space units. The default values are suitable for
            typical scenes, where 1 world space unit = 1 meter. The values need to be adjusted if the
            scene uses a different scale.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.SsaoFilter.Quality">
            <summary>
            Gets or sets the quality level.
            </summary>
            <value>
            The quality level in the range [0, 2]. 0 means, "no ambient occlusion". Higher value
            create a higher quality effect. The default is 2. 
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is less than 0 or greater than 2.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.SsaoFilter.DownsampleFactor">
            <summary>
            Gets or sets the downsample factor.
            </summary>
            <value>
            The downsample factor. This value must be greater than 0. The default value is 2.
            </value>
            <remarks>
            To improve performance, ambient occlusion is computed on a downsampled depth buffer. 
            The width and height of the depth buffer are downsampled by this factor.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.SsaoFilter.NumberOfBlurPasses">
            <summary>
            Gets or sets the number of blur passes.
            </summary>
            <value>
            The number of blur passes. The default value is 1.
            </value>
            <remarks>
            The ambient occlusion shader creates a noisy ambient occlusion texture. For better quality,
            this noisy image is blurred. <see cref="P:DigitalRune.Graphics.PostProcessing.SsaoFilter.NumberOfBlurPasses"/> defines the number of 
            blur passes that are applied to the ambient occlusion texture.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.SsaoFilter.UseEdgeAwareBlur">
            <summary>
            Gets or sets a value indicating whether the ambient occlusion should be blurred using
            an edge-aware blur.
            </summary>
            <value>
            <see langword="true"/> if an edge-aware blur should be used; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            If <see cref="P:DigitalRune.Graphics.PostProcessing.SsaoFilter.NumberOfBlurPasses"/> is greater than 0, then the ambient occlusion buffer
            is blurred. An edge-aware blur avoids dark halos around objects that could be created when
            dark ambient occlusion shadows are blurred beyond visible edges. If
            <see cref="P:DigitalRune.Graphics.PostProcessing.SsaoFilter.UseEdgeAwareBlur"/> is <see langword="false"/>, a normal blur is used which
            creates a better blur but could lead to artifacts like dark halos. 
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.SsaoFilter.CombineWithSource">
            <summary>
            Gets or sets a value indicating whether the ambient occlusion should be applied to the
            source image - or if a black-white AO image is produced, ignoring the source image.
            </summary>
            <value>
            <see langword="true"/> if the ambient occlusion buffer is applied to the source image;
            the result is the source image where occluded pixels are darkened. <see langword="false"/> 
            if the source image is ignored and the processor produces a grayscale image (white =
            not occluded, black = fully occluded). The default value is <see langword="true"/>.
            </value>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.SsaoFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.SsaoFilter"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.SsaoFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.PostProcessing.UnsharpMaskingFilter">
            <summary>
            Applies an unsharp masking filter.
            </summary>
            <remarks>
            Unsharp masking blurs the source texture (using <see cref="P:DigitalRune.Graphics.PostProcessing.UnsharpMaskingFilter.Blur"/>) and then linearly
            interpolates between the blurred texture and the source texture using <see cref="P:DigitalRune.Graphics.PostProcessing.UnsharpMaskingFilter.Sharpness"/>
            as the interpolation factor. <see cref="P:DigitalRune.Graphics.PostProcessing.UnsharpMaskingFilter.Sharpness"/> values greater than 1 (extrapolation), 
            create a sharpening effect.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.UnsharpMaskingFilter.Sharpness">
            <summary>
            Gets or sets the sharpness factor in the range [0, ∞[.
            </summary>
            <value>The sharpness factor. The default value 1.2.</value>
            <remarks>
            If this value is 0, a blurred images is returned. If this value is 1, the original image is 
            returned. If this value is greater than 1, a sharpened image is returned.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.UnsharpMaskingFilter.Blur">
            <summary>
            Gets the blur processor.
            </summary>
            <value>The blur processor.</value>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.UnsharpMaskingFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.UnsharpMaskingFilter"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.UnsharpMaskingFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.PostProcessing.UpsamplingMode">
            <summary>
            Defines the texture filtering that is used when combining a low-resolution image with the
            full-resolution scene.
            </summary>
            <remarks>
            <see cref="F:DigitalRune.Graphics.PostProcessing.UpsamplingMode.Bilateral"/> and <see cref="F:DigitalRune.Graphics.PostProcessing.UpsamplingMode.NearestDepth"/> are "edge-aware" filtering modes that
            try to maintain the original geometry and avoid blurring over edges.
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.PostProcessing.UpsamplingMode.Point">
            <summary>
            Nearest-neighbor interpolation. Fastest, low quality.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.PostProcessing.UpsamplingMode.Linear">
            <summary>
            Bilinear interpolation. Fast, good quality.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.PostProcessing.UpsamplingMode.Bilateral">
            <summary>
            Joint (cross) bilateral upsampling. Slow, best quality for surfaces.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.PostProcessing.UpsamplingMode.NearestDepth">
            <summary>
            Nearest-depth upsampling. Slow, best quality for particles and volumetric effects.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.PostProcessing.UpsampleFilter">
            <summary>
            Upscales an input texture.
            </summary>
            <remarks>
            <para>
            This post-processor reads the low-resolution <see cref="P:DigitalRune.Graphics.RenderContext.SourceTexture"/> and
            increases the resolution to match the <see cref="P:DigitalRune.Graphics.RenderContext.RenderTarget"/>.
            </para>
            <para>
            The <see cref="T:DigitalRune.Graphics.PostProcessing.UpsampleFilter"/> supports different modes (see property <see cref="P:DigitalRune.Graphics.PostProcessing.UpsampleFilter.Mode"/>).
            <see cref="F:DigitalRune.Graphics.PostProcessing.UpsamplingMode.Point"/> and <see cref="F:DigitalRune.Graphics.PostProcessing.UpsamplingMode.Linear"/> are basic
            upsampling modes that do not take the original geometry in account.
            <see cref="F:DigitalRune.Graphics.PostProcessing.UpsamplingMode.Bilateral"/>and <see cref="F:DigitalRune.Graphics.PostProcessing.UpsamplingMode.NearestDepth"/> are
            "edge-aware" modes that try to maintain the original geometry and prevent blurred edges. The
            "edge-aware" modes require that the depth buffer is set in the render context (see property 
            <see cref="P:DigitalRune.Graphics.RenderContext.GBuffer0"/>) and the low-resolution copy of the depth buffer needs to
            be stored in <c>renderContext.Data[RenderContextKey.DepthBufferHalf]</c>.
            </para>
            <para>
            Optionally, a <see cref="P:DigitalRune.Graphics.RenderContext.SceneTexture"/> can be set in the 
            <see cref="T:DigitalRune.Graphics.RenderContext"/>. In this case the input texture is combined (alpha-blended) to the 
            scene texture and the combined result is output by the pixel shader.
            </para>
            <para>
            Optionally, the property <see cref="P:DigitalRune.Graphics.PostProcessing.UpsampleFilter.RebuildZBuffer"/> can be set. In this case the depth
            information of the original scene is output together with the color information in the pixel
            shader.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.UpsampleFilter.Mode">
            <summary>
            Gets or sets the mode that is used for upsampling the low-resolution image.
            </summary>
            <value>
            The mode for upsampling the low-resolution image. The default value is 
            <see cref="F:DigitalRune.Graphics.PostProcessing.UpsamplingMode.Linear"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.UpsampleFilter.DepthSensitivity">
            <summary>
            Bilateral Upsampling: Gets or sets the depth sensitivity.
            </summary>
            <value>The depth sensitivity for bilateral upsampling. The default value is 1000.</value>
            <remarks>
            <para>
            This property is only relevant when <see cref="P:DigitalRune.Graphics.PostProcessing.UpsampleFilter.Mode"/> is set to
            <see cref="F:DigitalRune.Graphics.PostProcessing.UpsamplingMode.Bilateral"/>.
            </para>
            <para>
            Joint (cross) bilateral upsampling: The filter uses bilinear interpolation when upsampling
            the low-resolution image, except at edges. The depth of the low-resolution pixels is
            compared with the depth of the original full-resolution image. Low-resolution pixels that
            have a small depth difference have more weight than pixels with are large depth difference.
            </para>
            <para>
            A small depth sensitivity creates smooth images, but edges may be blurred. Use a large depth
            sensitivity to maintain hard edges, but the image quality at non-edges may be reduced.
            </para>
            <para>
            Setting <see cref="P:DigitalRune.Graphics.PostProcessing.UpsampleFilter.DepthSensitivity"/> to 0 disables joint bilateral upsampling. (The result
            will be the equivalent to bilinear interpolation.)
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.UpsampleFilter.DepthThreshold">
            <summary>
            Nearest-Depth Upsampling: Gets or sets the depth threshold used for edge detection.
            </summary>
            <value>The depth threshold in world space units. The default value is 1 unit.</value>
            <remarks>
            <para>
            This property is only relevant when <see cref="P:DigitalRune.Graphics.PostProcessing.UpsampleFilter.Mode"/> is set to
            <see cref="F:DigitalRune.Graphics.PostProcessing.UpsamplingMode.NearestDepth"/>.
            </para>
            <para>
            Nearest-depth upsampling: The filter uses bilinear interpolation when upsampling the
            low-resolution image, except for edges where nearest-depth upsampling is used. The
            <see cref="P:DigitalRune.Graphics.PostProcessing.UpsampleFilter.DepthThreshold"/> is the threshold value used for edge detection.
            </para>
            <para>
            A large depth threshold creates smooth images, but edges may be blurred. Use a small depth
            threshold to maintain hard edges, but the image quality at non-edges may be reduced.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.PostProcessing.UpsampleFilter.RebuildZBuffer">
            <summary>
            Gets or sets a value indicating whether to rebuild the Z-buffer.
            </summary>
            <value>
            <see langword="true"/> to rebuild the Z-buffer; otherwise, <see langword="false"/>.
            The default value is <see langword="false"/>.
            </value>
            <remarks>
            When <see cref="P:DigitalRune.Graphics.PostProcessing.UpsampleFilter.RebuildZBuffer"/> is set the depth information of the original scene is 
            output together with the color information in the pixel shader.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.UpsampleFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.UpsampleFilter"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
        </member>
        <member name="M:DigitalRune.Graphics.PostProcessing.UpsampleFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.RenderContext">
            <summary>
            Provides information about the current render states.
            </summary>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Graphics.RenderContext"/> is passed to every Render method. It is used to pass 
            information to a renderer, and it should contain all information that is required to render 
            an object or to perform a rendering step.
            </para>
            <para>
            Additional information can be stored in the <see cref="P:DigitalRune.Graphics.RenderContext.Data"/> dictionary.
            </para>
            <para>
            <strong>Cloning:</strong><br/>
            The render context is cloneable. <see cref="M:DigitalRune.Graphics.RenderContext.Clone"/> makes a copy of the current render 
            context. The new instance contains a new <see cref="P:DigitalRune.Graphics.RenderContext.Data"/> dictionary. The properties and the
            contents of the <see cref="P:DigitalRune.Graphics.RenderContext.Data"/> dictionary are copied by reference (shallow copy).
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.RenderContext.GraphicsService">
            <summary>
            Gets or sets the graphics service.
            </summary>
            <value>The graphics service.</value>
        </member>
        <member name="P:DigitalRune.Graphics.RenderContext.PresentationTarget">
            <summary>
            Gets or sets the <see cref="P:DigitalRune.Graphics.RenderContext.PresentationTarget"/> that is currently being rendered. 
            </summary>
            <value>
            The <see cref="P:DigitalRune.Graphics.RenderContext.PresentationTarget"/>, or <see langword="null"/> if the current presentation
            target is the default XNA window.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.RenderContext.Screen">
            <summary>
            Gets or sets the <see cref="T:DigitalRune.Graphics.GraphicsScreen"/> that is currently being rendered.
            </summary>
            <value>The <see cref="T:DigitalRune.Graphics.GraphicsScreen"/>.</value>
        </member>
        <member name="P:DigitalRune.Graphics.RenderContext.Time">
            <summary>
            Gets the total elapsed time.
            </summary>
            <value>The total elapsed time.</value>
            <inheritdoc cref="P:DigitalRune.Graphics.IGraphicsService.Time"/>
        </member>
        <member name="P:DigitalRune.Graphics.RenderContext.DeltaTime">
            <summary>
            Gets the elapsed time since the last frame.
            </summary>
            <value>The elapsed time since the last frame.</value>
            <inheritdoc cref="P:DigitalRune.Graphics.IGraphicsService.DeltaTime"/>
        </member>
        <member name="P:DigitalRune.Graphics.RenderContext.Frame">
            <summary>
            Gets or sets the number of the current frame.
            </summary>
            <value>The number of the current frame.</value>
            <inheritdoc cref="P:DigitalRune.Graphics.IGraphicsService.Frame"/>
        </member>
        <member name="P:DigitalRune.Graphics.RenderContext.Object">
            <summary>
            Gets or sets the current data object.
            </summary>
            <value>The current data object.</value>
        </member>
        <member name="P:DigitalRune.Graphics.RenderContext.SourceTexture">
            <summary>
            Gets or sets the source texture that contains the source image for the current render
            operation. 
            </summary>
            <value>
            The source texture; or <see langword="null"/> if there is no source texture.
            </value>
            <remarks>
            This property is used by <see cref="T:DigitalRune.Graphics.GraphicsScreen"/>s and <see cref="T:DigitalRune.Graphics.PostProcessing.PostProcessor"/>s.
            The source texture is usually the content of the last render operation, e.g. the result
            of the last graphics screen or the last post-processor.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.RenderContext.RenderTarget">
            <summary>
            Gets or sets the target of the current rendering operations.
            </summary>
            <value>
            The target of the current rendering operations; or <see langword="null"/> if the device
            back buffer is the target.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.RenderContext.Viewport">
            <summary>
            Gets the viewport (= the portion of the back buffer that should be used for rendering).
            </summary>
            <value>The viewport.</value>
            <remarks>
            <para>
            Usually, a graphics screen uses the full back buffer. But when the game is rendered into 
            a <see cref="T:DigitalRune.Graphics.Interop.IPresentationTarget"/>, it can happen that the back buffer is larger than the 
            current presentation target. The graphics screens and drawable objects should only use
            the portion of the back buffer that is specified by <see cref="P:DigitalRune.Graphics.RenderContext.Viewport"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.RenderContext.SceneTexture">
            <summary>
            Gets or sets the texture that contains the rendered scene.
            </summary>
            <value>
            The scene texture; or <see langword="null"/> if there is no scene texture available.
            </value>
            <remarks>
            This property is usually <see langword="null"/>. However, in operations like off-screen
            rendering you need to combine an off-screen texture with the last scene texture. In this
            case <see cref="P:DigitalRune.Graphics.RenderContext.SourceTexture"/> will specify the off-screen texture and 
            <see cref="P:DigitalRune.Graphics.RenderContext.SceneTexture"/> will specify the last scene texture. 
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.RenderContext.GBuffer0">
            <summary>
            Gets or sets the first texture containing G-buffer data.
            </summary>
            <value>The first G-buffer texture.</value>
        </member>
        <member name="P:DigitalRune.Graphics.RenderContext.GBuffer1">
            <summary>
            Gets or sets the second texture containing G-buffer data.
            </summary>
            <value>The second G-buffer texture.</value>
        </member>
        <member name="P:DigitalRune.Graphics.RenderContext.GBuffer2">
            <summary>
            Gets or sets the third texture containing G-buffer data.
            </summary>
            <value>The third G-buffer texture.</value>
        </member>
        <member name="P:DigitalRune.Graphics.RenderContext.GBuffer3">
            <summary>
            Gets or sets the fourth texture containing G-buffer data.
            </summary>
            <value>The fourth G-buffer texture.</value>
        </member>
        <member name="P:DigitalRune.Graphics.RenderContext.LightBuffer0">
            <summary>
            Gets or sets the first texture containing light buffer data.
            </summary>
            <value>The first light buffer texture.</value>
        </member>
        <member name="P:DigitalRune.Graphics.RenderContext.LightBuffer1">
            <summary>
            Gets or sets the first texture containing light buffer data.
            </summary>
            <value>The first light buffer texture.</value>
        </member>
        <member name="P:DigitalRune.Graphics.RenderContext.RenderPass">
            <summary>
            Gets or sets a string that identifies the current render pass.
            </summary>
            <value>The string that identifies the current render pass.</value>
        </member>
        <member name="F:DigitalRune.Graphics.RenderContext.RenderPassHash">
            <summary>
            The cached hash value of <see cref="P:DigitalRune.Graphics.RenderContext.RenderPass"/>.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.RenderContext.Technique">
            <summary>
            Gets or sets a string that identifies the current technique.
            </summary>
            <value>The string that identifies the current technique.</value>
        </member>
        <member name="P:DigitalRune.Graphics.RenderContext.MaterialBinding">
            <summary>
            Gets or sets the effect binding of the current material.
            </summary>
            <value>
            The effect binding of the current material; or <see langword="null"/> if no material is 
            currently used.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.RenderContext.MaterialInstanceBinding">
            <summary>
            Gets or sets the effect binding of the current material instance.
            </summary>
            <value>
            The effect binding of the current material instance; or <see langword="null"/> if no 
            material is currently used.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.RenderContext.PassIndex">
            <summary>
            Gets or sets the index of the current <see cref="T:Microsoft.Xna.Framework.Graphics.EffectPass"/>.
            </summary>
            <value>
            The index of the current <see cref="T:Microsoft.Xna.Framework.Graphics.EffectPass"/>, or -1 if not applicable.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.RenderContext.Scene">
            <summary>
            Gets or sets the scene.
            </summary>
            <value>The scene.</value>
        </member>
        <member name="P:DigitalRune.Graphics.RenderContext.CameraNode">
            <summary>
            Gets or sets the active camera.
            </summary>
            <value>The active camera.</value>
        </member>
        <member name="P:DigitalRune.Graphics.RenderContext.SceneNode">
            <summary>
            Gets or sets the currently rendered scene node.
            </summary>
            <value>The currently rendered scene node.</value>
        </member>
        <member name="P:DigitalRune.Graphics.RenderContext.ReferenceNode">
            <summary>
            Gets or sets a scene node that provides additional context for the current render operation.
            </summary>
            <value>A scene node that provides additional information.</value>
            <remarks>
            <para>
            The purpose of the reference node depends on the current render operation. In most cases
            it will be <see langword="null"/>. Here are some examples where a reference node is useful:
            </para>
            <para>
            Shadow map rendering: When an object is rendered into the shadow map, the render context
            stores the currently rendered object in <see cref="P:DigitalRune.Graphics.RenderContext.SceneNode"/>. <see cref="P:DigitalRune.Graphics.RenderContext.ReferenceNode"/>
            contains the <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/> which owns the shadow map. This allows effect parameter
            bindings to find information about the light and the shadow.
            </para>
            <para>
            Render-to-texture: When an object is rendered into a texture of an 
            <see cref="T:DigitalRune.Graphics.SceneGraph.RenderToTextureNode"/>, the render context stores the currently rendered object 
            in <see cref="P:DigitalRune.Graphics.RenderContext.SceneNode"/>. <see cref="P:DigitalRune.Graphics.RenderContext.ReferenceNode"/> contains the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.RenderToTextureNode"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.RenderContext.LodBias">
            <summary>
            Gets or sets the global LOD bias.
            </summary>
            <value>The global LOD bias in the range [0, ∞[. The default value is 1.</value>
            <remarks>
            <para>
            The LOD bias is a factor that is multiplied to the distance of a scene node. It can be used 
            to increase or decrease the level of detail based on scene, performance, platform, or other 
            criteria.
            </para>
            <para>
            <strong>Performance Tips:</strong>
            <list type="bullet">
            <item>
            <description>
            Increase the LOD bias during computationally intensive scenes (e.g. large number of 
            objects or characters on screen).
            </description>
            </item>
            <item>
            <description>
            Increase the LOD bias of fast moving cameras.
            </description>
            </item>
            <item>
            <description>
            Increase/decrease LOD bias based on the games quality settings (e.g. minimal details vs.
            maximal details).
            </description>
            </item>
            <item>
            <description>
            Increase/decrease LOD bias based on platform (e.g. PC vs. mobile platforms).
            </description>
            </item>
            <item>
            <description>
            Increase/decrease LOD bias based on screen resolution. (Note: The LOD metric 
            "view-normalized distance" does not account for resolution changes.)
            </description>
            </item>
            </list>
            </para>
            <para>
            A <see cref="P:DigitalRune.Graphics.RenderContext.LodBias"/> of 0 forces all objects to be rendered with the highest level of 
            detail. A large <see cref="P:DigitalRune.Graphics.RenderContext.LodBias"/>, such as <see cref="F:System.Single.PositiveInfinity"/>, forces
            all objects to be drawn with the lowest level of detail.
            </para>
            </remarks>
            <seealso cref="P:DigitalRune.Graphics.SceneGraph.CameraNode.LodBias"/>
        </member>
        <member name="P:DigitalRune.Graphics.RenderContext.LodBlendingEnabled">
            <summary>
            Gets or sets a value indicating whether smooth LOD transitions are enabled.
            </summary>
            <value>
            <see langword="true"/> to enable smooth LOD transitions; otherwise, <see langword="false"/>.
            The default value is <see langword="false"/>.
            </value>
            <remarks>
            <para>
            When <see cref="P:DigitalRune.Graphics.RenderContext.LodBlendingEnabled"/> is <see langword="false"/> the renderer instantly 
            switches LODs, which can result in apparent "popping" of the geometry in the scene. The 
            property can be set to <see langword="true"/> to enable smooth transitions: The renderer 
            draws both LODs and blends them using screen-door transparency (stipple patterns).
            </para>
            <para>
            The length of the transition phase is determined by the <see cref="P:DigitalRune.Graphics.RenderContext.LodHysteresis"/>. If the
            LOD hysteresis is 0, blending is also disabled.
            </para>
            <para>
            Blending of LODs is expensive and increases the workload during LOD transitions. It is 
            therefore recommended to keep the LOD hysteresis small and to disable LOD blending during 
            computationally intensive scenes.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.RenderContext.LodCameraNode">
            <summary>
            Gets or sets the camera that is used as reference for LOD calculations.
            </summary>
            <value>
            The camera that is used as reference for LOD calculations. 
            </value>
            <remarks>
            <para>
            LOD selection depends on the current camera (field-of-view) and the distance of the object 
            to the camera. The <see cref="P:DigitalRune.Graphics.RenderContext.LodCameraNode"/> references the camera that is used for LOD 
            computations.
            </para>
            <para>
            In most cases the same camera is used for rendering as well as LOD calculations. In this 
            case the same <see cref="T:DigitalRune.Graphics.SceneGraph.CameraNode"/> instance needs to be assigned to 
            <see cref="P:DigitalRune.Graphics.RenderContext.CameraNode"/> and <see cref="P:DigitalRune.Graphics.RenderContext.LodCameraNode"/>. LOD calculations will fail if the
            <see cref="P:DigitalRune.Graphics.RenderContext.LodCameraNode"/> is not set.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.RenderContext.LodHysteresis">
            <summary>
            Gets or sets the LOD hysteresis, which is the distance over which an object transitions from
            on level of detail to the next level. (Needs to be normalized - see remarks.)
            </summary>
            <value>
            The LOD hysteresis. The value needs to be normalized - see remarks. The default value is 0.
            </value>
            <remarks>
            <para>
            The <i>LOD hysteresis</i> introduces a lag into the LOD transitions. Instead of switching 
            between LODs at a certain threshold distance, the distance for switching to the lower LOD is
            further away than the threshold distance and the distance for switching to the higher LOD is
            closer.
            </para>
            <para>
            Example: The LOD distance for LOD2 is 100. With an LOD hysteresis of 10, the object 
            transitions from LOD1 to LOD2 at distance 105, and from LOD2 to LOD1 at distance 95.
            </para>
            <para>
            The LOD hysteresis can be set to avoid flickering when the camera is near a threshold 
            distance.
            </para>
            <para>
            The value stored in this property is a <i>view-normalized distance</i> as described here: 
            <see cref="M:DigitalRune.Graphics.GraphicsHelper.GetViewNormalizedDistance(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.SceneGraph.CameraNode)"/>. 
            The method <see cref="M:DigitalRune.Graphics.GraphicsHelper.GetViewNormalizedDistance(System.Single,DigitalRune.Mathematics.Algebra.Matrix44F)"/> can be 
            used to convert a distance to a view-normalized distance. The resulting value is independent
            of the current field-of-view.
            </para>
            <para>
            <strong>Tips:</strong>
            It is recommended to keep the LOD hysteresis tight: When LOD blending (see 
            <see cref="P:DigitalRune.Graphics.RenderContext.LodBlendingEnabled"/>) is set, the renderer has to render both LODs during 
            transitions and blend them using screen-door transparency (stipple patterns).
            </para>
            <para>
            In most games the transition range depends on the average speed of the camera. A fast moving
            player (e.g. in a racing game) requires a larger LOD hysteresis than a slow moving player
            (e.g. a first-person shooter).
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative, infinite or NaN.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.RenderContext.ShadowNear">
            <summary>
            Gets or sets the distance of the shadow near plane.
            </summary>
            <value>The distance of the shadow near plane.</value>
            <remarks>
            <para>
            When rendering cascaded shadow maps and a <see cref="P:DigitalRune.Graphics.CascadedShadow.MinLightDistance"/> is 
            set, the shadow projection does not match the camera projection. The shadow projection is a
            tight projection around the cascade. But the camera projection has a greater depth to catch
            all occluders in front of the cascade. <see cref="P:DigitalRune.Graphics.RenderContext.ShadowNear"/> specifies the distances from
            the camera to the near plane of the shadow projection.
            </para>
            <para>
            The value is temporarily set by the <see cref="T:DigitalRune.Graphics.Rendering.ShadowMapRenderer"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.RenderContext.UserData">
            <summary>
            Gets or sets a user-defined object.
            </summary>
            <value>The a user-defined object.</value>
            <remarks>
            <see cref="P:DigitalRune.Graphics.RenderContext.UserData"/> can be used to store user-defined data with the render context.
            Additionally, <see cref="P:DigitalRune.Graphics.RenderContext.Data"/> can be used to store more custom data that can be accessed 
            using a string key.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.RenderContext.Data">
            <summary>
            Gets a generic collection of name/value pairs which can be used to store custom data.
            </summary>
            <value>
            A generic collection of name/value pairs which can be used to store custom data.
            </value>
            <remarks>
            <see cref="P:DigitalRune.Graphics.RenderContext.UserData"/> can be used to store user-defined data with the render context.
            Additionally, <see cref="P:DigitalRune.Graphics.RenderContext.Data"/> can be used to store more custom data that can be
            accessed using a string key.
            </remarks>
            <seealso cref="T:DigitalRune.Graphics.RenderContextKeys"/>
        </member>
        <member name="M:DigitalRune.Graphics.RenderContext.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.RenderContext"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.RenderContext.Clone">
            <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.RenderContext"/> that is a clone of the current instance.
            </summary>
            <returns>
            A new <see cref="T:DigitalRune.Graphics.RenderContext"/> that is a clone of the current instance.
            </returns>
            <remarks>
            <para>
            See class documentation of <see cref="T:DigitalRune.Graphics.RenderContext"/> (section "Cloning") for more 
            information.
            </para>
            <para>
            <strong>Notes to Inheritors:</strong> The method <see cref="M:DigitalRune.Graphics.RenderContext.Clone"/> calls 
            <see cref="M:DigitalRune.Graphics.RenderContext.CreateInstanceCore"/> which is responsible for creating a new instance of the 
            <see cref="T:DigitalRune.Graphics.RenderContext"/> derived class and <see cref="M:DigitalRune.Graphics.RenderContext.CloneCore(DigitalRune.Graphics.RenderContext)"/> to create a copy of
            the current instance. Classes that derive from <see cref="T:DigitalRune.Graphics.RenderContext"/> need to
            implement <see cref="M:DigitalRune.Graphics.RenderContext.CreateInstanceCore"/> and <see cref="M:DigitalRune.Graphics.RenderContext.CloneCore(DigitalRune.Graphics.RenderContext)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.RenderContext.CreateInstance">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.RenderContext"/> class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            This is a private method, and the actual object-specific implementations for the behavior 
            are dependent on the override implementation of the <see cref="M:DigitalRune.Graphics.RenderContext.CreateInstanceCore"/> method, 
            which this method calls internally. 
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cannot clone <see cref="T:DigitalRune.Graphics.RenderContext"/>. A derived class does not implement 
            <see cref="M:DigitalRune.Graphics.RenderContext.CreateInstanceCore"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.RenderContext.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.RenderContext"/> derived class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            <para>
            Do not call this method directly (except when calling base in an implementation). This 
            method is called internally by the <see cref="M:DigitalRune.Graphics.RenderContext.Clone"/> method whenever a new instance of the
            <see cref="T:DigitalRune.Graphics.RenderContext"/> is created. 
            </para>
            <para>
            <strong>Notes to Inheritors:</strong> Every <see cref="T:DigitalRune.Graphics.RenderContext"/> derived class must 
            implement this method. A typical implementation is to simply call the default constructor 
            and return the result. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.RenderContext.CloneCore(DigitalRune.Graphics.RenderContext)">
            <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.RenderContext"/>.
            </summary>
            <param name="source">The object to clone.</param>
            <remarks>
            <strong>Notes to Inheritors:</strong> Every <see cref="T:DigitalRune.Graphics.RenderContext"/> derived class must 
            implement this method. A typical implementation is to call <c>base.CloneCore(this)</c> to 
            copy all properties of the base class and then copy all properties of the derived class.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.RenderContext.Reset">
            <summary>
            Resets the render context to default values.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.RenderContext.Set(DigitalRune.Graphics.RenderContext)">
            <summary>
            Copies the properties of the specified render context.
            </summary>
            <param name="source">The render context from properties are copied.</param>
            <remarks>
            <para>
            All properties and the content of the <see cref="P:DigitalRune.Graphics.RenderContext.Data"/> dictionary are copied from 
            <paramref name="source"/> to this instance by reference (shallow copy).
            </para>
            <para>
            The <see cref="M:DigitalRune.Graphics.RenderContext.Set(DigitalRune.Graphics.RenderContext)"/> method internally calls <see cref="M:DigitalRune.Graphics.RenderContext.CloneCore(DigitalRune.Graphics.RenderContext)"/>, which can be 
            overridden in derived classes.
            </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.RenderContextKeys">
            <summary>
            Provides common names for render context data (see property <see cref="P:DigitalRune.Graphics.RenderContext.Data"/>
            of <see cref="T:DigitalRune.Graphics.RenderContext"/>).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.RenderContextKeys.DepthBufferHalf">
            <summary>
            A 2D texture (or render target) containing a downsampled depth buffer (half width and half 
            height).
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.RenderContextKeys.VelocityBuffer">
            <summary>
            A 2D texture (or render target) containing screen space velocities.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.RenderContextKeys.LastVelocityBuffer">
            <summary>
            A 2D texture (or render target) containing screen space velocities of the last frame.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.RenderContextKeys.RebuildZBufferRenderer">
            <summary>
            A <see cref="F:DigitalRune.Graphics.RenderContextKeys.RebuildZBufferRenderer"/> which should be used when the depth buffer has to be
            restored.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.RenderContextKeys.Shadow">
            <summary>
            The <see cref="T:DigitalRune.Graphics.Shadow"/>. (Only set if a shadow map is currently being rendered.)
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.RenderContextKeys.ShadowTileIndex">
            <summary>
            The index of the shadow tile (e.g. cube map side or cascade).
            (Only set if a shadow map with tiles is currently being rendered.)
            </summary>
            <remarks>
            For cascaded shadow maps the tile index is the index of the cascade.
            For cube map shadow map the tile index is the cube map face index.
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.BillboardBatch`1">
            <summary>
            Base implementation of <see cref="T:DigitalRune.Graphics.Rendering.IBillboardBatch"/>.
            </summary>
            <typeparam name="T">The type of vertex.</typeparam>
            <inheritdoc/>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.BillboardBatch`1.MaxBufferSize">
            <summary>
            The maximum buffer size (number of billboards).
            </summary>
            <remarks>
            The maximum buffer size is limited because <see cref="T:System.UInt16"/> values are internally used 
            as indices.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.BillboardBatch`1.IsDisposed">
            <summary>
            Gets a value indicating whether this instance has been disposed of.
            </summary>
            <value>
            <see langword="true"/> if this instance has been disposed of; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.BillboardBatch`1.GraphicsDevice">
            <summary>
            Gets the graphics device.
            </summary>
            <value>The graphics device.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.BillboardBatch`1.BufferSize">
            <summary>
            Gets the size of the buffer (number of billboards).
            </summary>
            <value>The size of the buffer (= number of billboards).</value>
            <remarks>
            The buffer size is the maximal number of billboards that can be rendered with a single draw
            call.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.BillboardBatch`1.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.BillboardBatch`1"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="bufferSize"/> is 0, negative, or greater than <see cref="F:DigitalRune.Graphics.Rendering.BillboardBatch`1.MaxBufferSize"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.BillboardBatch`1.Dispose">
            <summary>
            Releases all resources used by an instance of the <see cref="T:DigitalRune.Graphics.Rendering.BillboardBatch`1"/> class.
            </summary>
            <remarks>
            This method calls the virtual <see cref="M:DigitalRune.Graphics.Rendering.BillboardBatch`1.Dispose(System.Boolean)"/> method, passing in 
            <see langword="true"/>, and then suppresses finalization of the instance.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.BillboardBatch`1.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by an instance of the 
            <see cref="T:DigitalRune.Graphics.Rendering.BillboardBatchReach"/> class and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources; 
            <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.BillboardBatch`1.Begin(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.BillboardBatch`1.End">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.BillboardBatch`1.DrawBillboard(DigitalRune.Graphics.Rendering.BillboardArgs@,DigitalRune.Graphics.PackedTexture)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.BillboardBatch`1.OnDrawBillboard(DigitalRune.Graphics.Rendering.BillboardArgs@,DigitalRune.Graphics.PackedTexture,`0[],System.Int32)">
            <summary>
            Adds the specified billboard (4 vertices) to the vertex buffer.
            </summary>
            <param name="b">The billboard.</param>
            <param name="vertices">The vertex buffer.</param>
            <param name="texture">The packed texture.</param>
            <param name="index">The index of the next free slot in the vertex buffer.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.BillboardBatch`1.DrawRibbon(DigitalRune.Graphics.Rendering.RibbonArgs@,DigitalRune.Graphics.Rendering.RibbonArgs@,DigitalRune.Graphics.PackedTexture)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.BillboardBatch`1.OnDrawRibbon(DigitalRune.Graphics.Rendering.RibbonArgs@,DigitalRune.Graphics.Rendering.RibbonArgs@,DigitalRune.Graphics.PackedTexture,`0[],System.Int32)">
            <summary>
            Adds a segment of a particle ribbon (4 vertices) to the vertex buffer.
            </summary>
            <param name="p0">The segment start.</param>
            <param name="p1">The segment end.</param>
            <param name="texture">The packed texture.</param>
            <param name="vertices">The vertex buffer.</param>
            <param name="index">The index of the next free slot in the vertex buffer.</param>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.BillboardBatchHiDef">
            <summary>
            Renders billboards and particles in batches. (HiDef profile)
            </summary>
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.BillboardBatchHiDef.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.BillboardBatchHiDef" /> class.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="bufferSize">The size of the internal buffer (number of particles).</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="bufferSize"/> is 0, negative, or greater than 
            <see cref="F:DigitalRune.Graphics.Rendering.BillboardBatch`1.MaxBufferSize"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.BillboardBatchHiDef.OnDrawBillboard(DigitalRune.Graphics.Rendering.BillboardArgs@,DigitalRune.Graphics.PackedTexture,DigitalRune.Graphics.Rendering.BillboardVertex[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.BillboardBatchHiDef.OnDrawRibbon(DigitalRune.Graphics.Rendering.RibbonArgs@,DigitalRune.Graphics.Rendering.RibbonArgs@,DigitalRune.Graphics.PackedTexture,DigitalRune.Graphics.Rendering.BillboardVertex[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.BillboardBatchReach">
            <summary>
            Renders billboards and particles in batches. (Reach profile)
            </summary>
            <remarks>
            Billboards and particles are written into a dynamic vertex buffer. When the buffer size is 
            exceeded then the data is submitted and the batch is restarted.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.BillboardBatchReach.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.BillboardBatchReach" /> class.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="bufferSize">The size of the internal buffer (number of particles).</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="bufferSize"/> is 0, negative, or greater than 
            <see cref="F:DigitalRune.Graphics.Rendering.BillboardBatch`1.MaxBufferSize"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.BillboardBatchReach.Begin(DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.BillboardBatchReach.OnDrawBillboard(DigitalRune.Graphics.Rendering.BillboardArgs@,DigitalRune.Graphics.PackedTexture,Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.BillboardBatchReach.OnDrawRibbon(DigitalRune.Graphics.Rendering.RibbonArgs@,DigitalRune.Graphics.Rendering.RibbonArgs@,DigitalRune.Graphics.PackedTexture,Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.BillboardRenderer">
            <summary>
            Renders billboards and particles.
            </summary>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Graphics.Rendering.BillboardRenderer"/> is a scene node renderer which handles 
            <see cref="T:DigitalRune.Graphics.SceneGraph.BillboardNode"/>s and <see cref="T:DigitalRune.Graphics.SceneGraph.ParticleSystemNode"/>s.
            </para>
            <para>
            Particle systems need to have certain particle parameters for rendering. If a required 
            particle parameter is missing, the particle system is ignored by the renderer! See 
            <see cref="T:DigitalRune.Graphics.SceneGraph.ParticleSystemNode"/> for more information.
            </para>
            <para>
            <strong>Buffer Size:</strong> The renderer batches billboards and particles using an internal
            buffer. The property <see cref="P:DigitalRune.Graphics.Rendering.BillboardRenderer.BufferSize"/> limits the number of billboards/particles that 
            can be drawn with a single draw call.
            </para>
            <para>
            <strong>Render States:</strong> The <see cref="T:DigitalRune.Graphics.Rendering.BillboardRenderer"/> changes the following
            render states of the graphics device.
            </para>
            <list type="bullet">
            <item>
            <description>
            The appropriate <see cref="T:Microsoft.Xna.Framework.Graphics.BlendState"/> is set depending on the type of billboards/particles.
            </description>
            </item>
            <item>
            <description>
            Culling is disabled in the <see cref="T:Microsoft.Xna.Framework.Graphics.RasterizerState"/>. Billboards/particles are rendered
            "two-sided".
            </description>
            </item>
            <item>
            <description>
            <para>
            When using HiDef profile with soft particles the <see cref="T:Microsoft.Xna.Framework.Graphics.DepthStencilState"/> is set to
            <strong>None</strong> (= depth-reads and depth-writes are disabled).
            </para>
            <para>
            When using Reach profile or HiDef profile (without soft particles) the 
            <see cref="T:Microsoft.Xna.Framework.Graphics.DepthStencilState"/> is not changed. The <see cref="T:Microsoft.Xna.Framework.Graphics.DepthStencilState"/> should be 
            set explicitly before rendering billboards/particles. In most cases depth-writes should be 
            disabled, for example:
            <code lang="csharp">
            <![CDATA[
            graphicsDevice.DepthStencilState = DepthStencilState.DepthRead;
            billboardRenderer.Render(nodes, context);
            ]]>
            </code>
            </para>
            </description>
            </item>
            </list>
            <para>
            <strong>Soft Particles (require HiDef profile):</strong><br/>
            Billboards and particles are usually rendered as flat quads, which cause hard edges when they
            intersect with other geometry in the scene. "Soft particles" are rendered by performing an
            explicit depth test in the pixel shader. Soft particles fade out near the camera and create 
            smooth transitions when they intersect with other geometry.
            </para>
            <para>
            To enable rendering of soft particles set the property <see cref="P:DigitalRune.Graphics.Rendering.BillboardRenderer.EnableSoftParticles"/> to 
            <see langword="true"/>. In addition the depth buffer needs to be set in the render context 
            (property <see cref="P:DigitalRune.Graphics.RenderContext.GBuffer0"/>). 
            </para>
            <para>
            For image billboards: The <see cref="P:DigitalRune.Graphics.ImageBillboard.Softness"/> property defines whether 
            billboards are rendered "hard" or "soft".
            </para>
            <para>
            For particle systems: The <see cref="F:DigitalRune.Particles.ParticleParameterNames.Softness"/> parameter (a uniform
            particle parameter of type <see cref="T:System.Single"/>) defines whether particles are rendered "hard"
            or "soft".
            </para>
            <para>
            <strong>High-Speed, Off-Screen Particles (require HiDef profile):</strong><br/>
            Large amounts of particles covering the screen can cause a lot of overdraw. This can reduce
            the frame rate, if the game is limited by the GPU's fill rate. One solution to this problem
            is to render particles into a low-resolution off-screen buffer. This reduces the amount of
            overdraw, at the expense of additional image processing overhead and image quality.
            </para>
            <para>
            To enable off-screen rendering set the property <see cref="P:DigitalRune.Graphics.Rendering.BillboardRenderer.EnableOffscreenRendering"/> to
            <see langword="true"/>. In addition a low-resolution copy of the depth buffer (half width and
            height) needs to be stored in <c>renderContext.Data[RenderContextKey.DepthBufferHalf]</c>.
            </para>
            <para>
            In XNA off-screen rendering clears the current back buffer. If necessary the renderer will 
            automatically rebuild the back buffer including the depth buffer. For the rebuild step it will
            use the same parameters (e.g. near and far bias) as the current 
            <see cref="T:DigitalRune.Graphics.Rendering.RebuildZBufferRenderer"/> stored in 
            <c>renderContext.Data[RenderContextKey.RebuildZBufferRenderer]</c>.
            </para>
            <note type="warning">
            When off-screen rendering is enabled the <see cref="T:DigitalRune.Graphics.Rendering.BillboardRenderer"/> automatically 
            switches render targets and invalidates the current depth-stencil buffer.
            </note>
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.BillboardRenderer.Job">
            <summary>
            Represent a <see cref="T:DigitalRune.Graphics.SceneGraph.BillboardNode"/> or a <see cref="T:DigitalRune.Particles.ParticleSystem"/> of a 
            <see cref="T:DigitalRune.Graphics.SceneGraph.ParticleSystemNode"/>.
            </summary>
            <remarks>
            Note that a <see cref="T:DigitalRune.Graphics.SceneGraph.ParticleSystemNode"/> may have of several nested
            <see cref="T:DigitalRune.Particles.ParticleSystem"/>s. Each active <see cref="T:DigitalRune.Particles.ParticleSystem"/> is represent by a
            <see cref="T:DigitalRune.Graphics.Rendering.BillboardRenderer.Job"/>.
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.BillboardRenderer.Job.SortKey">
            <summary>The sort key.</summary>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.BillboardRenderer.Job.TextureId">
            <summary>The texture ID.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.BillboardRenderer.Job.Node">
            <summary>
            The <see cref="T:DigitalRune.Graphics.SceneGraph.BillboardNode"/> or <see cref="T:DigitalRune.Graphics.SceneGraph.ParticleSystemNode"/>.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.BillboardRenderer.Job.ParticleSystemData">
            <summary>
            The render data of the particle system.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.BillboardRenderer.MaxBufferSize">
            <summary>
            The maximum buffer size (number of billboards).
            </summary>
            <remarks>
            The maximum buffer size is limited because <see cref="T:System.UInt16"/> values are internally used 
            as indices.
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.BillboardRenderer.FontTextureId">
            <summary>
            The texture ID that is used for text. (When sorting by textures, the text billboards should
            be rendered last.)
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.BillboardRenderer.GraphicsService">
            <summary>
            Gets the graphics service.
            </summary>
            <value>The graphics service.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.BillboardRenderer.BufferSize">
            <summary>
            Gets the size of the buffer (number of billboards).
            </summary>
            <value>The size of the buffer (= number of billboards).</value>
            <remarks>
            The buffer size is the maximal number of billboards that can be rendered with a single draw
            call.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.BillboardRenderer.DepthThreshold">
            <summary>
            Gets or sets the depth threshold used for edge detection when upsampling the off-screen 
            buffer.
            </summary>
            <value>The depth threshold in world space units. The default value is 1 unit.</value>
            <remarks>
            <para>
            When off-screen rendering is enabled (see <see cref="P:DigitalRune.Graphics.Rendering.BillboardRenderer.EnableOffscreenRendering"/>), the 
            renderer uses bilinear interpolation when upsampling the off-screen buffer, except for edges
            where nearest-depth upsampling is used. The <see cref="P:DigitalRune.Graphics.Rendering.BillboardRenderer.DepthThreshold"/> is the threshold 
            value used for edge detection.
            </para>
            <para>
            In general: A large depth threshold improves image quality, but can cause edge artifacts. A
            small depth threshold improves the quality at geometry edges, but may reduce quality at 
            non-edges.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.BillboardRenderer.EnableOffscreenRendering">
            <summary>
            Gets or sets a value indicating whether off-screen rendering is enabled. (Requires HiDef
            profile.)
            </summary>
            <value>
            <see langword="true"/> if billboards and particles are rendered into an off-screen buffer; 
            otherwise, <see langword="false"/>. The default value is <see langword="false"/>.
            </value>
            <remarks>
            <para>
            When <see cref="P:DigitalRune.Graphics.Rendering.BillboardRenderer.EnableOffscreenRendering"/> is set, all particles are rendered into a 
            low-resolution off-screen buffer. The final off-screen buffer is upscaled and combined with
            the scene.
            </para>
            <para>
            This option should be enabled if the amount of particle overdraw causes a frame rate drop.
            Off-screen rendering reduces overdraw, at the expense of additional image processing 
            overhead and image quality.
            </para>
            <para>
            <strong>Important:</strong> A downsampled version of the depth buffer (half width and 
            height) needs to be stored in <c>renderContext.Data[RenderContextKey.DepthBufferHalf]</c>.
            </para>
            <para>
            When off-screen rendering is used, the hardware depth buffer information is lost. This 
            renderer restores the depth buffer when it combines the off-screen buffer with the render
            target in the final step. The restored depth buffer is not totally accurate.
            For the rebuild step the renderer will use the same parameters (e.g. near and far bias) as 
            the current <see cref="T:DigitalRune.Graphics.Rendering.RebuildZBufferRenderer"/> stored in 
            <c>renderContext.Data[RenderContextKey.RebuildZBufferRenderer]</c>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.BillboardRenderer.UpsamplingFilter">
            <summary>
            Gets or sets the upsampling filter that is used for combining the off-screen buffer with 
            the scene.
            </summary>
            <value>
            The upsampling filter for off-screen rendering. The default value is 
            <see cref="F:DigitalRune.Graphics.Rendering.UpsamplingFilter.NearestDepth"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.BillboardRenderer.UpsamplingMode">
            <summary>
            Gets or sets the upsampling filter that is used for combining the off-screen buffer with 
            the scene.
            </summary>
            <value>
            The upsampling filter for off-screen rendering. The default value is 
            <see cref="F:DigitalRune.Graphics.PostProcessing.UpsamplingMode.NearestDepth"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.BillboardRenderer.NearBias">
            <summary>
            Gets or sets the factor used to bias the camera near plane when the z-buffer is
            reconstructed. (Only used when <see cref="P:DigitalRune.Graphics.Rendering.BillboardRenderer.EnableOffscreenRendering"/> is set.)
            </summary>
            <value>The near bias factor. The default value is 1 (no bias).</value>
            <remarks>
            <para>
            When off-screen rendering is used, the hardware depth buffer information is lost. This 
            renderer restores the depth buffer when it combines the off-screen buffer with the render
            target in the final step. The restored depth buffer is not totally accurate.
            <see cref="P:DigitalRune.Graphics.Rendering.BillboardRenderer.NearBias"/> and <see cref="P:DigitalRune.Graphics.Rendering.BillboardRenderer.FarBias"/> can be used to bias the restored depth
            values to reduce z-fighting of any geometry which is rendered using the restored depth
            buffer.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.BillboardRenderer.FarBias">
            <summary>
            Gets or sets the bias factor used to bias the camera near plane when the z-buffer is
            reconstructed. (Only used when <see cref="P:DigitalRune.Graphics.Rendering.BillboardRenderer.EnableOffscreenRendering"/> is set.)
            </summary>
            <value>The far bias factor. The default value is 0.995f.</value>
            <inheritdoc cref="P:DigitalRune.Graphics.Rendering.BillboardRenderer.NearBias"/>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.BillboardRenderer.EnableSoftParticles">
            <summary>
            Gets or sets a value indicating whether soft particles are enabled. (Requires HiDef 
            profile.)
            </summary>
            <value>
            <see langword="true"/> if soft particles are enabled; otherwise, <see langword="false"/>.
            The default value is <see langword="false"/>.
            </value>
            <remarks>
            <para>
            When soft particles are enabled the renderer performs an explicit depth test in the pixel
            shader and creates smooth transitions when a particle intersects with other geometry in the
            scene.
            </para>
            <para>
            <strong>Important:</strong> The depth buffer needs to be set in the render context (property
            <see cref="P:DigitalRune.Graphics.RenderContext.GBuffer0"/>).
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.BillboardRenderer.#ctor(DigitalRune.Graphics.IGraphicsService,System.Int32)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.BillboardRenderer" /> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.BillboardRenderer" /> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <param name="bufferSize">
            The size of the internal buffer (= max number of billboards that can be rendered in a single 
            draw call). Max allowed value is 16384.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="bufferSize"/> is 0, negative, or greater than <see cref="F:DigitalRune.Graphics.Rendering.BillboardRenderer.MaxBufferSize"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.BillboardRenderer.#ctor(DigitalRune.Graphics.IGraphicsService,System.Int32,Microsoft.Xna.Framework.Graphics.SpriteFont)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.BillboardRenderer" /> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <param name="bufferSize">
            The size of the internal buffer (= max number of billboards that can be rendered in a single 
            draw call). Max allowed value is 16384.
            </param>
            <param name="spriteFont">
            The default font, which is used in case the font of a <see cref="T:DigitalRune.Graphics.TextSprite"/> is not set.
            Can be <see langword="null"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="bufferSize"/> is 0, negative, or greater than <see cref="F:DigitalRune.Graphics.Rendering.BillboardRenderer.MaxBufferSize"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.BillboardRenderer.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.BillboardRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.BillboardRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.BillboardRenderer.GetSortKey(System.Single,System.UInt16,System.UInt32)">
            <summary>
            Gets the sort key.
            </summary>
            <param name="distance">The distance.</param>
            <param name="drawOrder">The draw order.</param>
            <param name="textureId">The texture ID.</param>
            <returns>The key for sorting draw jobs.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.BillboardRenderer.ParticleIndex">
            <summary>
            Stores the index of a particle and its distance for per-particle depth sorting.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.BillboardRenderer.ParticleIndexComparer">
            <summary>
            Sorts particles back-to-front.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.BillboardRenderer.BlendStateOffscreen">
            <summary>
            The blend state for rendering billboards into the off-screen buffer.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.BillboardRenderer.GetTextureCoordinateU0(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the u texture coordinate at the start of a ribbon segment.
            </summary>
            <param name="i">The index of the segment in the current ribbon.</param>
            <param name="n">The number of segments in the current ribbon.</param>
            <param name="k">The tiling distance.</param>
            <returns>The u texture coordinate at the start of the ribbon segment.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.BillboardRenderer.GetTextureCoordinateU1(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the u texture coordinate at the end of a ribbon segment.
            </summary>
            <param name="i">The index of the segment in the current ribbon.</param>
            <param name="n">The number of segments in the current ribbon.</param>
            <param name="k">The tiling distance.</param>
            <returns>The u texture coordinate at the end of the ribbon segment.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.BillboardVertex">
            <summary>
            Vertex format used in "Billboard.fx".
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.BillboardVertex.VertexDeclaration">
            <summary>
            The vertex declaration.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.BillboardVertex.SizeInBytes">
            <summary>
            Gets the size of the <see cref="T:DigitalRune.Graphics.Rendering.BillboardVertex"/> structure in bytes.
            </summary>
            <value>The size of the vertex in bytes.</value>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.BillboardVertex.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> and this instance are the same type and 
            represent the same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.BillboardVertex.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.BillboardVertex.Microsoft#Xna#Framework#Graphics#IVertexType#VertexDeclaration">
            <summary>
            Gets the vertex declaration.
            </summary>
            <value>The vertex declaration.</value>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.BillboardVertex.op_Equality(DigitalRune.Graphics.Rendering.BillboardVertex,DigitalRune.Graphics.Rendering.BillboardVertex)">
            <summary>
            Compares two objects to determine whether they are the same. 
            </summary>
            <param name="left">Object to the left of the equality operator.</param>
            <param name="right">Object to the right of the equality operator.</param>
            <returns>
            <see langword="true"/> if the objects are the same; <see langword="false"/> otherwise. 
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.BillboardVertex.op_Inequality(DigitalRune.Graphics.Rendering.BillboardVertex,DigitalRune.Graphics.Rendering.BillboardVertex)">
            <summary>
            Compares two objects to determine whether they are different. 
            </summary>
            <param name="left">Object to the left of the inequality operator.</param>
            <param name="right">Object to the right of the inequality operator.</param>
            <returns>
            <see langword="true"/> if the objects are different; <see langword="false"/> otherwise. 
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.BillboardVertex.ToString">
            <summary>
            Retrieves a string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.IBillboardBatch">
            <summary>
            Renders billboards and particles in batches.
            </summary>
            <remarks>
            Billboards and particles are written into a dynamic vertex buffer. When the buffer size is 
            exceeded then the data is submitted and the batch is restarted.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.IBillboardBatch.Begin(DigitalRune.Graphics.RenderContext)">
            <summary>
            Begins a new batch.
            </summary>
            <param name="context">The render context.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.IBillboardBatch.End">
            <summary>
            Submits the current batch.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.IBillboardBatch.DrawBillboard(DigitalRune.Graphics.Rendering.BillboardArgs@,DigitalRune.Graphics.PackedTexture)">
            <summary>
            Adds a billboard to the batch.
            </summary>
            <param name="billboard">The billboard.</param>
            <param name="texture">The packed texture.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.IBillboardBatch.DrawRibbon(DigitalRune.Graphics.Rendering.RibbonArgs@,DigitalRune.Graphics.Rendering.RibbonArgs@,DigitalRune.Graphics.PackedTexture)">
            <summary>
            Adds a ribbon segment to the batch.
            </summary>
            <param name="p0">The segment start.</param>
            <param name="p1">The segment end.</param>
            <param name="texture">The packed texture.</param>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.Particle">
            <summary>
            Represents a billboard/particle in the billboard renderer. (The structure contains only 
            varying (per-particle) data. Uniform data is stored in 
            <see cref="T:DigitalRune.Graphics.SceneGraph.BillboardNode"/>/<see cref="T:DigitalRune.Graphics.Billboard"/> or <see cref="T:DigitalRune.Graphics.Rendering.ParticleSystemData"/>.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.ParticleSystemData">
            <summary>
            Caches render data for a particle system instance. (Data will be stored in 
            <see cref="P:DigitalRune.Particles.ParticleSystem.RenderData"/>.)
            </summary>
            <remarks>
            The render data of each particle system is stored in 
            <see cref="P:DigitalRune.Particles.ParticleSystem.RenderData"/>. The render data of nested 
            particle systems is additionally stored in <see cref="F:DigitalRune.Graphics.Rendering.ParticleSystemData.NestedRenderData"/> of the root particle
            system. This is necessary because the <see cref="T:DigitalRune.Graphics.Rendering.BillboardRenderer"/> cannot access nested 
            particle system, if the particle systems are updated concurrently on a different thread.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.ParticleSystemData.#ctor(DigitalRune.Particles.ParticleSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.ParticleSystemData" /> class.
            </summary>
            <param name="particleSystem">The particle system.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.ParticleSystemData.Update(DigitalRune.Particles.ParticleSystem)">
            <summary>
            Updates the render data of the <see cref="T:DigitalRune.Particles.ParticleSystem" />. Nested particle systems are
            ignored.
            </summary>
            <param name="particleSystem">The particle system.</param>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.UpsamplingFilter">
            <summary>
            Defines the upsampling filter that is used when combining the low-resolution, off-screen
            buffer with the scene.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.UpsamplingFilter.Point">
            <summary>
            Point upsampling. (Fastest, lowest quality)
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.UpsamplingFilter.Linear">
            <summary>
            Bilinear upsampling. (Fast, low quality)
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.UpsamplingFilter.Bilateral">
            <summary>
            Joint (cross) bilateral upsampling. (Slow, best quality for surfaces)
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.UpsamplingFilter.NearestDepth">
            <summary>
            Nearest-depth upsampling. (Slow, best quality for particles and volumetric effects)
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.DebugRenderer">
            <summary>
            Provides methods for rendering debug information.
            </summary>
            <remarks>
            <para>
            This class is your one-stop-shop for simple debug rendering. It has several Draw<i>Xyz</i>() 
            methods to draw points, lines, geometric objects, text, textures, etc. Calling a 
            Draw<i>Xyz</i>() method does not immediately draw something - instead the draw job is cached 
            and all draw jobs are rendered when <see cref="M:DigitalRune.Graphics.Rendering.DebugRenderer.Render(DigitalRune.Graphics.RenderContext)"/> is called. <see cref="M:DigitalRune.Graphics.Rendering.DebugRenderer.Clear"/> can be
            used to remove all current draw jobs. 
            </para>
            <para>
            Many draw calls allow to specify a flag "drawOverScene". If this flag is set, the objects are 
            drawn over the scene - they ignore the z-buffer information of the scene. Many draw calls for 
            solid shapes allow to specify a flag "drawWireFrame". If this flag is set, a simplified line 
            representation is drawn instead of solid faces.
            </para>
            <para>
            For text rendering, a <see cref="P:DigitalRune.Graphics.Rendering.DebugRenderer.SpriteFont"/> must be set. The <see cref="T:DigitalRune.Graphics.Rendering.DebugRenderer"/>
            does not have a default sprite font.
            </para>
            <para>
            Primitives drawn with solid faces can be transparent. All color values use non-premultiplied
            alpha.
            </para>
            <para>
            This class assumes that all input color values are non-premultiplied alpha values.
            </para>
            <para>
            <strong>Render Target and Viewport:</strong><br/>
            This renderer renders into the current render target and viewport of the graphics device.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.DebugRenderer.IsDisposed">
            <summary>
            Gets a value indicating whether this instance has been disposed of.
            </summary>
            <value>
            <see langword="true"/> if this instance has been disposed of; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.DebugRenderer.Effect">
            <summary>
            Gets the effect used for rendering.
            </summary>
            <value>
            The effect used for rendering. If this value is <see langword="null"/>, the debug renderer 
            does not draw points, lines or triangles. The default value is a new 
            <see cref="T:Microsoft.Xna.Framework.Graphics.BasicEffect"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.DebugRenderer.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:DigitalRune.Graphics.Rendering.DebugRenderer"/> is enabled.
            </summary>
            <value>
            <see langword="true"/> if enabled; otherwise, <see langword="false"/>. The default value is 
            <see langword="true"/>.
            </value>
            <remarks>
            If this value is <see langword="false"/> no debug info is drawn.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.DebugRenderer.DefaultColor">
            <summary>
            Gets or sets the default color that is used if no color is explicitly specified.
            </summary>
            <value>The default color.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.DebugRenderer.PointSize">
            <summary>
            Gets or sets the size of drawn points.
            </summary>
            <value>The size of a visible point (in pixels).</value>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.DebugRenderer.SpriteFont">
            <summary>
            Gets or sets the sprite font.
            </summary>
            <value>
            The sprite font. The default value is <see langword="null"/> - all texts are ignored!
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.DebugRenderer.DefaultTextPosition">
            <summary>
            Gets or sets the default text position.
            </summary>
            <value>
            The default text position. The default value is (NaN, NaN) - in which case the default text 
            position is the upper left corner of the title-safe area.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.DebugRenderer.ArrowHeadSize">
            <summary>
            Gets or sets the size of the arrow head (relative to the arrow length).
            </summary>
            <value>
            The relative size of the arrow head. This value should be in the range [0, 1].
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.DebugRenderer.AutoRenderStates">
            <summary>
            Gets or sets a value indicating whether the debug renderer automatically sets the required
            render states (depth-stencil, blend and rasterizer states required to render solid or
            wireframe, in or over scene, opaque or transparent).
            </summary>
            <value>
            <see langword="true" /> if the debug renderer automatically sets the required render states;
            otherwise, <see langword="false" /> to use the currently set depth-stencil, blend and
            rasterizer states. The default value is <see langword="true"/>.
            </value>
            <remarks>
            <para>
            To be able to render the different categories of primitives (solid/wireframe, in/over scene
            opaque/transparent) the debug renderer automatically sets the required render states. If
            this property is <see langword="false"/>, the renderer uses the render states currently set
            in the graphics device. This can be used, for example, to use the debug renderer to render
            models with additive blending. However, all primitives (solid/wireframe, in/over scene,
            etc.) will use the user-defined render state and might not be rendered as expected; for
            example if the blend state is set to "opaque", transparent primitives will also appear
            opaque.
            </para>
            <para>
            Note: Points, text and textures ignore this property and are always rendered with automatic
            render states.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.#ctor(DigitalRune.Graphics.IGraphicsService,Microsoft.Xna.Framework.Graphics.SpriteFont)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.DebugRenderer"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <param name="spriteFont">The sprite font.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.#ctor(DigitalRune.Graphics.IGraphicsService,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Graphics.SpriteFont)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.DebugRenderer"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <param name="spriteBatch">The sprite batch.</param>
            <param name="spriteFont">The sprite font.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.Dispose">
            <summary>
            Releases all resources used by an instance of the <see cref="T:DigitalRune.Graphics.Rendering.DebugRenderer"/> class.
            </summary>
            <remarks>
            This method calls the virtual <see cref="M:DigitalRune.Graphics.Rendering.DebugRenderer.Dispose(System.Boolean)"/> method, passing in 
            <see langword="true"/>, and then suppresses finalization of the instance.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.Rendering.DebugRenderer"/> class 
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources; 
            <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.Update(System.TimeSpan)">
            <summary>
            Updates the internal caches of the <see cref="T:DigitalRune.Graphics.Rendering.DebugRenderer"/>. 
            (Usually you do not need to call this method, see remarks.)
            </summary>
            <param name="deltaTime">The elapsed time since the last frame.</param>
            <remarks>
            This method does not need to be called in typical applications. A "typical" application
            is an app where <see cref="M:DigitalRune.Graphics.GraphicsManager.Update(System.TimeSpan)"/> of the <see cref="T:DigitalRune.Graphics.GraphicsManager"/> 
            is called every frame. However, if for some reasons 
            <see cref="T:DigitalRune.Graphics.GraphicsManager"/>.<see cref="M:DigitalRune.Graphics.GraphicsManager.Update(System.TimeSpan)"/> is not regularly called 
            in an app, then <see cref="M:DigitalRune.Graphics.Rendering.DebugRenderer.Update(System.TimeSpan)"/> of the <see cref="T:DigitalRune.Graphics.Rendering.DebugRenderer"/> should be called 
            manually, usually once per frame.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.Render(DigitalRune.Graphics.RenderContext)">
            <summary>
            Draws the debug information.
            </summary>
            <param name="context">The render context.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="context"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.Clear">
            <summary>
            Clears the debug renderer (removes all draw jobs).
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawPoint(DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color,System.Boolean)">
            <summary>
            Draws a point.
            </summary>
            <param name="position">The position in world space.</param>
            <param name="color">The color.</param>
            <param name="drawOverScene">
            If set to <see langword="true"/> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawLine(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color,System.Boolean)">
            <summary>
            Draws a line.
            </summary>
            <param name="start">The start position in world space.</param>
            <param name="end">The end position in world space.</param>
            <param name="color">The color.</param>
            <param name="drawOverScene">
            If set to <see langword="true"/> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawTriangle(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
            <overloads>
            <summary>
            Draws a triangle (with counter-clockwise winding for front faces).
            </summary>
            </overloads>
            
            <summary>
            Draws a triangle (with counter-clockwise winding for front faces).
            </summary>
            <param name="vertex0">The first vertex position in world space.</param>
            <param name="vertex1">The second vertex position in world space.</param>
            <param name="vertex2">The third vertex position in world space.</param>
            <param name="color">The color.</param>
            <param name="drawWireFrame">
            If set to <see langword="true"/> the wire-frame is drawn; otherwise the object is drawn
            with solid faces.
            </param>
            <param name="drawOverScene">
            If set to <see langword="true"/> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
            <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawTriangle(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
            <summary>
            Draws a triangle (with counter-clockwise winding for front faces).
            </summary>
            <param name="vertex0">The first vertex position in world space.</param>
            <param name="vertex1">The second vertex position in world space.</param>
            <param name="vertex2">The third vertex position in world space.</param>
            <param name="normal">
            The normal vector of the triangle (pointing away from the front side).
            </param>
            <param name="color">The color.</param>
            <param name="drawWireFrame">
            If set to <see langword="true"/> the wire-frame is drawn; otherwise the object is drawn
            with solid faces.
            </param>
            <param name="drawOverScene">
            If set to <see langword="true"/> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
            <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawTriangle(DigitalRune.Geometry.Shapes.Triangle,DigitalRune.Geometry.Pose,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
            <summary>
            Draws a triangle (with counter-clockwise winding for front faces).
            </summary>
            <param name="triangle">The triangle.</param>
            <param name="pose">The pose.</param>
            <param name="scale">The scale.</param>
            <param name="color">The color.</param>
            <param name="drawWireFrame">
            If set to <see langword="true"/> the wire-frame is drawn; otherwise the object is drawn
            with solid faces.
            </param>
            <param name="drawOverScene">
            If set to <see langword="true"/> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
            <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawTriangle(DigitalRune.Geometry.Shapes.Triangle,DigitalRune.Geometry.Pose,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
            <summary>
            Draws a triangle (with counter-clockwise winding for front faces).
            </summary>
            <param name="triangle">The triangle.</param>
            <param name="pose">The pose.</param>
            <param name="scale">The scale.</param>
            <param name="normal">
            The normal vector of the triangle (pointing away from the front side).
            </param>
            <param name="color">The color.</param>
            <param name="drawWireFrame">
            If set to <see langword="true"/> the wire-frame is drawn; otherwise the object is drawn
            with solid faces.
            </param>
            <param name="drawOverScene">
            If set to <see langword="true"/> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
            <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawTriangles(DigitalRune.Geometry.Meshes.ITriangleMesh,DigitalRune.Geometry.Pose,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
            <summary>
            Draws the triangles of the given mesh (with counter-clockwise winding for front faces).
            </summary>
            <param name="mesh">The triangle mesh.</param>
            <param name="pose">The pose.</param>
            <param name="scale">The scale.</param>
            <param name="color">The color.</param>
            <param name="drawWireFrame">
            If set to <see langword="true"/> the wire-frame is drawn; otherwise the object is drawn
            with solid faces.
            </param>
            <param name="drawOverScene">
            If set to <see langword="true"/> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
            <remarks>
            Warning: Calling this method every frame to render the same triangle mesh is very 
            inefficient! If the triangle mesh does not change, call <see cref="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawShape(DigitalRune.Geometry.Shapes.Shape,DigitalRune.Geometry.Pose,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)"/> with a 
            <see cref="T:DigitalRune.Geometry.Shapes.TriangleMeshShape"/> instead!
            </remarks>
            <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawTexture(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Draws a texture.
            </summary>
            <param name="texture">The texture.</param>
            <param name="rectangle">The destination rectangle in screen space.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawText(System.String)">
            <overloads>
            <summary>
            Draws the text to the screen.
            </summary>
            </overloads>
            
            <summary>
            Draws the text to the screen.
            </summary>
            <param name="text">The text.</param>
            <remarks>
            The text is added as a text line to a list of text that is drawn to the screen.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawText(System.Text.StringBuilder)">
            <summary>
            Draws the text to the screen.
            </summary>
            <param name="text">The text.</param>
            <remarks>
            The text is added as a text line to a list of text that is drawn to the screen.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawText(System.String,DigitalRune.Mathematics.Algebra.Vector2F,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws a text on a 2D position in screen space.
            </summary>
            <param name="text">The text.</param>
            <param name="position">The position in screen space (measured in pixels).</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawText(System.Text.StringBuilder,DigitalRune.Mathematics.Algebra.Vector2F,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws a text on a 2D position in screen space.
            </summary>
            <param name="text">The text.</param>
            <param name="position">The position in screen space (measured in pixels).</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawText(System.String,DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws a text on a 2D position in screen space.
            </summary>
            <param name="text">The text.</param>
            <param name="position">The position in screen space (measured in pixels).</param>
            <param name="relativeOrigin">
            The relative origin of the text. (0, 0) means that the upper-left corner of the text is at
            <paramref name="position"/>; (1, 1) means that the lower-right corner of the text is at 
            <paramref name="position"/>. Use (0.5, 0.5) to center the text.
            </param>
            <param name="color">The color.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawText(System.Text.StringBuilder,DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws a text on a 2D position in screen space.
            </summary>
            <param name="text">The text.</param>
            <param name="position">The position in screen space (measured in pixels).</param>
            <param name="relativeOrigin">
            The relative origin of the text. (0, 0) means that the upper-left corner of the text is at
            <paramref name="position"/>; (1, 1) means that the lower-right corner of the text is at 
            <paramref name="position"/>. Use (0.5, 0.5) to center the text.
            </param>
            <param name="color">The color.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawText(System.String,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color,System.Boolean)">
            <summary>
            Draws a text on a 3D position in world space.
            </summary>
            <param name="text">The text.</param>
            <param name="position">The position in world space.</param>
            <param name="color">The color.</param>
            <param name="drawOverScene">
            If set to <see langword="true"/> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawText(System.Text.StringBuilder,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color,System.Boolean)">
            <summary>
            Draws a text on a 3D position in world space.
            </summary>
            <param name="text">The text.</param>
            <param name="position">The position in world space.</param>
            <param name="color">The color.</param>
            <param name="drawOverScene">
            If set to <see langword="true"/> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawText(System.String,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector2F,Microsoft.Xna.Framework.Color,System.Boolean)">
            <summary>
            Draws a text on a 3D position in world space.
            </summary>
            <param name="text">The text.</param>
            <param name="position">The position in world space.</param>
            <param name="relativeOrigin">
            The relative origin of the text. (0, 0) means that the upper-left corner of the text is at
            <paramref name="position"/>; (1, 1) means that the lower-right corner of the text is at 
            <paramref name="position"/>. Use (0.5, 0.5) to center the text.
            </param>
            <param name="color">The color.</param>
            <param name="drawOverScene">
            If set to <see langword="true"/> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawText(System.Text.StringBuilder,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector2F,Microsoft.Xna.Framework.Color,System.Boolean)">
            <summary>
            Draws a text on a 3D position in world space.
            </summary>
            <param name="text">The text.</param>
            <param name="position">The position in world space.</param>
            <param name="relativeOrigin">
            The relative origin of the text. (0, 0) means that the upper-left corner of the text is at
            <paramref name="position"/>; (1, 1) means that the lower-right corner of the text is at 
            <paramref name="position"/>. Use (0.5, 0.5) to center the text.
            </param>
            <param name="color">The color.</param>
            <param name="drawOverScene">
            If set to <see langword="true"/> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawAabb(DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Geometry.Pose,Microsoft.Xna.Framework.Color,System.Boolean)">
            <summary>
            Draws an axis-aligned bounding-box (AABB). Wire-frame only.
            </summary>
            <param name="aabb">The axis-aligned bounding box.</param>
            <param name="pose">The pose of the AABB.</param>
            <param name="color">The color.</param>
            <param name="drawOverScene">
            If set to <see langword="true"/> the object is drawn over the graphics scene 
            (depth-test disabled).
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawAabbs(System.Collections.Generic.IEnumerable{DigitalRune.Geometry.IGeometricObject},System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean)">
            <summary>
            Draws the axis-aligned bounding-boxes (AABBs) of a collection of geometries.
            </summary>
            <param name="geometricObjects">The geometric objects.</param>
            <param name="color">
            The color. If this parameter is <see langword="null"/>, each AABB is drawn with a unique 
            color.
            </param>
            <param name="drawOverScene">
            If set to <see langword="true"/> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawArrow(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color,System.Boolean)">
            <summary>
            Draws an arrow pointing from <paramref name="start"/> to <paramref name="end"/>.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="color">The color.</param>
            <param name="drawOverScene">
            If set to <see langword="true"/> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
            <seealso cref="P:DigitalRune.Graphics.Rendering.DebugRenderer.ArrowHeadSize"/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawAxes(DigitalRune.Geometry.Pose,System.Single,System.Boolean)">
            <summary>
            Draws 3 axes for a coordinate cross.
            </summary>
            <param name="pose">The pose (position and orientation).</param>
            <param name="size">The size in world space.</param>
            <param name="drawOverScene">
            If set to <see langword="true"/> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
            <remarks>
            The x-axis is drawn red, the y-axis is drawn green, and the z-axis is drawn blue.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawContact(DigitalRune.Geometry.Collisions.Contact,System.Single,Microsoft.Xna.Framework.Color,System.Boolean)">
            <summary>
            Draws a contact.
            </summary>
            <param name="contact">The contact.</param>
            <param name="normalLength">The length of the normal vector in world space.</param>
            <param name="color">The color.</param>
            <param name="drawOverScene">
            If set to <see langword="true"/> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
            <remarks>
            The penetration depth is visualized with a dark red line.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawContacts(DigitalRune.Geometry.Collisions.ContactSet,System.Single,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean)">
            <overloads>
            <summary>
            Draws contacts.
            </summary>
            </overloads>
            
            <summary>
            Draws contacts.
            </summary>
            <param name="contactSet">The contact set.</param>
            <param name="normalLength">The length of the normal vector in world space.</param>
            <param name="color">
            The color. If this parameter is <see langword="null"/>, each contact is drawn with a unique 
            color.
            </param>
            <param name="drawOverScene">
            If set to <see langword="true"/> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
            <remarks>
            The penetration depth is visualized with a dark red line.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawContacts(DigitalRune.Geometry.Collisions.ContactSetCollection,System.Single,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean)">
            <summary>
            Draws contacts.
            </summary>
            <param name="contactSets">The contact sets.</param>
            <param name="normalLength">The length of the normal vector in world space.</param>
            <param name="color">
            The color. If this parameter is <see langword="null"/>, each contact is drawn with a unique 
            color.
            </param>
            <param name="drawOverScene">
            If set to <see langword="true"/> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
            <remarks>
            The penetration depth is visualized with a dark red line.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawBox(System.Single,System.Single,System.Single,DigitalRune.Geometry.Pose,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
            <summary>
            Draws a box.
            </summary>
            <param name="widthX">The x-size of the box.</param>
            <param name="widthY">The y-size of the box.</param>
            <param name="widthZ">The z-size of the box.</param>
            <param name="pose">The pose.</param>
            <param name="color">The color.</param>
            <param name="drawWireFrame">
            If set to <see langword="true"/> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
            <param name="drawOverScene">
            If set to <see langword="true"/> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
            <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawViewVolume(DigitalRune.Geometry.Shapes.ViewVolume,DigitalRune.Geometry.Pose,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
            <overloads>
            <summary>
            Draws a view volume (viewing frustum).
            </summary>
            </overloads>
            
            <summary>
            Draws a view volume (viewing frustum).
            </summary>
            <param name="viewVolume">The view volume.</param>
            <param name="pose">The pose.</param>
            <param name="color">The color.</param>
            <param name="drawWireFrame">
            If set to <see langword="true"/> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
            <param name="drawOverScene">
            If set to <see langword="true"/> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="viewVolume"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawViewVolume(DigitalRune.Geometry.Shapes.ViewVolume,DigitalRune.Geometry.Pose,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
            <summary>
            Draws a view volume (viewing frustum).
            </summary>
            <param name="viewVolume">The view volume.</param>
            <param name="pose">The pose.</param>
            <param name="scale">The scale.</param>
            <param name="color">The color.</param>
            <param name="drawWireFrame">
            If set to <see langword="true"/> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
            <param name="drawOverScene">
            If set to <see langword="true"/> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="viewVolume"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawViewVolume(System.Boolean,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,DigitalRune.Geometry.Pose,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
            <summary>
            Draws a view volume (viewing frustum).
            </summary>
            <param name="isPerspective">
            <see langword="true"/> for perspective view volumes, <see langword="false"/> for 
            orthographic view volumes.
            </param>
            <param name="left">The minimum x-value of the view volume at the near clip plane.</param>
            <param name="right">The maximum x-value of the view volume at the near clip plane.</param>
            <param name="bottom">The minimum y-value of the view volume at the near clip plane.</param>
            <param name="top">The maximum y-value of the view volume at the near clip plane.</param>
            <param name="near">The distance to the near clip plane.</param>
            <param name="far">The distance to the far clip plane.</param>
            <param name="pose">The pose.</param>
            <param name="color">The color.</param>
            <param name="drawWireFrame">
            If set to <see langword="true"/> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
            <param name="drawOverScene">
            If set to <see langword="true"/> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
            <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawSphere(System.Single,DigitalRune.Geometry.Pose,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
            <summary>
            Draws a sphere.
            </summary>
            <param name="radius">The radius of the sphere.</param>
            <param name="pose">The pose of the sphere in world space.</param>
            <param name="color">The color.</param>
            <param name="drawWireFrame">
            If set to <see langword="true"/> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
            <param name="drawOverScene">
            If set to <see langword="true"/> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
            <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawCapsule(System.Single,System.Single,DigitalRune.Geometry.Pose,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
            <summary>
            Draws a capsule that is centered at the local origin and parallel to the local y axis.
            </summary>
            <param name="radius">The radius of the capsule.</param>
            <param name="height">The total height of the capsule.</param>
            <param name="pose">The pose of the sphere in world space.</param>
            <param name="color">The color.</param>
            <param name="drawWireFrame">
            If set to <see langword="true"/> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
            <param name="drawOverScene">
            If set to <see langword="true"/> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
            <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawCylinder(System.Single,System.Single,DigitalRune.Geometry.Pose,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
            <summary>
            Draws a cylinder that is centered at the local origin and parallel to the local y axis.
            </summary>
            <param name="radius">The radius of the cylinder.</param>
            <param name="height">The total height of the cylinder.</param>
            <param name="pose">The pose of the sphere in world space.</param>
            <param name="color">The color.</param>
            <param name="drawWireFrame">
            If set to <see langword="true"/> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
            <param name="drawOverScene">
            If set to <see langword="true"/> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
            <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawCone(System.Single,System.Single,DigitalRune.Geometry.Pose,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
            <summary>
            Draws a cone with the base on the local xz plane pointing up into the local +y direction.
            </summary>
            <param name="radius">The radius of the cone.</param>
            <param name="height">The total height of the cone.</param>
            <param name="pose">The pose of the sphere in world space.</param>
            <param name="color">The color.</param>
            <param name="drawWireFrame">
            If set to <see langword="true"/> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
            <param name="drawOverScene">
            If set to <see langword="true"/> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
            <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawShape(DigitalRune.Geometry.Shapes.Shape,DigitalRune.Geometry.Pose,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
            <summary>
            Draws a geometric object.
            </summary>
            <param name="shape">The shape.</param>
            <param name="pose">The pose.</param>
            <param name="scale">The scale.</param>
            <param name="color">The color.</param>
            <param name="drawWireFrame">
            If set to <see langword="true"/> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
            <param name="drawOverScene">
            If set to <see langword="true"/> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
            <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawObject(DigitalRune.Geometry.IGeometricObject,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
            <summary>
            Draws a geometric object.
            </summary>
            <param name="geometricObject">The geometric object.</param>
            <param name="color">The color.</param>
            <param name="drawWireFrame">
            If set to <see langword="true"/> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
            <param name="drawOverScene">
            If set to <see langword="true"/> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
            <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawObjects(System.Collections.Generic.IEnumerable{DigitalRune.Geometry.IGeometricObject},System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.Boolean)">
            <summary>
            Draws geometric objects.
            </summary>
            <param name="geometricObjects">The geometric objects.</param>
            <param name="color">
            The color. If this parameter is <see langword="null"/>, each geometric object is drawn with 
            a unique color.
            </param>
            <param name="drawWireFrame">
            If set to <see langword="true"/> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
            <param name="drawOverScene">
            If set to <see langword="true"/> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
            <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawMesh(DigitalRune.Graphics.Submesh,DigitalRune.Geometry.Pose,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
            <overloads>
            <summary>
            Draws a mesh or submesh (without textures).
            </summary>
            </overloads>
            
            <summary>
            Draws a submesh.
            </summary>
            <param name="submesh">The submesh.</param>
            <param name="pose">The pose.</param>
            <param name="scale">The scale.</param>
            <param name="color">The color.</param>
            <param name="drawWireFrame">
            If set to <see langword="true"/> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
            <param name="drawOverScene">
            If set to <see langword="true"/> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
            <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawMesh(DigitalRune.Graphics.Mesh,DigitalRune.Geometry.Pose,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
            <summary>
            Draws a mesh.
            </summary>
            <param name="mesh">The mesh.</param>
            <param name="pose">The pose.</param>
            <param name="scale">The scale.</param>
            <param name="color">The color.</param>
            <param name="drawWireFrame">
            If set to <see langword="true"/> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
            <param name="drawOverScene">
            If set to <see langword="true"/> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
            <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawModel(Microsoft.Xna.Framework.Graphics.Model,DigitalRune.Geometry.Pose,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
            <overloads>
            <summary>
            Draws a model (without textures).
            </summary>
            </overloads>
            
            <summary>
            Draws a model (without textures).
            </summary>
            <param name="model">The model.</param>
            <param name="pose">The pose.</param>
            <param name="scale">The scale.</param>
            <param name="color">The color.</param>
            <param name="drawWireFrame">
            If set to <see langword="true"/> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
            <param name="drawOverScene">
            If set to <see langword="true"/> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
            <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawModel(DigitalRune.Graphics.SceneGraph.SceneNode,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
            <summary>
            Draws a model (meshes without textures).
            </summary>
            <param name="sceneNode">The scene node, usually a <see cref="T:DigitalRune.Graphics.SceneGraph.ModelNode"/>.</param>
            <param name="color">The color.</param>
            <param name="drawWireFrame">
            If set to <see langword="true"/> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
            <param name="drawOverScene">
            If set to <see langword="true"/> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
            <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawSkeleton(DigitalRune.Graphics.SceneGraph.MeshNode,System.Single,Microsoft.Xna.Framework.Color,System.Boolean)">
            <overloads>
            <summary>
            Draws skeleton bones, bone space axes and bone names of a <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode"/> for debugging.
            </summary>
            </overloads>
            
            <summary>
            Draws skeleton bones, bone space axes and bone names of a <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode"/> for debugging.
            </summary>
            <param name="meshNode">The mesh node.</param>
            <param name="axisLength">The visible length of the bone space axes.</param>
            <param name="color">The color for the bones and the bone names.</param>
            <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test
            disabled).
            </param>
            <remarks>
            This method draws the skeleton for debugging. It draws a line for each bone and the bone
            name. At the bone origin it draws 3 lines (red, green, blue) that visualize the bone
            space axes (x, y, z).
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawSkeleton(DigitalRune.Animation.Character.SkeletonPose,DigitalRune.Geometry.Pose,DigitalRune.Mathematics.Algebra.Vector3F,System.Single,Microsoft.Xna.Framework.Color,System.Boolean)">
            <summary>
            Draws skeleton bones, bone space axes and bone names of a <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode" /> for debugging.
            </summary>
            <param name="skeletonPose">The skeleton pose.</param>
            <param name="pose">The pose (position and orientation) of the skeleton.</param>
            <param name="scale">The scale of the skeleton.</param>
            <param name="axisLength">The visible length of the bone space axes.</param>
            <param name="color">The color for the bones and the bone names.</param>
            <param name="drawOverScene">If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test
            disabled).</param>
            <remarks>
            This method draws the skeleton for debugging. It draws a line for each bone and the bone
            name. At the bone origin it draws 3 lines (red, green, blue) that visualize the bone
            space axes (x, y, z).
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.LineBatch">
            <summary>
            Renders a batch of lines.
            </summary>
            <remarks>
            <para>
            A valid <see cref="P:DigitalRune.Graphics.Rendering.LineBatch.Effect"/> must be set; otherwise, <see cref="M:DigitalRune.Graphics.Rendering.LineBatch.Render(DigitalRune.Graphics.RenderContext)"/> will not draw any 
            lines. The <see cref="T:DigitalRune.Graphics.Rendering.LineBatch"/> uses the currently set render state (blend state,
            depth-stencil state, rasterizer state).
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.LineBatch.Effect">
            <summary>
            Gets or sets the effect.
            </summary>
            <value>The effect.</value>
            <remarks>
            If this value is <see langword="null"/>, then <see cref="M:DigitalRune.Graphics.Rendering.LineBatch.Render(DigitalRune.Graphics.RenderContext)"/> does nothing.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.LineBatch.#ctor(Microsoft.Xna.Framework.Graphics.BasicEffect)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.LineBatch"/> class.
            </summary>
            <param name="effect">
            The effect. If this value is <see langword="null"/>, then the batch will not draw anything
            when <see cref="M:DigitalRune.Graphics.Rendering.LineBatch.Render(DigitalRune.Graphics.RenderContext)"/> is called.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.LineBatch.Clear">
            <summary>
            Removes all lines.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.LineBatch.Add(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color)">
            <summary>
            Adds a line.
            </summary>
            <param name="start">The start position in world space.</param>
            <param name="end">The end position in world space.</param>
            <param name="color">The color (using non-premultiplied alpha).</param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.LineBatch.Render(DigitalRune.Graphics.RenderContext)">
            <summary>
            Draws the lines.
            </summary>
            <param name="context">The render context.</param>
            <remarks>
            If <see cref="P:DigitalRune.Graphics.Rendering.LineBatch.Effect"/> is <see langword="null"/>, then <see cref="M:DigitalRune.Graphics.Rendering.LineBatch.Render(DigitalRune.Graphics.RenderContext)"/> does nothing.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="context"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.PointBatch">
            <summary>
            Renders a batch of points as screen-aligned quads.
            </summary>
            <remarks>
            <para>
            A valid <see cref="P:DigitalRune.Graphics.Rendering.PointBatch.Effect"/> must be set; otherwise, <see cref="M:DigitalRune.Graphics.Rendering.PointBatch.Render(DigitalRune.Graphics.RenderContext)"/> will not draw any 
            points. The <see cref="T:DigitalRune.Graphics.Rendering.PointBatch"/> uses the currently set blend state and depth-stencil 
            state. 
            </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.PointBatch.Point">
            <summary>
            Defines a point.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.PointBatch.Point.Position">
            <summary>The position in world space.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.PointBatch.Point.Color">
            <summary>The color (using premultiplied alpha).</summary>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.PointBatch.Point.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.PointBatch.Point"/> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="color">The color (using premultiplied alpha).</param>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.PointBatch.Effect">
            <summary>
            Gets or sets the effect.
            </summary>
            <value>The effect.</value>
            <remarks>
            If this value is <see langword="null"/>, then <see cref="M:DigitalRune.Graphics.Rendering.PointBatch.Render(DigitalRune.Graphics.RenderContext)"/> does nothing.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.PointBatch.PointSize">
            <summary>
            Gets or sets the size of drawn points.
            </summary>
            <value>The size of a visible point (in pixels). The default value is 5.</value>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.PointBatch.#ctor(Microsoft.Xna.Framework.Graphics.BasicEffect)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.PointBatch"/> class.
            </summary>
            <param name="effect">
            The effect. If this value is <see langword="null"/>, then the batch will not draw anything
            when <see cref="M:DigitalRune.Graphics.Rendering.PointBatch.Render(DigitalRune.Graphics.RenderContext)"/> is called.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.PointBatch.Clear">
            <summary>
            Removes all points.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.PointBatch.Add(DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color)">
            <summary>
            Adds a point.
            </summary>
            <param name="position">The position in world space.</param>
            <param name="color">The color (non-premultiplied).</param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.PointBatch.Render(DigitalRune.Graphics.RenderContext)">
            <summary>
            Draws the points.
            </summary>
            <param name="context">The render context.</param>
            <remarks>
            If <see cref="P:DigitalRune.Graphics.Rendering.PointBatch.Effect"/> is <see langword="null"/>, then <see cref="M:DigitalRune.Graphics.Rendering.PointBatch.Render(DigitalRune.Graphics.RenderContext)"/> does nothing.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="context"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.PrimitiveBatch">
            <summary>
            Renders a batch of primitives.
            </summary>
            <remarks>
            <para>
            A valid <see cref="P:DigitalRune.Graphics.Rendering.PrimitiveBatch.Effect"/> must be set; otherwise, <see cref="M:DigitalRune.Graphics.Rendering.PrimitiveBatch.Render(DigitalRune.Graphics.RenderContext)"/> will not draw any 
            primitives. The <see cref="T:DigitalRune.Graphics.Rendering.PrimitiveBatch"/> uses the currently set blend state and 
            depth-stencil state. 
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.PrimitiveBatch.Effect">
            <summary>
            Gets or sets the effect.
            </summary>
            <value>The effect.</value>
            <remarks>
            If this value is <see langword="null"/>, then <see cref="M:DigitalRune.Graphics.Rendering.PrimitiveBatch.Render(DigitalRune.Graphics.RenderContext)"/> does nothing.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.PrimitiveBatch.SortBackToFront">
            <summary>
            Gets or sets a value indicating whether the objects should be sorted and rendered back to 
            front (usually necessary for transparent objects).
            </summary>
            <value>
            <see langword="true"/> if objects are sorted and drawn back to front; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.PrimitiveBatch.DrawWireFrame">
            <summary>
            Gets or sets a value indicating whether objects should be drawn only with lines.
            </summary>
            <value>
            <see langword="true"/> if objects are drawn with lines; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.PrimitiveBatch.AutoRasterizerState">
            <summary>
            Gets or sets a value indicating whether the primitive batch may change the rasterizer state.
            (Required for wireframe rendering.)
            </summary>
            <value>
            <see langword="true" /> if the primitive batch may change the rasterizer state; otherwise, 
            <see langword="false" /> to use the currently set rasterizer state. The default value is <see langword="true" />.
            </value>
            <remarks>
            Normally, the primitive batch chooses its own rasterizer state to create render solid 
            faces or a wireframe. If this property is <see langword="false" />, the primitive
            batch uses the currently set rasterizer state. This allows the caller to define how
            the primitives should be rendered, but solid vs. wireframe rendering might not work as
            expected.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.PrimitiveBatch.#ctor(DigitalRune.Graphics.IGraphicsService,Microsoft.Xna.Framework.Graphics.BasicEffect)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.PrimitiveBatch" /> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <param name="effect">The effect.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.PrimitiveBatch.Clear">
            <summary>
            Clears the primitive batch.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.PrimitiveBatch.AddBox(System.Single,System.Single,System.Single,DigitalRune.Geometry.Pose,Microsoft.Xna.Framework.Color)">
            <summary>
            Adds a box for rendering.
            </summary>
            <param name="widthX">The width along the x-axis.</param>
            <param name="widthY">The width along the y-axis.</param>
            <param name="widthZ">The width along the z-axis.</param>
            <param name="pose">The pose (position and orientation).</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.PrimitiveBatch.AddCapsule(System.Single,System.Single,DigitalRune.Geometry.Pose,Microsoft.Xna.Framework.Color)">
            <summary>
            Adds a capsule for rendering.
            </summary>
            <param name="radius">The radius.</param>
            <param name="height">The height.</param>
            <param name="pose">The pose.</param>
            <param name="color">The color.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="height"/> is too small or <paramref name="radius"/> is too big. The capsule 
            height must be greater than or equal to two times the capsule radius.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.PrimitiveBatch.AddCone(System.Single,System.Single,DigitalRune.Geometry.Pose,Microsoft.Xna.Framework.Color)">
            <summary>
            Adds a cone for rendering.
            </summary>
            <param name="radius">The radius.</param>
            <param name="height">The height.</param>
            <param name="pose">The pose.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.PrimitiveBatch.AddCylinder(System.Single,System.Single,DigitalRune.Geometry.Pose,Microsoft.Xna.Framework.Color)">
            <summary>
            Adds a cylinder for rendering.
            </summary>
            <param name="radius">The radius.</param>
            <param name="height">The height.</param>
            <param name="pose">The pose.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.PrimitiveBatch.AddSphere(System.Single,DigitalRune.Geometry.Pose,Microsoft.Xna.Framework.Color)">
            <summary>
            Adds a sphere for rendering.
            </summary>
            <param name="radius">The radius.</param>
            <param name="pose">The pose.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.PrimitiveBatch.AddViewVolume(System.Boolean,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,DigitalRune.Geometry.Pose,Microsoft.Xna.Framework.Color)">
            <summary>
            Adds a view volume for rendering.
            </summary>
            <param name="isPerspective">
            <see langword="true"/> for perspective view volumes, <see langword="false"/> for 
            orthographic view volumes.
            </param>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
            <param name="top">The top.</param>
            <param name="near">The near.</param>
            <param name="far">The far.</param>
            <param name="pose">The pose.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.PrimitiveBatch.AddShape(DigitalRune.Geometry.Shapes.Shape,DigitalRune.Geometry.Pose,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color)">
            <summary>
            Adds a shape for rendering.
            </summary>
            <param name="shape">The shape.</param>
            <param name="pose">The pose.</param>
            <param name="scale">The scale.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.PrimitiveBatch.AddModel(Microsoft.Xna.Framework.Graphics.Model,DigitalRune.Geometry.Pose,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color)">
            <summary>
            Adds a model for rendering.
            </summary>
            <param name="model">The model.</param>
            <param name="pose">The pose.</param>
            <param name="scale">The scale.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.PrimitiveBatch.AddSubmesh(DigitalRune.Graphics.Submesh,DigitalRune.Geometry.Pose,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color)">
            <summary>
            Adds a model for rendering.
            </summary>
            <param name="submesh">The submesh.</param>
            <param name="pose">The pose.</param>
            <param name="scale">The scale.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.PrimitiveBatch.Render(DigitalRune.Graphics.RenderContext)">
            <summary>
            Draws the batched primitives.
            </summary>
            <param name="context">The render context.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="context"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.TextBatch">
            <summary>
            Renders a batch of texts (positioned in screen space or in world space).
            </summary>
            <remarks>
            A valid <see cref="P:DigitalRune.Graphics.Rendering.TextBatch.SpriteBatch"/> and <see cref="P:DigitalRune.Graphics.Rendering.TextBatch.SpriteFont"/> must be set; otherwise, 
            <see cref="M:DigitalRune.Graphics.Rendering.TextBatch.Render(DigitalRune.Graphics.RenderContext)"/> will not draw anything.
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.TextBatch.TextInfo2D">
            <summary>
            Describes a draw info for a 2D text.
            </summary>
            <remarks>
            Text can be specified as <see cref="T:System.String"/> or <see cref="T:System.Text.StringBuilder"/>. 
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.TextBatch.TextInfo2D.Text">
            <summary>The text as <see cref="T:System.String"/> or <see cref="T:System.Text.StringBuilder"/>.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.TextBatch.TextInfo2D.Position">
            <summary>The position in screen space.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.TextBatch.TextInfo2D.RelativeOrigin">
            <summary>
            The relative origin of the text. (0, 0) means that the upper-left corner of the text is at
            <see cref="F:DigitalRune.Graphics.Rendering.TextBatch.TextInfo2D.Position"/>; (1, 1) means that the lower-right corner of the text is at 
            <see cref="F:DigitalRune.Graphics.Rendering.TextBatch.TextInfo2D.Position"/>. Use (0.5, 0.5) to center the text.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.TextBatch.TextInfo2D.Color">
            <summary>The color.</summary>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.TextBatch.TextInfo3D">
            <summary>
            Describes a draw info for a text.
            </summary>
            <remarks>
            Text can be specified as <see cref="T:System.String"/> or <see cref="T:System.Text.StringBuilder"/>. 
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.TextBatch.TextInfo3D.Text">
            <summary>The text as <see cref="T:System.String"/> or <see cref="T:System.Text.StringBuilder"/>.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.TextBatch.TextInfo3D.Position">
            <summary>
            The position in world space.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.TextBatch.TextInfo3D.RelativeOrigin">
            <summary>
            The relative origin of the text. (0, 0) means that the upper-left corner of the text is at
            <see cref="F:DigitalRune.Graphics.Rendering.TextBatch.TextInfo3D.Position"/>; (1, 1) means that the lower-right corner of the text is at 
            <see cref="F:DigitalRune.Graphics.Rendering.TextBatch.TextInfo3D.Position"/>. Use (0.5, 0.5) to center the text.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.TextBatch.TextInfo3D.Color">
            <summary>The color.</summary>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.TextBatch.SpriteBatch">
            <summary>
            Gets or sets the sprite batch.
            </summary>
            <value>The sprite batch.</value>
            <remarks>
            If this value is <see langword="null"/>, then <see cref="M:DigitalRune.Graphics.Rendering.TextBatch.Render(DigitalRune.Graphics.RenderContext)"/> does nothing.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.TextBatch.SpriteFont">
            <summary>
            Gets or sets the sprite font.
            </summary>
            <value>The sprite font.</value>
            <remarks>
            If this value is <see langword="null"/>, then <see cref="M:DigitalRune.Graphics.Rendering.TextBatch.Render(DigitalRune.Graphics.RenderContext)"/> does nothing.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.TextBatch.EnableDepthTest">
            <summary>
            Gets or sets a value indicating whether text should be drawn with enabled depth test.
            </summary>
            <value>
            <see langword="true"/> if depth test is used; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.TextBatch.#ctor(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Graphics.SpriteFont)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.TextBatch"/> class.
            </summary>
            <param name="spriteBatch">
            The sprite batch. If this value is <see langword="null"/>, then the batch will not draw 
            anything when <see cref="M:DigitalRune.Graphics.Rendering.TextBatch.Render(DigitalRune.Graphics.RenderContext)"/> is called.
            </param>
            <param name="spriteFont">
            The sprite font. If this value is <see langword="null"/>, then the batch will not draw 
            anything when <see cref="M:DigitalRune.Graphics.Rendering.TextBatch.Render(DigitalRune.Graphics.RenderContext)"/> is called.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.TextBatch.Clear">
            <summary>
            Removes all texts.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.TextBatch.Add(System.String,DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F,Microsoft.Xna.Framework.Color)">
            <overloads>
            <summary>
            Adds text to the <see cref="T:DigitalRune.Graphics.Rendering.TextBatch"/> for rendering.
            </summary>
            </overloads>
            
            <summary>
            Adds text on a 2D position in screen space.
            </summary>
            <param name="text">The text.</param>
            <param name="position">The position in screen space (measured in pixels).</param>
            <param name="relativeOrigin">
            The relative origin of the text. (0, 0) means that the upper-left corner of the text is at
            <paramref name="position"/>; (1, 1) means that the lower-right corner of the text is at 
            <paramref name="position"/>. Use (0.5, 0.5) to center the text.
            </param>
            <param name="color">The color.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.TextBatch.Add(System.Text.StringBuilder,DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F,Microsoft.Xna.Framework.Color)">
            <summary>
            Adds text on a 2D position in screen space.
            </summary>
            <param name="text">The text.</param>
            <param name="position">The position in screen space (measured in pixels).</param>
            <param name="relativeOrigin">
            The relative origin of the text. (0, 0) means that the upper-left corner of the text is at
            <paramref name="position"/>; (1, 1) means that the lower-right corner of the text is at 
            <paramref name="position"/>. Use (0.5, 0.5) to center the text.
            </param>
            <param name="color">The color.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.TextBatch.Add(System.String,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector2F,Microsoft.Xna.Framework.Color)">
            <summary>
            Adds text on a 3D position in world space.
            </summary>
            <param name="text">The text.</param>
            <param name="position">The position in world space.</param>
            <param name="relativeOrigin">
            The relative origin of the text. (0, 0) means that the upper-left corner of the text is at
            <paramref name="position"/>; (1, 1) means that the lower-right corner of the text is at 
            <paramref name="position"/>. Use (0.5, 0.5) to center the text.
            </param>
            <param name="color">The color.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.TextBatch.Add(System.Text.StringBuilder,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector2F,Microsoft.Xna.Framework.Color)">
            <summary>
            Adds text on a 3D position in world space.
            </summary>
            <param name="text">The text.</param>
            <param name="position">The position in world space.</param>
            <param name="relativeOrigin">
            The relative origin of the text. (0, 0) means that the upper-left corner of the text is at
            <paramref name="position"/>; (1, 1) means that the lower-right corner of the text is at 
            <paramref name="position"/>. Use (0.5, 0.5) to center the text.
            </param>
            <param name="color">The color.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.TextBatch.Render(DigitalRune.Graphics.RenderContext)">
            <summary>
            Draws the texts.
            </summary>
            <param name="context">The render context.</param>
            <remarks>
            If <see cref="P:DigitalRune.Graphics.Rendering.TextBatch.SpriteBatch"/> or <see cref="P:DigitalRune.Graphics.Rendering.TextBatch.SpriteFont"/> are <see langword="null"/>, then 
            <see cref="M:DigitalRune.Graphics.Rendering.TextBatch.Render(DigitalRune.Graphics.RenderContext)"/> does nothing.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="context"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.TextureBatch">
            <summary>
            Renders a batch of textures (usually for debugging).
            </summary>
            <remarks>
            A valid <see cref="P:DigitalRune.Graphics.Rendering.TextureBatch.SpriteBatch"/> must be set; otherwise, <see cref="M:DigitalRune.Graphics.Rendering.TextureBatch.Render(DigitalRune.Graphics.RenderContext)"/> will not draw
            any points.
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.TextureBatch.TextureInfo">
            <summary>Describes a draw info for a texture.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.TextureBatch.TextureInfo.Texture">
            <summary>The texture.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.TextureBatch.TextureInfo.Rectangle">
            <summary>The target position and size in screen space.</summary>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.TextureBatch.TextureInfo.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.TextureBatch.TextureInfo"/> struct.
            </summary>
            <param name="texture">The texture.</param>
            <param name="rectangle">The position rectangle in screen space.</param>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.TextureBatch.SpriteBatch">
            <summary>
            Gets or sets the sprite batch.
            </summary>
            <value>The sprite batch.</value>
            <remarks>
            If this value is <see langword="null"/>, then <see cref="M:DigitalRune.Graphics.Rendering.TextureBatch.Render(DigitalRune.Graphics.RenderContext)"/> does nothing.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.TextureBatch.#ctor(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.TextureBatch"/> class.
            </summary>
            <param name="spriteBatch">
            The sprite batch. If this value is <see langword="null"/>, then the batch will not draw 
            anything when <see cref="M:DigitalRune.Graphics.Rendering.TextureBatch.Render(DigitalRune.Graphics.RenderContext)"/> is called.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.TextureBatch.Clear">
            <summary>
            Removes all textures.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.TextureBatch.Add(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Adds a texture.
            </summary>
            <param name="texture">The texture.</param>
            <param name="rectangle">The target position and size in screen space.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.TextureBatch.Render(DigitalRune.Graphics.RenderContext)">
            <summary>
            Draws the textures.
            </summary>
            <param name="context">The render context.</param>
            <remarks>
            If <see cref="P:DigitalRune.Graphics.Rendering.TextureBatch.SpriteBatch"/> is <see langword="null"/>, then <see cref="M:DigitalRune.Graphics.Rendering.TextureBatch.Render(DigitalRune.Graphics.RenderContext)"/> does 
            nothing.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="context"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.TriangleBatch">
            <summary>
            Renders a batch of triangles.
            </summary>
            <remarks>
            <para>
            A valid <see cref="P:DigitalRune.Graphics.Rendering.TriangleBatch.Effect"/> must be set; otherwise, <see cref="M:DigitalRune.Graphics.Rendering.TriangleBatch.Render(DigitalRune.Graphics.RenderContext)"/> will not draw any 
            triangles. The <see cref="T:DigitalRune.Graphics.Rendering.TriangleBatch"/> uses the currently set render state (blend state,
            depth-stencil state, rasterizer state).
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.TriangleBatch.Effect">
            <summary>
            Gets or sets the effect.
            </summary>
            <value>The effect.</value>
            <remarks>
            If this value is <see langword="null"/>, then <see cref="M:DigitalRune.Graphics.Rendering.TriangleBatch.Render(DigitalRune.Graphics.RenderContext)"/> does nothing.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.TriangleBatch.#ctor(Microsoft.Xna.Framework.Graphics.BasicEffect)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.TriangleBatch"/> class.
            </summary>
            <param name="effect">
            The effect. If this value is <see langword="null"/>, then the batch will not draw anything
            when <see cref="M:DigitalRune.Graphics.Rendering.TriangleBatch.Render(DigitalRune.Graphics.RenderContext)"/> is called.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.TriangleBatch.Clear">
            <summary>
            Removes all triangles.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.TriangleBatch.Add(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color)">
            <overloads>
            <summary>
            Adds a triangle.
            </summary>
            </overloads>
            
            <summary>
            Adds a triangle.
            </summary>
            <param name="vertex0">The first vertex position in world space.</param>
            <param name="normal0">The normal vector of the first vertex position.</param>
            <param name="vertex1">The second vertex position in world space.</param>
            <param name="normal1">The normal vector of second vertex position.</param>
            <param name="vertex2">The third vertex position in world space.</param>
            <param name="normal2">The normal vector of third vertex position.</param>
            <param name="color">The color (using non-premultiplied alpha).</param>
            <remarks>
            Triangles have to use clockwise winding for front sides.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.TriangleBatch.Add(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color)">
            <summary>
            Adds a triangle.
            </summary>
            <param name="vertex0">The first vertex position in world space.</param>
            <param name="vertex1">The second vertex position in world space.</param>
            <param name="vertex2">The third vertex position in world space.</param>
            <param name="normal">The normal vector of the triangle.</param>
            <param name="color">The color (using non-premultiplied alpha).</param>
            <remarks>
            Triangles have to use clockwise winding for front sides.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.TriangleBatch.Add(DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@,Microsoft.Xna.Framework.Color@)">
            <summary>
            Adds a triangle.
            </summary>
            <param name="vertex0">The first vertex position in world space.</param>
            <param name="vertex1">The second vertex position in world space.</param>
            <param name="vertex2">The third vertex position in world space.</param>
            <param name="normal">The normal vector of the triangle.</param>
            <param name="color">The color (using non-premultiplied alpha).</param>
            <remarks>
            Triangles have to use clockwise winding for front sides.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.TriangleBatch.Render(DigitalRune.Graphics.RenderContext)">
            <summary>
            Draws the triangles.
            </summary>
            <param name="context">The render context.</param>
            <remarks>
            If <see cref="P:DigitalRune.Graphics.Rendering.TriangleBatch.Effect"/> is <see langword="null"/>, then <see cref="M:DigitalRune.Graphics.Rendering.TriangleBatch.Render(DigitalRune.Graphics.RenderContext)"/> does nothing.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="context"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.DecalRenderer">
            <summary>
            Renders <see cref="T:DigitalRune.Graphics.SceneGraph.DecalNode"/>s.
            </summary>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Graphics.Rendering.DecalRenderer"/> is a scene node renderer that handles <see cref="T:DigitalRune.Graphics.SceneGraph.DecalNode"/>s.
            Decals are rendered as <i>deferred decals</i> (<i>screen-space decals</i>). This means that 
            decal materials are projected onto the geometry buffer. Therefore, 
            <see cref="P:DigitalRune.Graphics.RenderContext.GBuffer0"/> and <see cref="P:DigitalRune.Graphics.RenderContext.GBuffer1"/> need to be set 
            in the render context.
            </para>
            <para>
            <strong>Render Target and Viewport:</strong><br/>
            This renderer renders into the current render target and viewport of the graphics device.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.DecalRenderer.Job.DrawOrder">
            <summary>The draw order.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.DecalRenderer.Job.MaterialKey">
            <summary>The material key.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.DecalRenderer.Job.MaterialInstanceBinding">
            <summary>The effect binding of the material instance.</summary>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.DecalRenderer.ClipAtNearPlane">
            <summary>
            Gets or sets a value indicating whether decals may be clipped which intersect the 
            camera near plane. (Performance optimization)
            </summary>
            <value>
            <see langword="true"/> if whole decals are clipped when they intersect the camera 
            near plane; otherwise, <see langword="false"/>. The default value is <see langword="true"/>.
            </value>
            <remarks>
            When this value is <see langword="true"/>, whole decals may "disappear" when the
            camera comes near the decal bounding box and the camera frustum near plane intersects the
            decal bounding box. This behavior is beneficial for performance and is usually not a 
            problem when the decal bounding box is thin. Also, in most games the camera will always
            keep some distance to other objects including decals. However, this property can be set
            to <see langword="false"/> to draw the decals in all cases with a small performance hit.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DecalRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.DecalRenderer"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DecalRenderer.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DecalRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DecalRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DecalRenderer.GetMaterialKey(DigitalRune.Graphics.Effects.EffectBinding)">
            <summary>
            Gets the material key for sorting draw jobs.
            </summary>
            <param name="materialInstanceBinding">The effect binding of a material instance.</param>
            <returns>The material key.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.AmbientLightRenderer">
            <summary>
            Renders <see cref="T:DigitalRune.Graphics.AmbientLight"/>s into the light buffer.
            </summary>
            <inheritdoc cref="T:DigitalRune.Graphics.Rendering.LightRenderer"/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.AmbientLightRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.AmbientLightRenderer"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.AmbientLightRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.AmbientLightRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.CascadedShadowMaskRenderer">
            <summary>
            Creates the shadow mask from the shadow map of a light node with a 
            <see cref="T:DigitalRune.Graphics.CascadedShadow"/>.
            </summary>
            <inheritdoc cref="T:DigitalRune.Graphics.Rendering.ShadowMaskRenderer"/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.CascadedShadowMaskRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.CascadedShadowMaskRenderer"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.CascadedShadowMaskRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.CascadedShadowMaskRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.ClearGBufferRenderer">
            <summary>
            Clears the G-buffer. 
            </summary>
            <remarks>
            <para>
            <strong>Render Targets and Viewport:</strong><br/>
            This renderer renders into the current render target and viewport of the graphics device. The
            render target should be the G-buffer.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.ClearGBufferRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.ClearGBufferRenderer"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.ClearGBufferRenderer.Render(DigitalRune.Graphics.RenderContext)">
            <summary>
            Clears the current render target (which must be the G-buffer).
            </summary>
            <param name="context">The render context.</param>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.CompositeShadowMaskRenderer">
            <summary>
            Creates the shadow mask from the shadow map of a light node with a
            <see cref="T:DigitalRune.Graphics.CompositeShadow"/>.
            </summary>
            <inheritdoc cref="T:DigitalRune.Graphics.Rendering.ShadowMaskRenderer"/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.CompositeShadowMaskRenderer.#ctor(DigitalRune.Graphics.IGraphicsService,System.Collections.Generic.IList{DigitalRune.Graphics.Rendering.SceneNodeRenderer})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.CompositeShadowMaskRenderer"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <param name="shadowMaskRenderers">A list with all known shadow mask renderers.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> or <paramref name="shadowMaskRenderers"/> is
            <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.CompositeShadowMaskRenderer.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by an instance of the
            <see cref="T:DigitalRune.Graphics.Rendering.SceneNodeRenderer"/> class and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources;
            <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.CompositeShadowMaskRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.CompositeShadowMaskRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.CubeMapShadowMaskRenderer">
            <summary>
            Creates the shadow mask from the shadow map of a light node with a
            <see cref="T:DigitalRune.Graphics.CubeMapShadow"/>.
            </summary>
            <inheritdoc cref="T:DigitalRune.Graphics.Rendering.ShadowMaskRenderer"/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.CubeMapShadowMaskRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.CubeMapShadowMaskRenderer"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.CubeMapShadowMaskRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.CubeMapShadowMaskRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.DirectionalLightRenderer">
            <summary>
            Renders <see cref="T:DigitalRune.Graphics.DirectionalLight"/>s into the light buffer.
            </summary>
            <inheritdoc cref="T:DigitalRune.Graphics.Rendering.LightRenderer"/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DirectionalLightRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.DirectionalLightRenderer"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DirectionalLightRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.DirectionalLightRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.FogRenderer">
            <summary>
            Applies fog to opaque geometry using the current G-buffer content.
            </summary>
            <remarks>
            <para>
            Fog properties are defined using <see cref="T:DigitalRune.Graphics.SceneGraph.FogNode"/>s. This renderer uses a single 
            full-screen pass per <see cref="T:DigitalRune.Graphics.SceneGraph.FogNode"/> to blend the fog color with the current render 
            target. It reads the depth buffer (<see cref="P:DigitalRune.Graphics.RenderContext.GBuffer0"/>) to determine the fog 
            intensity for each pixel. This does not work for alpha-blended (transparent) geometry. 
            Alpha-blended geometry should be rendered after the fog was applied to opaque geometry.
            </para>
            <para>
            <strong>Render Target and Viewport:</strong><br/>
            This renderer renders into the current render target and viewport of the graphics device.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.FogRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.FogRenderer"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.FogRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.FogRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.ImageBasedLightRenderer">
            <summary>
            Renders <see cref="T:DigitalRune.Graphics.ImageBasedLight"/>s into the light buffer.
            </summary>
            <inheritdoc cref="T:DigitalRune.Graphics.Rendering.LightRenderer"/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.ImageBasedLightRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.ImageBasedLightRenderer"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.ImageBasedLightRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.ImageBasedLightRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.LightRenderer">
            <summary>
            Renders <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/>s into the light buffer.
            </summary>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Graphics.Rendering.LightRenderer"/> handles <see cref="T:DigitalRune.Graphics.AmbientLight"/>s, 
            <see cref="T:DigitalRune.Graphics.DirectionalLight"/>s, <see cref="T:DigitalRune.Graphics.PointLight"/>s, <see cref="T:DigitalRune.Graphics.ProjectorLight"/>s,
            and <see cref="T:DigitalRune.Graphics.Spotlight"/>s.
            </para>
            <para>
            <see cref="P:DigitalRune.Graphics.RenderContext.GBuffer0"/>, and <see cref="P:DigitalRune.Graphics.RenderContext.GBuffer1"/> need to be set
            in the render context. 
            </para>
            <para>
            <strong>Render Targets and Viewport:</strong><br/>
            This renderer renders into the current render target and viewport of the graphics device. The
            render target should be the light buffer.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.LightRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.LightRenderer"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.LightRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.PointLightRenderer">
            <summary>
            Renders <see cref="T:DigitalRune.Graphics.PointLight"/>s into the light buffer.
            </summary>
            <inheritdoc cref="T:DigitalRune.Graphics.Rendering.LightRenderer"/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.PointLightRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.PointLightRenderer"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.PointLightRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.PointLightRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.ProjectorLightRenderer">
            <summary>
            Renders <see cref="T:DigitalRune.Graphics.ProjectorLight"/>s into the light buffer.
            </summary>
            <inheritdoc cref="T:DigitalRune.Graphics.Rendering.LightRenderer"/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.ProjectorLightRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.ProjectorLightRenderer"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.ProjectorLightRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.ProjectorLightRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.RebuildZBufferRenderer">
            <summary>
            Reconstructs the hardware Z-buffer from the G-buffer.
            </summary>
            <remarks>
            <para>
            This renderer reads the G-Buffer and outputs depth to the hardware Z-buffer. The resulting
            Z-buffer is not totally accurate but should be good enough for most operations.
            </para>
            <para>
            <strong>Render Target and Viewport:</strong><br/>
            This renderer renders into the current render target and viewport of the graphics device.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.RebuildZBufferRenderer.NearBias">
            <summary>
            Gets or sets the factor used to bias the camera near plane distance to avoid 
            z-fighting.
            </summary>
            <value>The near bias factor. The default value is 1 (no bias).</value>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.RebuildZBufferRenderer.FarBias">
            <summary>
            Gets or sets the factor used to bias the camera far plane distance to avoid 
            z-fighting.
            </summary>
            <value>The far bias factor. The default value is 0.995f.</value>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.RebuildZBufferRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.RebuildZBufferRenderer"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.RebuildZBufferRenderer.Render(DigitalRune.Graphics.RenderContext,DigitalRune.Mathematics.Algebra.Vector4F)">
            <overloads>
            <summary>
            Rebuilds the current hardware Z-buffer from the G-Buffer and optionally writes a color or
            texture to the render target.
            </summary>
            </overloads>
            
            <summary>
            Rebuilds the current hardware Z-buffer from the G-Buffer and writes the specified color 
            value to the current render target.
            </summary>
            <param name="context">
            The render context. (<see cref="P:DigitalRune.Graphics.RenderContext.CameraNode"/> and 
            <see cref="P:DigitalRune.Graphics.RenderContext.GBuffer0"/> need to be set.)
            </param>
            <param name="color">The color to be written to the render target.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="context"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.RebuildZBufferRenderer.Render(DigitalRune.Graphics.RenderContext,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Rebuilds the current hardware Z-buffer from the G-Buffer and copies the specified texture
            to the render target.
            </summary>
            <param name="context">
            The render context. (<see cref="P:DigitalRune.Graphics.RenderContext.CameraNode"/> and 
            <see cref="P:DigitalRune.Graphics.RenderContext.GBuffer0"/> need to be set.)
            </param>
            <param name="colorTexture">
            Optional: The color texture to be copied to the render target.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="context"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.RebuildZBufferRenderer.Render(DigitalRune.Graphics.RenderContext,System.Boolean)">
            <summary>
            Rebuilds the current hardware Z-buffer from the G-Buffer and clears or preserves the current
            render target.
            </summary>
            <param name="context">
            The render context. (<see cref="P:DigitalRune.Graphics.RenderContext.CameraNode"/> and 
            <see cref="P:DigitalRune.Graphics.RenderContext.GBuffer0"/> need to be set.)
            </param>
            <param name="preserveColor">
            If set to <see langword="true"/> color writes are disabled to preserve the current content;
            otherwise, <see langword="false"/> to clear the color target.
            </param>
            <remarks>
            Note that the option <paramref name="preserveColor"/> (to disable color writes) is not 
            supported by all render target formats.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="context"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.ShadowMaskRenderer">
            <summary>
            Renders the shadow mask from the shadow map of a <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/>.
            </summary>
            <remarks>
            <para>
            The shadow mask is an image as seen from the camera where for each pixel the shadow info is
            stored. A value of 0 means the pixel is in the shadow. A value of 1 means the pixel is fully
            lit. (The shadow mask is rendered into the current render target.)
            </para>
            <para>
            This renderer renders the shadow masks and sets the properties <see cref="P:DigitalRune.Graphics.Shadow.ShadowMask"/>
            and <see cref="P:DigitalRune.Graphics.Shadow.ShadowMaskChannel"/> of the handled <see cref="T:DigitalRune.Graphics.Shadow"/> instances. The 
            <see cref="T:DigitalRune.Graphics.Rendering.ShadowMaskRenderer"/> handles <see cref="T:DigitalRune.Graphics.StandardShadow"/>s,
            <see cref="T:DigitalRune.Graphics.CubeMapShadow"/>, <see cref="T:DigitalRune.Graphics.CascadedShadow"/>s, and
            <see cref="T:DigitalRune.Graphics.CompositeShadow"/>s. To handle new shadow types, you need to add a custom
            <see cref="T:DigitalRune.Graphics.Rendering.SceneNodeRenderer"/> to the <see cref="P:DigitalRune.Graphics.Rendering.SceneRenderer.Renderers"/> collection.
            </para>
            <para>
            <see cref="P:DigitalRune.Graphics.RenderContext.GBuffer0"/> needs to be set in the render context.
            </para>
            <para>
            <see cref="M:DigitalRune.Graphics.Rendering.ShadowMaskRenderer.RecycleShadowMasks"/> should be called every frame when shadow masks are not needed
            anymore. This method returns all shadow mask render targets to the render target pool and
            allows other render operations to reuse the render targets.
            </para>
            <para>
            <strong>Render Target and Viewport:</strong><br/>
            This renderer changes the current render target of the graphics device because it uses the
            graphics device to render the shadow masks into internal render targets. The render target
            and the viewport of the graphics device are undefined after rendering.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.ShadowMaskRenderer.MaxNumberOfShadowsMasks">
            <summary>
            Gets or sets the max number of shadows masks.
            </summary>
            <value>The max number of shadows masks. The default value is 1.</value>
            <remarks>
            A shadow mask is an RGBA8 render target (= 4 channels). One shadow mask can store 4 shadows
            (or more, if shadow casting lights do not overlap). Two shadow masks can store 8 shadows (or
            more)... In most scenarios a single shadow mask should be enough.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative or greater than 255.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.ShadowMaskRenderer.ShadowMasks">
            <summary>
            Gets the shadow masks. (For debugging only.)
            </summary>
            <value>The shadow masks. (For debugging only.)</value>
            <remarks>
            The list may contain null entries.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.ShadowMaskRenderer.Filter">
            <summary>
            Gets or sets a filter that is applied to the shadow masks as a post-process.
            </summary>
            <value>
            The filter that is applied to the shadow masks as a post-process. The default value is
            <see langword="null"/>.
            </value>
            <remarks>
            <para>
            The shadow quality can be improved by filtering the resulting shadow mask. For example, an
            anisotropic, cross-bilateral Gaussian filter can be applied to create soft shadows.
            </para>
            <para>
            The configured post-process filter needs to support reading from and writing into the same
            render target. This is supported by any separable box or Gaussian blur because they filter
            the image in two passes. Single pass blurs, e.g. a Poisson blur, cannot be used.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.ShadowMaskRenderer.UseHalfResolution">
            <summary>
            Gets or sets a value indicating whether the shadow mask is created using only the half scene
            resolution to improve performance.
            </summary>
            <value>
            <see langword="true"/> if the shadow mask is created using only the half scene resolution to
            improve performance; otherwise, <see langword="false"/> to use the full resolution for best
            quality. The default is <see langword="false" />.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.ShadowMaskRenderer.UpsampleDepthSensitivity">
            <summary>
            Gets or sets a value controlling the bilateral upsampling. (Only used when
            <see cref="P:DigitalRune.Graphics.Rendering.ShadowMaskRenderer.UseHalfResolution"/> is <see langword="true" />.)
            </summary>
            <value>
            The depth sensitivity for bilateral upsampling. Use 0 to use bilinear upsampling and disable
            bilateral upsampling. Use values greater than 0, to enable bilateral upsampling. The default
            value is 1000.
            </value>
            <remarks>
            <para>
            If <see cref="P:DigitalRune.Graphics.Rendering.ShadowMaskRenderer.UseHalfResolution"/> is <see langword="true" />, the shadow mask is created
            using the half scene resolution. Creating shadows using the low resolution shadow mask can
            create artifacts, e.g. a non-shadowed halo around objects. To avoid these artifacts,
            bilateral upsampling can be enabled, by setting <see cref="P:DigitalRune.Graphics.Rendering.ShadowMaskRenderer.UpsampleDepthSensitivity"/> to a
            value greater than 0.
            </para>
            <para>
            For more information about bilateral upsampling, see <see cref="T:DigitalRune.Graphics.PostProcessing.UpsampleFilter"/> and
            <see cref="P:DigitalRune.Graphics.PostProcessing.UpsampleFilter.DepthSensitivity"/>.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.ShadowMaskRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.ShadowMaskRenderer"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.ShadowMaskRenderer"/> class with a single
            shadow mask.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.ShadowMaskRenderer.#ctor(DigitalRune.Graphics.IGraphicsService,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.ShadowMaskRenderer"/> class with the specified
            number of shadow masks.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <param name="maxNumberOfShadowMasks">The max number of shadow masks.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxNumberOfShadowMasks"/> is negative or greater than 255.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.ShadowMaskRenderer.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.ShadowMaskRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.ShadowMaskRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.ShadowMaskRenderer.GetSortKey(System.Int32,System.Int32,System.UInt32)">
            <summary>
            Gets the sort key.
            </summary>
            <param name="shadowMaskIndex">The index of the shadow mask.</param>
            <param name="order">The order of the renderer.</param>
            <param name="id">The ID of the renderer.</param>
            <returns>The key for sorting draw jobs.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.ShadowMaskRenderer.RecycleShadowMasks">
            <summary>
            Recycles the shadow masks.
            </summary>
            <remarks>
            This method also resets the shadow properties <see cref="P:DigitalRune.Graphics.Shadow.ShadowMask"/> and
            <see cref="P:DigitalRune.Graphics.Shadow.ShadowMaskChannel"/>.
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.SpotlightRenderer">
            <summary>
            Renders <see cref="T:DigitalRune.Graphics.Spotlight"/>s into the light buffer.
            </summary>
            <inheritdoc cref="T:DigitalRune.Graphics.Rendering.LightRenderer"/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.SpotlightRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.SpotlightRenderer"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.SpotlightRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.SpotlightRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.StandardShadowMaskRenderer">
            <summary>
            Creates the shadow mask from the shadow map of a light node with a 
            <see cref="T:DigitalRune.Graphics.StandardShadow"/>.
            </summary>
            <inheritdoc cref="T:DigitalRune.Graphics.Rendering.ShadowMaskRenderer"/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.StandardShadowMaskRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.StandardShadowMaskRenderer"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.StandardShadowMaskRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.StandardShadowMaskRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.FigureRenderOptions">
            <summary>
            Defines options for rendering figures.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.FigureRenderOptions.RenderNone">
            <summary>
            Disable rendering of figures.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.FigureRenderOptions.RenderFill">
            <summary>
            Render filled areas.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.FigureRenderOptions.RenderStroke">
            <summary>
            Render stroked lines.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.FigureRenderOptions.RenderFillAndStroke">
            <summary>
            Render filled areas and stroked lines. (Default)
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.FigureRenderer">
            <summary>
            Renders <see cref="T:DigitalRune.Graphics.SceneGraph.FigureNode"/>s. 
            </summary>
            <remarks>
            <para>
            This renderer requires the HiDef graphics profile. If the current graphics profile is Reach, 
            <see cref="M:DigitalRune.Graphics.Rendering.FigureRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)"/> throws a <see cref="T:System.NotSupportedException"/>.
            </para>
            <para>
            The <see cref="T:DigitalRune.Graphics.Rendering.FigureRenderer"/> is a scene node renderer which handles 
            <see cref="T:DigitalRune.Graphics.SceneGraph.FigureNode"/>s.
            </para>
            <para>
            <strong>Render Target and Viewport:</strong><br/>
            This renderer renders into the current render target and viewport of the graphics device.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.FigureRenderer.Job.SortKey">
            <summary>The sort key.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.FigureRenderer.Job.Node">
            <summary>The figure node.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.FigureRenderer.MaxBufferSize">
            <summary>
            The maximum buffer size (number of line segments).
            </summary>
            <remarks>
            The maximum buffer size is limited because <see cref="T:System.UInt16"/> values are internally used 
            as indices.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.FigureRenderer.BufferSize">
            <summary>
            Gets the size of the buffer (= number of line segments/triangles).
            </summary>
            <value>The size of the buffer (= number of line segments/triangles).</value>
            <remarks>
            The buffer size is the maximal number of line segments or triangles that can be rendered 
            with a single draw call.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.FigureRenderer.Options">
            <summary>
            Gets or sets the options for rendering figures.
            </summary>
            <value>
            The options for rendering figures. The default value is 
            <see cref="F:DigitalRune.Graphics.Rendering.FigureRenderOptions.RenderFillAndStroke"/>.
            </value>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.FigureRenderer.#ctor(DigitalRune.Graphics.IGraphicsService,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.FigureRenderer" /> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <param name="bufferSize">
            The size of the internal buffer (= max number of line segments or triangles that can be 
            rendered in a single draw call). Max allowed value is 16384.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="bufferSize"/> is 0, negative, or greater than <see cref="F:DigitalRune.Graphics.Rendering.FigureRenderer.MaxBufferSize"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The current graphics profile is Reach.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.FigureRenderer.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.FigureRenderer.OnLoadEffect(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Called when the <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" /> for rendering lines and shapes is loaded.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" /> that renders lines and shapes.</returns>
            <remarks>
            <strong>Notes to Inheritors:</strong> Derived types may override this method to use a 
            different effect for rendering lines and shapes. (The method is called by the constructor of
            the base class. This means that derived classes may not be initialized yet!)
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.FigureRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.FigureRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.FigureRenderer.GetSortKey(System.Single,System.Int32)">
            <summary>
            Gets the sort key.
            </summary>
            <param name="distance">The normalized distance [0, 1].</param>
            <param name="drawOrder">The draw order.</param>
            <returns>The key for sorting draw jobs.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.StrokeVertex">
            <summary>
            Vertex format used in "Line.fx".
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.StrokeVertex.VertexDeclaration">
            <summary>
            The vertex declaration.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.StrokeVertex.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> and this instance are the same type and 
            represent the same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.StrokeVertex.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.StrokeVertex.Microsoft#Xna#Framework#Graphics#IVertexType#VertexDeclaration">
            <summary>
            Gets the vertex declaration.
            </summary>
            <value>The vertex declaration.</value>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.StrokeVertex.op_Equality(DigitalRune.Graphics.Rendering.StrokeVertex,DigitalRune.Graphics.Rendering.StrokeVertex)">
            <summary>
            Compares two objects to determine whether they are the same. 
            </summary>
            <param name="left">Object to the left of the equality operator.</param>
            <param name="right">Object to the right of the equality operator.</param>
            <returns>
            <see langword="true"/> if the objects are the same; <see langword="false"/> otherwise. 
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.StrokeVertex.op_Inequality(DigitalRune.Graphics.Rendering.StrokeVertex,DigitalRune.Graphics.Rendering.StrokeVertex)">
            <summary>
            Compares two objects to determine whether they are different. 
            </summary>
            <param name="left">Object to the left of the inequality operator.</param>
            <param name="right">Object to the right of the inequality operator.</param>
            <returns>
            <see langword="true"/> if the objects are different; <see langword="false"/> otherwise. 
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.StrokeVertex.ToString">
            <summary>
            Retrieves a string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.InstanceRenderBatch`1">
            <summary>
            Renders instances of one mesh.
            </summary>
            <typeparam name="T">The type of the elements in the instance buffer.</typeparam>
            <remarks>
            <para>
            Use the <see cref="T:DigitalRune.Graphics.Rendering.InstanceRenderBatch`1"/> when you need to render several instances of one
            submesh. The <see cref="T:DigitalRune.Graphics.Rendering.InstanceRenderBatch`1"/> must be initialized with a buffer which
            contains instance data. It automatically creates a suitable vertex. The caller can call
            <see cref="M:DigitalRune.Graphics.Rendering.InstanceRenderBatch`1.Submit(System.Int32,System.Int32@)"/> to update instances. The method <see cref="M:DigitalRune.Graphics.Rendering.InstanceRenderBatch`1.Submit(System.Int32,System.Int32@)"/> returns the indices
            where the new data can be added. If the batch is full, the 
            <see cref="T:DigitalRune.Graphics.Rendering.InstanceRenderBatch`1"/> will automatically call
            <see cref="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DrawInstancedPrimitives(Microsoft.Xna.Framework.Graphics.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/> to draw the batch. <see cref="M:DigitalRune.Graphics.Rendering.InstanceRenderBatch`1.Flush"/>
            can be called to force a drawing of the current batch.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.InstanceRenderBatch`1.IsDisposed">
            <summary>
            Gets a value indicating whether this instance has been disposed of.
            </summary>
            <value>
            <see langword="true"/> if this instance has been disposed of; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.InstanceRenderBatch`1.Instances">
            <summary>
            Gets the instance data.
            </summary>
            <value>The instance data.</value>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.InstanceRenderBatch`1.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.InstanceRenderBatch`1"/> class.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="instances">The instance array.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/> or <paramref name="instances"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.InstanceRenderBatch`1.Dispose">
            <summary>
            Releases all resources used by an instance of the <see cref="T:DigitalRune.Graphics.Rendering.RenderBatch`2"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.InstanceRenderBatch`1.Reset">
            <summary>
            Resets the indices to the beginning of the buffers.
            </summary>
            <remarks>
            This method does not automatically flush the last batch.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.InstanceRenderBatch`1.SetSubmesh(DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Submesh,DigitalRune.Graphics.Effects.EffectPassBinding,DigitalRune.Graphics.Effects.EffectParameterBindingCollection)">
            <summary>
            Sets the new submesh.
            </summary>
            <param name="context">The render context.</param>
            <param name="submesh">The submesh.</param>
            <param name="effectPassBinding">The effect pass binding.</param>
            <param name="effectPassParameterBindings">
            The effect parameter bindings containing per-pass parameter bindings.
            (Can also contain other parameter binding, e.g. per-instance, which are ignored.
            </param>
            <remarks>
            The current batch is automatically flushed when the submesh is changed.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.InstanceRenderBatch`1.Submit(System.Int32,System.Int32@)">
            <summary>
            Informs the <see cref="T:DigitalRune.Graphics.Rendering.InstanceRenderBatch`1" /> that new vertices and indices will be
            added. (If necessary, the current batch is flushed.)
            </summary>
            <param name="newInstances">The number of new instances.</param>
            <param name="nextInstanceIndex">
            The start index in <see cref="P:DigitalRune.Graphics.Rendering.InstanceRenderBatch`1.Instances"/> where the new instance data can be added.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.InstanceRenderBatch`1.Flush">
            <summary>
            Forces drawing of the current batch.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.LensFlareRenderer">
            <summary>
            Renders <see cref="T:DigitalRune.Graphics.SceneGraph.LensFlareNode"/>s.
            </summary>
            <remarks>
            <para>
            The lens flare renderer performs hardware occlusion queries to determine the visibility of the 
            lens flares. The query results are delayed by one or more frames, which means that lens flares
            need at least two frames to become visible.
            </para>
            <para>
            Lens flares need to be rendered in two passes:
            </para>
            <list type="number">
            <item>
            <term>Occlusion Queries</term>
            <description>
            <para>
            The method <see cref="M:DigitalRune.Graphics.Rendering.LensFlareRenderer.UpdateOcclusion(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext)"/> 
            needs to be called after the scene is rendered. The Z-buffer of the current render target 
            needs to contain the depth information of the scene. The method performs a hardware occlusion 
            query to check the visibility of the light source. In a deferred lighting renderer the method 
            can be called at the end of the "Material" pass. No pixels are rendered into the current 
            render target during the occlusion queries.
            </para>
            <para>
            Hardware occlusion queries only run in HiDef profile. The method has no effect when run in 
            Reach profile.
            </para>
            </description>
            </item>
            <item>
            <term>Render Pass</term>
            <description>
            <para>
            The method <seealso cref="M:DigitalRune.Graphics.Rendering.LensFlareRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)"/> needs to be called to render the lens flares into the 
            current render target. The method can be called at any point after the occlusion queries.
            </para>
            </description>
            </item>
            </list>
            <para>
            <strong>Reach Profile:</strong> The <see cref="T:DigitalRune.Graphics.Rendering.LensFlareRenderer"/> does not determine the 
            visibility of the lens flares because hardware occlusion queries are not supported in Reach 
            profile. Lens flares in front of the camera are always visible. As a workaround: Create a new
            class derived from <see cref="T:DigitalRune.Graphics.LensFlare"/> and override 
            <see cref="M:DigitalRune.Graphics.LensFlare.OnGetSizeAndIntensity(DigitalRune.Graphics.SceneGraph.LensFlareNode,DigitalRune.Graphics.RenderContext,System.Int32,System.Int32,System.Single@,System.Single@)"/>. In this method determine the visibility of the
            light source, for example, by using a ray-test.
            </para>
            <para>
            <strong>Render Target and Viewport:</strong><br/>
            This renderer renders into the current render target and viewport of the graphics device.
            </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.LensFlareRenderer.OcclusionData">
            <summary>
            Additional view-dependent data stored per camera node.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.LensFlareRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.LensFlareRenderer" /> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.LensFlareRenderer" /> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.LensFlareRenderer.#ctor(DigitalRune.Graphics.IGraphicsService,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.LensFlareRenderer" /> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <param name="spriteBatch">
            The sprite batch used for rendering. Can be <see langword="null"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.LensFlareRenderer.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.LensFlareRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.LensFlareRenderer.UpdateOcclusion(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <summary>
            Performs occlusion queries to determine the visibility of the lens flares effects.
            (Requires HiDef profile.)
            </summary>
            <param name="node">The scene node.</param>
            <param name="context">
            The render context. (The property <see cref="P:DigitalRune.Graphics.RenderContext.CameraNode"/> selects the 
            currently active camera.)
            </param>
            <inheritdoc cref="M:DigitalRune.Graphics.Rendering.LensFlareRenderer.UpdateOcclusion(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext)"/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.LensFlareRenderer.UpdateOcclusion(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext)">
            <summary>
            Performs occlusion queries to determine the intensity of the lens flares effects.
            (Requires HiDef profile.)
            </summary>
            <param name="nodes">The scene nodes. The list may contain null entries.</param>
            <param name="context">
            The render context. (The property <see cref="P:DigitalRune.Graphics.RenderContext.CameraNode"/> selects the 
            currently active camera.)
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="nodes"/> or <paramref name="context"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.LensFlareRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.MeshRenderer">
            <summary>
            Renders <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode"/>s using state-sorting and hardware instancing.
            </summary>
            <remarks>
            <para>
            <strong>Render Target and Viewport:</strong><br/>
            This renderer renders into the current render target and viewport of the graphics device.
            </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.MeshRenderer.Job">
            <summary>
            Defines a draw job.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.MeshRenderer.Job.MaterialKey">
            <summary>The material key.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.MeshRenderer.Job.SubmeshKey">
            <summary>The submesh key.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.MeshRenderer.Job.DistanceKey">
            <summary>
            The 16-bit normalized distance.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.MeshRenderer.Job.Submesh">
            <summary>The submesh.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.MeshRenderer.Job.MaterialInstanceBinding">
            <summary>The effect binding of the material instance.</summary>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.MeshRenderer.EnableInstancing">
            <summary>
            Gets or sets a value indicating whether hardware instancing is enabled.
            </summary>
            <value>
            <see langword="true"/> if hardware instancing is enabled; otherwise, 
            <see langword="false"/>. The default value is <see langword="true"/>.
            </value>
            <remarks>
            When this property is <see langword="true"/>, the renderer will render mesh instances using 
            hardware instancing if the material supports instancing (see 
            <see cref="P:DigitalRune.Graphics.Effects.EffectTechniqueDescription.InstancingTechnique"/>) and the batch size is 
            sufficiently large.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.MeshRenderer.InstancingThreshold">
            <summary>
            Gets or sets the minimum batch size required to activate hardware instancing.
            </summary>
            <value>
            The minimum batch size for hardware instancing. The default value is 4, which means that 
            hardware instancing is used to render models with 4 or more visible instances.
            </value>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.MeshRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.MeshRenderer"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.MeshRenderer.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.MeshRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.MeshRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.MeshRenderer.GetMaterialKey(DigitalRune.Graphics.Effects.EffectBinding,System.UInt32)">
            <summary>
            Gets the material key for sorting draw jobs.
            </summary>
            <param name="materialInstanceBinding">The effect binding of a material instance.</param>
            <param name="sceneNodeType">Type of the scene node (1 = static, 0 = dynamic).</param>
            <returns>The material key.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.MeshRenderer.GetSubmeshKey(DigitalRune.Graphics.Submesh,System.Boolean)">
            <summary>
            Gets the submesh key for sorting draw jobs.
            </summary>
            <param name="submesh">The submesh.</param>
            <param name="isMeshInstancingNode">
            If set to <see langword="true" /> the submesh is used in an 
            <see cref="T:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1"/>.
            </param>
            <returns>The submesh key</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.MeshRenderer.GetDistanceKey(System.Single)">
            <summary>
            Gets the distance key for sorting draw jobs.
            </summary>
            <param name="distance">The distance.</param>
            <returns>The key for sorting by distance.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.MeshRenderer.DrawInstanced(DigitalRune.Graphics.Effects.EffectPassBinding@,DigitalRune.Graphics.RenderContext,System.Int32,System.Int32)">
            <exception cref="T:DigitalRune.Graphics.GraphicsException">
            Mesh cannot be rendered using hardware instancing.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Graphics.Rendering"/> namespace provides types for rendering 3D
            scenes.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.OcclusionBuffer">
            <summary>
            Represents an occlusion buffer that supports frustum culling, distance culling, occlusion 
            culling, and shadow caster culling.
            </summary>
            <remarks>
            <para>
            The occlusion buffer can be used to determine which objects in a scene need to be rendered.
            Objects that are outside the viewing frustum or occluded by other objects don't have to be
            processed during rendering. The occlusion buffer implements <i>frustum culling</i>,
            <i>distance culling</i>, <i>occlusion culling</i>, and <i>shadow caster culling</i>.
            </para>
            <para>
            To use occlusion culling: The method <see cref="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext)"/>
            clears the occlusion buffer and renders all occluders. This method needs to be called once per
            frame, even if there are no occluders in the scene. <see cref="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.Query(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext)"/> performs culling on a
            list of scene nodes. Scene nodes that are culled are replaced by null entries in the list.
            </para>
            <para>
            <strong>Frustum Culling:</strong><br/>
            The occlusion buffer implements frustum culling to determine which objects are within the
            viewing frustum of the camera. Objects outside the viewing frustum are hidden from the camera
            and do not have to be rendered. (The occlusion buffer can be used for frustum culling instead
            of using <see cref="M:DigitalRune.Graphics.SceneGraph.IScene.Query``1(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">scene queries</see>.)
            </para>
            <para>
            The following example shows how to use the occlusion buffer for frustum culling. The active
            camera needs to be set in the render context.
            </para>
            <code lang="csharp" title="Example: Frustum culling using the occlusion buffer">
            <![CDATA[
            // Clear the occlusion buffer.
            occlusionBuffer.Render(null, context);
            
            // Perform frustum culling on the list of scene nodes. 
            // (Scene nodes that culled are replaced by null entries.)
            occlusionBuffer.Query(sceneNodes, context);
            ]]>
            </code>
            <para>
            <strong>Distance Culling and LOD Distance:</strong><br/>
            (Prerequisite: <see cref="P:DigitalRune.Graphics.RenderContext.LodCameraNode"/> needs to be set in the render
            context!)
            </para>
            <para>
            The occlusion buffer automatically calculates the LOD distance of each scene node in 
            <see cref="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.Query(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext)"/> and performs distance culling if a <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.MaxDistance"/> is
            set. Scene nodes that are beyond their max draw distance are removed. The LOD distance of the
            remaining scene nodes is stored in <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.SortTag"/>. This value can be used for
            LOD selection (see <see cref="T:DigitalRune.Graphics.SceneGraph.LodGroupNode"/> and <see cref="T:DigitalRune.Graphics.SceneGraph.ISceneQuery"/>).
            </para>
            <para>
            <strong>Occlusion Culling:</strong><br/>
            Occlusion culling is the process of determining which objects are hidden from a certain
            viewpoint. This is achieved by testing the scene nodes against a set of occluders. An
            <i>occluder</i> is an object within a scene that obscures the view and prevents objects behind
            it from being seen.
            </para>
            <para>
            By calling <see cref="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext)"/> all occluders within a scene
            are rendered into a depth buffer. The following objects act as occluders during occlusion
            culling:
            </para>
            <list type="bullet">
            <item>
            <description>
            <see cref="T:DigitalRune.Graphics.SceneGraph.OccluderNode"/>s
            </description>
            </item>
            <item>
            <description>
            <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode"/>s with occluders (property <see cref="P:DigitalRune.Graphics.Mesh.Occluder"/>)
            </description>
            </item>
            <item>
            <description>
            <see cref="T:DigitalRune.Graphics.SceneGraph.LodGroupNode"/>s if the highest level of detail ("LOD0") is an
            <see cref="T:DigitalRune.Graphics.SceneGraph.OccluderNode"/> or a <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode"/> with an occluder
            </description>
            </item>
            <item>
            <description>
            Any <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/> can act as an occluder if the appropriate
            <see cref="T:DigitalRune.Graphics.Rendering.SceneNodeRenderer"/> is passed to 
            <see cref="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.SceneGraph.LightNode,DigitalRune.Graphics.Rendering.SceneNodeRenderer,DigitalRune.Graphics.RenderContext)"/>.
            </description>
            </item>
            </list>
            <para>
            <see cref="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.Query(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext)"/> can be called to test whether scene nodes are visible. (The bounds of the
            scene nodes are compared with the current occlusion buffer.)
            </para>
            <para>
            The following example shows how to use the occlusion buffer for occlusion culling.
            </para>
            <code lang="csharp" title="Example: Occlusion culling using the occlusion buffer">
            <![CDATA[
            // Render the occluders into the occlusion buffer.
            occlusionBuffer.Render(occluders, null, null, context);
            
            // Perform occlusion culling on the list of scene nodes.
            // (Scene nodes that are culled are replaced by null entries.)
            occlusionBuffer.Query(sceneNodes, context);
            ]]>
            </code>
            <para>
            The next example shows how to render custom scene nodes into the occlusion buffer. For
            example, <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode"/>s that support an "Occluder" render pass can be rendered
            directly into the occlusion buffer if the appropriate render is provided.
            </para>
            <code lang="csharp" title="Example: Rendering custom occluders">
            <![CDATA[
            // Render the occluders into the occlusion buffer. MeshNodes that do not have an
            // occluder but have an "Occluder" render pass are rendered using the MeshRenderer.
            context.RenderPass = "Occluder";
            occlusionBuffer.Render(occluders, null, meshRenderer, context);
            context.RenderPass = null;
            
            // Perform occlusion culling on the list of scene nodes.
            // Scene nodes that are culled are replaced by null entries.
            occlusionBuffer.Query(sceneNodes, context);
            ]]>
            </code>
            <para>
            <strong>Shadow Caster Culling:</strong><br/>
            Shadow caster culling determines which shadows contribute to the final image. If the shadow
            cast by an object is not visible, the object can be culled and does not need to be rendered
            into the shadow map.
            </para>
            <para>
            The occlusion buffer implements shadow caster culling for the main directional light of a
            scene. Multiple directional lights with shadows are not supported.
            </para>
            <para>
            Shadow caster culling involves the following tests:
            </para>
            <list type="number">
            <item>
            Frustum culling in light space: The shadow caster is tested against the light frustum.
            </item>
            <item>
            Occlusion culling in light space: The shadow caster is tested against the occluders from the
            light's point of view.
            </item>
            <item>
            Then the extent of the shadow volume is determined. The actual extent of the shadow volume is
            unknown. When "progressive" shadow caster culling is enabled (see property 
            <see cref="P:DigitalRune.Graphics.Rendering.OcclusionBuffer.ProgressiveShadowCasterCulling"/>), the occlusion buffer estimates the extent of
            the shadow volume. When "conservative" shadow caster culling is enabled, the occlusion buffer
            assumes that shadow volume simply extends to the edge of the light space.
            </item>
            <item>
            Frustum culling camera space: The shadow volume is tested against the camera frustum.
            </item>
            <item>
            Occlusion culling camera space: The shadow volume is tested against the occluders from the
            camera's point of view.
            </item>
            </list>
            <para>
            "Progressive" shadow caster culling is more aggressive than "conservative" shadow caster
            culling, but may cause problems: In some cases it is not possible to estimate the correct
            extent of the shadow volume. A shadow caster might be culled, even though its shadow should be
            visible. Shadows can start to flicker. In these cases "progressive" shadow caster culling
            needs to be disabled. The property <see cref="P:DigitalRune.Graphics.Rendering.OcclusionBuffer.ProgressiveShadowCasterCulling"/> determines
            whether progressive shadow caster culling is active.
            </para>
            <para>
            To perform shadow caster culling the main directional light needs to be passed to the
            <see cref="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.SceneGraph.LightNode,DigitalRune.Graphics.RenderContext)"/> method.
            </para>
            <code lang="csharp" title="Example: Occlusion culling and shadow caster culling">
            <![CDATA[
            // Render the occluders into the occlusion buffer.
            // lightNode is the main directional light that casts shadows.
            occlusionBuffer.Render(occluders, lightNode, context);
            
            // Perform occlusion culling and shadow caster culling on the
            // list of scene nodes.
            occlusionBuffer.Query(sceneNodes, context);
            ]]>
            </code>
            <para>
            Shadow caster that are culled are internally marked using a flag. The
            <see cref="T:DigitalRune.Graphics.Rendering.ShadowMapRenderer"/> will automatically skip these scene nodes.
            </para>
            <para>
            <strong>Performance:</strong><br/>
            The methods <see cref="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext)"/> and <see cref="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.Query(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext)"/> can
            be called multiple times per frame. However, each call has a certain latency. It is therefore
            recommended to batch all occluders and scene nodes and call the methods only once per frame.
            </para>
            <para>
            Occlusion culling is preformed on the GPU. The occlusion culling results needs to be read back
            from the GPU to the CPU, which may stall the pipeline. Depending on various factors (platform,
            timing, GPU load, etc.), the process may take less than a millisecond or up to several
            milliseconds. Occlusion culling should only be used when there is an overall performance gain.
            This can only be determined by experimentation.
            </para>
            <para>
            <strong>Render Target and Viewport:</strong><br/>
            Occlusion culling is performed on the GPU. The methods
            <see cref="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext)"/> and <see cref="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.Query(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext)"/> override the
            current render target of the graphics device. The render target and the viewport of the
            graphics device are undefined after these methods were executed.
            </para>
            <para>
            The <strong>Visualize</strong> methods render into the current render target and viewport of
            the graphics device.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.OcclusionBuffer.IsDisposed">
            <summary>
            Gets a value indicating whether this instance has been disposed of.
            </summary>
            <value>
            <see langword="true"/> if this instance has been disposed of; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.OcclusionBuffer.EnableMultithreading">
            <summary>
            Gets or sets a value indicating whether multithreading is enabled.
            </summary>
            <value>
            <see langword="true"/> if multithreading is enabled; otherwise, <see langword="false"/>. The
            default value is <see langword="false"/>.
            </value>
            <remarks>
            <para>
            When multithreading is enabled, the scene will distribute the workload across multiple
            processors (CPU cores) to improve the performance.
            </para>
            <para>
            Multithreading adds an additional overhead, therefore it should only be enabled if the 
            current system has more than one CPU core and if the other cores are not fully utilized by
            the application. Multithreading should be disabled if the system has only one CPU core or if
            all other CPU cores are busy. In some cases it might be necessary to run a benchmark of the
            application and compare the performance with and without multithreading to decide whether
            multithreading should be enabled or not.
            </para>
            <para>
            The scene internally uses the class <see cref="T:DigitalRune.Threading.Parallel"/> for parallelization.
            <see cref="T:DigitalRune.Threading.Parallel"/> is a static class that defines how many worker threads are created, 
            how the workload is distributed among the worker threads and more. (See 
            <see cref="T:DigitalRune.Threading.Parallel"/> to find out more on how to configure parallelization.)
            </para>
            </remarks>
            <seealso cref="T:DigitalRune.Threading.Parallel"/>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.OcclusionBuffer.ProgressiveShadowCasterCulling">
            <summary>
            Gets or sets a value indicating whether progressive shadow caster culling is enabled.
            </summary>
            <value>
            <see langword="true"/> if progressive shadow caster culling is enabled; otherwise, 
            <see langword="false"/>. The default value is <see langword="true"/>.
            </value>
            <remarks>
            See <see cref="T:DigitalRune.Graphics.Rendering.OcclusionBuffer">class documentation</see> for more information.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.OcclusionBuffer.Statistics">
            <summary>
            Gets the occlusion culling statistics.
            </summary>
            <value>The occlusion culling statistics.</value>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.OcclusionBuffer"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.OcclusionBuffer"/> with a default size of 
            512 x 256 and a triangle buffer size of 21845.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.#ctor(DigitalRune.Graphics.IGraphicsService,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.OcclusionBuffer"/> class with the specified
            buffer size.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <param name="width">The width of the occlusion buffer.</param>
            <param name="height">The height of the occlusion buffer.</param>
            <param name="bufferSize">
            The size of the internal triangle buffer (= max number of occluder triangles that can be
            rendered in a single draw call). Needs to be large enough to store the most complex 
            occluder.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.Dispose">
            <summary>
            Releases all resources used by an instance of the <see cref="T:DigitalRune.Graphics.Rendering.OcclusionBuffer"/> class.
            </summary>
            <remarks>
            This method calls the virtual <see cref="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.Dispose(System.Boolean)"/> method, passing in
            <see langword="true"/>, and then suppresses finalization of the instance.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.Rendering.OcclusionBuffer"/>
            class and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources; 
            <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.GetNumberOfLevels(System.Int32)">
            <summary>
            Gets the number of levels in the depth hierarchy.
            </summary>
            <param name="size">The size.</param>
            <returns>The number of levels in the depth hierarchy.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext)">
            <overloads>
            <summary>
            Clears the occlusion buffer and renders the specified list of occluders.
            </summary>
            </overloads>
            
            <summary>
            Clears the occlusion buffer and renders the specified list of occluders.
            </summary>
            <param name="occluders">The occluders.</param>
            <param name="context">The render context.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="context"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.SceneGraph.LightNode,DigitalRune.Graphics.RenderContext)">
            <summary>
            Clears the occlusion buffer and renders the specified list of occluders.
            </summary>
            <param name="occluders">The occluders.</param>
            <param name="lightNode">
            The light node that casts directional shadows. Only required when using shadow caster
            culling.
            </param>
            <param name="context">The render context.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="context"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.Rendering.SceneNodeRenderer,DigitalRune.Graphics.RenderContext)">
            <summary>
            Clears the occlusion buffer and renders the specified list of occluders.
            </summary>
            <param name="occluders">The occluders.</param>
            <param name="renderer">
            A <see cref="T:DigitalRune.Graphics.Rendering.SceneNodeRenderer"/> for rendering custom scene nodes into the
            occlusion buffer.
            </param>
            <param name="context">The render context.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="context"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.SceneGraph.LightNode,DigitalRune.Graphics.Rendering.SceneNodeRenderer,DigitalRune.Graphics.RenderContext)">
            <summary>
            Clears the occlusion buffer and renders the specified list of occluders.
            </summary>
            <param name="occluders">The occluders.</param>
            <param name="lightNode">
            Optional: The light node that casts directional shadows. Only required when using shadow
            caster culling.
            </param>
            <param name="renderer">
            Optional: A <see cref="T:DigitalRune.Graphics.Rendering.SceneNodeRenderer"/> for rendering custom scene nodes into the
            occlusion buffer.
            </param>
            <param name="context">The render context.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="context"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.SortOccluders(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.Rendering.SceneNodeRenderer,DigitalRune.Graphics.RenderContext)">
            <summary>
            Sorts occluders by type (<see cref="T:DigitalRune.Graphics.SceneGraph.IOcclusionProxy"/> vs. <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/>).
            </summary>
            <param name="nodes">The nodes.</param>
            <param name="renderer">The renderer.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.IsOccluder(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <summary>
            Determines whether the specified scene node acts as an occluder during occlusion culling.
            </summary>
            <param name="node">The scene node.</param>
            <returns>
            <see langword="true"/> if <paramref name="node"/> acts as an occluder; otherwise,
            <see langword="false"/>.
            </returns>
            <remarks>
            Scene nodes that act as occluders are rendered into the occlusion buffer when
            <see cref="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext)"/> is called. (Note: By passing a
            <see cref="T:DigitalRune.Graphics.Rendering.SceneNodeRenderer"/> to <see cref="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.Rendering.SceneNodeRenderer,DigitalRune.Graphics.RenderContext)"/>
            it is possible to render additional scene nodes that are not automatically supported by the
            occlusion buffer.)
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.RenderOccluders(DigitalRune.Graphics.Rendering.SceneNodeRenderer,DigitalRune.Graphics.RenderContext)">
            <summary>
            Renders the occluders.
            </summary>
            <param name="renderer">
            Optional: A <see cref="T:DigitalRune.Graphics.Rendering.SceneNodeRenderer"/> for rendering custom scene nodes into the
            occlusion buffer.
            </param>
            <param name="context">The context.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.CreateDepthHierarchy(Microsoft.Xna.Framework.Graphics.RenderTarget2D,DigitalRune.Graphics.RenderContext)">
            <summary>
            Creates the depth hierarchy.
            </summary>
            <param name="hzb">The render target.</param>
            <param name="context">The render context.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.Query(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext)">
            <summary>
            Tests the specified scene nodes against the occlusion buffer to check which scene nodes are
            visible. (Performs frustum culling, distance culling, occlusion culling, and shadow caster
            culling.)
            </summary>
            <param name="nodes">
            In: The scene nodes that should be tested for visibility.<br/>
            Out: The list of visible scene nodes. Occluded scene nodes are replaced with null entries.
            </param>
            <param name="context">The render context.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="nodes"/> or <paramref name="context"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.ToPixelAddress(System.Int32)">
            <summary>
            Get the pixel address at which the result of the query with the given index is written.
            </summary>
            <param name="index">The index of the query.</param>
            <returns>The pixel address (x, y).</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.ToPixelAddress(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Get the pixel address at which the result of the query with the given index is written.
            </summary>
            <param name="index">The index of the query.</param>
            <param name="x">The x pixel address.</param>
            <param name="y">The y pixel address.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.ToResultsBufferIndex(System.Int32)">
            <summary>
            Gets the index of the result for a given query.
            </summary>
            <param name="index">The index of the query.</param>
            <returns>The index in the results buffer.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.ResetShadowCasters(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode})">
            <summary>
            Resets state of the shadow casters.
            </summary>
            <param name="nodes">The shadow-casting scene nodes.</param>
            <remarks>
            <para>
            When shadow caster culling is enabled, the method <see cref="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.Query(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext)"/> marks shadow casting
            scene nodes as visible or hidden. The shadow map renderer will ignore scene nodes that are
            marked as hidden.
            </para>
            <para>
            When shadow caster culling gets disabled, <see cref="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.ResetShadowCasters(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode})"/> should be called
            once to reset the state of the shadow casting scene nodes. The method goes through all scene
            nodes and marks them as visible.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="nodes"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.VisualizeCameraBuffer(System.Int32,DigitalRune.Graphics.RenderContext)">
            <summary>
            Debugging: Visualizes a level of the camera's hierarchical Z buffer.
            </summary>
            <param name="level">
            The index of the level to visualize where 0 is the most detailed level.
            </param>
            <remarks>
            This method renders a visualization of the occlusion buffer into the current render target
            and viewport using the current blend state.
            </remarks>
            <param name="context">The render context.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="context"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.VisualizeLightBuffer(System.Int32,DigitalRune.Graphics.RenderContext)">
            <summary>
            Debugging: Visualizes a level of the light's hierarchical Z buffer. (Only valid when shadow
            caster culling is used.)
            </summary>
            <param name="level">
            The index of the level to visualize where 0 is the most detailed level.
            </param>
            <remarks>
            This method renders a visualization of the occlusion buffer into the current render target
            and viewport using the current blend state.
            </remarks>
            <param name="context">The render context.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="context"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.VisualizeObject(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <summary>
            Debugging: Visualizes the occlusion query for the specified scene node.
            </summary>
            <param name="node">The scene node.</param>
            <param name="context">The render context.</param>
            <remarks>
            This method renders a visualization of the occlusion buffer and the coverage of the
            specified scene node in the occlusion buffer into the current render target and viewport
            using the current blend state.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> or <paramref name="context"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.VisualizeShadowCaster(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <summary>
            Debugging: Visualizes the occlusion query for the specified shadow caster.
            </summary>
            <param name="node">The shadow caster.</param>
            <param name="context">The render context.</param>
            <remarks>
            This method renders a visualization of the occlusion buffer and the coverage of the
            specified shadow caster in the occlusion buffer into the current render target and viewport
            using the current blend state.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> or <paramref name="context"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.VisualizeShadowVolume(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <summary>
            Debugging: Visualizes the occlusion query for the specified shadow volume.
            </summary>
            <param name="node">The shadow caster.</param>
            <param name="context">The render context.</param>
            <remarks>
            This method renders a visualization of the occlusion buffer and the coverage of the
            specified shadow volume in the occlusion buffer into the current render target and viewport
            using the current blend state.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> or <paramref name="context"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.OcclusionCullingStatistics">
            <summary>
            Provides statistics about the occlusion culling process.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.OcclusionCullingStatistics.Occluders">
            <summary>
            Gets the number of occluders.
            </summary>
            <value>The number of occluders.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.OcclusionCullingStatistics.ObjectsTotal">
            <summary>
            Gets the total number of objects that were tested in the last query.
            </summary>
            <value>The total number of objects that were tested in the last query.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.OcclusionCullingStatistics.ObjectsVisible">
            <summary>
            Gets the number of objects that were visible in the last query.
            </summary>
            <value>The number of objects that were visible in the last query.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.OcclusionCullingStatistics.ObjectsCulled">
            <summary>
            Gets the number of objects that were occluded in the last query.
            </summary>
            <value>The number of objects that were occluded in the last query.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.OcclusionCullingStatistics.ShadowCastersTotal">
            <summary>
            Gets the total number of shadow casters that were tested in the last query.
            </summary>
            <value>The total number of shadow casters that were tested in the last query.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.OcclusionCullingStatistics.ShadowCastersVisible">
            <summary>
            Gets the total number of shadow casters that were visible in the last query.
            </summary>
            <value>The total number of shadow casters that were visible in the last query.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.OcclusionCullingStatistics.ShadowCastersCulled">
            <summary>
            Gets the number of shadow casters that were culled in the last query.
            </summary>
            <value>The number of shadow casters that were culled in the last query.</value>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.OcclusionVertex">
            <summary>
            Vertex format used in "OcclusionCulling.fx".
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.OcclusionVertex.VertexDeclaration">
            <summary>
            The vertex declaration.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.OcclusionVertex.SizeInBytes">
            <summary>
            Gets the size of the <see cref="T:DigitalRune.Graphics.Rendering.OcclusionVertex"/> structure in bytes.
            </summary>
            <value>The size of the vertex in bytes.</value>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.OcclusionVertex.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> and this instance are the same type and 
            represent the same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.OcclusionVertex.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.OcclusionVertex.Microsoft#Xna#Framework#Graphics#IVertexType#VertexDeclaration">
            <summary>
            Gets the vertex declaration.
            </summary>
            <value>The vertex declaration.</value>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.OcclusionVertex.op_Equality(DigitalRune.Graphics.Rendering.OcclusionVertex,DigitalRune.Graphics.Rendering.OcclusionVertex)">
            <summary>
            Compares two objects to determine whether they are the same. 
            </summary>
            <param name="left">Object to the left of the equality operator.</param>
            <param name="right">Object to the right of the equality operator.</param>
            <returns>
            <see langword="true"/> if the objects are the same; <see langword="false"/> otherwise. 
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.OcclusionVertex.op_Inequality(DigitalRune.Graphics.Rendering.OcclusionVertex,DigitalRune.Graphics.Rendering.OcclusionVertex)">
            <summary>
            Compares two objects to determine whether they are different. 
            </summary>
            <param name="left">Object to the left of the inequality operator.</param>
            <param name="right">Object to the right of the inequality operator.</param>
            <returns>
            <see langword="true"/> if the objects are different; <see langword="false"/> otherwise. 
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.OcclusionVertex.ToString">
            <summary>
            Retrieves a string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.RenderBatch`2">
            <summary>
            Renders primitives in batches.
            </summary>
            <typeparam name="TVertex">The type of the vertex.</typeparam>
            <typeparam name="TIndex">The type of the index (ushort or int).</typeparam>
            <remarks>
            <para>
            Use the <see cref="T:DigitalRune.Graphics.Rendering.RenderBatch`2"/> when you need to render dynamic vertex data,
            e.g. for particle systems. The <see cref="T:DigitalRune.Graphics.Rendering.RenderBatch`2"/> must be initialized
            with a vertex and an index buffer. It automatically creates a suitable (dynamic) vertex and
            index buffer. The caller can call <see cref="M:DigitalRune.Graphics.Rendering.RenderBatch`2.Submit(Microsoft.Xna.Framework.Graphics.PrimitiveType,System.Int32,System.Int32,System.Int32@,System.Int32@)"/> to update vertices and indices. The
            method <see cref="M:DigitalRune.Graphics.Rendering.RenderBatch`2.Submit(Microsoft.Xna.Framework.Graphics.PrimitiveType,System.Int32,System.Int32,System.Int32@,System.Int32@)"/> return the indices where the new data can be added. If the batch
            is full, the <see cref="T:DigitalRune.Graphics.Rendering.RenderBatch`2"/> will automatically call
            <see cref="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DrawIndexedPrimitives(Microsoft.Xna.Framework.Graphics.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/> to draw the batch. <see cref="M:DigitalRune.Graphics.Rendering.RenderBatch`2.Flush"/> can
            be called to force a drawing of the current batch.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.RenderBatch`2.IsDisposed">
            <summary>
            Gets a value indicating whether this instance has been disposed of.
            </summary>
            <value>
            <see langword="true"/> if this instance has been disposed of; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.RenderBatch`2.Vertices">
            <summary>
            Gets the vertices.
            </summary>
            <value>The vertices.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.RenderBatch`2.Indices">
            <summary>
            Gets the indices (either <strong>ushort[]</strong> or <strong>int[]</strong>).
            </summary>
            <value>The indices (either <strong>ushort[]</strong> or <strong>int[]</strong>).</value>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.RenderBatch`2.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.VertexDeclaration,`0[],System.Boolean,`1[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.RenderBatch`2"/> class.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="vertexDeclaration">The vertex declaration.</param>
            <param name="vertices">The vertices array.</param>
            <param name="isVertexBufferDynamic">
            If set to <see langword="true"/>, the vertices can be dynamically updated. If set to 
            <see langword="false"/>, the vertex buffer is initialized only once (in this constructor).
            </param>
            <param name="indices">The indices array.</param>
            <param name="isIndexBufferDynamic">
            If set to <see langword="true"/>, the indices can be dynamically updated. If set to 
            <see langword="false"/>, the index buffer is initialized only once (in this constructor).
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/>, <paramref name="vertices"/> or <paramref name="indices"/>
            is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="indices"/> array must be of type <strong>ushort[]</strong> or 
            <strong>int[]</strong>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.RenderBatch`2.Dispose">
            <summary>
            Releases all resources used by an instance of the <see cref="T:DigitalRune.Graphics.Rendering.RenderBatch`2"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.RenderBatch`2.Reset">
            <summary>
            Resets the indices to the beginning of the buffers.
            </summary>
            <remarks>
            This method does not automatically flush the last batch.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.RenderBatch`2.Submit(Microsoft.Xna.Framework.Graphics.PrimitiveType,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Informs the <see cref="T:DigitalRune.Graphics.Rendering.RenderBatch`2" /> that new vertices and indices will be
            added. (If necessary, the current batch is flushed.)
            </summary>
            <param name="primitiveType">The type of the primitive.</param>
            <param name="newVertices">The number of new vertices.</param>
            <param name="newIndices">The number new indices.</param>
            <param name="nextVertexBufferIndex">
            The start index in <see cref="P:DigitalRune.Graphics.Rendering.RenderBatch`2.Vertices"/> where the new vertices can be added.
            </param>
            <param name="nextIndexBufferIndex">
            The start index in <see cref="P:DigitalRune.Graphics.Rendering.RenderBatch`2.Indices"/> where the new indices can be added.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.RenderBatch`2.Flush">
            <summary>
            Forces a drawing of the current batch.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.RenderOrder">
            <summary>
            Defines the order in which in objects are rendered.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.RenderOrder.Default">
            <summary>
            The default/optimal render order - depends on the renderer.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.RenderOrder.FrontToBack">
            <summary>
            Sort objects by distance and render nearest objects first.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.RenderOrder.BackToFront">
            <summary>
            Sort objects by distance and render furthest objects first.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.RenderOrder.UserDefined">
            <summary>
            Render objects in the exact same order as they are passed to the renderer.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.PlanarReflectionRenderer">
            <summary>
            Renders reflection images for the <see cref="T:DigitalRune.Graphics.SceneGraph.PlanarReflectionNode"/>s.
            </summary>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Graphics.Rendering.PlanarReflectionRenderer"/> handles <see cref="T:DigitalRune.Graphics.SceneGraph.PlanarReflectionNode"/>s. It
            renders the scene into the render target of the <see cref="T:DigitalRune.Graphics.SceneGraph.PlanarReflectionNode"/> (see 
            <see cref="P:DigitalRune.Graphics.SceneGraph.RenderToTextureNode.RenderToTexture"/>).
            </para>
            <para>
            <strong>Render Callback:</strong><br/>
            The renderer requires a callback method to render the scene. The callback method needs to
            render the scene using the camera and the information given in the
            <see cref="T:DigitalRune.Graphics.RenderContext"/>.
            </para>
            <para>
            <strong>Render Target and Viewport:</strong><br/>
            This renderer changes the current render target of the graphics device because it uses the 
            graphics device to render to off-screen render targets. The render target and the viewport of
            the graphics device are undefined after rendering.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.PlanarReflectionRenderer.RenderCallback">
            <summary>
            Gets or sets the method which renders the scene.
            </summary>
            <value>
            The callback method that renders the scene. Must not be <see langword="null"/>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.PlanarReflectionRenderer.#ctor(System.Action{DigitalRune.Graphics.RenderContext})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.PlanarReflectionRenderer"/> class.
            </summary>
            <param name="renderCallback">
            The method which renders the scene. Must not be <see langword="null"/>.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.PlanarReflectionRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.PlanarReflectionRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.SceneCaptureRenderer">
            <summary>
            Renders scene images for the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneCaptureNode"/>s.
            </summary>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Graphics.Rendering.SceneCaptureRenderer"/> handles <see cref="T:DigitalRune.Graphics.SceneGraph.SceneCaptureNode"/>s. It renders the
            scene into the render target of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneCaptureNode"/> (see 
            <see cref="P:DigitalRune.Graphics.SceneGraph.RenderToTextureNode.RenderToTexture"/>). If several <see cref="T:DigitalRune.Graphics.SceneGraph.SceneCaptureNode"/>s
            reference the same <see cref="T:DigitalRune.Graphics.RenderToTexture"/> instance, the scene is rendered only once.
            </para>
            <para>
            <strong>Render Callback:</strong><br/>
            The renderer requires a callback method to render the scene. The callback method needs to
            render the scene using the camera and the information given in the
            <see cref="T:DigitalRune.Graphics.RenderContext"/>.
            </para>
            <para>
            <strong>Render Target and Viewport:</strong><br/>
            This renderer changes the current render target of the graphics device because it uses the
            graphics device to render to off-screen render targets. The render target and the viewport of
            the graphics device are undefined after rendering.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.SceneCaptureRenderer.RenderCallback">
            <summary>
            Gets or sets the method which renders the scene.
            </summary>
            <value>
            The callback method that renders the scene. Must not be <see langword="null"/>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.SceneCaptureRenderer.#ctor(System.Action{DigitalRune.Graphics.RenderContext})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.SceneCaptureRenderer"/> class.
            </summary>
            <param name="renderCallback">
            The method which renders the scene. Must not be <see langword="null"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="renderCallback"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.SceneCaptureRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.SceneCaptureRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.SceneNodeRenderer">
            <summary>
            Base class of all scene node renderers.
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Graphics.Rendering.SceneNodeRenderer"/> renders one or more types of scene nodes. For example, the
            <see cref="T:DigitalRune.Graphics.Rendering.MeshRenderer"/> handles <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode"/>s, the 
            <see cref="T:DigitalRune.Graphics.Rendering.BillboardRenderer"/> handles <see cref="T:DigitalRune.Graphics.SceneGraph.BillboardNode"/>s and 
            <see cref="T:DigitalRune.Graphics.SceneGraph.ParticleSystemNode"/>s, the <see cref="T:DigitalRune.Graphics.Rendering.LensFlareRenderer"/> handles 
            <see cref="T:DigitalRune.Graphics.SceneGraph.LensFlareNode"/>, etc.
            </para>
            <para>
            The <see cref="T:DigitalRune.Graphics.Rendering.SceneRenderer"/> is a special type of scene node renderer. It does not handle
            scene nodes itself. Instead other renderers can be added to the <see cref="T:DigitalRune.Graphics.Rendering.SceneRenderer"/>.
            The collection of renderers can be treated as a single scene node renderer.
            </para>
            <para>
            <strong>Important: Possible Switch of Render Target!</strong><br/>
            A scene node renderer may replace the current render target with a new, compatible render 
            target! That means that a scene node renderer may discard the current render target and set a
            new render target on the graphics device and in the render context. Any references to the
            previous render target will be invalid and should be updated.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.SceneNodeRenderer.Id">
            <summary>Temporary ID set during rendering.</summary>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.SceneNodeRenderer.IsDisposed">
            <summary>
            Gets a value indicating whether this instance has been disposed of.
            </summary>
            <value>
            <see langword="true"/> if this instance has been disposed of; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.SceneNodeRenderer.Order">
            <summary>
            Gets the draw order of this scene node renderer.
            </summary>
            <value>
            An integer value in the range [0, 255], which defines the draw order of this scene node 
            renderer.
            </value>
            <remarks>
            The order is used by composite renderers. For example, the <see cref="T:DigitalRune.Graphics.Rendering.SceneRenderer"/> is a
            composite renderer that manages a list of renderers and dispatches draw jobs. When no 
            explicit render order for the scene nodes is defined, the scene nodes are batched by 
            renderer and the renderer with the lowest order is invoked first.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.SceneNodeRenderer.Dispose">
            <summary>
            Releases all resources used by an instance of the <see cref="T:DigitalRune.Graphics.Rendering.SceneNodeRenderer"/> class.
            </summary>
            <remarks>
            This method calls the virtual <see cref="M:DigitalRune.Graphics.Rendering.SceneNodeRenderer.Dispose(System.Boolean)"/> method, passing in 
            <see langword="true"/>, and then suppresses finalization of the instance.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.SceneNodeRenderer.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.Rendering.SceneNodeRenderer"/> 
            class and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources; 
            <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.SceneNodeRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <summary>
            Determines whether this renderer can handle the specified scene node.
            </summary>
            <param name="node">The scene node to be rendered.</param>
            <param name="context">The render context.</param>
            <returns>
            <see langword="true"/> if this instance renders the specified node; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.SceneNodeRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext)">
            <overloads>
            <summary>
            Renders the specified scene nodes.
            </summary>
            </overloads>
            
            <summary>
            Renders the specified scene nodes.
            </summary>
            <param name="nodes">The scene nodes. The list may contain null entries.</param>
            <param name="context">
            The render context. (The property <see cref="P:DigitalRune.Graphics.RenderContext.CameraNode"/> selects the 
            currently active camera. Some renderers require additional information in the render 
            context. See remarks.)
            </param>
            <remarks>
            For mesh nodes: The <see cref="P:DigitalRune.Graphics.RenderContext.RenderPass"/> in the render context determines 
            the effect binding that should be used for rendering meshes. The effect binding might 
            require additional information in the render context.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="nodes"/> or <paramref name="context"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.SceneNodeRenderer.Render(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <summary>
            Renders the specified scene node.
            </summary>
            <param name="node">The scene node.</param>
            <param name="context">
            The render context. (The property <see cref="P:DigitalRune.Graphics.RenderContext.CameraNode"/> selects the 
            currently active camera. Some renderers require additional information in the render 
            context. See remarks.)
            </param>
            <inheritdoc cref="M:DigitalRune.Graphics.Rendering.SceneNodeRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext)"/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.SceneNodeRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
            <summary>
            Renders the specified scene nodes.
            </summary>
            <param name="nodes">The scene nodes. The list may contain null entries.</param>
            <param name="context">
            The render context. (The property <see cref="P:DigitalRune.Graphics.RenderContext.CameraNode"/> selects the 
            currently active camera. Some renderers require additional information in the render 
            context. See remarks.)
            </param>
            <param name="order">The render order.</param>
            <inheritdoc cref="M:DigitalRune.Graphics.Rendering.SceneNodeRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext)"/>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.SceneNodeRendererCollection">
            <summary>
            Manages a collection of <see cref="T:DigitalRune.Graphics.Rendering.SceneNodeRenderer"/>s.
            </summary>
            <remarks>
            Null entries or duplicate entries are not allowed in this collection.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.SceneNodeRendererCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:DigitalRune.Graphics.Rendering.SceneNodeRendererCollection"/>. 
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> for <see cref="T:DigitalRune.Graphics.Rendering.SceneNodeRendererCollection"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.SceneNodeRendererCollection.InsertItem(System.Int32,DigitalRune.Graphics.Rendering.SceneNodeRenderer)">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1"/> at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="item"/> should be inserted.
            </param>
            <param name="item">The object to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>. 
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="item"/> is already contained in the collection. 
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.SceneNodeRendererCollection.SetItem(System.Int32,DigitalRune.Graphics.Rendering.SceneNodeRenderer)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or is greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>. 
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="item"/> is already contained in the collection. 
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.SceneRenderer">
            <summary>
            A configurable renderer that combines multiple scene node renderers.
            </summary>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Graphics.Rendering.SceneRenderer"/> contains a configurable list of renderers (see property 
            <see cref="P:DigitalRune.Graphics.Rendering.SceneRenderer.Renderers"/>). It batches scene nodes by type and dispatches them to the 
            appropriate scene node renderer.
            </para>
            <para>
            <strong>Important:</strong> The <see cref="T:DigitalRune.Graphics.Rendering.SceneRenderer"/> is empty by default. An empty
            <see cref="T:DigitalRune.Graphics.Rendering.SceneRenderer"/> does not render anything.
            </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.SceneRenderer.Job">
            <summary>
            Defines a draw job of the <see cref="T:DigitalRune.Graphics.Rendering.SceneRenderer"/>.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.SceneRenderer.Job.SortKey">
            <summary>The sort key.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.SceneRenderer.Job.Node">
            <summary>The scene node.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.SceneRenderer.Job.Renderer">
            <summary>The scene node renderer that handles the job.</summary>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.SceneRenderer.Renderers">
            <summary>
            Gets the list of scene node renderers managed by this instance.
            </summary>
            <value>The list of scene node renderers.</value>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.SceneRenderer.#ctor">
            <summary>
            Initializes a new empty instance of the <see cref="T:DigitalRune.Graphics.Rendering.SceneRenderer" /> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.SceneRenderer.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.SceneRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.SceneRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.SceneRenderer.GetSortKey(System.Single,System.Int32,System.UInt32)">
            <summary>
            Gets the sort key.
            </summary>
            <param name="distance">The distance.</param>
            <param name="order">The order of the renderer.</param>
            <param name="id">The ID of the renderer.</param>
            <returns>The key for sorting draw jobs.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.SceneRenderer.Accessor">
            <summary>
            Exposes a section of the jobs list as read-only <c>IList&lt;SceneNode&gt;</c>.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.SceneRenderer.Accessor.Set(DigitalRune.Collections.ArrayList{DigitalRune.Graphics.Rendering.SceneRenderer.Job},System.Int32,System.Int32)">
            <summary>
            Assigns a section of the jobs list to the accessor.
            </summary>
            <param name="jobs">The jobs.</param>
            <param name="startInclusive">The start index (inclusive).</param>
            <param name="endExclusive">The end index (exclusive).</param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.SceneRenderer.Accessor.Reset">
            <summary>
            Resets the accessor.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.CascadedShadowMapRenderer">
            <summary>
            Creates the shadow map of a <see cref="T:DigitalRune.Graphics.CascadedShadow"/>.
            </summary>
            <inheritdoc cref="T:DigitalRune.Graphics.Rendering.ShadowMapRenderer"/>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.CascadedShadowMapRenderer.RenderCallback">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.CascadedShadowMapRenderer.#ctor(System.Func{DigitalRune.Graphics.RenderContext,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.CascadedShadowMapRenderer"/> class.
            </summary>
            <param name="renderCallback">
            The method which renders the scene into the shadow map. Must not be <see langword="null"/>. 
            See <see cref="P:DigitalRune.Graphics.Rendering.CascadedShadowMapRenderer.RenderCallback"/> for more information.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.CascadedShadowMapRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.CascadedShadowMapRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.CompositeShadowMapRenderer">
            <summary>
            Creates the shadow maps of a <see cref="T:DigitalRune.Graphics.CompositeShadow"/>.
            </summary>
            <inheritdoc cref="T:DigitalRune.Graphics.Rendering.ShadowMapRenderer"/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.CompositeShadowMapRenderer.#ctor(System.Collections.Generic.IList{DigitalRune.Graphics.Rendering.SceneNodeRenderer})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.CompositeShadowMapRenderer" /> class.
            </summary>
            <param name="shadowMapRenderers">A list of all known shadow map renderers.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="shadowMapRenderers"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.CompositeShadowMapRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.CompositeShadowMapRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.CubeMapShadowMapRenderer">
            <summary>
            Creates the shadow map of a <see cref="T:DigitalRune.Graphics.CubeMapShadow"/>.
            </summary>
            <inheritdoc cref="T:DigitalRune.Graphics.Rendering.ShadowMapRenderer"/>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.CubeMapShadowMapRenderer.RenderCallback">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.CubeMapShadowMapRenderer.#ctor(System.Func{DigitalRune.Graphics.RenderContext,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.CubeMapShadowMapRenderer"/> class.
            </summary>
            <param name="renderCallback">
            The method which renders the scene into the shadow map. Must not be <see langword="null"/>. 
            See <see cref="P:DigitalRune.Graphics.Rendering.CubeMapShadowMapRenderer.RenderCallback"/> for more information.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.CubeMapShadowMapRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.CubeMapShadowMapRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.IShadowMapRenderer">
            <summary>
            Renders the shadow maps of <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/>s.
            </summary>
            <remarks>
            <para>
            The shadow map renderers usually require a <see cref="P:DigitalRune.Graphics.Rendering.IShadowMapRenderer.RenderCallback"/> method to render the
            scene. The callback method needs to render the scene using the camera and the information
            given in the <see cref="T:DigitalRune.Graphics.RenderContext"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.IShadowMapRenderer.RenderCallback">
            <summary>
            Gets or sets the method which renders the scene into the shadow map.
            </summary>
            <value>The callback method that renders the scene into the shadow map.</value>
            <remarks>
            The render callback renders the scene for the shadow map using the camera and the
            information currently set in the render context. It returns <see langword="true"/> if
            any objects were rendered and <see langword="false"/> if no objects were rendered (= shadow
            map is empty).
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.ShadowMapRenderer">
            <summary>
            Renders the shadow maps of <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/>s.
            </summary>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Graphics.Rendering.ShadowMapRenderer"/> handles <see cref="T:DigitalRune.Graphics.StandardShadow"/>s, 
            <see cref="T:DigitalRune.Graphics.CubeMapShadow"/>s, <see cref="T:DigitalRune.Graphics.CascadedShadow"/>s, and
            <see cref="T:DigitalRune.Graphics.CompositeShadow"/>s. Support for new shadow types can be implemented by creating a
            custom <see cref="T:DigitalRune.Graphics.Rendering.SceneNodeRenderer"/> and adding it to the
            <see cref="P:DigitalRune.Graphics.Rendering.SceneRenderer.Renderers"/> collection.
            </para>
            <para>
            During rendering the renderer changes the render context: Depending on the shadow type
            <c>"Default"</c>, <c>"Omnidirectional"</c>, or <c>"Directional"</c> is set as the
            <see cref="P:DigitalRune.Graphics.RenderContext.Technique"/>.
            </para>
            <para>
            The shadow maps are stored in the <see cref="P:DigitalRune.Graphics.SceneGraph.LightNode.Shadow"/> property of the
            <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/>.
            </para>
            <para>
            <strong>Render Callback:</strong><br/>
            The shadow map renderer requires a <see cref="P:DigitalRune.Graphics.Rendering.ShadowMapRenderer.RenderCallback"/> method to render the scene.
            The callback method needs to render the scene using the camera and the information given in
            the <see cref="T:DigitalRune.Graphics.RenderContext"/>.
            </para>
            <para>
            <strong>Render Target and Viewport:</strong><br/>
            This renderer changes the current render target of the graphics device because it uses the
            graphics device to render the shadow maps. The render target and the viewport of the graphics
            device are undefined after rendering.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.ShadowMapRenderer.RenderCallback">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.ShadowMapRenderer.#ctor(System.Func{DigitalRune.Graphics.RenderContext,System.Boolean})">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.ShadowMapRenderer"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.ShadowMapRenderer"/> class using the specified
            render callback.
            </summary>
            <param name="render">
            The method which renders the scene into the shadow map. Must not be <see langword="null"/>.
            See <see cref="P:DigitalRune.Graphics.Rendering.ShadowMapRenderer.RenderCallback"/> for more information.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="render"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.ShadowMapRenderer.#ctor(DigitalRune.Graphics.Rendering.SceneNodeRenderer)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.ShadowMapRenderer"/> class using the specified
            scene node renderer.
            </summary>
            <param name="sceneNodeRenderer">
            The renderer for shadow-casting objects. A <see cref="P:DigitalRune.Graphics.Rendering.ShadowMapRenderer.RenderCallback"/> is created
            automatically which calls the specified renderer.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sceneNodeRenderer"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.ShadowMapRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.ShadowMapRenderer.FilterSceneNode(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.StandardShadowMapRenderer">
            <summary>
            Creates the shadow map of a <see cref="T:DigitalRune.Graphics.StandardShadow"/>.
            </summary>
            <inheritdoc cref="T:DigitalRune.Graphics.Rendering.ShadowMapRenderer"/>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.StandardShadowMapRenderer.RenderCallback">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.StandardShadowMapRenderer.#ctor(System.Func{DigitalRune.Graphics.RenderContext,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.StandardShadowMapRenderer"/> class.
            </summary>
            <param name="renderCallback">
            The method which renders the scene into the shadow map. Must not be <see langword="null"/>.
            See <see cref="P:DigitalRune.Graphics.Rendering.StandardShadowMapRenderer.RenderCallback"/> for more information.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.StandardShadowMapRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.StandardShadowMapRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.CloudLayerRenderer">
            <summary>
            Renders <see cref="T:DigitalRune.Graphics.SceneGraph.CloudLayerNode"/>s.
            </summary>
            <remarks>
            <para>
            <strong>Render Target and Viewport:</strong><br/>
            This renderer renders into the current render target and viewport of the graphics device.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.CloudLayerRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.CloudLayerRenderer"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The current graphics profile is Reach.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.CloudLayerRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.CloudLayerRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.CloudMapRenderer">
            <summary>
            Generates the cloud textures for <see cref="T:DigitalRune.Graphics.LayeredCloudMap"/>s.
            </summary>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Graphics.Rendering.CloudMapRenderer"/> is a <see cref="T:DigitalRune.Graphics.Rendering.SceneNodeRenderer"/> that handles
            <see cref="T:DigitalRune.Graphics.SceneGraph.CloudLayerNode"/>s. If a <see cref="T:DigitalRune.Graphics.SceneGraph.CloudLayerNode"/> references a 
            <see cref="T:DigitalRune.Graphics.LayeredCloudMap"/> the renderer creates the cloud texture and stores the result in 
            the <see cref="P:DigitalRune.Graphics.CloudMap.Texture"/> property.
            </para>
            <para>
            <strong>Render Target and Viewport:</strong><br/>
            This renderer changes the current render target of the graphics device because it uses the 
            graphics device to render the cloud maps into internal render targets. The render target
            and the viewport of the graphics device are undefined after rendering.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.CloudMapRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.CloudMapRenderer"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The current graphics profile is Reach.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.CloudMapRenderer.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.CloudMapRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.CloudMapRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.GradientSkyRenderer">
            <summary>
            Renders <see cref="T:DigitalRune.Graphics.SceneGraph.GradientSkyNode"/>s.
            </summary>
            <remarks>
            <para>
            <strong>Render Target and Viewport:</strong><br/>
            This renderer renders into the current render target and viewport of the graphics device.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.GradientSkyRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.GradientSkyRenderer"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.GradientSkyRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.GradientSkyRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.GradientTextureSkyRenderer">
            <summary>
            Renders <see cref="T:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode"/>s.
            </summary>
            <remarks>
            <para>
            <strong>Render Target and Viewport:</strong><br/>
            This renderer renders into the current render target and viewport of the graphics device.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.GradientTextureSkyRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.GradientTextureSkyRenderer"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.GradientTextureSkyRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.GradientTextureSkyRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.ScatteringSkyRenderer">
            <summary>
            Renders <see cref="T:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode"/>s.
            </summary>
            <remarks>
            <para>
            <strong>Render Target and Viewport:</strong><br/>
            This renderer renders into the current render target and viewport of the graphics device.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.ScatteringSkyRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.ScatteringSkyRenderer"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.ScatteringSkyRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.ScatteringSkyRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.SkyObjectRenderer">
            <summary>
            Renders <see cref="T:DigitalRune.Graphics.SceneGraph.SkyObjectNode"/>s.
            </summary>
            <remarks>
            <para>
            <strong>Render Target and Viewport:</strong><br/>
            This renderer renders into the current render target and viewport of the graphics device.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.SkyObjectRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.SkyObjectRenderer"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.SkyObjectRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.SkyObjectRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.SkyRenderer">
            <summary>
            Renders <see cref="T:DigitalRune.Graphics.SceneGraph.SkyNode"/>s.
            </summary>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Graphics.Rendering.SkyRenderer"/> handles <see cref="T:DigitalRune.Graphics.SceneGraph.CloudLayerNode"/>s, 
            <see cref="T:DigitalRune.Graphics.SceneGraph.GradientSkyNode"/>s, <see cref="T:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode"/>s, 
            <see cref="T:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode"/>s, <see cref="T:DigitalRune.Graphics.SceneGraph.SkyboxNode"/>s, <see cref="T:DigitalRune.Graphics.SceneGraph.SkyObjectNode"/>s, and
            <see cref="T:DigitalRune.Graphics.SceneGraph.StarfieldNode"/>s.
            </para>
            <para>
            <strong>Render Target and Viewport:</strong><br/>
            This renderer renders into the current render target and viewport of the graphics device.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.SkyRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.SkyRenderer"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.SkyRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.SkyRenderer.GetSortKey(System.Int32,System.Int32,System.UInt32)">
            <summary>
            Gets the sort key.
            </summary>
            <param name="drawOrder">The draw order.</param>
            <param name="order">The order of the renderer.</param>
            <param name="id">The ID of the renderer.</param>
            <returns>The key for sorting draw jobs.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.SkyboxRendererInternal">
            <summary>
            Renders a cube map ("skybox") into the background of the current render target.
            </summary>
            <remarks>
            <para>
            A "skybox" is a cube map that is used as the background of a scene. A skybox is usually drawn 
            after all opaque objects to fill the background.
            </para>
            <para>
            <strong>Render Target and Viewport:</strong><br/>
            This renderer renders into the current render target and viewport of the graphics device.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.SkyboxRendererInternal.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.SkyboxRendererInternal"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.SkyboxRendererInternal.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.SkyboxRendererInternal.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.StarfieldRenderer">
            <summary>
            Renders <see cref="T:DigitalRune.Graphics.SceneGraph.StarfieldNode"/>s.
            </summary>
            <remarks>
            <para>
            Each star is rendered using a billboard projected onto the far plane. Anti-aliasing in the
            shader is used to get smooth dots.
            </para>
            <para>
            <strong>Render Target and Viewport:</strong><br/>
            This renderer renders into the current render target and viewport of the graphics device.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.StarfieldRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.StarfieldRenderer"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.StarfieldRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.StarfieldRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.StarfieldRenderer.GetStarfieldMesh(DigitalRune.Graphics.SceneGraph.StarfieldNode,DigitalRune.Graphics.RenderContext)">
            <summary>
            Gets/creates the mesh for rendering the starfield.
            </summary>
            <param name="node">The node.</param>
            <param name="context">The render context.</param>
            <returns>The mesh for rendering the starfield.</returns>
            <exception cref="T:DigitalRune.Graphics.GraphicsException">
            The number of stars is greater than half the max number of primitives which the graphics
            device can draw in a single draw call.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.SkyboxRenderer">
            <summary>
            Renders a cube map ("skybox") into the background of the current render target.
            </summary>
            <remarks>
            <para>
            A "skybox" is a cube map that is used as the background of a scene. A skybox is usually drawn 
            after all opaque objects to fill the background.
            </para>
            <para>
            <strong>Render Target and Viewport:</strong><br/>
            This renderer renders into the current render target and viewport of the graphics device.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.SkyboxRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.SkyboxRenderer"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.SkyboxRenderer.Render(Microsoft.Xna.Framework.Graphics.TextureCube,DigitalRune.Mathematics.Algebra.Matrix33F,System.Single,DigitalRune.Graphics.RenderContext)">
            <summary>
            Renders a skybox.
            </summary>
            <param name="texture">The cube map with the sky texture.</param>
            <param name="orientation">The orientation of the skybox.</param>
            <param name="exposure">The exposure factor that is multiplied to the cube map values to change the brightness.
            (Usually 1 or higher).</param>
            <param name="context">
            The render context. (<see cref="P:DigitalRune.Graphics.RenderContext.CameraNode"/> needs to be set.)
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="texture"/> or <paramref name="context"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.SpriteRenderer">
            <summary>
            Renders <see cref="T:DigitalRune.Graphics.SceneGraph.SpriteNode"/>s.
            </summary>
            <remarks>
            <para>
            <strong>Render Target and Viewport:</strong><br/>
            This renderer renders into the current render target and viewport of the graphics device.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.SpriteRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.SpriteRenderer"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.SpriteRenderer"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.SpriteRenderer.#ctor(DigitalRune.Graphics.IGraphicsService,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.SpriteRenderer"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <param name="spriteBatch">
            The sprite batch used for rendering. Can be <see langword="null"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.SpriteRenderer.#ctor(DigitalRune.Graphics.IGraphicsService,Microsoft.Xna.Framework.Graphics.SpriteFont)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.SpriteRenderer"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <param name="spriteFont">
            The default font, which is used in case the font of a <see cref="T:DigitalRune.Graphics.TextSprite"/> is not set.
            Can be <see langword="null"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.SpriteRenderer.#ctor(DigitalRune.Graphics.IGraphicsService,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Graphics.SpriteFont)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.SpriteRenderer"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <param name="spriteBatch">
            The sprite batch used for rendering. Can be <see langword="null"/>.
            </param>
            <param name="spriteFont">
            The default font, which is used in case the font of a <see cref="T:DigitalRune.Graphics.TextSprite"/> is not set.
            Can be <see langword="null"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.SpriteRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.SpriteRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.TerrainClipmapRenderer">
            <summary>
            Renders the clipmaps of a <see cref="T:DigitalRune.Graphics.SceneGraph.TerrainNode"/>.
            </summary>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Graphics.Rendering.TerrainClipmapRenderer"/> is a <see cref="T:DigitalRune.Graphics.Rendering.SceneNodeRenderer"/> that handles
            <see cref="T:DigitalRune.Graphics.SceneGraph.TerrainNode"/>s. It renders the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.BaseClipmap"/>
            and <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailClipmap"/> of the <see cref="T:DigitalRune.Graphics.SceneGraph.TerrainNode"/>.
            </para>
            <para>
            <strong>Render passes:</strong><br/>
            This renderer uses the <see cref="T:DigitalRune.Graphics.Material"/>s stored in the <see cref="T:DigitalRune.Graphics.TerrainLayer"/>. The
            material needs a render pass called "Base" to render into the
            <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.BaseClipmap"/> and a render pass called "Detail" to render into the
            <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailClipmap"/>. <see cref="T:DigitalRune.Graphics.TerrainLayer"/>s can have render passes
            for both, "Base" and "Detail".
            </para>
            <para>
            <strong>Clipmap data:</strong><br/>
            The content of the clipmaps depends on the used materials. The materials of the
            <see cref="T:DigitalRune.Graphics.TerrainLayer"/> material renders into the clipmap. The material of the
            <see cref="T:DigitalRune.Graphics.SceneGraph.TerrainNode"/> reads from the clipmap. These materials can be modified to store
            different data in the clipmaps.
            </para>
            <para>
            Per default, the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.BaseClipmap"/> consists of one 
            <see cref="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.HalfVector4"/> texture which stores:
            (absolute terrain height, world space normal x, world space normal z, hole flag)
            </para>
            <para>
            Per default, the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailClipmap"/> consists of three 
            <see cref="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Color"/> textures which store: 
            (world space detail normal x, world space detail normal z, specular power, hole flag),
            (diffuse R, diffuse B, diffuse B, -), (specular intensity, height, -, -)
            </para>
            <para>
            <strong>Render Target and Viewport:</strong><br/>
            This renderer changes the current render target of the graphics device because it uses the 
            graphics device to render into the clipmap render targets. The render target
            and the viewport of the graphics device are undefined after rendering.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.TerrainClipmapRenderer.RasterizerStateCullNoneWithScissorTest">
            <summary>
            Rasterizer state without culling and with enabled scissor test.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.Rendering.TerrainClipmapRenderer.BlendStateAlphaBlendRgb">
            <summary>
            Blend state with RGB alpha blending but no change to the alpha channel.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.TerrainClipmapRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.TerrainClipmapRenderer"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The current graphics profile is Reach.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.TerrainClipmapRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.TerrainClipmapRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.TerrainClipmapRenderer.GetScreenSpaceRectangle(DigitalRune.Graphics.TerrainClipmap,System.Int32)">
            <summary>
            Gets the screen space rectangle of the given clipmap level.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.TerrainClipmapRenderer.InitializeClipmapTextures(Microsoft.Xna.Framework.Graphics.GraphicsDevice,DigitalRune.Graphics.TerrainClipmap)">
            <summary>
            Initializes TerrainClipmap.Textures (and also updates TerrainClipmap.UseIncrementalUpdate).
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="clipmap">The clipmap.</param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.TerrainClipmapRenderer.GetClipmapSize(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Computes the width and height of the whole clipmap.
            </summary>
            <exception cref="T:DigitalRune.Graphics.GraphicsException">
            Invalid clipmap layout. The number of levels or number of cells per level is too large.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.TerrainRenderer">
            <summary>
            Renders <see cref="T:DigitalRune.Graphics.SceneGraph.TerrainNode"/>s.
            </summary>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Graphics.Rendering.TerrainRenderer"/> renders <see cref="T:DigitalRune.Graphics.SceneGraph.TerrainNode"/> using the
            <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.Material"/> of the node. The default material uses clipmaps
            (<see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.BaseClipmap"/> and <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailClipmap"/>). The
            clipmaps are created by the <see cref="T:DigitalRune.Graphics.Rendering.TerrainClipmapRenderer"/> - not by the
            <see cref="T:DigitalRune.Graphics.Rendering.TerrainRenderer"/>!
            </para>
            <para>
            Each terrain node is rendered using an internal static geo-clipmap mesh. The mesh is
            represented by the class <see cref="T:DigitalRune.Graphics.Rendering.TerrainRendererMesh"/>. An instance of
            <see cref="T:DigitalRune.Graphics.Rendering.TerrainRendererMesh"/> is created automatically when needed and cached internally.
            However, the creation of the mesh can take up to several seconds. Therefore it is recommended
            to build the mesh offline and store the instance as a file using
            <see cref="M:DigitalRune.Graphics.Rendering.TerrainRendererMesh.Save(System.IO.Stream)"/>. At runtime, the pre-built mesh can be loaded using
            <see cref="M:DigitalRune.Graphics.Rendering.TerrainRendererMesh.Load(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.IO.Stream)"/> and passed to the <see cref="T:DigitalRune.Graphics.Rendering.TerrainRenderer"/> using
            <see cref="M:DigitalRune.Graphics.Rendering.TerrainRenderer.SetMesh(DigitalRune.Graphics.Rendering.TerrainRendererMesh)"/>.
            </para>
            <para>
            The mesh needs to match the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.BaseClipmap"/> of the
            <see cref="T:DigitalRune.Graphics.SceneGraph.TerrainNode"/>. The properties <see cref="P:DigitalRune.Graphics.TerrainClipmap.NumberOfLevels"/> and
            <see cref="P:DigitalRune.Graphics.TerrainClipmap.CellsPerLevel"/> determine the size of the mesh. The terrain
            renderer automatically creates and caches one internal mesh for each configuration it
            encounters.
            </para>
            <para>
            <strong>Wire frame rendering:</strong><br/>
            <see cref="P:DigitalRune.Graphics.Rendering.TerrainRenderer.DrawWireFrame"/> can be set to render the wire frame of the terrain for debugging.
            This works only if the material of the terrain node provides a render pass "WireFrame".
            </para>
            <para>
            <strong>Render Target and Viewport:</strong><br/>
            This renderer renders into the current render target and viewport of the graphics device.
            </para>
            <para>
            <strong>Disposing:</strong><br/>
            The internally stored <see cref="T:DigitalRune.Graphics.Rendering.TerrainRendererMesh"/> instances are disposed when the
            <see cref="T:DigitalRune.Graphics.Rendering.TerrainRenderer"/> is disposed!
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.TerrainRenderer.DrawWireFrame">
            <summary>
            Gets or sets a value indicating whether the wire frame of the terrain should be rendered for
            debugging.
            </summary>
            <value>
            <see langword="true"/> to render the terrain wire frame; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            See <see cref="T:DigitalRune.Graphics.Rendering.TerrainRenderer"/> for more details.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.TerrainRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.TerrainRenderer"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The current graphics profile is Reach.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.TerrainRenderer.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.TerrainRenderer.ClearMeshes(System.Boolean)">
            <summary>
            Clears the internally stored <see cref="T:DigitalRune.Graphics.Rendering.TerrainRendererMesh"/>es.
            </summary>
            <param name="dispose">
            If set to <see langword="true" /> the internally stored meshes are disposed.
            If set to <see langword="false"/> the references to the meshes are removed but the meshes
            are not disposed.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.TerrainRenderer.SetMesh(DigitalRune.Graphics.Rendering.TerrainRendererMesh)">
            <summary>
            Adds a new <see cref="T:DigitalRune.Graphics.Rendering.TerrainRendererMesh"/>.
            </summary>
            <param name="mesh">The terrain mesh.</param>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Graphics.Rendering.TerrainRenderer"/> takes ownership of the <see cref="T:DigitalRune.Graphics.Rendering.TerrainRendererMesh"/>
            instance. When the <see cref="T:DigitalRune.Graphics.Rendering.TerrainRenderer"/> is disposed of, all internally stored
            <see cref="T:DigitalRune.Graphics.Rendering.TerrainRendererMesh"/>es are disposed of.
            </para>
            <para>
            If the terrain renderer already has a mesh with the same settings
            (<see cref="P:DigitalRune.Graphics.Rendering.TerrainRendererMesh.NumberOfLevels"/> and
            <see cref="P:DigitalRune.Graphics.Rendering.TerrainRendererMesh.CellsPerLevel"/>), the old mesh is disposed of and replaced.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="mesh"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.TerrainRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.TerrainRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.TerrainRendererMesh">
            <summary>
            Represents the mesh that is used by the <see cref="T:DigitalRune.Graphics.Rendering.TerrainRenderer"/>.
            </summary>
            <remarks>
            <para>
            This object stores mesh data which is used by the <see cref="T:DigitalRune.Graphics.Rendering.TerrainRenderer"/>. The mesh data
            is internal. The mesh data represents a geo-clipmap mesh. The mesh is defined by
            <see cref="P:DigitalRune.Graphics.Rendering.TerrainRendererMesh.NumberOfLevels"/> and <see cref="P:DigitalRune.Graphics.Rendering.TerrainRendererMesh.CellsPerLevel"/>. These parameters should match
            the resolution of the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.BaseClipmap"/> of the rendered
            <see cref="T:DigitalRune.Graphics.SceneGraph.TerrainNode"/>.
            </para>
            <para>
            This mesh is automatically created by the <see cref="T:DigitalRune.Graphics.Rendering.TerrainRenderer"/> when needed. However,
            the creation of the mesh can take up to several seconds. Therefore, it is possible to save the
            mesh to a file (see <see cref="M:DigitalRune.Graphics.Rendering.TerrainRendererMesh.Save(System.IO.Stream)"/>) and then load this file the next time (see
            <see cref="M:DigitalRune.Graphics.Rendering.TerrainRendererMesh.Load(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.IO.Stream)"/>). <see cref="M:DigitalRune.Graphics.Rendering.TerrainRenderer.SetMesh(DigitalRune.Graphics.Rendering.TerrainRendererMesh)"/> must be called to tell the 
            <see cref="T:DigitalRune.Graphics.Rendering.TerrainRenderer"/> to use a manually loaded mesh.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.TerrainRendererMesh.IsDisposed">
            <summary>
            Gets a value indicating whether this instance has been disposed of.
            </summary>
            <value>
            <see langword="true"/> if this instance has been disposed of; otherwise,
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.TerrainRendererMesh.CellsPerLevel">
            <summary>
            Gets the number of cells (texels) per clipmap level.
            </summary>
            <value>The number of cells (texels) per clipmap level.</value>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.TerrainRendererMesh.NumberOfLevels">
            <summary>
            Gets the number of clipmap levels.
            </summary>
            <value>The number of clipmap levels.</value>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.TerrainRendererMesh.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.TerrainRendererMesh"/> class.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="numberOfLevels">The number of levels.</param>
            <param name="cellsPerLevel">The number of cells per level.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="numberOfLevels"/> or <paramref name="cellsPerLevel"/> is less than 1.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.TerrainRendererMesh.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.TerrainRendererMesh.CreateGeoClipmapMesh(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a geo-clipmap mesh for terrain rendering.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="numberOfLevels">The number of levels of detail.</param>
            <param name="cellsPerLevel">The width per level in cells.</param>
            <param name="useDiamondTessellation">
            If set to <see langword="true"/> the cells are tessellated using a additional vertices in
            the cell center. If set to <see langword="false"/>, each cell is represented by max. 2
            triangles.
            </param>
            <returns>The generated submesh.</returns>
            <remarks>
            The resulting mesh is similar to a grid with multiple levels of detail. The highest level of
            detail is in the center.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="cellsPerLevel"/> is less than 1.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.TerrainRendererMesh.Load(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.IO.Stream)">
            <summary>
            Loads a <see cref="T:DigitalRune.Graphics.Rendering.TerrainRendererMesh"/> from the specified stream.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="stream">The stream.</param>
            <returns>
            The <see cref="T:DigitalRune.Graphics.Rendering.TerrainRendererMesh"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/> or <paramref name="stream"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.TerrainRendererMesh.Save(System.IO.Stream)">
            <summary>
            Writes the mesh data to the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.OceanFft">
            <summary>
            Performs a Fast Fourier Transform (FFT) on the source image.
            </summary>
            <remarks>
            This class performs forward or inverse FFT. This could be reused for general, 
            water-independent FFT problems. However, in the last pass it combines the iFFT results as
            needed for the ocean waves. This step will be different in other applications of FFT.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.OceanFft.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.OceanFft"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.OceanFft.Dispose">
            <summary>
            Releases all resources used by an instance of the <see cref="T:DigitalRune.Graphics.Rendering.OceanFft"/> class.
            </summary>
            <remarks>
            This method calls the virtual <see cref="M:DigitalRune.Graphics.Rendering.OceanFft.Dispose(System.Boolean)"/> method, passing in 
            <see langword="true"/>, and then suppresses finalization of the instance.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.OceanFft.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.Rendering.OceanFft"/> class
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources;
            <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.ProjectedGridParameters">
            <summary>
            Defines settings for a projected grid.
            </summary>
            <remarks>
            A projected grid is a grid defined in screen space. It is projected into the world to draw
            objects, like an infinite ocean, with high resolution near the camera and low resolution in
            the distance.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.ProjectedGridParameters.Width">
            <summary>
            Gets or sets the horizontal resolution of the grid.
            </summary>
            <value>The horizontal resolution of the grid (number of cells).</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is 0 or negative.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.ProjectedGridParameters.Height">
            <summary>
            Gets or sets the vertical resolution of the grid.
            </summary>
            <value>The vertical resolution of the grid (number of cells).</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is 0 or negative.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.ProjectedGridParameters.Offset">
            <summary>
            Gets or sets the camera offset.
            </summary>
            <value>The camera offset. Must be a positive value.</value>
            <remarks>
            This offset is used to move the camera which projects the grid behind the player camera.
            This will cause part of the grid to be outside of the player camera's field of view. This
            additional border is needed when the grid points are displaced using a displacement map.
            Without the camera offset, the grid edge could be visible in the player's field of view.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.ProjectedGridParameters.EdgeAttenuation">
            <summary>
            Gets or sets the edge attenuation.
            </summary>
            <value>The edge attenuation in [0, 1] relative to the whole projected grid.</value>
            <remarks>
            <para>
            If the projected grid is displaced in world space, the displacement fades out near the
            borders of the projected grid. This helps to hide any artifacts which could occur near
            the grid borders (e.g. the grid border being displaced into the visible field of view).
            </para>
            <para>
            An <see cref="P:DigitalRune.Graphics.Rendering.ProjectedGridParameters.EdgeAttenuation"/> of 0.01 means that the displacement fades out in the outer
            1 % of the grid.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.ProjectedGridParameters.DistanceAttenuationStart">
            <summary>
            Gets or sets the start distance for distance-based attenuation.
            </summary>
            <value>The start distance for distance-based attenuation. In world space units.</value>
            <remarks>
            The projected grid might cause aliasing in the distance. To avoid artifacts, any grid
            displacement should be faded out. <see cref="P:DigitalRune.Graphics.Rendering.ProjectedGridParameters.DistanceAttenuationStart"/> defines the world
            space distance from the camera where the fade out starts.
            <see cref="P:DigitalRune.Graphics.Rendering.ProjectedGridParameters.DistanceAttenuationEnd"/> defines the distance beyond which all displacement is
            disabled.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.ProjectedGridParameters.DistanceAttenuationEnd">
            <summary>
            Gets or sets the end distance for distance-based attenuation.
            </summary>
            <value>The end distance for distance-based attenuation. In world space units.</value>
            <inheritdoc cref="P:DigitalRune.Graphics.Rendering.ProjectedGridParameters.DistanceAttenuationStart"/>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.WaterRenderer">
            <summary>
            Renders <see cref="T:DigitalRune.Graphics.SceneGraph.WaterNode"/>s.
            </summary>
            <remarks>
            <para>
            Water is rendered using a refraction effect. Therefore, the renderer needs a texture which
            contains the current scene. This texture should be set in
            <see cref="P:DigitalRune.Graphics.RenderContext.SourceTexture">RenderContext.SourceTexture</see>. If no such texture
            is provided, the renderer uses the current render target, sets a new
            <see cref="P:DigitalRune.Graphics.RenderContext.RenderTarget">RenderContext.RenderTarget</see> and restores the depth
            buffer.
            </para>
            <para>
            Currently, vertex displacement from <see cref="T:DigitalRune.Graphics.WaterWaves"/> and water flow from
            <see cref="T:DigitalRune.Graphics.WaterFlow"/> are mutually exclusive. Only one of those effects is rendered.
            </para>
            <para>
            If the <see cref="T:DigitalRune.Graphics.SceneGraph.WaterNode"/> represents an infinite plane with waves, the renderer uses a
            "projected grid" to render the water surface. The grid parameters can be changed in 
            <see cref="P:DigitalRune.Graphics.Rendering.WaterRenderer.ProjectedGridParameters"/>.
            </para>
            <para>
            <strong>Render Target and Viewport:</strong><br/>
            This renderer renders into the current render target and viewport of the graphics device.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.Rendering.WaterRenderer.ProjectedGridParameters">
            <summary>
            Gets the projected grid parameters.
            </summary>
            <value>The projected grid parameters.</value>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.WaterRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.WaterRenderer"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The current graphics profile is Reach.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.WaterRenderer.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.WaterRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.WaterRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.Rendering.WaterWavesRenderer">
            <summary>
            Generates the <see cref="T:DigitalRune.Graphics.OceanWaves"/> for <see cref="T:DigitalRune.Graphics.SceneGraph.WaterNode"/>s.
            </summary>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Graphics.Rendering.WaterWavesRenderer"/> is a <see cref="T:DigitalRune.Graphics.Rendering.SceneNodeRenderer"/> that handles
            <see cref="T:DigitalRune.Graphics.SceneGraph.WaterNode"/>s. If a <see cref="T:DigitalRune.Graphics.SceneGraph.WaterNode"/> uses <see cref="T:DigitalRune.Graphics.OceanWaves"/>, the
            renderer creates the wave textures and stores the result in the properties
            <see cref="P:DigitalRune.Graphics.WaterWaves.DisplacementMap"/> and <see cref="P:DigitalRune.Graphics.WaterWaves.NormalMap"/>.
            </para>
            <para>
            <strong>Render Target and Viewport:</strong><br/>
            This renderer changes the current render target of the graphics device because it uses the 
            graphics device to render the wave maps into internal render targets. The render target and
            the viewport of the graphics device are undefined after rendering.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.WaterWavesRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.CloudMapRenderer"/> class.
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.WaterWavesRenderer.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.WaterWavesRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.Rendering.WaterWavesRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.TerrainLayerVertex">
            <summary>
            Describes a custom vertex format structure for terrain clipmap rendering.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.TerrainLayerVertex.VertexDeclaration">
            <summary>
            The vertex declaration.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.TerrainLayerVertex.Position">
            <summary>
            The vertex position.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.TerrainLayerVertex.TextureCoordinate">
            <summary>
            The texture coordinates.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainLayerVertex.SizeInBytes">
            <summary>
            Gets the size of the <see cref="T:DigitalRune.Graphics.TerrainVertex"/> structure in bytes.
            </summary>
            <value>The size of the vertex in bytes.</value>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainLayerVertex.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TerrainLayerVertex" /> structure.
            </summary>
            <param name="position">The position of the vertex.</param>
            <param name="textureCoordinate">The texture coordinates.</param>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainLayerVertex.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> and this instance are the same type and 
            represent the same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainLayerVertex.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainLayerVertex.Microsoft#Xna#Framework#Graphics#IVertexType#VertexDeclaration">
            <summary>
            Gets the vertex declaration.
            </summary>
            <value>The vertex declaration.</value>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainLayerVertex.op_Equality(DigitalRune.Graphics.TerrainLayerVertex,DigitalRune.Graphics.TerrainLayerVertex)">
            <summary>
            Compares two objects to determine whether they are the same.
            </summary>
            <param name="left">Object to the left of the equality operator.</param>
            <param name="right">Object to the right of the equality operator.</param>
            <returns>
            <see langword="true"/> if the objects are the same; <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainLayerVertex.op_Inequality(DigitalRune.Graphics.TerrainLayerVertex,DigitalRune.Graphics.TerrainLayerVertex)">
            <summary>
            Compares two objects to determine whether they are different.
            </summary>
            <param name="left">Object to the left of the inequality operator.</param>
            <param name="right">Object to the right of the inequality operator.</param>
            <returns>
            <see langword="true"/> if the objects are different; <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainLayerVertex.ToString">
            <summary>
            Retrieves a string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.TerrainVertex">
            <summary>
            Describes a custom vertex format structure for terrain rendering.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.TerrainVertex.VertexDeclaration">
            <summary>
            The vertex declaration.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.TerrainVertex.Position">
            <summary>
            The vertex position.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainVertex.SizeInBytes">
            <summary>
            Gets the size of the <see cref="T:DigitalRune.Graphics.TerrainVertex"/> structure in bytes.
            </summary>
            <value>The size of the vertex in bytes.</value>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainVertex.#ctor(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TerrainVertex"/> struct.
            </summary>
            <param name="position">The position of the vertex.</param>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainVertex.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> and this instance are the same type and 
            represent the same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainVertex.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="P:DigitalRune.Graphics.TerrainVertex.Microsoft#Xna#Framework#Graphics#IVertexType#VertexDeclaration">
            <summary>
            Gets the vertex declaration.
            </summary>
            <value>The vertex declaration.</value>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainVertex.op_Equality(DigitalRune.Graphics.TerrainVertex,DigitalRune.Graphics.TerrainVertex)">
            <summary>
            Compares two objects to determine whether they are the same.
            </summary>
            <param name="left">Object to the left of the equality operator.</param>
            <param name="right">Object to the right of the equality operator.</param>
            <returns>
            <see langword="true"/> if the objects are the same; <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainVertex.op_Inequality(DigitalRune.Graphics.TerrainVertex,DigitalRune.Graphics.TerrainVertex)">
            <summary>
            Compares two objects to determine whether they are different.
            </summary>
            <param name="left">Object to the left of the inequality operator.</param>
            <param name="right">Object to the right of the inequality operator.</param>
            <returns>
            <see langword="true"/> if the objects are different; <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.TerrainVertex.ToString">
            <summary>
            Retrieves a string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.BillboardNode">
            <summary>
            Represents a billboard in a 3D scene.
            </summary>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Graphics.SceneGraph.BillboardNode"/> positions a <see cref="P:DigitalRune.Graphics.SceneGraph.BillboardNode.Billboard"/> in a 3D scene. The 
            orientation is defined by the <see cref="T:DigitalRune.Graphics.Billboard"/> object - see property 
            <see cref="P:DigitalRune.Graphics.Billboard.Orientation"/>.
            </para>
            <para>
            <strong>Cloning:</strong> When a <see cref="T:DigitalRune.Graphics.SceneGraph.BillboardNode"/> is cloned the 
            <see cref="P:DigitalRune.Graphics.SceneGraph.BillboardNode.Billboard"/> is not duplicated. The <see cref="P:DigitalRune.Graphics.SceneGraph.BillboardNode.Billboard"/> is copied by reference 
            (shallow copy). The original <see cref="T:DigitalRune.Graphics.SceneGraph.BillboardNode"/> and the cloned instance will 
            reference the same <see cref="T:DigitalRune.Graphics.Billboard"/> object.
            </para>
            </remarks>
            <seealso cref="T:DigitalRune.Graphics.Billboard"/>
            <seealso cref="T:DigitalRune.Graphics.ImageBillboard"/>
            <seealso cref="T:DigitalRune.Graphics.TextBillboard"/>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.BillboardNode.Billboard">
            <summary>
            Gets or sets the billboard.
            </summary>
            <value>The billboard.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.BillboardNode.Color">
            <summary>
            Gets or sets the tint color of the billboard instance.
            </summary>
            <value>The tint color (non-premultiplied). The default value is white (1, 1, 1).</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.BillboardNode.Alpha">
            <summary>
            Gets or sets the opacity of the billboard instance.
            </summary>
            <value>The opacity. The default value is 1 (opaque).</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.BillboardNode.AnimationTime">
            <summary>
            Gets or sets the normalized animation time. (Overrides the animation time of an 
            <see cref="T:DigitalRune.Graphics.ImageBillboard"/>.)
            </summary>
            <value>
            The normalized animation time where 0 marks the start of the animation and 1 marks the end 
            of the animation. <see cref="F:System.Single.NaN"/> can be set to use the value set in the
            <see cref="T:DigitalRune.Graphics.ImageBillboard"/>; otherwise, the property overrides the value set in the
            <see cref="T:DigitalRune.Graphics.ImageBillboard"/>. The default value is <see cref="F:System.Single.NaN"/>.
            </value>
            <remarks>
            The <see cref="P:DigitalRune.Graphics.ImageBillboard.Texture"/> can contain multiple animation frames. The 
            normalized animation time determines the current frame. (See <see cref="T:DigitalRune.Graphics.PackedTexture"/> 
            for more information.)
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative or greater than 1.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.BillboardNode.Normal">
            <summary>
            Gets the normal vector of the billboard in world space.
            </summary>
            <value>The normal vector of the billboard in world space.</value>
            <remarks>
            The normal vector is the defined by the z-axis (0, 0, 1) in local space.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.BillboardNode.Axis">
            <summary>
            Gets the axis vector of the billboard in world space.
            </summary>
            <value>The axis vector of the billboard in world space.</value>
            <remarks>
            The axis vector is the up direction (0, 1, 0) in local space.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.BillboardNode.#ctor(DigitalRune.Graphics.Billboard)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.BillboardNode" /> class.
            </summary>
            <param name="billboard">The billboard.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="billboard"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.BillboardNode.Clone">
            <inheritdoc cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.Clone"/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.BillboardNode.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.BillboardNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.CameraNode">
            <summary>
            Represents a camera in a scene.
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Graphics.SceneGraph.CameraNode"/> positions a <see cref="P:DigitalRune.Graphics.SceneGraph.CameraNode.Camera"/> object in a 3D scene. The 
            <see cref="T:DigitalRune.Graphics.SceneGraph.CameraNode"/> defines the view transformation, whereas the <see cref="P:DigitalRune.Graphics.SceneGraph.CameraNode.Camera"/> 
            object defines the projection transformation and imaging properties. Multiple 
            <see cref="T:DigitalRune.Graphics.SceneGraph.CameraNode"/>s can share the same <see cref="P:DigitalRune.Graphics.SceneGraph.CameraNode.Camera"/> object. 
            </para>
            <para>
            The view transformation is defined by the following properties: 
            <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.PoseLocal"/>, <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.PoseWorld"/>, <see cref="P:DigitalRune.Graphics.SceneGraph.CameraNode.View"/>, or
            <see cref="P:DigitalRune.Graphics.SceneGraph.CameraNode.ViewInverse"/>. A new view transformation can be set in several ways:
            <list type="bullet">
            <item>
            <description>
            By setting the property <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.PoseLocal"/> to define a position and orientation
            in a scene relative to a parent node.
            </description>
            </item>
            <item>
            <description>
            By setting the property <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.PoseWorld"/> to define an absolute position and 
            orientation in world space.
            </description>
            </item>
            <item>
            <description>
            By setting the property <see cref="P:DigitalRune.Graphics.SceneGraph.CameraNode.View"/> or <see cref="P:DigitalRune.Graphics.SceneGraph.CameraNode.ViewInverse"/> which sets the
            absolute transformation in world space.
            </description>
            </item>
            <item>
            <description>
            By calling the method <see cref="M:DigitalRune.Graphics.SceneGraph.SceneHelper.LookAt(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)"/>.
            </description>
            </item>
            </list>
            </para>
            <para>
            <strong>View Space (View Coordinate System):</strong> View space is the local coordinate 
            system of a camera. In view space x-axis points to the right, the y-axis points up, and the 
            z-axis points towards the viewer.
            </para>
            <para>
            <strong>View-Dependent Information:</strong> In special cases other objects need to store 
            information which is only valid for a certain view. This data can be stored in the 
            <see cref="P:DigitalRune.Graphics.SceneGraph.CameraNode.ViewDependentData"/> dictionary. The method 
            <see cref="M:DigitalRune.Graphics.SceneGraph.CameraNode.InvalidateViewDependentData"/> can be called to reset any data in the dictionary.
            This is necessary when there is an abrupt change ("cut") in the scene.
            </para>
            <para>
            <strong>Cloning:</strong> When a <see cref="T:DigitalRune.Graphics.SceneGraph.CameraNode"/> is cloned the 
            <see cref="P:DigitalRune.Graphics.SceneGraph.CameraNode.Camera"/> is not duplicated. The <see cref="P:DigitalRune.Graphics.SceneGraph.CameraNode.Camera"/> is copied by reference 
            (shallow copy). The original <see cref="T:DigitalRune.Graphics.SceneGraph.CameraNode"/> and the cloned 
            <see cref="T:DigitalRune.Graphics.SceneGraph.CameraNode"/> will reference the same <see cref="T:DigitalRune.Graphics.Camera"/> object.
            </para>
            </remarks>
            <seealso cref="T:DigitalRune.Graphics.Camera"/>
        </member>
        <member name="F:DigitalRune.Graphics.SceneGraph.CameraNode.Instances">
            <summary>A (weak) list of all camera nodes.</summary>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.CameraNode.Camera">
            <summary>
            Gets or sets the camera.
            </summary>
            <value>The camera.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.CameraNode.LodBias">
            <summary>
            Gets or sets the LOD bias of the camera.
            </summary>
            <value>The camera's LOD bias in the range [0, ∞[. The default value is 1.</value>
            <inheritdoc cref="P:DigitalRune.Graphics.RenderContext.LodBias"/>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.CameraNode.View">
            <summary>
            Gets or sets the view matrix.
            </summary>
            <value>
            The view transformation in world space. The default value is 
            <see cref="F:DigitalRune.Mathematics.Algebra.Matrix44F.Identity"/>.
            </value>
            <remarks>
            Setting <see cref="P:DigitalRune.Graphics.SceneGraph.CameraNode.View"/> automatically updates <see cref="P:DigitalRune.Graphics.SceneGraph.CameraNode.ViewInverse"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.CameraNode.ViewInverse">
            <summary>
            Gets or sets the inverse of the view matrix.
            </summary>
            <value>
            The inverse view transformation in world space. The default value is 
            <see cref="F:DigitalRune.Mathematics.Algebra.Matrix44F.Identity"/>.
            </value>
            <remarks>
            Setting <see cref="P:DigitalRune.Graphics.SceneGraph.CameraNode.ViewInverse"/> automatically updates <see cref="P:DigitalRune.Graphics.SceneGraph.CameraNode.View"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.CameraNode.ViewDependentData">
            <summary>
            Gets a dictionary that can be used to store view-dependent information.
            </summary>
            <value>The dictionary that stores view-dependent information.</value>
            <remarks>
            <para>
            The <see cref="P:DigitalRune.Graphics.SceneGraph.CameraNode.ViewDependentData"/> dictionary can be used to store view-dependent 
            information with the camera node.
            </para>
            <para>
            When there is an abrupt change ("cut") in the scene the method 
            <see cref="M:DigitalRune.Graphics.SceneGraph.CameraNode.InvalidateViewDependentData"/> needs to be called to reset any view-dependent 
            information. For example, this can be necessary when a new level is loaded or the view 
            changes significantly from one frame to the next. This method disposes any data in the
            <see cref="P:DigitalRune.Graphics.SceneGraph.CameraNode.ViewDependentData"/> dictionary that implements the interface 
            <see cref="T:System.IDisposable"/>.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.CameraNode.#ctor(DigitalRune.Graphics.Camera)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.CameraNode"/> class.
            </summary>
            <param name="camera">The camera.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="camera"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.CameraNode.Dispose(System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.CameraNode.Clone">
            <inheritdoc cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.Clone"/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.CameraNode.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.CameraNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.CameraNode.GetInstances">
            <summary>
            Gets a read-only collection of all camera node instances.
            </summary>
            <returns>A read-only collection of all camera node instances.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.CameraNode.UpdateView">
            <summary>
            Updates <see cref="P:DigitalRune.Graphics.SceneGraph.CameraNode.View"/> and <see cref="P:DigitalRune.Graphics.SceneGraph.CameraNode.ViewInverse"/> when the <see cref="T:DigitalRune.Geometry.Pose"/> has 
            changed.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.CameraNode.InvalidateViewDependentData">
            <summary>
            Resets any view-dependent information in the <see cref="P:DigitalRune.Graphics.SceneGraph.CameraNode.ViewDependentData"/> dictionary.
            </summary>
            <inheritdoc cref="P:DigitalRune.Graphics.SceneGraph.CameraNode.ViewDependentData"/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.CameraNode.InvalidateViewDependentData(System.Object)">
            <summary>
            Invalidates the view-dependent data of the specified object in all <see cref="T:DigitalRune.Graphics.SceneGraph.CameraNode"/>
            instances.
            </summary>
            <param name="key">
            The key that identifies the view-dependent information - usually the scene node that owns 
            data.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.CameraNode.RemoveViewDependentData(System.Object)">
            <summary>
            Removes the view-dependent information of the specified object from all 
            <see cref="T:DigitalRune.Graphics.SceneGraph.CameraNode"/> instances.
            </summary>
            <param name="key">
            The key that identifies the view-dependent information - usually the scene node that owns 
            data.
            </param>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.AscendingFogNodeComparer">
            <summary>
            Sorts <see cref="T:DigitalRune.Graphics.SceneGraph.FogNode"/>s by their <see cref="P:DigitalRune.Graphics.SceneGraph.FogNode.Priority"/> and then by
            their <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.SortTag"/> in ascending order.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.AscendingFogNodeComparer.Compare(DigitalRune.Graphics.SceneGraph.FogNode,DigitalRune.Graphics.SceneGraph.FogNode)">
            <summary>
            Compares two <see cref="T:DigitalRune.Graphics.SceneGraph.FogNode"/>s.
            </summary>
            <param name="x">The first <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/> to compare.</param>
            <param name="y">The second <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/> to compare.</param>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Condition</description>
            </listheader>
            <item>
            <term>Less than zero</term>
            <description><paramref name="x"/> is less than <paramref name="y"/>.</description>
            </item>
            <item>
            <term>Zero</term>
            <description><paramref name="x"/> equals <paramref name="y"/>.</description>
            </item>
            <item>
            <term>Greater than zero</term>
            <description><paramref name="x"/> is greater than <paramref name="y"/>.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.AscendingLightNodeComparer">
            <summary>
            Sorts <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/>s by their <see cref="P:DigitalRune.Graphics.SceneGraph.LightNode.Priority"/> and then by
            their <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.SortTag"/> in ascending order.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.AscendingLightNodeComparer.Compare(DigitalRune.Graphics.SceneGraph.LightNode,DigitalRune.Graphics.SceneGraph.LightNode)">
            <summary>
            Compares two <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/>s.
            </summary>
            <param name="x">The first <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/> to compare.</param>
            <param name="y">The second <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/> to compare.</param>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Condition</description>
            </listheader>
            <item>
            <term>Less than zero</term>
            <description><paramref name="x"/> is less than <paramref name="y"/>.</description>
            </item>
            <item>
            <term>Zero</term>
            <description><paramref name="x"/> equals <paramref name="y"/>.</description>
            </item>
            <item>
            <term>Greater than zero</term>
            <description><paramref name="x"/> is greater than <paramref name="y"/>.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.AscendingNodeComparer">
            <summary>
            Sorts <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/>s by their <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.SortTag"/> in ascending
            order.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.AscendingNodeComparer.Compare(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.SceneGraph.SceneNode)">
            <summary>
            Compares two <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/>s.
            </summary>
            <param name="x">The first <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/> to compare.</param>
            <param name="y">The second <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/> to compare.</param>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Condition</description>
            </listheader>
            <item>
            <term>Less than zero</term>
            <description><paramref name="x"/> is less than <paramref name="y"/>.</description>
            </item>
            <item>
            <term>Zero</term>
            <description><paramref name="x"/> equals <paramref name="y"/>.</description>
            </item>
            <item>
            <term>Greater than zero</term>
            <description><paramref name="x"/> is greater than <paramref name="y"/>.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.DescendingFogNodeComparer">
            <summary>
            Sorts <see cref="T:DigitalRune.Graphics.SceneGraph.FogNode"/>s by their <see cref="P:DigitalRune.Graphics.SceneGraph.FogNode.Priority"/> and then by
            their <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.SortTag"/> in descending order.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.DescendingFogNodeComparer.Compare(DigitalRune.Graphics.SceneGraph.FogNode,DigitalRune.Graphics.SceneGraph.FogNode)">
            <summary>
            Compares two <see cref="T:DigitalRune.Graphics.SceneGraph.FogNode"/>s.
            </summary>
            <param name="x">The first <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/> to compare.</param>
            <param name="y">The second <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/> to compare.</param>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Condition</description>
            </listheader>
            <item>
            <term>Less than zero</term>
            <description><paramref name="x"/> is less than <paramref name="y"/>.</description>
            </item>
            <item>
            <term>Zero</term>
            <description><paramref name="x"/> equals <paramref name="y"/>.</description>
            </item>
            <item>
            <term>Greater than zero</term>
            <description><paramref name="x"/> is greater than <paramref name="y"/>.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.DescendingLightNodeComparer">
            <summary>
            Sorts <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/>s by their <see cref="P:DigitalRune.Graphics.SceneGraph.LightNode.Priority"/> and then by
            their <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.SortTag"/> in descending order.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.DescendingLightNodeComparer.Compare(DigitalRune.Graphics.SceneGraph.LightNode,DigitalRune.Graphics.SceneGraph.LightNode)">
            <summary>
            Compares two <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/>s.
            </summary>
            <param name="x">The first <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/> to compare.</param>
            <param name="y">The second <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/> to compare.</param>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Condition</description>
            </listheader>
            <item>
            <term>Less than zero</term>
            <description><paramref name="x"/> is less than <paramref name="y"/>.</description>
            </item>
            <item>
            <term>Zero</term>
            <description><paramref name="x"/> equals <paramref name="y"/>.</description>
            </item>
            <item>
            <term>Greater than zero</term>
            <description><paramref name="x"/> is greater than <paramref name="y"/>.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.DescendingNodeComparer">
            <summary>
            Sorts <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/>s by their <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.SortTag"/> in descending
            order.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.DescendingNodeComparer.Compare(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.SceneGraph.SceneNode)">
            <summary>
            Compares two <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/>s.
            </summary>
            <param name="x">The first <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/> to compare.</param>
            <param name="y">The second <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/> to compare.</param>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Condition</description>
            </listheader>
            <item>
            <term>Less than zero</term>
            <description><paramref name="x"/> is less than <paramref name="y"/>.</description>
            </item>
            <item>
            <term>Zero</term>
            <description><paramref name="x"/> equals <paramref name="y"/>.</description>
            </item>
            <item>
            <term>Greater than zero</term>
            <description><paramref name="x"/> is greater than <paramref name="y"/>.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.DecalNode">
            <summary>
            Represents a material projected onto another surface.
            </summary>
            <remarks>
            <para>
            A decal is a <see cref="P:DigitalRune.Graphics.SceneGraph.DecalNode.Material"/> projected onto other geometry. Static decals can be used 
            to add variety to a scene: posters on walls, dirt on objects, puddles on the floor, etc. 
            Dynamic decals are created by the game logic based on events in the game: bullet holes at a 
            point of impact, blood splatters, foot prints on the ground, tire marks on the street, etc.
            </para>
            <para>
            The visual properties are defined by a decal material (see <see cref="P:DigitalRune.Graphics.SceneGraph.DecalNode.Material"/>). Note that 
            it is not possible to use the same materials as used for regular meshes. Decals need to be 
            rendered with special vertex and pixel shaders and therefore require a different 
            <see cref="T:Microsoft.Xna.Framework.Graphics.Effect"/> than meshes.
            </para>
            <para>
            The properties <see cref="P:DigitalRune.Graphics.SceneGraph.DecalNode.Width"/>, <see cref="P:DigitalRune.Graphics.SceneGraph.DecalNode.Height"/> and <see cref="P:DigitalRune.Graphics.SceneGraph.DecalNode.Depth"/> define the 
            bounding volume of the decal. The decal material will be projected onto meshes within the 
            this bounding volume.
            </para>
            <para>
            <strong>Cloning:</strong> When a <see cref="T:DigitalRune.Graphics.SceneGraph.DecalNode"/> is cloned the <see cref="P:DigitalRune.Graphics.SceneGraph.DecalNode.Material"/> 
            is only copied by reference (shallow copy). The original decal node and the cloned decal node 
            will reference the same <see cref="T:DigitalRune.Graphics.Material"/>.
            </para>
            </remarks>
            <seealso cref="T:DigitalRune.Graphics.Material"/>
        </member>
        <member name="F:DigitalRune.Graphics.SceneGraph.DecalNode.DecalVolume.Instance">
            <summary>The decal projection volume.</summary>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.DecalNode.Width">
            <summary>
            Gets or sets the width of the decal.
            </summary>
            <value>The width of the decal.</value>
            <remarks>
            <para>
            The properties <see cref="P:DigitalRune.Graphics.SceneGraph.DecalNode.Width"/>, <see cref="P:DigitalRune.Graphics.SceneGraph.DecalNode.Height"/> and <see cref="P:DigitalRune.Graphics.SceneGraph.DecalNode.Depth"/> define the
            bounding volume of the decal. The decal material will be projected onto meshes within
            this bounding volume.
            </para>
            <para>
            Note: (<see cref="P:DigitalRune.Graphics.SceneGraph.DecalNode.Width"/>, <see cref="P:DigitalRune.Graphics.SceneGraph.DecalNode.Height"/>, <see cref="P:DigitalRune.Graphics.SceneGraph.DecalNode.Depth"/>) is the same as
            <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.ScaleLocal"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.DecalNode.Height">
            <summary>
            Gets or sets the height of the decal.
            </summary>
            <value>The height of the decal.</value>
            <inheritdoc cref="P:DigitalRune.Graphics.SceneGraph.DecalNode.Width"/>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.DecalNode.Depth">
            <summary>
            Gets or sets the depth of the decal.
            </summary>
            <value>The depth of the decal.</value>
            <inheritdoc cref="P:DigitalRune.Graphics.SceneGraph.DecalNode.Width"/>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.DecalNode.Options">
            <summary>
            Gets or sets the options for rendering the decal.
            </summary>
            <value>
            The options for rendering the decal. The default value is 
            <see cref="F:DigitalRune.Graphics.DecalOptions.ProjectOnAll"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.DecalNode.Material">
            <summary>
            Gets or sets the decal material.
            </summary>
            <value>The decal material.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.DecalNode.MaterialInstance">
            <summary>
            Gets the material instance.
            </summary>
            <value>The material instance.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.DecalNode.Alpha">
            <summary>
            Gets or sets the opacity of the decal.
            </summary>
            <value>The opacity of the decal. The default value is 1 (opaque).</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.DecalNode.DrawOrder">
            <summary>
            Gets or sets the draw order.
            </summary>
            <value>The draw order. The default value is 0.</value>
            <remarks>
            This property defines the order in which decals are drawn. Decals are drawn in ascending 
            order, i.e. decals with a higher value are drawn on top of decals with a lower value. The 
            draw order is only relevant when multiple decals overlap.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.DecalNode.NormalThreshold">
            <summary>
            Gets or sets the normal threshold in radians.
            </summary>
            <value>The normal threshold in radians. The default value is π/3 (= 60°).</value>
            <remarks>
            <para>
            When a decal is applied to an uneven surface, such as a corner, it may be stretched along the 
            sides. This can be prevented by setting a normal threshold: The renderer checks whether the 
            normal of the receiving surface is within a certain angle. If the normal deviates by more 
            than the normal threshold, the decal is clipped.
            </para>
            <para>
            The normal threshold needs to be in the range [0, π]. The default value is π/3
            (= 60°).
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative or greater than π.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.DecalNode.#ctor(DigitalRune.Graphics.Material)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.DecalNode"/> class.
            </summary>
            <param name="material">The decal material.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="material"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.DecalNode.Clone">
            <inheritdoc cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.Clone"/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.DecalNode.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.DecalNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.DecalNode.IsPassSupported(System.Int32)">
            <summary>
            Determines whether the decal node supports the specified render pass.
            </summary>
            <param name="passHash">The hash value of the render pass.</param>
            <returns>
            <see langword="true"/> if the decal node contains a material with the specified render pass; 
            otherwise, <see langword="false"/> if the decal node does not support the specified render 
            pass.
            </returns>
            <remarks>
            The method is used only internally as an optimization. Only the hash value is checked, 
            therefore the method may return a false positive!
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.FigureNode">
            <summary>
            Represents a drawing composed of lines and shapes rendered with a certain stroke and fill.
            </summary>
            <remarks>
            <para>
            2D shapes can be rendered using an outline and filled interior. The stroke properties (see 
            <see cref="P:DigitalRune.Graphics.SceneGraph.FigureNode.StrokeColor"/>, <see cref="P:DigitalRune.Graphics.SceneGraph.FigureNode.StrokeAlpha"/>, <see cref="P:DigitalRune.Graphics.SceneGraph.FigureNode.StrokeThickness"/> and 
            <see cref="P:DigitalRune.Graphics.SceneGraph.FigureNode.StrokeDashPattern"/>) define the line style used for the outline. If 
            <see cref="P:DigitalRune.Graphics.SceneGraph.FigureNode.StrokeAlpha"/> or the <see cref="P:DigitalRune.Graphics.SceneGraph.FigureNode.StrokeThickness"/> is 0, no outlines are rendered.
            The fill properties (see <see cref="P:DigitalRune.Graphics.SceneGraph.FigureNode.FillColor"/> and <see cref="P:DigitalRune.Graphics.SceneGraph.FigureNode.FillAlpha"/>) define the fill 
            color. If <see cref="P:DigitalRune.Graphics.SceneGraph.FigureNode.FillAlpha"/> is 0, the interior of the figure is not filled. Some shapes,
            like simple line segments, do not have an interior which can be filled and the fill properties
            are ignored.
            </para>
            <para>
            3D lines, even closed 3D curves, do not have an interior and are also not filled.
            </para>
            <para>
            If pose, scale, figure and other properties are constant, it is recommended to set the 
            <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.IsStatic"/> flag to <see langword="true"/>. If this flag is set, the 
            figure renderer can perform optimizations.
            </para>
            <para>
            <strong>Cloning:</strong> When a <see cref="T:DigitalRune.Graphics.SceneGraph.FigureNode"/> is cloned the <see cref="P:DigitalRune.Graphics.SceneGraph.FigureNode.Figure"/> 
            is not duplicated. The <see cref="P:DigitalRune.Graphics.SceneGraph.FigureNode.Figure"/> is copied by reference (shallow copy). The
            original <see cref="T:DigitalRune.Graphics.SceneGraph.FigureNode"/> and the cloned instance will reference the same 
            <see cref="P:DigitalRune.Graphics.SceneGraph.FigureNode.Figure"/>.
            </para>
            </remarks>
            <seealso cref="T:DigitalRune.Graphics.Figure"/>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.FigureNode.Figure">
            <summary>
            Gets or sets the drawing.
            </summary>
            <value>The drawing.</value>
            <remarks>
            See <see cref="T:DigitalRune.Graphics.Figure"/> for more information.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.FigureNode.StrokeColor">
            <summary>
            Gets or sets the stroke color.
            </summary>
            <value>The stroke color (non-premultiplied). The default value is white (1, 1, 1).</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.FigureNode.StrokeAlpha">
            <summary>
            Gets or sets the opacity of the stroked line.
            </summary>
            <value>The opacity of the stroked line. The default value is 1 (opaque).</value>
            <remarks>
            If this value is 0, no lines are not drawn.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.FigureNode.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness.
            </summary>
            <value>The stroke thickness.</value>
            <remarks>
            If this value is 0, no lines are drawn.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value is negative.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.FigureNode.StrokeDashPattern">
            <summary>
            Gets or sets the stroke dash pattern.
            </summary>
            <value>
            The dash pattern. The default value is (1, 0, 0, 0), which creates a solid line.
            </value>
            <remarks>
            <para>
            The dash pattern is defined as a 4 component vector: (dash, gap, dash, gap). The length of a
            dash or a gap is relative to the <see cref="P:DigitalRune.Graphics.SceneGraph.FigureNode.StrokeThickness"/>. For example, (5, 1, 1, 1)
            defines a dash pattern with a 5 unit dash, a 1 unit gap, a 1 unit dash followed by a 1 unit
            gap, then the pattern is repeated.
            </para>
            <para>
            To render a solid line, set the gap components to 0, e.g. (1, 0, 0, 0).
            </para>
            <para>
            The property <see cref="P:DigitalRune.Graphics.SceneGraph.FigureNode.DashInWorldSpace"/> determines if the dash/gap size is in pixels or
            in world space units and whether perspective foreshortening is applied.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.FigureNode.DashInWorldSpace">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:DigitalRune.Graphics.SceneGraph.FigureNode.StrokeDashPattern"/> is computed in
            world space or in screen space.
            </summary>
            <value>
            <see langword="true" /> if the dash pattern is computed in world space; otherwise, 
            <see langword="false" /> to compute the dash pattern in screen space.
            </value>
            <remarks>
            This property is only relevant if the line uses a <see cref="P:DigitalRune.Graphics.SceneGraph.FigureNode.StrokeDashPattern"/>.
            <para>
            If this value is <see langword="false"/>, the dash and gap size is computed in screen space.
            That means, the dash/gap size is given in pixels, and the dash size does not depend on the
            distance from the viewer.
            </para>
            <para>
            If this value is <see langword="true"/>, the dash and gap size is computed in world space.
            That means, the dash/gap size is relative to world space units, and the dash size is
            foreshortened: A dash near the camera is longer than a dash in the distance.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.FigureNode.FillColor">
            <summary>
            Gets or sets the fill color.
            </summary>
            <value>The fill color (non-premultiplied). The default value is white (1, 1, 1).</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.FigureNode.FillAlpha">
            <summary>
            Gets or sets the fill opacity.
            </summary>
            <value>The fill opacity. The default value is 1 (opaque).</value>
            <remarks>
            If this value is 0, the figure is not filled.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.FigureNode.DrawOrder">
            <summary>
            Gets or sets the draw order.
            </summary>
            <value>
            The draw order. The value must be in the range [0, 65535]. The default value is 0.
            </value>
            <remarks>
            This property defines the order in which <see cref="T:DigitalRune.Graphics.SceneGraph.FigureNode"/>s should be drawn.
            Nodes with a lower <see cref="P:DigitalRune.Graphics.SceneGraph.FigureNode.DrawOrder"/> should be drawn first. Nodes with a higher
            <see cref="P:DigitalRune.Graphics.SceneGraph.FigureNode.DrawOrder"/> should be drawn last. This means that usually nodes with a higher
            draw order cover nodes with a lower draw order.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.FigureNode.#ctor(DigitalRune.Graphics.Figure)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.FigureNode" /> class.
            </summary>
            <param name="figure">The figure.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="figure"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.FigureNode.Clone">
            <inheritdoc cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.Clone"/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.FigureNode.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.FigureNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.FigureNodeRenderData">
            <summary>
            Caches vertex buffer and index buffer for the figure.
            </summary>
            <remarks>
            <para>
            It makes sense to cache a vertex buffer if a figure node is static 
            (<see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.IsStatic"/>). The figure should also contain a lot of segments. In such
            a case, it is probable that the figure is not shared. We can store the pre-transformed data
            in a vertex buffer (e.g. world space positions, colors, dash pattern distances, etc.).
            </para>
            <para>
            <see cref="M:DigitalRune.Graphics.SceneGraph.FigureNodeRenderData.Dispose"/> can be called to reset the render data. The data will be automatically
            recreated by the figure renderer when needed.
            </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.FogNode">
            <summary>
            Represents (global) fog in a scene.
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Graphics.SceneGraph.FogNode"/> references a <see cref="P:DigitalRune.Graphics.SceneGraph.FogNode.Fog"/> instance, which is applied to objects 
            in the scene. Usually, there is only one <see cref="T:DigitalRune.Graphics.SceneGraph.FogNode"/> enabled in the scene; but it is
            possible to use several <see cref="T:DigitalRune.Graphics.SceneGraph.FogNode"/>s, e.g. to combine a height-based fog on the
            ground with a uniform fog in the distance.
            </para>
            <para>
            The default <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.Shape" /> is an <see cref="T:DigitalRune.Geometry.Shapes.InfiniteShape"/> which covers the
            whole game world. 
            </para>
            <para>
            For height-based fog (see <see cref="P:DigitalRune.Graphics.SceneGraph.FogNode.Fog"/>) the y position of the fog node defines the "base
            level" of the fog. The height fog effect moves up or down when the fog node is moved up or
            down.
            </para>
            <para>
            <strong>Cloning:</strong> When a <see cref="T:DigitalRune.Graphics.SceneGraph.FogNode"/> is cloned the <see cref="P:DigitalRune.Graphics.SceneGraph.FogNode.Fog"/> is not
            cloned. The <see cref="P:DigitalRune.Graphics.SceneGraph.FogNode.Fog"/> is copied by reference (shallow copy). The original 
            <see cref="T:DigitalRune.Graphics.SceneGraph.FogNode"/> and the cloned instance will reference the same 
            <see cref="T:DigitalRune.Graphics.Fog"/> object. 
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.FogNode.Fog">
            <summary>
            Gets or sets the fog properties.
            </summary>
            <value>The fog properties.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.FogNode.Priority">
            <summary>
            Gets or sets the priority.
            </summary>
            <value>The priority. The default value is 0.</value>
            <remarks>
            The priority can be used to define the order in which multiple fog nodes should be applied.
            Fog with a higher priority should be rendered last. If the rendering system cannot handle 
            an arbitrary number of fog nodes, fog nodes with a lower priority might be ignored by the 
            rendering system.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.FogNode.Shape">
            <summary>
            Gets or sets the bounding shape of this scene node.
            </summary>
            <value>
            The bounding shape. The bounding shape contains only the current node - it does not include 
            the bounds of the children! The default value is an 
            <see cref="F:DigitalRune.Geometry.Shapes.Shape.Infinite"/> shape.
            </value>
            <inheritdoc cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.Shape"/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.FogNode.#ctor(DigitalRune.Graphics.Fog)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.FogNode"/> class.
            </summary>
            <param name="fog">The fog properties.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fog"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.FogNode.Clone">
            <inheritdoc cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.Clone"/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.FogNode.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.FogNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.LodCollection">
            <summary>
            Stores the levels of detail (LODs) of an object.
            </summary>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection"/> is a list of scene nodes sorted by distance. Each scene node
            represents a <i>level of detail</i> (LOD). 
            </para>
            <para>
            <strong>LOD0, LOD1, ... LOD<i>n-1</i>:</strong><br/>
            LODs can be accessed by index. The LOD with index <i>i</i> is called LOD<i>i</i>. By 
            definition, LOD0 is the highest level of detail and LOD<i>n-1</i> is the lowest level of 
            detail.
            </para>
            <para>
            <strong>LOD Distances:</strong><br/>
            LODs are selected based on the current camera and the distance to the camera. The LOD
            distances stored in the <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection"/> are <i>view-normalized</i> distances,
            which means that distance values are corrected based on the camera's field-of-view. The
            resulting LOD distances are independent of the current field-of-view. See 
            <see cref="M:DigitalRune.Graphics.GraphicsHelper.GetViewNormalizedDistance(System.Single,DigitalRune.Mathematics.Algebra.Matrix44F)"/> for more information.
            </para>
            <para>
            The camera that serves as reference for LOD distance computations needs to be stored in the
            render context (see property <see cref="P:DigitalRune.Graphics.RenderContext.LodCameraNode"/>).
            </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.LodCollection.Enumerator">
            <summary>
            Enumerates the elements of a <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection"/>. 
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.LodCollection.Enumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The element in the collection at the current position of the enumerator.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.LodCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The element in the collection at the current position of the enumerator.</value>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last 
            element.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.Enumerator.#ctor(DigitalRune.Graphics.SceneGraph.LodCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection.Enumerator"/> struct.
            </summary>
            <param name="collection">The <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection"/> to be enumerated.</param>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.Enumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting 
            unmanaged resources.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <see langword="true"/> if the enumerator was successfully advanced to the next element; 
            <see langword="false"/> if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection"/> was modified after the enumerator was created.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.LodCollection.Count">
            <summary>
            Gets the number of LODs.
            </summary>
            <value>The number of LODs.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.LodCollection.System#Collections#Generic#ICollection{DigitalRune#Graphics#SceneGraph#LodEntry}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value>
            <see langword="true"/> if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.LodCollection.Item(System.Int32)">
            <summary>
            Gets the LOD at the specified index.
            </summary>
            <param name="index">The LOD index.</param>
            <value>The LOD at the specified index.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or equal to or greater than <see cref="P:DigitalRune.Graphics.SceneGraph.LodCollection.Count"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.#ctor(DigitalRune.Graphics.SceneGraph.LodGroupNode,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection" /> class.
            </summary>
            <param name="owner">The <see cref="T:DigitalRune.Graphics.SceneGraph.LodGroupNode" /> that owns this collection.</param>
            <param name="capacity">The initial capacity.</param>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.AttachNode(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <summary>
            Attaches a scene node to the <see cref="T:DigitalRune.Graphics.SceneGraph.LodGroupNode"/>.
            </summary>
            <param name="node">The scene node to be added.</param>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.DetachNode(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <summary>
            Detaches a scene node from the <see cref="T:DigitalRune.Graphics.SceneGraph.LodGroupNode"/>.
            </summary>
            <param name="node">The scene node to be removed.</param>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.SetProxy(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.SceneGraph.SceneNode)">
            <summary>
            Sets the specified <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/> as the <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.Proxy"/> in all 
            referenced nodes.
            </summary>
            <param name="referencedNode">The referenced node.</param>
            <param name="proxyNode">The proxy node.</param>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.OnLodSceneChanged(System.Object,DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs)">
            <summary>
            Called when the subtree of a LOD changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">
            The <see cref="T:DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.GetCameraNode(DigitalRune.Graphics.RenderContext)">
            <summary>
            Gets the camera node to use in LOD computations.
            </summary>
            <param name="context">The render context.</param>
            <returns>The camera node to use in LOD computations.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.GetLodData(DigitalRune.Graphics.SceneGraph.CameraNode)">
            <summary>
            Gets the view-dependent LOD data which is cached in the camera node.
            </summary>
            <param name="cameraNode">The camera node.</param>
            <returns>
            The view-dependent LOD data which is cached in the camera node.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.SelectLod(DigitalRune.Graphics.RenderContext,System.Single)">
            <summary>
            Gets the LOD or LOD transitions for the specified distance.
            </summary>
            <param name="context">The render context.</param>
            <param name="distance">The view-normalized distance (including any LOD bias).</param>
            <returns>
            An <see cref="T:DigitalRune.Graphics.SceneGraph.LodSelection" /> that describes the current LOD or LOD transition.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.Add(System.Single,DigitalRune.Graphics.SceneGraph.SceneNode)">
            <summary>
            Adds a LOD to the <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection"/>.
            </summary>
            <param name="distance">
            The distance at which the LOD will be visible. (Must be normalized - see 
            <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection"/>.)
            </param>
            <param name="node">
            The LOD node (a single scene node or subtree that represents the LOD).
            </param>
            <remarks>
            If a LOD at the same distance already exists in the <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection"/>, it will be
            overwritten.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="distance"/> is negative, infinite or NaN.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.Clear">
            <summary>
            Removes all LODs from the <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.IndexOf(System.Single)">
            <overloads>
            <summary>
            Determines the index of a specific LOD in the <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection"/>.
            </summary>
            </overloads>
            
            <summary>
            Determines the index of the LOD at a specific distance in the <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection"/>.
            </summary>
            <param name="distance">
            The LOD distance. (Must be normalized - see <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection"/>.)
            </param>
            <returns>
            The index of the LOD at the specified <paramref name="distance"/> if found in the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection"/>; otherwise, -1.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.IndexOf(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <summary>
            Determines the index of a specific LOD in the <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection"/>.
            </summary>
            <param name="node">
            The LOD node (a single scene node or subtree that represents the LOD).
            </param>
            <returns>
            The index of <paramref name="node"/> if found in the <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection"/>; 
            otherwise, -1.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.Remove(System.Int32)">
            <overloads>
            <summary>
            Removes a specific LOD from the <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection"/>.
            </summary>
            </overloads>
            
            <summary>
            Removes the LOD at the specified index from the <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection"/>.
            </summary>
            <param name="index">The index of the LOD to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in the <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.Remove(System.Single)">
            <summary>
            Removes the LOD at a specific distance from the <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection"/>.
            </summary>
            <param name="distance">
            The LOD distance. (Must be normalized - see <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection"/>.)
            </param>
            <returns>
            <see langword="true"/> if the LOD was found and removed; otherwise, <see langword="false"/> 
            if the LOD was not found in the <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.Remove(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <summary>
            Removes the specified LOD node from the <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection"/>.
            </summary>
            <param name="node">
            The LOD node (a single scene node or subtree that represents the LOD).
            </param>
            <returns>
            <see langword="true"/> if the LOD was found and removed; otherwise, <see langword="false"/> 
            if the LOD was not found in the <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.System#Collections#Generic#IEnumerable{DigitalRune#Graphics#SceneGraph#LodEntry}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.System#Collections#Generic#ICollection{DigitalRune#Graphics#SceneGraph#LodEntry}#Add(DigitalRune.Graphics.SceneGraph.LodEntry)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <see cref="P:DigitalRune.Graphics.SceneGraph.LodEntry.Distance"/> is negative, infinite or NaN.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <see cref="P:DigitalRune.Graphics.SceneGraph.LodEntry.Node"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.IndexOf(DigitalRune.Graphics.SceneGraph.LodEntry)">
            <summary>
            Determines the index of a specific LOD in the <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection"/>.
            </summary>
            <param name="lod">The LOD to locate.</param>
            <returns>
            The index of <paramref name="lod"/> if found in the <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection"/>; 
            otherwise, -1.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.System#Collections#Generic#ICollection{DigitalRune#Graphics#SceneGraph#LodEntry}#Contains(DigitalRune.Graphics.SceneGraph.LodEntry)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="item"/> is found in the 
            <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.System#Collections#Generic#ICollection{DigitalRune#Graphics#SceneGraph#LodEntry}#CopyTo(DigitalRune.Graphics.SceneGraph.LodEntry[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting 
            at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from 
            <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional. Or <paramref name="arrayIndex"/> is equal to 
            or greater than the length of <paramref name="array"/>. Or the number of elements in the 
            source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from 
            <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.System#Collections#Generic#ICollection{DigitalRune#Graphics#SceneGraph#LodEntry}#Remove(DigitalRune.Graphics.SceneGraph.LodEntry)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="item"/> was successfully removed from the 
            <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, <see langword="false"/>. This method also returns 
            <see langword="false"/> if <paramref name="item"/> is not found in the original 
            <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.LodData">
            <summary>
            Represents view-dependent LOD data which is stored per camera.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.LodEntry">
            <summary>
            Represents an entry in the <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection"/>.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.LodEntry.Distance">
            <summary>
            Gets or sets the LOD distance. (Needs to be normalized - see remarks.)
            </summary>
            <value>
            The LOD distance, which is the view-normalized distance at which the current LOD is
            displayed.
            </value>
            <remarks>
            The value stored in this property is a <i>view-normalized distance</i> as described here:
            <see cref="M:DigitalRune.Graphics.GraphicsHelper.GetViewNormalizedDistance(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.SceneGraph.CameraNode)"/>. The method
            <see cref="M:DigitalRune.Graphics.GraphicsHelper.GetViewNormalizedDistance(System.Single,DigitalRune.Mathematics.Algebra.Matrix44F)"/> can be used to
            convert a distance to a view-normalized distance. The resulting value is independent of the
            camera's field-of-view.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.LodEntry.Node">
            <summary>
            Gets or sets the LOD node.
            </summary>
            <value>
            The LOD node, which is a single scene node or subtree that represents the LOD.
            </value>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodEntry.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object" /> is equal to this instance;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodEntry.Equals(DigitalRune.Graphics.SceneGraph.LodEntry)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the <paramref name="other" />
            parameter; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodEntry.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures
            like a hash table. 
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodEntry.op_Equality(DigitalRune.Graphics.SceneGraph.LodEntry,DigitalRune.Graphics.SceneGraph.LodEntry)">
            <summary>
            Compares two <see cref="T:DigitalRune.Graphics.SceneGraph.LodEntry"/> instances to determine whether they are the same.
            </summary>
            <param name="left">The first <see cref="T:DigitalRune.Graphics.SceneGraph.LodEntry"/>.</param>
            <param name="right">The second <see cref="T:DigitalRune.Graphics.SceneGraph.LodEntry"/>.</param>
            <returns>
            <see langword="true"/> if the <paramref name="left"/> and <paramref name="right"/> are the 
            same; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodEntry.op_Inequality(DigitalRune.Graphics.SceneGraph.LodEntry,DigitalRune.Graphics.SceneGraph.LodEntry)">
            <summary>
            Compares two <see cref="T:DigitalRune.Graphics.SceneGraph.LodEntry"/> instances to determine whether they are different.
            </summary>
            <param name="left">The first <see cref="T:DigitalRune.Graphics.SceneGraph.LodEntry"/>.</param>
            <param name="right">The second <see cref="T:DigitalRune.Graphics.SceneGraph.LodEntry"/>.</param>
            <returns>
            <see langword="true"/> if the <paramref name="left"/> and <paramref name="right"/> are 
            different; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.LodGroupNode">
            <summary>
            Represents a visual object with multiple levels of detail (LODs). 
            </summary>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Graphics.SceneGraph.LodGroupNode"/> contains a collection of scene nodes sorted by distance (see 
            property <see cref="P:DigitalRune.Graphics.SceneGraph.LodGroupNode.Levels"/>). Each entry represents a <i>level of detail</i> (LOD). A LOD 
            may consist of a single scene node or an entire tree of scene nodes. The <see cref="P:DigitalRune.Graphics.SceneGraph.LodGroupNode.Levels"/> 
            collection of LODs is empty by default. LODs can be added or removed during runtime.
            </para>
            <para>
            Pose (position and orientation) and scale of the individual levels of detail are synchronized 
            with the <see cref="T:DigitalRune.Graphics.SceneGraph.LodGroupNode"/>. When a scene node is assigned to the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.LodGroupNode"/> its local pose and scale is overwritten!
            </para>
            <para>
            <strong>LOD0, LOD1, ... LOD<i>n-1</i>:</strong><br/>
            LODs can be accessed by index. The LOD with index <i>i</i> is called LOD<i>i</i>. By 
            definition, LOD0 is the highest level of detail and LOD<i>n-1</i> is the lowest level of 
            detail.
            </para>
            <para>
            <strong>Nested LOD Groups:</strong><br/>
            LOD groups can be nested. That means a LOD may contain another <see cref="T:DigitalRune.Graphics.SceneGraph.LodGroupNode"/> in 
            its subtree.
            </para>
            <para>
            <strong>LOD Distances:</strong><br/>
            LODs are selected based on the current camera and the distance to the camera (see method
            <see cref="M:DigitalRune.Graphics.SceneGraph.LodGroupNode.SelectLod(DigitalRune.Graphics.RenderContext,System.Single)"/>). The LOD distances stored in the <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection"/> are 
            <i>view-normalized</i> distances. This means that distance values are corrected based on the 
            camera's field-of-view. The resulting LOD distances are independent of the current 
            field-of-view. See <see cref="M:DigitalRune.Graphics.GraphicsHelper.GetViewNormalizedDistance(System.Single,DigitalRune.Mathematics.Algebra.Matrix44F)"/> 
            for more information.
            </para>
            <para>
            The camera that serves as reference for LOD distance computations needs to be stored in the 
            render context: See property <see cref="P:DigitalRune.Graphics.RenderContext.LodCameraNode"/>.
            </para>
            <para>
            In addition, the render context provides additional LOD settings: see properties 
            <see cref="P:DigitalRune.Graphics.RenderContext.LodBias"/>, <see cref="P:DigitalRune.Graphics.RenderContext.LodBlendingEnabled"/>,
            <see cref="P:DigitalRune.Graphics.RenderContext.LodHysteresis"/>.
            </para>
            <para>
            <strong>IMPORTANT:</strong><br/>
            To avoid unnecessary computations the LOD selection is updated only once per frame and camera.
            If the position or projection of the camera is modified during rendering, the method 
            <see cref="M:DigitalRune.Graphics.SceneGraph.CameraNode.InvalidateViewDependentData"/> needs to be called. Likewise, if LODs 
            are modified, added, or removed during rendering, 
            <see cref="M:DigitalRune.Graphics.SceneGraph.CameraNode.InvalidateViewDependentData"/> needs to be called.
            </para>
            <para>
            However, <see cref="M:DigitalRune.Graphics.SceneGraph.CameraNode.InvalidateViewDependentData"/> may affect other scene nodes. 
            It is therefore not recommended to modify the camera or the LOD node during rendering of a 
            frame! Only call <see cref="M:DigitalRune.Graphics.SceneGraph.CameraNode.InvalidateViewDependentData"/> if absolutely 
            necessary.
            </para>
            </remarks>
            <seealso cref="T:DigitalRune.Graphics.SceneGraph.ISceneQuery"/>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.LodGroupNode.Levels">
            <summary>
            Gets the collection that stores all levels of detail (LODs).
            </summary>
            <value>The levels of detail (LODs).</value>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodGroupNode.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.LodGroupNode"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.LodGroupNode"/> class with the default 
            capacity.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodGroupNode.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.LodGroupNode"/> class.
            </summary>
            <param name="capacity">The initial capacity of the LOD collection.</param>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodGroupNode.Clone">
            <inheritdoc cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.Clone"/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodGroupNode.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodGroupNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodGroupNode.BeginUpdate">
            <summary>
            Notifies the <see cref="T:DigitalRune.Graphics.SceneGraph.LodGroupNode" /> that a series of changes is going to start. During 
            these changes the <see cref="T:DigitalRune.Graphics.SceneGraph.LodGroupNode" /> will not be synchronized with the LODs.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            <see cref="M:DigitalRune.Graphics.SceneGraph.LodGroupNode.BeginUpdate"/> is called before <see cref="M:DigitalRune.Graphics.SceneGraph.LodGroupNode.EndUpdate"/>. Each call to
            <see cref="M:DigitalRune.Graphics.SceneGraph.LodGroupNode.BeginUpdate"/> needs to be matched with call to <see cref="M:DigitalRune.Graphics.SceneGraph.LodGroupNode.EndUpdate"/>!
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodGroupNode.EndUpdate">
            <summary>
            Notifies the <see cref="T:DigitalRune.Graphics.SceneGraph.LodGroupNode"/> that a series of changes has ended. During these
            changes the <see cref="T:DigitalRune.Graphics.SceneGraph.LodGroupNode"/> will not be synchronized with the LODs.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            <see cref="M:DigitalRune.Graphics.SceneGraph.LodGroupNode.BeginUpdate"/> has not been called.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodGroupNode.OnPoseChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodGroupNode.OnShapeChanged(DigitalRune.Geometry.Shapes.ShapeChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodGroupNode.UpdateBoundingShape">
            <summary>
            Updates the bounding shape of the <see cref="T:DigitalRune.Graphics.SceneGraph.LodGroupNode"/>. (Called automatically by the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection"/>.)
            </summary>
            <remarks>
            This method sets a <see cref="T:DigitalRune.Geometry.Shapes.Shape"/> that is large enough to contain all LODs.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodGroupNode.GetBoundingShape(DigitalRune.Geometry.Shapes.Aabb)">
            <summary>
            Gets a bounding shape that matches the specified AABB.
            </summary>
            <param name="aabb">The AABB.</param>
            <returns>A box or transformed box that matches the specified AABB.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodGroupNode.SelectLod(DigitalRune.Graphics.RenderContext,System.Single)">
            <summary>
            Gets the LOD or LOD transitions for the specified distance.
            </summary>
            <param name="context">The render context.</param>
            <param name="distance"> The view-normalized distance (including any LOD bias). </param>
            <returns>
            An <see cref="T:DigitalRune.Graphics.SceneGraph.LodSelection" /> that describes the current LOD or LOD transition.
            </returns>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.LodGroupNode.DigitalRune#Graphics#SceneGraph#IOcclusionProxy#HasOccluder">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodGroupNode.DigitalRune#Graphics#SceneGraph#IOcclusionProxy#UpdateOccluder">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodGroupNode.DigitalRune#Graphics#SceneGraph#IOcclusionProxy#GetOccluder">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.LodSelection">
            <summary>
            Represents the current LOD or LOD transition.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.SceneGraph.LodSelection.CurrentIndex">
            <summary>
            The index of the current LOD.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.SceneGraph.LodSelection.Current">
            <summary>
            The current LOD node.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.SceneGraph.LodSelection.NextIndex">
            <summary>
            The index of the next LOD, if the object is transitioning between two LODs.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.SceneGraph.LodSelection.Next">
            <summary>
            The next LOD node, if the object is transitioning between two LODs.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.SceneGraph.LodSelection.Transition">
            <summary>
            The transition progress [0, 1[, if the object is transitioning between two LODs.
            </summary>
            <remarks>
            0 means that no transition is active, <see cref="F:DigitalRune.Graphics.SceneGraph.LodSelection.Current"/> references the current LOD.
            A value between 0 and 1 means that a LOD transition from <see cref="F:DigitalRune.Graphics.SceneGraph.LodSelection.Current"/> to 
            <see cref="F:DigitalRune.Graphics.SceneGraph.LodSelection.Next"/> is in progress.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodSelection.#ctor(System.Int32,DigitalRune.Graphics.SceneGraph.SceneNode)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.LodSelection"/> struct.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.LodSelection"/> struct describing the current 
            LOD.
            </summary>
            <param name="currentIndex">The index of the current LOD.</param>
            <param name="current">The current LOD node.</param>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodSelection.#ctor(System.Int32,DigitalRune.Graphics.SceneGraph.SceneNode,System.Int32,DigitalRune.Graphics.SceneGraph.SceneNode,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.LodSelection"/> struct describing the current 
            LOD transition.
            </summary>
            <param name="currentIndex">The index of the current LOD.</param>
            <param name="nextIndex">The index of the next LOD.</param>
            <param name="current">The current LOD node.</param> 
            <param name="next">The next LOD node.</param>
            <param name="transition">The progress of the transition.</param>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodSelection.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object" /> is equal to this instance;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodSelection.Equals(DigitalRune.Graphics.SceneGraph.LodSelection)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the <paramref name="other" />
            parameter; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodSelection.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures
            like a hash table. 
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodSelection.op_Equality(DigitalRune.Graphics.SceneGraph.LodSelection,DigitalRune.Graphics.SceneGraph.LodSelection)">
            <summary>
            Compares two <see cref="T:DigitalRune.Graphics.SceneGraph.LodSelection"/>s to determine whether they are the same.
            </summary>
            <param name="left">The first <see cref="T:DigitalRune.Graphics.SceneGraph.LodSelection"/>.</param>
            <param name="right">The second <see cref="T:DigitalRune.Graphics.SceneGraph.LodSelection"/>.</param>
            <returns>
            <see langword="true"/> if the <paramref name="left"/> and <paramref name="right"/> are the 
            same; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LodSelection.op_Inequality(DigitalRune.Graphics.SceneGraph.LodSelection,DigitalRune.Graphics.SceneGraph.LodSelection)">
            <summary>
            Compares two <see cref="T:DigitalRune.Graphics.SceneGraph.LodSelection"/>s to determine whether they are different.
            </summary>
            <param name="left">The first <see cref="T:DigitalRune.Graphics.SceneGraph.LodSelection"/>.</param>
            <param name="right">The second <see cref="T:DigitalRune.Graphics.SceneGraph.LodSelection"/>.</param>
            <returns>
            <see langword="true"/> if the <paramref name="left"/> and <paramref name="right"/> are 
            different; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.LensFlareNode">
            <summary>
            Represents a lens flare effect in a scene.
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Graphics.SceneGraph.LensFlareNode"/> position a <seealso cref="P:DigitalRune.Graphics.SceneGraph.LensFlareNode.LensFlare"/> effect in a 3D scene.
            Lens flares can be caused by local lights or directional lights, such as the sun. If the lens 
            flare effect is caused by a directional light then the light direction is defined by the 
            local forward direction (0, 0, -1) of the scene node.
            </para>
            <para>
            <strong>Cloning:</strong> When a <see cref="T:DigitalRune.Graphics.SceneGraph.LensFlareNode"/> is cloned the 
            <see cref="P:DigitalRune.Graphics.SceneGraph.LensFlareNode.LensFlare"/> is not duplicated. The <see cref="P:DigitalRune.Graphics.SceneGraph.LensFlareNode.LensFlare"/> is copied by reference 
            (shallow copy). The original <see cref="T:DigitalRune.Graphics.SceneGraph.LensFlareNode"/> and the cloned instance will 
            reference the same <see cref="T:DigitalRune.Graphics.LensFlare"/> object.
            </para>
            </remarks>
            <seealso cref="T:DigitalRune.Graphics.LensFlare"/>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.LensFlareNode.LensFlare">
            <summary>
            Gets or sets the lens flare effect.
            </summary>
            <value>The lens flare effect.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.LensFlareNode.Intensity">
            <summary>
            Gets or sets the intensity of this lens flare node.
            </summary>
            <value>The intensity of this lens flare node. The default value is 1.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
            <remarks>
            The intensity of the lens flare node is multiplied with the base intensity of the lens 
            flare.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LensFlareNode.#ctor(DigitalRune.Graphics.LensFlare)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.LensFlareNode" /> class.
            </summary>
            <param name="lensFlare">The lens flare effect.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="lensFlare"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LensFlareNode.Clone">
            <inheritdoc cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.Clone"/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LensFlareNode.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LensFlareNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.LightNode">
            <summary>
            Represents a light in a scene.
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/> positions a <see cref="P:DigitalRune.Graphics.SceneGraph.LightNode.Light"/> in a 3D scene. A <see cref="P:DigitalRune.Graphics.SceneGraph.LightNode.Light"/>
            itself does not define position or direction. Position and orientation are defined by the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/>. Multiple <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/>s can reference the same 
            <see cref="P:DigitalRune.Graphics.SceneGraph.LightNode.Light"/> object.
            </para>
            <para>
            The position and orientation (light direction) is defined by setting either
            <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.PoseLocal"/> or <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.PoseWorld"/>. The light direction is 
            the local forward direction (0, 0, -1) of the scene node. The <see cref="T:DigitalRune.Graphics.SceneGraph.SceneHelper"/> class 
            provides helper methods to direct the light at a certain target: see methods 
            <see cref="M:DigitalRune.Graphics.SceneGraph.SceneHelper.LookAt(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)"/> and 
            <see cref="M:DigitalRune.Graphics.SceneGraph.SceneHelper.LookAt(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)"/>.
            </para>
            <para>
            The <see cref="P:DigitalRune.Graphics.SceneGraph.LightNode.Shadow"/> property defines whether the light creates a shadow. The property is
            <see langword="null"/> by default and needs to be set explicitly.
            </para>
            <para>
            <strong>Cloning:</strong> When a <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/> is cloned the <see cref="P:DigitalRune.Graphics.SceneGraph.LightNode.Light"/>
            is not cloned. The <see cref="P:DigitalRune.Graphics.SceneGraph.LightNode.Light"/> is copied by reference (shallow copy). The original 
            <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/> and the cloned <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/> will reference the same
            <see cref="T:DigitalRune.Graphics.Light"/> object. The <see cref="P:DigitalRune.Graphics.SceneGraph.LightNode.Clip"/> geometry is copied by reference.
            The <see cref="P:DigitalRune.Graphics.SceneGraph.LightNode.Shadow"/> data is cloned.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.LightNode.Light">
            <summary>
            Gets or sets the light.
            </summary>
            <value>The light.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.LightNode.Clip">
            <summary>
            Gets or sets the clip geometry.
            </summary>
            <value>The clip geometry. The default value is <see langword="null"/> (no clipping).</value>
            <remarks>
            <para>
            A clip geometry is an <see cref="T:DigitalRune.Geometry.IGeometricObject"/> (e.g. a <see cref="T:DigitalRune.Geometry.GeometricObject"/>
            or another <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/>) which defines the volume that can be lit by this light.
            Objects outside the clip geometry are not lit. This can be used to avoid that a light inside
            a room illuminates objects in the neighbor room, without using shadow mapping.
            </para>
            <para>
            Per default, the light affects only objects inside the clip geometry. If
            <see cref="P:DigitalRune.Graphics.SceneGraph.LightNode.InvertClip"/> is set, the light affects only objects outside the clip geometry.
            </para>
            <para>
            The clip geometry is positioned in world space. Its shape is typically a simple shape, like
            a box or a composite shape containing several boxes. But the shape can also be a triangle
            mesh.
            </para>
            <para>
            The clip geometry can be shared by several lights. For example, all lights in a room can
            reference one clip geometry that describes the interior of the room.
            </para>
            <para>
            When the <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/> is cloned, <see cref="P:DigitalRune.Graphics.SceneGraph.LightNode.Clip"/> is copied by reference!
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.LightNode.InvertClip">
            <summary>
            Gets or sets a value indicating whether <see cref="P:DigitalRune.Graphics.SceneGraph.LightNode.Clip"/> geometry determines the volume
            that can be lit or the volume that should be ignored by the light.
            </summary>
            <value>
            <see langword="true" /> if objects in the <see cref="P:DigitalRune.Graphics.SceneGraph.LightNode.Clip"/> are not lit; otherwise, 
            <see langword="false" /> if only objects in the <see cref="P:DigitalRune.Graphics.SceneGraph.LightNode.Clip"/> geometry are lit.
            The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.LightNode.Shadow">
            <summary>
            Gets or sets the shadow data of this light node.
            </summary>
            <value>
            The shadow data. The default value is <see langword="null"/> (no shadow).
            </value>
            <remarks>
            <para>
            If this property is <see langword="null"/>, this light node does not have a shadow.To enable
            shadows for this light node, <see cref="P:DigitalRune.Graphics.SceneGraph.LightNode.Shadow"/> must be set. 
            </para>
            <para>
            The <see cref="P:DigitalRune.Graphics.SceneGraph.LightNode.Shadow"/> type (e.g. <see cref="T:DigitalRune.Graphics.StandardShadow"/>, 
            <see cref="T:DigitalRune.Graphics.CascadedShadow"/> or <see cref="T:DigitalRune.Graphics.CubeMapShadow"/>) must fit the light type. 
            For instance, a <see cref="T:DigitalRune.Graphics.DirectionalLight"/> cannot have a <see cref="T:DigitalRune.Graphics.CubeMapShadow"/>. 
            </para>
            <para>
            <see cref="P:DigitalRune.Graphics.SceneGraph.LightNode.Shadow"/> instances must not be shared between <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/>s. If 
            several <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/>s reference the same <see cref="P:DigitalRune.Graphics.SceneGraph.LightNode.Shadow"/> object, the last 
            rendered light will overwrite the shadow maps of the other lights.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.LightNode.Priority">
            <summary>
            Gets or sets the priority.
            </summary>
            <value>The priority. The default value is 0.</value>
            <remarks>
            If the rendering system cannot render an arbitrary number of lights, then it might skip 
            lights with a lower priority.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LightNode.#ctor(DigitalRune.Graphics.Light)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/> class.
            </summary>
            <param name="light">The light.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="light"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LightNode.Clone">
            <inheritdoc cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.Clone"/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LightNode.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LightNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.MaterialInstance">
            <summary>
            Represents an instance of a specific material.
            </summary>
            <remarks>
            <para>
            Each mesh has a set of materials (see class <see cref="P:DigitalRune.Graphics.SceneGraph.MaterialInstance.Material"/>). A material defines the 
            effect bindings (see class <see cref="T:DigitalRune.Graphics.Effects.EffectBinding"/>) for all required render passes. 
            </para>
            <para>
            The effect parameters basically fall into two categories:
            <list type="bullet">
            <item>
            <description>
            <i>Non-shared parameters</i>, which are unique for each mesh node. Examples are world 
            matrices, light properties, etc. These effect parameters depend on the actual mesh instance 
            that is rendered.
            </description>
            </item>
            <item>
            <description>
            <i>Shared parameters</i>, which are shared by mesh nodes with the same base mesh. Examples are
            view/projection matrices, most material properties, etc.
            </description>
            </item>
            </list>
            </para>
            <para>
            When a new mesh node (see class <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode"/>) is created for a mesh (see class 
            <see cref="T:DigitalRune.Graphics.Mesh"/>), all materials are instanced. That means, a new object of type
            <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstance"/> is created for each material. A material instance references
            the base material from which it was created (see property <see cref="P:DigitalRune.Graphics.SceneGraph.MaterialInstance.Material"/>).
            </para>
            <para>
            Both, the base material and the material instance are dictionaries of effect bindings: They 
            contain one effect binding for each render pass that is required to render the mesh. The base 
            material contains the bindings for all shared parameters. The material instance contains the 
            bindings for non-shared parameters. Materials can be shared between different meshes - they 
            are not bound to a specific mesh, but material instances belong to a certain mesh node!
            </para>
            <para>
            <strong>Cloning:</strong><br/>
            <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstance"/>s can be cloned. When <see cref="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.Clone"/> is called all 
            <see cref="P:DigitalRune.Graphics.SceneGraph.MaterialInstance.EffectBindings"/> are duplicated (deep copy). The base <see cref="P:DigitalRune.Graphics.SceneGraph.MaterialInstance.Material"/> is 
            copied by reference (shallow copy).
            </para>
            </remarks>
            <seealso cref="T:DigitalRune.Graphics.Effects.EffectBinding"/>
            <seealso cref="P:DigitalRune.Graphics.SceneGraph.MaterialInstance.Material"/>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.MaterialInstance.Material">
            <summary>
            Gets the material.
            </summary>
            <value>The material.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.MaterialInstance.Count">
            <summary>
            Gets the number of render passes supported by this material instance.
            </summary>
            <value>The number of render passes supported by this material instance.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.MaterialInstance.Passes">
            <summary>
            Gets a read-only collection of all the render passes supported by this material instance.
            </summary>
            <value>
            A read-only <see cref="T:System.Collections.Generic.ICollection`1"/> containing the render passes supported by this 
            material instance.
            </value>
            <remarks>
            The order of the render passes in the returned <see cref="T:System.Collections.Generic.ICollection`1"/> is unspecified, 
            but it is guaranteed to be the same order as the corresponding effect bindings in the 
            <see cref="T:System.Collections.Generic.ICollection`1"/> returned by the <see cref="P:DigitalRune.Graphics.SceneGraph.MaterialInstance.EffectBindings"/> property.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.MaterialInstance.EffectBindings">
            <summary>
            Gets a read-only collection of effect bindings used by this material instance.
            </summary>
            <value>A read-only collection of effect bindings used by this material instance.</value>
            <remarks>
            The order of the effect bindings in the returned <see cref="T:System.Collections.Generic.ICollection`1"/> is 
            unspecified, but it is guaranteed to be the same order as the corresponding render passes in
            the <see cref="T:System.Collections.Generic.ICollection`1"/> returned by the <see cref="P:DigitalRune.Graphics.SceneGraph.MaterialInstance.EffectBindings"/> property.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.MaterialInstance.Item(System.String)">
            <summary>
            Gets or sets the effect parameter bindings for the specified render pass.
            </summary>
            <param name="pass">The render pass.</param>
            <value>
            The effect parameter bindings, or <see langword="null"/> if this material instance does not 
            support the specified render pass.
            </value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pass"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            <paramref name="pass"/> is not found in the material.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstance"/> class.
            (This constructor creates an uninitialized instance. Use this constructor only for 
            cloning or other special cases!)
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.#ctor(DigitalRune.Graphics.Material)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstance"/> class.
            </summary>
            <param name="material">The material.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="material"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection. 
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.Contains(System.String)">
            <summary>
            Determines whether the material instance contains effect parameter bindings for the 
            specified render pass.
            </summary>
            <param name="pass">The render pass.</param>
            <returns>
            <see langword="true"/> if the material instance contains effect parameter bindings for the 
            specified render pass; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pass"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.TryGet(System.String,DigitalRune.Graphics.Effects.EffectBinding@)">
            <summary>
            Gets the effect parameter bindings for the specified render pass.
            </summary>
            <param name="pass">The render pass.</param>
            <param name="bindings">
            When this method returns, the effect parameter bindings for the specified render pass, if 
            the render pass is supported by the material; otherwise, the <see langword="null"/>. This 
            parameter is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the material supports the specified render pass; otherwise, 
            <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pass"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.Clone">
            <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstance"/> that is a clone of the current instance.
            </summary>
            <returns>
            A new <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstance"/> that is a clone of the current instance.
            </returns>
            <remarks>
            <strong>Notes to Inheritors:</strong> The method <see cref="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.Clone"/> calls 
            <see cref="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.CreateInstanceCore"/> which is responsible for creating a new instance of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstance"/> derived class and <see cref="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.CloneCore(DigitalRune.Graphics.SceneGraph.MaterialInstance)"/> to create a copy of 
            the current instance. Classes that derive from <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstance"/> need to 
            implement <see cref="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.CreateInstanceCore"/> and <see cref="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.CloneCore(DigitalRune.Graphics.SceneGraph.MaterialInstance)"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.CreateInstance">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstance"/> class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            This is a private method, and the actual object-specific implementations for the behavior 
            are dependent on the override implementation of the <see cref="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.CreateInstanceCore"/> method, 
            which this method calls internally. 
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cannot clone <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstance"/>. A derived class does not implement 
            <see cref="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.CreateInstanceCore"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstance"/> derived class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            <para>
            Do not call this method directly (except when calling base in an implementation). This 
            method is called internally by the <see cref="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.Clone"/> method whenever a new 
            instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstance"/> is created. 
            </para>
            <para>
            <strong>Notes to Inheritors:</strong> Every <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstance"/> derived class 
            must implement this method. A typical implementation is to simply call the default 
            constructor and return the result. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.CloneCore(DigitalRune.Graphics.SceneGraph.MaterialInstance)">
            <summary>
            Makes the instance a clone (deep copy) of the specified 
            <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstance"/>.
            </summary>
            <param name="source">The object to clone.</param>
            <remarks>
            <strong>Notes to Inheritors:</strong> Every <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstance"/> derived class 
            must implement this method. A typical implementation is to call <c>base.CloneCore(this)</c> 
            to copy all properties of the base class and then copy all properties of the derived class.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,DigitalRune#Graphics#Effects#EffectBinding}}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value>
            <see langword="true"/> if this <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#Generic#IDictionary{System#String,DigitalRune#Graphics#Effects#EffectBinding}#Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the 
            <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements 
            <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </value>
            <remarks>
            The order of the keys in the returned <see cref="T:System.Collections.Generic.ICollection`1"/> is unspecified, but it is
            guaranteed to be the same order as the corresponding values in the 
            <see cref="T:System.Collections.Generic.ICollection`1"/> returned by the <see cref="P:System.Collections.Generic.IDictionary`2.Values"/> 
            property.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#Generic#IDictionary{System#String,DigitalRune#Graphics#Effects#EffectBinding}#Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values of the 
            <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values of the object that implements 
            <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </value>
            <remarks>
            The order of the values in the returned <see cref="T:System.Collections.Generic.ICollection`1"/> is unspecified, but it 
            is guaranteed to be the same order as the corresponding keys in the 
            <see cref="T:System.Collections.Generic.ICollection`1"/> returned by the <see cref="P:System.Collections.Generic.IDictionary`2.Keys"/> 
            property.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection. 
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,DigitalRune#Graphics#Effects#EffectBinding}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection. 
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,DigitalRune#Graphics#Effects#EffectBinding}}#Add(System.Collections.Generic.KeyValuePair{System.String,DigitalRune.Graphics.Effects.EffectBinding})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>. This implementation always throws 
            <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            Always thrown.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#Generic#IDictionary{System#String,DigitalRune#Graphics#Effects#EffectBinding}#Add(System.String,DigitalRune.Graphics.Effects.EffectBinding)">
            <summary>
            Adds an element with the provided key and value to the 
            <see cref="T:System.Collections.Generic.IDictionary`2"/>.This implementation always throws 
            <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.NotSupportedException">
            Always thrown.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,DigitalRune#Graphics#Effects#EffectBinding}}#Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>. This implementation always throws 
            <see cref="T:System.NotSupportedException"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            Always thrown.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,DigitalRune#Graphics#Effects#EffectBinding}}#Contains(System.Collections.Generic.KeyValuePair{System.String,DigitalRune.Graphics.Effects.EffectBinding})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="item"/> is found in the 
            <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#Generic#IDictionary{System#String,DigitalRune#Graphics#Effects#EffectBinding}#ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the 
            specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <returns>
            <see langword="true"/> if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element 
            with the specified key; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,DigitalRune#Graphics#Effects#EffectBinding}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,DigitalRune.Graphics.Effects.EffectBinding}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at 
            a particular array index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from 
            <see cref="T:System.Collections.Generic.ICollection`1"/>. The array must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the 
            available space from <paramref name="arrayIndex"/> to the end of the destination 
            <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,DigitalRune#Graphics#Effects#EffectBinding}}#Remove(System.Collections.Generic.KeyValuePair{System.String,DigitalRune.Graphics.Effects.EffectBinding})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>. 
            This implementation always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="item"/> was successfully removed from the 
            <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, <see langword="false"/>. This method also returns 
            <see langword="false"/> if <paramref name="item"/> is not found in the original 
            <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            Always thrown.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#Generic#IDictionary{System#String,DigitalRune#Graphics#Effects#EffectBinding}#Remove(System.String)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            <see langword="true"/> if the element is successfully removed; otherwise, 
            <see langword="false"/>. This method also returns <see langword="false"/> if key was not 
            found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            Always thrown.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#Generic#IDictionary{System#String,DigitalRune#Graphics#Effects#EffectBinding}#TryGetValue(System.String,DigitalRune.Graphics.Effects.EffectBinding@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">
            When this method returns, the value associated with the specified key, if the key is found; 
            otherwise, the default value for the type of the <paramref name="value"/> parameter. This 
            parameter is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> 
            contains an element with the specified key; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection">
            <summary>
            Manages a read-only collection of <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstance"/> objects.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.Enumerator">
            <summary>
            Enumerates the elements of a <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection"/>. 
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.Enumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The element in the collection at the current position of the enumerator.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The element in the collection at the current position of the enumerator.</value>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last 
            element.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.Enumerator.#ctor(DigitalRune.Graphics.SceneGraph.MaterialInstance[])">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.Enumerator"/> struct.
            </summary>
            <param name="array">The material instances to be enumerated.</param>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.Enumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting 
            unmanaged resources.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <see langword="true"/> if the enumerator was successfully advanced to the next element; 
            <see langword="false"/> if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection"/>.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.Count">
            <summary>
            Gets the number of material instances contained in the <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection"/>.
            </summary>
            <value>
            The number of material instances contained in the <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.System#Collections#Generic#ICollection{DigitalRune#Graphics#SceneGraph#MaterialInstance}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value>Always returns <see langword="true"/>.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.Item(System.Int32)">
            <summary>
            Gets the material instance at the specified index.
            </summary>
            <value>The material instance at the specified index.</value>
            <param name="index">The zero-based index of the material instance to get.</param>
            <remarks>
            This indexer is an O(1) operation.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or equal to or greater than <see cref="P:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.Count"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.#ctor(DigitalRune.Graphics.MaterialCollection)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection"/> class.
            </summary>
            <param name="materials">The materials to be instantiated.</param>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.#ctor(DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection"/> class by cloning
            the specified material instances.
            </summary>
            <param name="materials">The material instances to be cloned.</param>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.InitializePassHashes(DigitalRune.Graphics.MaterialCollection)">
            <summary>
            Stores the hash values of all supported render passes.
            </summary>
            <param name="materials">The materials to be instantiated.</param>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.System#Collections#Generic#IEnumerable{DigitalRune#Graphics#SceneGraph#MaterialInstance}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.System#Collections#Generic#ICollection{DigitalRune#Graphics#SceneGraph#MaterialInstance}#Add(DigitalRune.Graphics.SceneGraph.MaterialInstance)">
            <summary>
            Not supported.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection"/> is read-only.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.System#Collections#Generic#ICollection{DigitalRune#Graphics#SceneGraph#MaterialInstance}#Clear">
            <summary>
            Not supported.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.Contains(DigitalRune.Graphics.SceneGraph.MaterialInstance)">
            <summary>
            Determines whether the <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection"/> contains a specific value.
            </summary>
            <param name="materialInstance">
            The material instance to locate in the <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection"/>.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="materialInstance"/> is found in the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection"/>; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            <para>
            This method performs a linear search; therefore, this method is an O(n) operation, where n 
            is <see cref="P:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.Count"/>. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.CopyTo(DigitalRune.Graphics.SceneGraph.MaterialInstance[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection"/> to an 
            <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from 
            <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection"/>. The <see cref="T:System.Array"/> must have zero-based 
            indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional. Or <paramref name="arrayIndex"/> is equal to 
            or greater than the length of <paramref name="array"/>. Or the number of elements in the 
            source <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection"/> is greater than the available space from 
            <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            </exception>
            <remarks>
            <para>
            This method is an O(n) operation, where n is <see cref="P:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.Count"/>.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.System#Collections#Generic#ICollection{DigitalRune#Graphics#SceneGraph#MaterialInstance}#Remove(DigitalRune.Graphics.SceneGraph.MaterialInstance)">
            <summary>
            Not supported.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="item"/> was successfully removed from the 
            <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, <see langword="false"/>. This method also returns 
            <see langword="false"/> if <paramref name="item"/> is not found in the original 
            <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.IndexOf(DigitalRune.Graphics.SceneGraph.MaterialInstance)">
            <summary>
            Determines the index of a specific material instance in the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection"/>.
            </summary>
            <param name="materialInstance">
            The material instance to locate in the <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection"/>.
            </param>
            <returns>
            The index of <paramref name="materialInstance"/> if found in the collection; otherwise, -1.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.System#Collections#Generic#IList{DigitalRune#Graphics#SceneGraph#MaterialInstance}#Insert(System.Int32,DigitalRune.Graphics.SceneGraph.MaterialInstance)">
            <summary>
            Not supported.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="item"/> should be inserted.
            </param>
            <param name="item">
            The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.
            </param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.System#Collections#Generic#IList{DigitalRune#Graphics#SceneGraph#MaterialInstance}#RemoveAt(System.Int32)">
            <summary>
            Not supported.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.IMeshInstancingNode">
            <summary>
            Allows access to <see cref="T:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1"/> members which are relevant for a renderer.
            The interface allows access without the need to know the exact generic type.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1">
            <summary>
            Represents a <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode"/> which uses hardware instancing to efficiently render many
            instances of a single <see cref="T:DigitalRune.Graphics.Mesh"/>.
            </summary>
            <typeparam name="T">
            The vertex type which stores instance data, usually <see cref="T:DigitalRune.Graphics.InstanceData"/>.
            </typeparam>
            <remarks>
            <para>
            This mesh node has a property <see cref="P:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1.Instances"/> which defines a collection of instance
            data. The element type is a vertex structure. Each element in the collection encodes data for
            one instance of the mesh, such as world matrix, color and alpha.
            </para>
            <para>
            <strong>Vertex structure:</strong>A suitable vertex structure to use for the instance data is
            <see cref="T:DigitalRune.Graphics.InstanceData"/>. <see cref="T:DigitalRune.Graphics.InstanceData"/> is supported by the standard material
            effects. However, custom vertex types can be used to store different instance data. If the
            vertex type is not <see cref="T:DigitalRune.Graphics.InstanceData"/> then the mesh must use custom material effects,
            i.e. custom HLSL shaders that know how to interpret the encoded instance data.
            </para>
            <para>
            If an element in <see cref="P:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1.Instances"/> is changed at runtime, 
            <see cref="M:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1.InvalidateInstances"/> must be called to inform the mesh node that any internally
            cached data must be updated.
            </para>
            <para>
            <strong>Bounding shape:</strong> The <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.Shape"/> must be set manually to a
            suitable shape which contains all instances of the mesh! Per default, the shape is
            <see cref="F:DigitalRune.Geometry.Shapes.Shape.Infinite"/> which is safe for rendering but those not allow
            culling and therefore is very inefficient.
            </para>
            <para>
            <strong>Scales, poses and world transforms:</strong> When a mesh instance is rendered, a
            material effect can combine the scale and pose of the scene node with the transform stored in
            the instance data. The effect can also ignore the scale/pose of this mesh node and only use
            the transform in the instance data. Currently, the  predefined material effects of DigitalRune
            Graphics use the later method because the shader is faster. That means, the instance data
            should store the world space matrix, and the scale/pose of the mesh node is ignored. (However,
            the scale/pose of the mesh is still used to position the bounding box for frustum culling!)
            </para>
            <para>
            <strong>Limitations:</strong> Following <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode"/> features are currently not
            supported and will be ignored when an <see cref="T:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1"/> is rendered: 
            <list type="bullet">
            <item>mesh skinning (see also <see cref="P:DigitalRune.Graphics.SceneGraph.MeshNode.SkeletonPose"/>)</item>
            <item>morphing (see also <see cref="P:DigitalRune.Graphics.SceneGraph.MeshNode.MorphWeights"/>)</item>
            <item>occluders (see also <see cref="P:DigitalRune.Graphics.Mesh.Occluder"/>)</item>
            </list>
            Additionally, the <see cref="T:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1"/> can only be used in the HiDef graphics
            profile and not in the Reach graphics profile!
            </para>
            <para>
            <strong>Cloning:</strong> When an <see cref="T:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1"/> is cloned the
            <see cref="P:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1.Instances"/> collection is only copied by references (shallow copy). The original 
            and the cloned mesh node will reference the same <see cref="P:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1.Instances"/> collection.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1.Shape">
            <summary>
            Gets or sets the bounding shape of this scene node.
            </summary>
            <value>
            The bounding shape. The bounding shape contains only the current node - it does not include
            the bounds of the children! The default value is an
            <see cref="F:DigitalRune.Geometry.Shapes.Shape.Infinite"/> shape.
            </value>
            <remarks>
            The default bounding shape is <see cref="F:DigitalRune.Geometry.Shapes.Shape.Infinite"/>,
            which does not allow frustum culling. When all instances are set a bounding shape that
            covers all mesh instances should be set!
            </remarks>
            <inheritdoc cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.Shape"/>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1.Instances">
            <summary>
            Gets or sets the collection which stores data for each instance.
            </summary>
            <value>
            The collection which stores data for each instance. The default value is 
            <see langword="null"/>, which means that no instances are rendered.
            </value>
            <remarks>
            This collection must be set by the user. The most efficient collection type is
            an array of <typeparamref name="T"/> (<c>T[]</c>). However, any other collection type (e.g.
            <see cref="T:System.Collections.Generic.List`1"/>) can be used as well.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1.#ctor(DigitalRune.Graphics.Mesh)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1"/> class.
            </summary>
            <param name="mesh">The <see cref="T:DigitalRune.Graphics.Mesh"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="mesh"/> is <see langword="null"/>. 
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1.#ctor(DigitalRune.Graphics.Mesh,System.Collections.Generic.ICollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1" /> class.
            </summary>
            <param name="mesh">The <see cref="T:DigitalRune.Graphics.Mesh" />.</param>
            <param name="instances">The instances.</param>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1.Dispose(System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1.Clone">
            <inheritdoc cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.Clone"/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1.InvalidateInstances">
            <summary>
            Notifies this <see cref="T:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1"/> that an element in <see cref="P:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1.Instances"/>
            was modified.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.MeshNode">
            <summary>
            Represents an instance of a mesh in a 3D scene.
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Graphics.Mesh"/> describes the geometry and materials of a 3D object. A 
            <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode"/> is used to position a mesh in a 3D scene. The mesh node defines its 
            position and orientation. Multiple mesh nodes can reference the same mesh, hence it is 
            possible to render the same mesh multiple times in a scene.
            </para>
            <para>
            <strong>Materials:</strong> Each mesh has one or more materials (see property
            <see cref="P:DigitalRune.Graphics.Mesh.Materials"/>). When a mesh node is created from a mesh, a new 
            material instance (see class <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstance"/>) is created for each material.
            Each mesh node can override certain material properties defined in the base mesh. See 
            <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstance"/> for more details.
            </para>
            <para>
            <strong>Important:</strong> When the referenced mesh is changed, the mesh node can become
            invalid. Do not add or remove materials or submeshes to or from a mesh as long as the mesh is 
            referenced by any mesh nodes. When the affected mesh nodes are rendered they can cause 
            exceptions or undefined behavior.
            </para>
            <para>
            <strong>Cloning:</strong> When a <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode"/> is cloned the 
            <see cref="P:DigitalRune.Graphics.SceneGraph.MeshNode.MaterialInstances"/> are cloned (deep copy). But the <see cref="P:DigitalRune.Graphics.SceneGraph.MeshNode.Mesh"/> and the
            <see cref="T:DigitalRune.Animation.Character.Skeleton"/> are only copied by reference (shallow copy). The original and the 
            cloned mesh node will reference the same <see cref="T:DigitalRune.Graphics.Mesh"/> and the same
            <see cref="T:DigitalRune.Animation.Character.Skeleton"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.MeshNode.MaterialInstances">
            <summary>
            Gets a collection of <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstance"/>s associated with the mesh.
            </summary>
            <value>A collection of <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstance"/>s associated with the mesh.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.MeshNode.Mesh">
            <summary>
            Gets or sets the mesh.
            </summary>
            <value>The mesh.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.MeshNode.MorphWeights">
            <summary>
            Gets or sets the weights of the morph targets.
            </summary>
            <value>
            The weights of the morph targets. The default value depends on whether the mesh includes
            morph targets. If the mesh includes morph targets an empty 
            <see cref="T:DigitalRune.Graphics.MorphWeightCollection"/> (all weights are 0) is set by default; otherwise, 
            <see langword="null"/>.
            </value>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Graphics.MorphWeightCollection"/> is required, if the <see cref="P:DigitalRune.Graphics.SceneGraph.MeshNode.Mesh"/> includes morph
            targets; otherwise, rendering may fail.
            </para>
            <para>
            The <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode"/> does not verify whether the <see cref="P:DigitalRune.Graphics.SceneGraph.MeshNode.MorphWeights"/> is
            compatible with the <see cref="P:DigitalRune.Graphics.SceneGraph.MeshNode.Mesh"/>. The <see cref="P:DigitalRune.Graphics.SceneGraph.MeshNode.MorphWeights"/> may include other
            morph targets than the <see cref="P:DigitalRune.Graphics.SceneGraph.MeshNode.Mesh"/>. In this case only the morph targets that match
            are applied to the mesh during morph target animation.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.MeshNode.SkeletonPose">
            <summary>
            Gets or sets the skeleton pose for mesh skinning.
            </summary>
            <value>The skeleton pose. Can be <see langword="null"/>.</value>
            <exception cref="T:System.ArgumentException">
            The <see cref="T:DigitalRune.Animation.Character.Skeleton"/> of the <see cref="P:DigitalRune.Graphics.SceneGraph.MeshNode.SkeletonPose"/> is different from the 
            <see cref="T:DigitalRune.Animation.Character.Skeleton"/> of the <see cref="P:DigitalRune.Graphics.SceneGraph.MeshNode.Mesh"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MeshNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MeshNode.#ctor(DigitalRune.Graphics.Mesh)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode"/> class.
            </summary>
            <param name="mesh">The <see cref="P:DigitalRune.Graphics.SceneGraph.MeshNode.Mesh"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="mesh"/> is <see langword="null"/>. 
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MeshNode.OnAssetLoaded(System.Object,System.EventArgs)">
            <summary>
            Called when all fix-ups are executed and the asset is fully loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">
            The <see cref="T:System.EventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MeshNode.Dispose(System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MeshNode.Clone">
            <inheritdoc cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.Clone"/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MeshNode.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MeshNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MeshNode.IsPassSupported(System.Int32)">
            <summary>
            Determines whether the mesh node supports the specified render pass.
            </summary>
            <param name="passHash">The hash value of the render pass.</param>
            <returns>
            <see langword="true"/> if the mesh contains a material with the specified render pass; 
            otherwise, <see langword="false"/> if the mesh does not support the specified render 
            pass.
            </returns>
            <remarks>
            The method is used only internally as an optimization. Only the hash value is checked, 
            therefore the method may return a false positive!
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MeshNode.SetHasAlpha">
            <summary>
            Checks if the MaterialInstances contain an InstanceAlpha parameter binding and stores the
            result in the SceneNode flags.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MeshNode.OnInitializeShape">
            <summary>
            Sets the <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.Shape"/> automatically.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.MeshNode.DigitalRune#Graphics#SceneGraph#IOcclusionProxy#HasOccluder">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MeshNode.DigitalRune#Graphics#SceneGraph#IOcclusionProxy#UpdateOccluder">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.MeshNode.DigitalRune#Graphics#SceneGraph#IOcclusionProxy#GetOccluder">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.ModelNode">
            <summary>
            Represents a 3D model composed of multiple <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/>s.
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Graphics.SceneGraph.ModelNode"/> represents a 3D model. The complexity of a model can vary from a 
            simple <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode"/> to a complex hierarchical tree of <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode"/>s, 
            <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/>s, and other types of <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/>s. The 
            <see cref="T:DigitalRune.Graphics.SceneGraph.ModelNode"/> basically represents a "mini scene" stored under a single scene node. 
            - <see cref="T:DigitalRune.Graphics.SceneGraph.ModelNode"/> is the root node of this scene.
            </para>
            <para>
            <strong>Loading and Cloning a Model:</strong><br/>
            A model can be loaded from an asset that has been preprocessed by the XNA content pipeline. 
            For example:
            <code lang="csharp">
            <![CDATA[
            ModelNode myModel = Content.Load<ModelNode>("dude");
            ]]>
            </code>
            Repeated calls of <c>Content.Load&lt;ModelNode&gt;("dude")</c> will return the same object 
            instance. (The model asset needs to be preprocessed by using the 
            <strong>DRModelProcessor</strong> which is listed as 
            <strong>"Model - DigitalRune Graphics"</strong> in the Visual Studio Properties window.)
            </para>
            <para>
            The model node can be inserted in a <see cref="T:DigitalRune.Graphics.SceneGraph.IScene"/> for rendering. The model node cannot 
            be inserted multiple times into a scene. Also, it cannot be inserted into multiple scenes. 
            </para>
            <para>
            To render a model multiple times in a scene the model needs to be cloned by calling 
            <see cref="M:DigitalRune.Graphics.SceneGraph.ModelNode.Clone"/>:
            </para>
            <code lang="csharp">
            <![CDATA[
            // Clone the entire model.
            ModelNode clonedModel = myModel.Clone();
            ]]>
            </code>
            <para>
            <see cref="M:DigitalRune.Graphics.SceneGraph.ModelNode.Clone"/> duplicates the <see cref="T:DigitalRune.Graphics.SceneGraph.ModelNode"/> and its descendant nodes. The data 
            objects referenced by the scene nodes, such as <see cref="T:DigitalRune.Graphics.Mesh"/> or <see cref="T:DigitalRune.Graphics.Light"/>, are 
            not duplicated. The original model and the cloned model will references the same data objects.
            Only the instance information which is responsible for positioning the objects in the scene 
            will be duplicated.)
            </para>
            <para>
            <strong>Adding a Model to a scene:</strong><br/>
            To render a model, it needs to be added to a scene. <see cref="T:DigitalRune.Graphics.SceneGraph.ModelNode"/> is derived from 
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/>, hence it can be attached to any node of a scene. For example, the 
            following code inserts a model node under the root node of a scene.
            <code lang="csharp">
            <![CDATA[
            // Insert model into scene.
            myScene.Children.Add(myModel);
            ]]>
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.ModelNode.Clone">
            <inheritdoc cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.Clone"/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.ModelNode.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.ModelNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Graphics.SceneGraph"/> namespace provides types to build
            hierarchical scene graphs for rendering 3D scenes.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.IOcclusionProxy">
            <summary>
            Represents a scene node with an occluder.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.IOcclusionProxy.HasOccluder">
            <summary>
            Gets a value indicating whether an occluder is available.
            </summary>
            <value>
            <see langword="true"/> if an occluder is available; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.IOcclusionProxy.UpdateOccluder">
            <summary>
            Updates the occluder.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.IOcclusionProxy.GetOccluder">
            <summary>
            Gets the occluder for rendering.
            </summary>
            <returns>The occluder.</returns>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.OccluderData">
            <summary>
            Stores the occluder geometry in world space, ready for drawing.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.SceneGraph.OccluderData.Vertices">
            <summary>The vertices in world space.</summary>
        </member>
        <member name="F:DigitalRune.Graphics.SceneGraph.OccluderData.Indices">
            <summary>The indices.</summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.OccluderData.#ctor(DigitalRune.Graphics.Occluder)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.OccluderData"/> class.
            </summary>
            <param name="occluder">The occluder.</param>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.OccluderData.Update(DigitalRune.Graphics.Occluder,DigitalRune.Geometry.Pose,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Updates the occluder data.
            </summary>
            <param name="occluder">The occluder.</param>
            <param name="pose">The pose of the <see cref="T:DigitalRune.Graphics.SceneGraph.OccluderNode"/>.</param>
            <param name="scale">The scale of the <see cref="T:DigitalRune.Graphics.SceneGraph.OccluderNode"/>.</param>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.OccluderNode">
            <summary>
            Represents an occluder in a 3D scene.
            </summary>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Graphics.SceneGraph.OccluderNode"/> positions an <see cref="P:DigitalRune.Graphics.SceneGraph.OccluderNode.Occluder"/> in a 3D scene.
            <see cref="P:DigitalRune.Graphics.SceneGraph.OccluderNode.Occluder"/>s are often added as child nodes to the scene nodes they represents.
            This ensure that the occluders are automatically updated when parent scene node is moved.
            </para>
            <para>
            <strong>Cloning:</strong> When a <see cref="T:DigitalRune.Graphics.SceneGraph.OccluderNode"/> is cloned, the
            <see cref="P:DigitalRune.Graphics.SceneGraph.OccluderNode.Occluder"/> is not duplicated. The <see cref="P:DigitalRune.Graphics.SceneGraph.OccluderNode.Occluder"/> is copied by reference
            (shallow copy). The original <see cref="T:DigitalRune.Graphics.SceneGraph.OccluderNode"/> and the cloned instance will reference
            the same <see cref="T:DigitalRune.Graphics.Occluder"/> object.
            </para>
            </remarks>
            <seealso cref="T:DigitalRune.Graphics.Occluder"/>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.OccluderNode.Occluder">
            <summary>
            Gets or sets the occluder.
            </summary>
            <value>The occluder.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.OccluderNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.OccluderNode"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.OccluderNode.#ctor(DigitalRune.Graphics.Occluder)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.OccluderNode"/> class.
            </summary>
            <param name="occluder">The occluder.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="occluder"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.OccluderNode.Clone">
            <inheritdoc cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.Clone"/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.OccluderNode.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.OccluderNode.DigitalRune#Graphics#SceneGraph#IOcclusionProxy#HasOccluder">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.OccluderNode.DigitalRune#Graphics#SceneGraph#IOcclusionProxy#UpdateOccluder">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.OccluderNode.DigitalRune#Graphics#SceneGraph#IOcclusionProxy#GetOccluder">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.ParticleSystemNode">
            <summary>
            Represents an instance of a particle effect in a 3D scene.
            </summary>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Graphics.SceneGraph.ParticleSystemNode"/> positions a <see cref="P:DigitalRune.Graphics.SceneGraph.ParticleSystemNode.ParticleSystem"/> in a 3D scene.
            Particles can be rendered using the <see cref="T:DigitalRune.Graphics.Rendering.BillboardRenderer"/>. Only particle system that
            have the required particle parameters are rendered. See list below.
            </para>
            <note type="important">
            <strong>Synchronization:</strong>
            The particle system service (which simulates the particle motion) and the graphics service 
            (which draws particles) may be run in sequence or in parallel. In every frame the particle 
            information needs to be copied from the <see cref="T:DigitalRune.Particles.ParticleSystem"/> to the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.ParticleSystemNode"/>. This is done by calling <see cref="M:DigitalRune.Graphics.SceneGraph.ParticleSystemNode.Synchronize(DigitalRune.Graphics.IGraphicsService)"/>. This 
            method needs to be called by the application logic for each <see cref="T:DigitalRune.Graphics.SceneGraph.ParticleSystemNode"/>! 
            (It needs to be called at a point where the particle system service and the graphics service 
            are idle - usually when the game objects are updated.)
            </note>
            <para>
            Note that both the particle system and the scene node have an "Enabled" flag. The 
            <see cref="T:DigitalRune.Particles.ParticleSystem"/>'s <see cref="P:DigitalRune.Particles.ParticleSystem.Enabled"/> flag 
            determines whether the particle system is simulated by the particle system manager. If the 
            particle system is disabled, particles are no longer emitted or updated. The 
            <see cref="T:DigitalRune.Graphics.SceneGraph.ParticleSystemNode"/>'s <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.IsEnabled"/> flag determines whether 
            the scene node is rendered.
            </para>
            <para>
            <strong>Particle Reference Frame and Instancing:</strong><br/>
            The <see cref="P:DigitalRune.Particles.ParticleSystem.ReferenceFrame"/> defines the reference frame of the 
            particles. 
            </para>
            <para>
            <see cref="F:DigitalRune.Particles.ParticleReferenceFrame.World"/> means that the particles are positioned directly in
            world space. In this case the pose (position and orientation) of the particle system controls 
            the pose of the scene node. In <see cref="M:DigitalRune.Graphics.SceneGraph.ParticleSystemNode.Synchronize(DigitalRune.Graphics.IGraphicsService)"/> the 
            <see cref="P:DigitalRune.Particles.ParticleSystem.Pose"/> of the <see cref="P:DigitalRune.Graphics.SceneGraph.ParticleSystemNode.ParticleSystem"/> is copied to
            <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.PoseWorld"/> of the <see cref="T:DigitalRune.Graphics.SceneGraph.ParticleSystemNode"/>.
            </para>
            <para>
            <see cref="F:DigitalRune.Particles.ParticleReferenceFrame.Local"/> means that the particles are relative to the scene 
            node. Multiple instance of the same particle system may be positioned and rendered within the 
            scene. Particles can be scaled, rotated, or moved by changing the 
            <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.ScaleLocal"/> or <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.PoseLocal"/> of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.ParticleSystemNode"/>. The properties <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.ScaleLocal"/>, 
            <see cref="P:DigitalRune.Graphics.SceneGraph.ParticleSystemNode.Color"/>, <see cref="P:DigitalRune.Graphics.SceneGraph.ParticleSystemNode.Alpha"/>, and <see cref="P:DigitalRune.Graphics.SceneGraph.ParticleSystemNode.AngleOffset"/> can be used to add 
            variety to the instances of a particle system.
            </para>
            <para>
            <strong>Bounding Shape:</strong><br/>
            The <see cref="P:DigitalRune.Particles.ParticleSystem.Shape"/> of the <see cref="P:DigitalRune.Graphics.SceneGraph.ParticleSystemNode.ParticleSystem"/> is used
            for frustum culling. The <see cref="P:DigitalRune.Particles.ParticleSystem.Shape"/> is not currently not
            updated automatically. It is recommended to set a shape which is large enough to hold all
            particles. The <see cref="P:DigitalRune.Particles.ParticleSystem.Shape"/> must not be changed while the
            graphics service is rendering the scene!
            </para>
            <para>
            <strong>Nested Particle Systems:</strong><br/>
            A particle system may include other particle systems. Only the root particle system needs to
            be added to the scene using a <see cref="T:DigitalRune.Graphics.SceneGraph.ParticleSystemNode"/>. The 
            <see cref="T:DigitalRune.Graphics.Rendering.BillboardRenderer"/> automatically renders all nested particle systems that have
            the required particle parameters. The <see cref="P:DigitalRune.Particles.ParticleSystem.Shape"/> needs to be
            large enough to include all nested particle systems.
            </para>
            <para>
            <strong>Particle Parameters</strong><br/>
            The following particle parameters are read by the <see cref="T:DigitalRune.Graphics.Rendering.BillboardRenderer"/>.
            </para>
            <para>
            <list type="table">
            <listheader>
            <term>Parameter Name</term><description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:DigitalRune.Particles.ParticleParameterNames.Alpha"/></term>
            <description>
            <para>
            The particle opacity (0 = transparent, 1 = opaque).
            </para>
            <para>
            Parameter type: varying or uniform, value type: <see cref="T:System.Single"/>
            </para>
            <para>
            This parameter is optional.
            </para>
            </description>
            </item>
            <item>
            <term><see cref="F:DigitalRune.Particles.ParticleParameterNames.Angle"/></term>
            <description>
            <para>
            The rotation angle in radians.
            </para>
            <para>
            Parameter type: varying or uniform, value type: <see cref="T:System.Single"/>
            </para>
            <para>
            This parameter is optional.
            </para>
            </description>
            </item>
            <item>
            <term><see cref="F:DigitalRune.Particles.ParticleParameterNames.AlphaTest"/></term>
            <description>
            <para>
            The reference value used in the alpha test. The reference value is a value in the range
            [0, 1]. If the alpha of a pixel is less than the reference alpha, the pixel is discarded.
            (Requires HiDef profile, not supported in Reach profile)
            </para>
            <para>
            Parameter type: uniform, value type: <see cref="T:System.Single"/>
            </para>
            <para>
            This parameter is optional.
            </para>
            </description>
            </item>
            <item>
            <term><see cref="F:DigitalRune.Particles.ParticleParameterNames.AnimationTime"/></term>
            <description>
            <para>
            The normalized animation time where 0 marks the start of the animation and 1 marks the end 
            of the animation. Only relevant if the particle texture contains multiple animation frames. 
            The normalized animation time determines the current frame.
            </para>
            <para>
            Parameter type: varying or uniform, value type: <see cref="T:System.Single"/>
            </para>
            <para>
            This parameter is optional.
            </para>
            </description>
            </item>
            <item>
            <term><see cref="F:DigitalRune.Particles.ParticleParameterNames.Axis"/></term>
            <description>
            <para>
            The axis vector of a particle.
            </para>
            <para>
            Parameter type: varying or uniform, value type: <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>
            </para>
            <para>
            This parameter is optional.
            </para>
            </description>
            </item>
            <item>
            <term><see cref="F:DigitalRune.Particles.ParticleParameterNames.BillboardOrientation"/></term>
            <description>
            <para>
            The billboard orientation of the particles. 
            </para>
            <para>
            Parameter type: uniform, value type: <see cref="T:DigitalRune.Graphics.BillboardOrientation"/>
            </para>
            <para>
            This parameter is optional.
            </para>
            </description>
            </item>
            <item>
            <term><see cref="F:DigitalRune.Particles.ParticleParameterNames.BlendMode"/></term>
            <description>
            <para>
            The blend mode of the particles where 0 = additive blending, 1 = alpha blending. Intermediate 
            values between 0 and 1 are allowed.
            </para>
            <para>
            Parameter type: varying or uniform, value type: <see cref="T:System.Single"/>
            </para>
            <para>
            This parameter is optional.
            </para>
            </description>
            </item>
            <item>
            <term><see cref="F:DigitalRune.Particles.ParticleParameterNames.Color"/></term>
            <description>
            <para>
            The particle tint color.
            </para>
            <para>
            Parameter type: varying or uniform, value type: <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>
            </para>
            <para>
            This parameter is optional.
            </para>
            </description>
            </item>
            <item>
            <term><see cref="F:DigitalRune.Particles.ParticleParameterNames.DrawOrder"/></term>
            <description>
            <para>
            A value that defines the draw order for particle systems on the same world space position. 
            Particle systems with higher draw order are drawn on top of particle systems with lower draw 
            order. 
            </para>
            <para>
            Parameter type: uniform, value type: <see cref="T:System.Int32"/>
            </para>
            <para>
            This parameter is optional.
            </para>
            </description>
            </item>
            <item>
            <term><see cref="F:DigitalRune.Particles.ParticleParameterNames.IsDepthSorted"/></term>
            <description>
            <para>
            A parameter that defines if particles should be drawn back to front or oldest to newest. If 
            this parameter is <see langword="false"/> or absent, the particles are drawn from oldest to 
            newest.
            </para>
            <para>
            Parameter type: uniform, value type: <see cref="T:System.Boolean"/>
            </para>
            <para>
            This parameter is optional.
            </para>
            </description>
            </item>
            <item>
            <term><see cref="F:DigitalRune.Particles.ParticleParameterNames.Normal"/></term>
            <description>
            <para>
            The normal vector of a particle.
            </para>
            <para>
            Parameter type: varying or uniform, value type: <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>
            </para>
            <para>
            This parameter is optional.
            </para>
            </description>
            </item>
            <item>
            <term><see cref="F:DigitalRune.Particles.ParticleParameterNames.NormalizedAge"/></term>
            <description>
            <para>
            The normalized age in the range [0, 1]. This parameter is automatically created and managed by
            the <see cref="T:DigitalRune.Particles.ParticleSystem"/> class. 
            </para>
            <para>
            Parameter type: varying, value type: <see cref="T:System.Single"/>
            </para>
            <para>
            This parameter is optional.
            </para>
            </description>
            </item>
            <item>
            <term><see cref="F:DigitalRune.Particles.ParticleParameterNames.Position"/></term>
            <description>
            <para>
            The particle position.
            </para>
            <para>
            Parameter type: varying, value type: <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>
            </para>
            <para>
            This parameter is optional.
            </para>
            </description>
            </item>
            <item>
            <term>
            <see cref="F:DigitalRune.Particles.ParticleParameterNames.Size"/>, 
            <see cref="F:DigitalRune.Particles.ParticleParameterNames.SizeX"/>,
            <see cref="F:DigitalRune.Particles.ParticleParameterNames.SizeY"/>
            </term>
            <description>
            <para>
            The particle size. The size can be defined using a single parameter 
            (<see cref="F:DigitalRune.Particles.ParticleParameterNames.Size"/>), or using different parameters for width 
            (<see cref="F:DigitalRune.Particles.ParticleParameterNames.SizeX"/>) and height 
            (<see cref="F:DigitalRune.Particles.ParticleParameterNames.SizeY"/>).
            </para>
            <para>
            Parameter type: varying or uniform, value type: <see cref="T:System.Single"/>
            </para>
            <para>
            This parameter is optional.
            </para>
            </description>
            </item>
            <item>
            <term><see cref="F:DigitalRune.Particles.ParticleParameterNames.Softness"/></term>
            <description>
            <para>
            The softness for rendering <i>soft particles</i>: Regular particles are rendered as flat 
            billboards, which create hard edges when they intersect with other geometry in the scene. 
            Soft particles have a volume and create soft transitions when they intersect with other 
            geometry.
            </para>
            <para>
            Parameter type: varying, value type: <see cref="T:System.Single"/>
            </para>
            <para>
            0 ... Disabled: The particles are rendered with hard edges.<br/>
            -1 or NaN ... Automatic: The thickness of the particle is determined automatically.<br/>
            &gt;1 ... Manual: The value defines the thickness of the particle (= soft particle distance 
            threshold).
            </para>
            <para>
            This parameter is optional.
            </para>
            </description>
            </item>
            <item>
            <term><see cref="F:DigitalRune.Particles.ParticleParameterNames.Texture"/></term>
            <description>
            <para>
            The particle texture (using premultiplied alpha).
            </para>
            <para>
            Parameter type: uniform, value type: <see cref="T:DigitalRune.Graphics.PackedTexture"/> or 
            <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/>
            </para>
            <para>
            This parameter is required!
            </para>
            </description>
            </item>
            <item>
            <term><see cref="F:DigitalRune.Particles.ParticleParameterNames.TextureTiling"/></term>
            <description>
            <para>
            For ribbons: Defines how a texture is applied to a particle ribbon ("tiling distance").
            </para>
            <para>
            Parameter type: uniform, value type: <see cref="T:System.Int32"/>
            </para>
            <para>
            0 ... No tiling: The texture is stretched along the ribbon.<br/>
            1 ... Tiling: The texture is repeated every particle.<br/>
            <i>n</i> ... Tiling with lower frequency: The texture is repeated every <i>n</i> particles.<br/>
            </para>
            <para>
            This parameter is optional.
            </para>
            </description>
            </item>
            <item>
            <term><see cref="F:DigitalRune.Particles.ParticleParameterNames.Type"/></term>
            <description>
            <para>
            The type of the particles, which determines whether particles are rendered as individual 
            billboards or connected quad strips ("ribbons").
            </para>
            <para>
            Parameter type: uniform, value type: <see cref="T:DigitalRune.Graphics.ParticleType"/>
            </para>
            <para>
            This parameter is optional.
            </para>
            </description>
            </item>
            </list>
            </para>
            <para>
            <strong>Particle Ribbons (a.k.a. "Beams", "Lines", "Trails"):</strong><br/>
            When the particle system has a uniform particle parameter "Type" set to 
            <see cref="F:DigitalRune.Graphics.ParticleType.Ribbon"/> then subsequent living particles are connected and rendered 
            as ribbons (quad strips). At least two living particles are required to create a ribbon. Dead
            particles ("NormalizedAge" ≥ 1) can be used as delimiters to terminate one ribbon and start 
            the next ribbon.
            </para>
            <para>
            The "Position" parameter defines the points along the ribbon curve. The "Axis" parameter can 
            be set to define the orientation of the ribbon. The axis needs to be normal to the ribbon 
            curve (i.e. the axis does not point into the ribbon direction).
            </para>
            <para>
            The uniform "TextureTiling" parameter defines how the texture is applied to the ribbon. If the
            value is 0 the texture is stretched along the ribbon curve where the texture coordinate u = 0 
            is mapped to the start and u = 1 is mapped to the end of the ribbon. If the "TextureTiling" 
            value is 1 the texture is repeated at every particle (= point along the ribbon curve). If the 
            "TextureTiling" is <i>n</i>, where <i>n</i> &gt; 1, then the texture is repeated every 
            <i>n</i> particles.
            </para>
            <para>
            <strong>Cloning:</strong><br/>
            When a <see cref="T:DigitalRune.Graphics.SceneGraph.ParticleSystemNode"/> is cloned the <see cref="P:DigitalRune.Graphics.SceneGraph.ParticleSystemNode.ParticleSystem"/> is not 
            duplicated. The <see cref="P:DigitalRune.Graphics.SceneGraph.ParticleSystemNode.ParticleSystem"/> is copied by reference (shallow copy). The 
            original <see cref="T:DigitalRune.Graphics.SceneGraph.ParticleSystemNode"/> and the cloned instance will reference the same 
            <see cref="T:DigitalRune.Particles.ParticleSystem"/> object.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.ParticleSystemNode.ParticleSystem">
            <summary>
            Gets or sets the particle system.
            </summary>
            <value>The particle system.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.ParticleSystemNode.Color">
            <summary>
            Gets or sets the tint color of the particle system instance.
            </summary>
            <value>The tint color (non-premultiplied). The default value is white (1, 1, 1).</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.ParticleSystemNode.Alpha">
            <summary>
            Gets or sets the opacity (alpha) of the particle system instance.
            </summary>
            <value>The opacity (alpha). The default value is 1.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.ParticleSystemNode.AngleOffset">
            <summary>
            Gets or sets the rotation offset which is added to all particles.
            </summary>
            <value>The rotation offset in radians which is added to all particles.</value>
            <remarks>
            The offset can be used to add variety to particle system when it is instanced by multiple
            nodes.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.ParticleSystemNode.#ctor(DigitalRune.Particles.ParticleSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.ParticleSystemNode" /> class.
            </summary>
            <param name="particleSystem">The particle system.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="particleSystem"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.ParticleSystemNode.Clone">
            <inheritdoc cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.Clone"/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.ParticleSystemNode.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.ParticleSystemNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.ParticleSystemNode.Synchronize(DigitalRune.Graphics.IGraphicsService)">
            <summary>
            Synchronizes the graphics data with the particle system data. (Needs to be called once per
            frame!)
            </summary>
            <param name="graphicsService">The graphics service.</param>
            <remarks>
            This method needs to be called once per frame to synchronize the graphics service with the
            particle system service. It creates a snapshot of the particle system and converts the 
            particles to render data.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.CameraFrustumQuery">
            <summary>
            Returns the scene nodes that touch a specific reference scene node (usually the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.CameraNode"/>).
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Graphics.SceneGraph.CameraFrustumQuery"/> can be executed against a scene by calling 
            <see cref="M:DigitalRune.Graphics.SceneGraph.IScene.Query``1(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)"/>. The query can be used to get all scene nodes in a scene that 
            touch a certain reference node. For example: This query is typically used for <i>frustum 
            culling</i> to get all meshes and lights inside the camera frustum. The reference node in this
            example is the camera node.
            </para>
            <para>
            This scene query does not evaluate <see cref="T:DigitalRune.Graphics.SceneGraph.LodGroupNode"/>s, i.e. the LOD conditions are 
            not evaluated. <see cref="T:DigitalRune.Graphics.SceneGraph.LodGroupNode"/>s are simply added to <see cref="P:DigitalRune.Graphics.SceneGraph.CameraFrustumQuery.SceneNodes"/> 
            collection when they touch the reference node. 
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.CameraFrustumQuery.ReferenceNode">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.CameraFrustumQuery.SceneNodes">
            <summary>
            Gets the scene nodes that touch the <see cref="P:DigitalRune.Graphics.SceneGraph.CameraFrustumQuery.ReferenceNode"/>.
            </summary>
            <value>The scene nodes that touch the <see cref="P:DigitalRune.Graphics.SceneGraph.CameraFrustumQuery.ReferenceNode"/>.</value>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.CameraFrustumQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.CameraFrustumQuery"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.CameraFrustumQuery.Reset">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.CameraFrustumQuery.Set(DigitalRune.Graphics.SceneGraph.SceneNode,System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.FogQuery">
            <summary>
            Returns the <see cref="P:DigitalRune.Graphics.SceneGraph.FogQuery.FogNodes"/> that affect a specific scene node.
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Graphics.SceneGraph.FogQuery"/> can be executed against a scene by calling 
            <see cref="M:DigitalRune.Graphics.SceneGraph.IScene.Query``1(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)"/>. The query can be used to get all <see cref="P:DigitalRune.Graphics.SceneGraph.FogQuery.FogNodes"/> that
            affect the current a certain reference node in the scene. The reference node is typically 
            the current <see cref="T:DigitalRune.Graphics.SceneGraph.CameraNode"/>.
            </para>
            <para>
            The <see cref="P:DigitalRune.Graphics.SceneGraph.FogQuery.FogNodes"/> are sorted by their <see cref="P:DigitalRune.Graphics.SceneGraph.FogNode.Priority"/> (descending),
            which means that the first node in the list is the most important fog effect.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.FogQuery.ReferenceNode">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.FogQuery.FogNodes">
            <summary>
            Gets the fog nodes.
            </summary>
            <value>The fog nodes.</value>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.FogQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.FogQuery"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.FogQuery.Reset">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.FogQuery.Set(DigitalRune.Graphics.SceneGraph.SceneNode,System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.GlobalLightQuery.ReferenceNode">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.GlobalLightQuery.AmbientLights">
            <summary>
            Gets the ambient lights.
            </summary>
            <value>The ambient lights.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.GlobalLightQuery.DirectionalLights">
            <summary>
            Gets the directional lights.
            </summary>
            <value>The directional lights.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.GlobalLightQuery.ImageBasedLights">
            <summary>
            Gets the image-based lights.
            </summary>
            <value>The image-based lights.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.GlobalLightQuery.OtherLights">
            <summary>
            Gets other lights that did not fit into any of the predefined categories
            (<see cref="P:DigitalRune.Graphics.SceneGraph.GlobalLightQuery.AmbientLights"/>, <see cref="P:DigitalRune.Graphics.SceneGraph.GlobalLightQuery.DirectionalLights"/>, etc.).
            </summary>
            <value>The other lights.</value>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.GlobalLightQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.GlobalLightQuery"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.GlobalLightQuery.Reset">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.GlobalLightQuery.Set(DigitalRune.Graphics.SceneGraph.SceneNode,System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.ISceneQuery">
             <summary>
             Represents a query that can be executed against a scene.
             </summary>
             <remarks>
             <para>
             A scene query returns all scene nodes that touch a given reference node. Queries can be 
             performed by calling <see cref="M:DigitalRune.Graphics.SceneGraph.IScene.Query``1(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)"/> of a <see cref="T:DigitalRune.Graphics.SceneGraph.IScene"/>. Here are a few 
             examples of scene queries: 
             <list type="bullet">
             <item>
             <description>
             A <see cref="T:DigitalRune.Graphics.SceneGraph.CameraFrustumQuery"/> gets all scene nodes within the camera frustum. The 
             reference node in this query is (usually) a camera node.
             </description>
             </item>
             <item>
             <description>
             A <see cref="T:DigitalRune.Graphics.SceneGraph.LightQuery"/> gets all lights that shine light on the reference node.
             </description>
             </item>
             <item>
             <description>
             A <see cref="T:DigitalRune.Graphics.SceneGraph.ShadowCasterQuery"/> gets all shadow casters near a light source. The reference
             node in this query is the light node.
             </description>
             </item>
             </list>
             </para>
             <para>
             Scene nodes where <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.IsEnabled"/> is <see langword="false"/> are ignored and
             do not show up in the query results.
             </para>
             <para>
             <strong>Notes to Implementors:</strong> Classes that implement <see cref="T:DigitalRune.Graphics.SceneGraph.ISceneQuery"/> must 
             have a parameterless constructor.
             </para>
             </remarks>
             <example>
             <para>
             The following examples demonstrates how to create a scene query that collects 
             <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode"/>s.
             </para>
             <code lang="csharp" title="MeshQuery">
             <![CDATA[
             using System.Collections.Generic;
             using DigitalRune.Graphics;
             using DigitalRune.Graphics.SceneGraph;
            
             namespace Samples
             {
               public class MeshQuery : ISceneQuery
               {
                 public SceneNode ReferenceNode { get; private set; }
                 public List<SceneNode> Meshes { get; private set; }
            
                 public MeshQuery()
                 {
                   Meshes = new List<SceneNode>();
                 }
            
                 public void Reset()
                 {
                   ReferenceNode = null;
                   Meshes.Clear();
                 }
            
                 public void Set(SceneNode referenceNode, IList<SceneNode> nodes, RenderContext context)
                 {
                   Reset();
                   ReferenceNode = referenceNode;
            
                   for (int i = 0; i < nodes.Count; i++)
                   {
                     var node = nodes[i];
                     if (node is MeshNode)
                       Meshes.Add(node);
                   }
                 }
               }
             }
             ]]>
             </code>
             <para>
             The query can, for example, be used to get all meshes within the camera frustum.
             <code lang="csharp">
             <![CDATA[
             ISceneQuery query = myScene.Query<MeshQuery>(cameraNode, renderContext);
             ]]>
             </code>
             </para>
             <para>
             <strong>Distance Culling:</strong><br/>
             The following example shows how to implement a scene query that performs <i>distance 
             culling</i> of scene nodes.
             </para>
             <code lang="csharp" title="Scene Query with Distance Culling">
             <![CDATA[
             using System.Collections.Generic;
             using DigitalRune.Graphics;
             using DigitalRune.Graphics.SceneGraph;
             using DigitalRune.Mathematics;
             
             namespace Samples
             {
               public class SceneQueryWithDistanceCulling : ISceneQuery
               {
                 public SceneNode ReferenceNode { get; private set; }
                 public List<SceneNode> Nodes { get; private set; }
            
                 public SceneQueryWithDistanceCulling()
                 {
                   Nodes = new List<SceneNode>();
                 }
            
                 public void Reset()
                 {
                   ReferenceNode = null;
                   Nodes.Clear();
                 }
            
                 public void Set(SceneNode referenceNode, IList<SceneNode> nodes, RenderContext context)
                 {
                   Reset();
                   ReferenceNode = referenceNode;
            
                   var cameraNode = context.LodCameraNode;
                   if (cameraNode == null)
                     throw new GraphicsException("LOD camera node needs to be set in render context.");
             
                   for (int i = 0; i < nodes.Count; i++)
                   {
                     var node = nodes[i];
            
                     // Calculate view-normalized distance of scene node.
                     float distance = GraphicsHelper.GetViewNormalizedDistance(node, cameraNode);
                     distance *= cameraNode.LodBias * context.LodBias;
             
                     // Distance Culling: Check whether scene node is within MaxDistance.
                     if (Numeric.IsPositiveFinite(node.MaxDistance) && distance >= node.MaxDistance)
                       continue;   // Ignore scene node.
                     
                     Nodes.Add(node);
                   }
                 }
               }
             }
             ]]>
             </code>
             <para>
             <strong>Level of Detail:</strong><br/>
             Level of detail (see <see cref="T:DigitalRune.Graphics.SceneGraph.LodGroupNode"/>) needs to be evaluated by the scene query. The 
             following example implements distance culling and LOD selection.
             </para>
             <code lang="csharp" title="Scene Query with Level Of Detail">
             <![CDATA[
             using System.Collections.Generic;
             using DigitalRune.Graphics;
             using DigitalRune.Graphics.SceneGraph;
             using DigitalRune.Mathematics;
             
             namespace Samples
             {
               public class SceneQueryWithLod : ISceneQuery
               {
                 public SceneNode ReferenceNode { get; private set; }
                 public List<SceneNode> Nodes { get; private set; }
            
                 public SceneQueryWithLod()
                 {
                   Nodes = new List<SceneNode>();
                 }
            
                 public void Reset()
                 {
                   ReferenceNode = null;
                   Nodes.Clear();
                 }
            
                 public void Set(SceneNode referenceNode, IList<SceneNode> nodes, RenderContext context)
                 {
                   Reset();
                   ReferenceNode = referenceNode;
            
                   if (context.LodCameraNode == null)
                     throw new GraphicsException("LOD camera node needs to be set in render context.");
             
                   for (int i = 0; i < nodes.Count; i++)
                     AddNode(nodes[i], context);
                 }
             
                 private void AddNode(SceneNode node, RenderContext context)
                 {
                   var cameraNode = context.LodCameraNode;
             
                   // Calculate view-normalized distance.
                   float distance = GraphicsHelper.GetViewNormalizedDistance(node, cameraNode);
                   distance *= cameraNode.LodBias * context.LodBias;
             
                   // Distance Culling: Check whether scene node is within MaxDistance.
                   if (Numeric.IsPositiveFinite(node.MaxDistance) && distance >= node.MaxDistance)
                     return;   // Ignore scene node.
             
                   var lodGroupNode = node as LodGroupNode;
                   if (lodGroupNode != null)
                   {
                     // Evaluate LOD group.
                     var lodSelection = lodGroupNode.SelectLod(context, distance);
                     AddSubtree(lodSelection.Current, context);
                   }
                   else
                   {
                     Nodes.Add(node);
                   }
                 }
             
                 private void AddSubtree(SceneNode node, RenderContext context)
                 {
                   if (node.IsEnabled)
                   {
                     AddNode(node, context);
             
                     if (node.Children != null)
                     foreach (var childNode in node.Children)
                       AddSubtree(childNode, context);
                   }
                 }
               }
             }
             ]]>
             </code>
             </example>
             <seealso cref="T:DigitalRune.Graphics.SceneGraph.IScene"/>
             <seealso cref="T:DigitalRune.Graphics.SceneGraph.Scene"/>
             <seealso cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.ISceneQuery.ReferenceNode">
            <summary>
            Gets the reference node.
            </summary>
            <value>The reference node.</value>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.ISceneQuery.Reset">
            <summary>
            Resets this query.
            </summary>
            <remarks>
            <see cref="P:DigitalRune.Graphics.SceneGraph.ISceneQuery.ReferenceNode"/> is set to <see langword="null"/>, and any cached results are 
            cleared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.ISceneQuery.Set(DigitalRune.Graphics.SceneGraph.SceneNode,System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext)">
            <summary>
            Sets the query result. 
            </summary>
            <param name="referenceNode">The reference node; can be <see langword="null"/>.</param>
            <param name="nodes">
            The scene nodes that touch the reference node. (Note to caller: <paramref name="nodes"/>
            should not contain disabled scene nodes!)
            </param>
            <param name="context">The render context.</param>
            <remarks>
            This method is called by the scene to store the result of the query.
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.LightQuery">
            <summary>
            Returns the lights that affect a specific scene node.
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Graphics.SceneGraph.LightQuery"/> can be executed against a scene by calling 
            <see cref="M:DigitalRune.Graphics.SceneGraph.IScene.Query``1(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)"/>. The query can be used to get all <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/>s that
            affect a certain reference node in the scene. The reference node is typically the scene node 
            that is currently being rendered.
            </para>
            <para>
            The light nodes are grouped by type (ambient lights, directional lights, etc.). The lights
            within each group are usually sorted descending by the approximate light contribution on the 
            reference node. That means, lights that have a strong influence on the reference node are 
            listed before lights that have a weak influence.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.LightQuery.ReferenceNode">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.LightQuery.AmbientLights">
            <summary>
            Gets the ambient lights.
            </summary>
            <value>The ambient lights.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.LightQuery.DirectionalLights">
            <summary>
            Gets the directional lights.
            </summary>
            <value>The directional lights.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.LightQuery.PointLights">
            <summary>
            Gets the point lights.
            </summary>
            <value>The point lights.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.LightQuery.Spotlights">
            <summary>
            Gets the spotlights.
            </summary>
            <value>The spotlights.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.LightQuery.ProjectorLights">
            <summary>
            Gets the projector lights.
            </summary>
            <value>The projector lights.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.LightQuery.ImageBasedLights">
            <summary>
            Gets the image-based lights.
            </summary>
            <value>The image-based lights.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.LightQuery.OtherLights">
            <summary>
            Gets other lights that did not fit into any of the predefined categories
            (<see cref="P:DigitalRune.Graphics.SceneGraph.LightQuery.AmbientLights"/>, <see cref="P:DigitalRune.Graphics.SceneGraph.LightQuery.DirectionalLights"/>, etc.).
            </summary>
            <value>The other lights.</value>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LightQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.LightQuery"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LightQuery.Reset">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.LightQuery.Set(DigitalRune.Graphics.SceneGraph.SceneNode,System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.ShadowCasterQuery">
            <summary>
            Returns the shadow casting nodes that touch a specific reference scene node.
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Graphics.SceneGraph.ShadowCasterQuery"/> can be executed against a scene by calling 
            <see cref="M:DigitalRune.Graphics.SceneGraph.IScene.Query``1(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)"/>. The query can be used to get all shadow casters in a scene that
            touch a certain reference node (usually the light node).
            </para>
            <para>
            A scene node casts a shadow if <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.CastsShadows"/> is set. If the 
            reference node of the query or the <see cref="P:DigitalRune.Graphics.RenderContext.ReferenceNode"/> in the 
            <see cref="T:DigitalRune.Graphics.RenderContext"/> is a <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/> with a 
            <see cref="T:DigitalRune.Graphics.DirectionalLight"/>, then the query also checks the 
            <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.IsShadowCasterCulled"/> flag.
            </para>
            <para>
            <para>
            <strong>Terrain nodes:</strong><br/>
            <see cref="T:DigitalRune.Graphics.SceneGraph.TerrainNode"/> are special. They only cast directional light shadows and are
            ignored for other light types.
            </para>
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.ShadowCasterQuery.ReferenceNode">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.ShadowCasterQuery.ShadowCasters">
            <summary>
            Gets the scene nodes that cast shadows.
            </summary>
            <value>The scene nodes that cast shadows.</value>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.ShadowCasterQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.ShadowCasterQuery"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.ShadowCasterQuery.Reset">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.ShadowCasterQuery.Set(DigitalRune.Graphics.SceneGraph.SceneNode,System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.PlanarReflectionNode">
            <summary>
            Represents an image of a planar reflection (e.g. a flat mirror).
            </summary>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Graphics.SceneGraph.PlanarReflectionNode"/> can be used to create a reflection image, e.g. for flat
            mirrors, water surfaces, etc. The render-to-texture operation is usually performed by a
            <see cref="T:DigitalRune.Graphics.Rendering.PlanarReflectionRenderer"/>.
            </para>
            <para>
            The reflection plane goes through the local origin of this scene node. The orientation and
            front side of the mirror is defined by <see cref="P:DigitalRune.Graphics.SceneGraph.PlanarReflectionNode.NormalLocal"/>. The <see cref="P:DigitalRune.Graphics.SceneGraph.PlanarReflectionNode.Shape"/>
            should be set to encompass the reflecting object.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.PlanarReflectionNode.CameraNode">
            <summary>
            Gets or sets the camera node.
            </summary>
            <value>The camera node.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.PlanarReflectionNode.Far">
            <summary>
            Gets or sets the far plane distance for the reflection camera.
            </summary>
            <value>
            The far plane distance for the reflection camera. If this value is <see langword="null"/>,
            the far distance of the normal camera is used. The default value is <see langword="null"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.PlanarReflectionNode.FieldOfViewScale">
            <summary>
            Gets or sets the field-of-view scale.
            </summary>
            <value>The field-of-view scale. The default value is 1.</value>
            <remarks>
            If this value is 1, then the reflection camera will capture the scene which can be scene
            from a perfectly planar reflection (e.g. a flat mirror). However, when the reflection is
            distorted (e.g. using normal maps), then the reflection can show parts of the scene which
            are not visible in a flat mirror. For this case you can set the
            <see cref="P:DigitalRune.Graphics.SceneGraph.PlanarReflectionNode.FieldOfViewScale"/> to a value greater than 1 to capture a bigger image.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.PlanarReflectionNode.LodBias">
            <summary>
            Gets or sets the LOD bias.
            </summary>
            <value>The LOD bias. The default value is <see langword="null"/>.</value>
            <remarks>
            This LOD bias is applied in addition to the LOD bias of the normal camera when rendering the
            reflected scene.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.PlanarReflectionNode.NormalLocal">
            <summary>
            Gets or sets the normal of the reflection plane in local space.
            </summary>
            <value>
            The normal of the reflection plane in local space. The default value is (0, 0, 1).
            </value>
            <remarks>
            This normal defines the orientation of the reflection plane. The normal points away from the
            front side of the reflection plane.
            </remarks>
            <exception cref="T:System.ArgumentException">
            The normal vector must be normalized.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.PlanarReflectionNode.NormalWorld">
            <summary>
            Gets the normal of the reflection plane in world space.
            </summary>
            <value>The normal world of the reflection plane in world space.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.PlanarReflectionNode.Shape">
            <summary>
            Gets or sets the bounding shape of this scene node.
            </summary>
            <value>
            The bounding shape. The bounding shape contains only the current node - it does not include 
            the bounds of the children! The default value is an 
            <see cref="F:DigitalRune.Geometry.Shapes.Shape.Infinite"/> shape.
            </value>
            <inheritdoc cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.Shape"/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.PlanarReflectionNode.#ctor(DigitalRune.Graphics.RenderToTexture)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.PlanarReflectionNode" /> class.
            </summary>
            <param name="renderToTexture">The render texture target.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="renderToTexture"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.PlanarReflectionNode.Clone">
            <inheritdoc cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.Clone"/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.PlanarReflectionNode.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.PlanarReflectionNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.RenderToTextureNode">
            <summary>
            Represents a scene node which renders data to a texture (e.g. a scene capture, an environment
            map, or a reflection image for a mirror).
            </summary>
            <remarks>
            <para>
            </para>
            <para>
            <strong>Cloning:</strong> When a <see cref="T:DigitalRune.Graphics.SceneGraph.RenderToTextureNode"/> is cloned, the
            <see cref="P:DigitalRune.Graphics.SceneGraph.RenderToTextureNode.RenderToTexture"/> property is not duplicated. The <see cref="P:DigitalRune.Graphics.SceneGraph.RenderToTextureNode.RenderToTexture"/> 
            property is copied by reference (shallow copy). The original <see cref="T:DigitalRune.Graphics.SceneGraph.RenderToTextureNode"/> 
            and the cloned instance will reference the same <see cref="T:DigitalRune.Graphics.RenderToTexture"/> object.
            </para>
            </remarks>
            <seealso cref="T:DigitalRune.Graphics.RenderToTexture"/>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.RenderToTextureNode.RenderToTexture">
            <summary>
            Gets or sets the render-to-texture target.
            </summary>
            <value>The render-to-texture target.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.RenderToTextureNode.#ctor(DigitalRune.Graphics.RenderToTexture)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.RenderToTextureNode" /> class.
            </summary>
            <param name="renderToTexture">The render texture target.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="renderToTexture"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.RenderToTextureNode.Dispose(System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.SceneCaptureNode">
            <summary>
            Captures a snapshot of the scene.
            </summary>
            <remarks>
            <para>
            This node can be used to capture the scene as viewed from a specific camera (see property
            <see cref="P:DigitalRune.Graphics.SceneGraph.SceneCaptureNode.CameraNode"/>). The render-to-texture operation is usually performed by a
            <see cref="T:DigitalRune.Graphics.Rendering.SceneCaptureRenderer"/>. The <see cref="T:DigitalRune.Graphics.Rendering.SceneCaptureRenderer"/> will render the
            scene for each <see cref="T:DigitalRune.Graphics.SceneGraph.SceneCaptureNode"/> where a valid render target (see property
            <see cref="P:DigitalRune.Graphics.SceneGraph.RenderToTextureNode.RenderToTexture"/>) and a valid <see cref="P:DigitalRune.Graphics.SceneGraph.SceneCaptureNode.CameraNode"/> is
            set.
            </para>
            <para>
            <strong>2D and Cube Map Render Targets:</strong><br/>
            A valid render target must be set in the <see cref="P:DigitalRune.Graphics.SceneGraph.RenderToTextureNode.RenderToTexture"/>
            property. The target texture can be a <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/> to capture a 2D image or a
            <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTargetCube"/> to capture an environment map. If the render target is a cube
            map, then the scene will be rendered 6 times, once for each cube map side.
            </para>
            <para>
            <strong>Shared RenderToTexture instances:</strong><br/>
            Several <see cref="T:DigitalRune.Graphics.SceneGraph.SceneCaptureNode"/>s can reference the same <see cref="T:DigitalRune.Graphics.RenderToTexture"/>
            instance. In this case, the scene is rendered only once. - See the example below.
            </para>
            <para>
            <strong>Frustum Culling:</strong><br/>
            The <see cref="T:DigitalRune.Graphics.SceneGraph.SceneCaptureNode"/> is a normal scene node which can be added to the scene
            graph. The default <see cref="P:DigitalRune.Graphics.SceneGraph.SceneCaptureNode.Shape"/> is an infinite shape - which means that this node is
            always visible. However, it is recommended to set a smaller shape. Thus, the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneCaptureNode"/> can be used for frustum culling - if it is culled, then no 
            image needs to be captured.
            </para>
            </remarks>
            <example>
            <para>
            A prison level of a game has a surveillance camera. The recorded image should be displayed on
            several 3D models which represent security monitors. In this case, create one 
            <see cref="P:DigitalRune.Graphics.SceneGraph.SceneCaptureNode.CameraNode"/> for the surveillance camera. Create one <see cref="T:DigitalRune.Graphics.RenderToTexture"/>
            instance which is shared by several <see cref="T:DigitalRune.Graphics.SceneGraph.SceneCaptureNode"/>s. Create a
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneCaptureNode"/> for each monitor mesh node.  Add the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneCaptureNode"/> to the children of the monitor mesh node. Set the shape of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneCaptureNode"/> to the shape of the monitor mesh node. - This way, the
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneCaptureNode"/> has the same pose and shape as the model which uses captured
            texture; and if no <see cref="T:DigitalRune.Graphics.SceneGraph.SceneCaptureNode"/> is visible from the player camera, then the
            scene does not need to be captured in this frame (because the player does not look at any
            monitor). If a <see cref="T:DigitalRune.Graphics.SceneGraph.SceneCaptureNode"/> is visible, then the scene is captured once per
            frame.
            </para>
            <para>
            Note: How a captured texture is used, is not defined by the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneCaptureNode"/>.
            You can, for example, use an effect parameter binding to use the texture when rendering a
            mesh.
            </para>
            </example>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SceneCaptureNode.CameraNode">
            <summary>
            Gets or sets the camera node.
            </summary>
            <value>The camera node.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SceneCaptureNode.Shape">
            <summary>
            Gets or sets the bounding shape of this scene node.
            </summary>
            <value>
            The bounding shape. The bounding shape contains only the current node - it does not include 
            the bounds of the children! The default value is an 
            <see cref="F:DigitalRune.Geometry.Shapes.Shape.Infinite"/> shape.
            </value>
            <inheritdoc cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.Shape"/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneCaptureNode.#ctor(DigitalRune.Graphics.RenderToTexture)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneCaptureNode" /> class.
            </summary>
            <param name="renderToTexture">The render texture target.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="renderToTexture"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneCaptureNode.Clone">
            <inheritdoc cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.Clone"/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneCaptureNode.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneCaptureNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs">
            <summary>
            Provides arguments for an event concerning a <see cref="P:DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs.SceneNode"/>.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs.SceneNode">
            <summary>
            Gets or sets the scene node.
            </summary>
            <value>The scene node.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs.Changes">
            <summary>
            Gets or sets the changes.
            </summary>
            <value>The changes.</value>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs.#ctor">
            <summary>
            Constructs a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs.Create(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.SceneGraph.SceneChanges)">
            <summary>
            Creates an instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs"/> class. (This method reuses a
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
            <param name="sceneNode">The scene node.</param>
            <param name="changes">The changes.</param>
            <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs"/> class.
            </returns>
            <remarks>
            <para>
            This method tries to obtain a previously recycled instance from a resource pool if resource
            pooling is enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>). If no
            object is available, a new instance is automatically allocated on the heap.
            </para>
            <para>
            The owner of the object should call <see cref="M:DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs.Recycle"/> when the instance is no longer
            needed.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sceneNode"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs.Recycle">
            <summary>
            Recycles this instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs"/> class.
            </summary>
            <remarks>
            <para>
            This method resets this instance and returns it to a resource pool if resource pooling is 
            enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>).
            </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.SceneChanges">
            <summary>
            Specifies a change in the scene graph.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.SceneGraph.SceneChanges.None">
            <summary>
            No change.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.SceneGraph.SceneChanges.NodeAdded">
            <summary>
            A scene node was added to the local subtree.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.SceneGraph.SceneChanges.NodeRemoved">
            <summary>
            A scene node was removed from the local subtree.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.SceneGraph.SceneChanges.IsEnabledChanged">
            <summary>
            A scene node's <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.IsEnabled"/> flag has changed.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.SceneGraph.SceneChanges.ShapeChanged">
            <summary>
            The bounding shape of a scene node has changed.
            </summary>
        </member>
        <member name="F:DigitalRune.Graphics.SceneGraph.SceneChanges.PoseChanged">
            <summary>
            The pose of a scene node has changed.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.SceneHelper">
            <summary>
            Provides helper methods for working with a scene graph and <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/>s.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SceneHelper.CollisionDetection">
            <summary>
            Gets a shared collision detection instance.
            </summary>
            <value>
            The shared collision detection instance.
            </value>
            <remarks>
            This instance can be used for ad-hoc collision tests, e.g. in WaterNode.IsUnderwater.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetChildren(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <summary>
            Gets the children of the given scene node.
            </summary>
            <param name="node">The node.</param>
            <returns>
            The children of the given node or an empty <see cref="T:System.Collections.Generic.IEnumerable`1"/> if 
            <paramref name="node"/> or <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.Children"/> is <see langword="null"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetRoot(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <summary>
            Gets the root node.
            </summary>
            <param name="node">The scene node.</param>
            <returns>The root node.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetAncestors(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <summary>
            Gets the ancestors of the given scene node.
            </summary>
            <param name="node">The scene node.</param>
            <returns>The ancestors of this scene node.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetSelfAndAncestors(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <summary>
            Gets the scene node and its ancestors scene.
            </summary>
            <param name="node">The scene node.</param>
            <returns>The <paramref name="node"/> and its ancestors of the scene.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetDescendants(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <overloads>
            <summary>
            Gets the descendants of the given scene node.
            </summary>
            </overloads>
            
            <summary>
            Gets the descendants of the given scene node using a depth-first search.
            </summary>
            <param name="node">The scene node.</param>
            <returns>The descendants of this scene node in depth-first order.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetDescendants(DigitalRune.Graphics.SceneGraph.SceneNode,System.Boolean)">
            <summary>
            Gets the descendants of the given scene node using a depth-first or a breadth-first search.
            </summary>
            <param name="node">The scene node.</param>
            <param name="depthFirst">
            If set to <see langword="true"/> then a depth-first search for descendants will be made; 
            otherwise a breadth-first search will be made.
            </param>
            <returns>The descendants of this scene node.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetSubtree(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <overloads>
            <summary>
            Gets the subtree (the given scene node and all of its descendants).
            </summary>
            </overloads>
            
            <summary>
            Gets the subtree (the given scene node and all of its descendants) using a depth-first 
            search.
            </summary>
            <param name="node">The scene node.</param>
            <returns>
            The subtree (the given scene node and all of its descendants) in depth-first order.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetSubtree(DigitalRune.Graphics.SceneGraph.SceneNode,System.Boolean)">
            <summary>
            Gets the subtree (the given scene node and all of its descendants) using a depth-first or a 
            breadth-first search.
            </summary>
            <param name="node">The scene node.</param>
            <param name="depthFirst">
            If set to <see langword="true"/> then a depth-first search for descendants will be made; 
            otherwise a breadth-first search will be made.
            </param>
            <returns>The subtree (the given scene node and all of its descendants).</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetLeaves(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <summary>
            Gets the leaves of the scene node.
            </summary>
            <param name="node">The scene node where to start the search.</param>
            <returns>The leaves of the scene node.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.LookAt(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <overloads>
            <summary>
            Positions/rotates the scene node so that it faces a certain direction (in world space).
            </summary>
            </overloads>
            
            <summary>
            Rotates the scene node so that it faces a certain direction (in world space).
            </summary>
            <param name="node">The scene node.</param>
            <param name="target">
            The target coordinates in world space at which the scene node is "looking".
            </param>
            <param name="upVector">
            The direction that is "up" from the scene node's point of view given in world space. (Does 
            not need to be normalized.)
            </param>
            <remarks>
            A scene node uses the same coordinate system as the <strong>XNA Framework</strong>:
            By default, the positive x-axis points to the right, the positive y-axis points up, and the 
            positive z-axis points towards the viewer. This method rotates the scene node so that its
            local forward direction (0, 0, -1) is pointing towards <paramref name="target"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Current <see cref="T:DigitalRune.Geometry.Pose"/>.<see cref="F:DigitalRune.Geometry.Pose.Position"/> is the same as 
            <paramref name="target"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="upVector"/> is (0, 0, 0).
            </exception>
            <exception cref="T:System.DivideByZeroException">
            The direction (<paramref name="target"/> - <see cref="T:DigitalRune.Geometry.Pose"/>.<see cref="F:DigitalRune.Geometry.Pose.Position"/>) 
            is probably pointing in the same or opposite direction as <paramref name="upVector"/>. (The 
            two vectors must not be parallel.)
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.LookAt(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Moves and rotates the scene node so that it faces a certain direction (in world space).
            </summary>
            <param name="node">The scene node.</param>
            <param name="position">The new position in world space.</param>
            <param name="target">
            The target coordinates in world space at which the scene node is "looking".
            </param>
            <param name="upVector">
            The direction that is "up" from the scene node's point of view given in world space. (Does 
            not need to be normalized.)
            </param>
            <remarks>
            A scene node uses the same coordinate system as the <strong>XNA Framework</strong>:
            By default, the positive x-axis points to the right, the positive y-axis points up, and the 
            positive z-axis points towards the viewer. This method moves the scene node to 
            <paramref name="position"/> and rotates it so that its local forward direction (0, 0, -1) is 
            pointing towards <paramref name="target"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="position"/> is the same as <paramref name="target"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="upVector"/> is (0, 0, 0).
            </exception>
            <exception cref="T:System.DivideByZeroException">
            The camera direction (<paramref name="target"/> - <paramref name="position"/>) is probably 
            pointing in the same or opposite direction as <paramref name="upVector"/>. (The two vectors 
            must not be parallel.)
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetSceneNode(DigitalRune.Graphics.SceneGraph.SceneNode,System.String)">
            <summary>
            Gets a scene node by name from the subtree of the specified scene node.
            </summary>
            <param name="node">The scene node.</param>
            <param name="name">The name.</param>
            <returns>
            The first scene node with the given name; or <see langword="null"/> if no matching scene 
            node is found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.Contains(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.SceneGraph.SceneNode)">
            <summary>
            Determines whether whether a scene node contains another scene node in its subtree.
            </summary>
            <param name="containingNode">The containing node.</param>
            <param name="containedNode">The contained node.</param>
            <returns>
            <see langword="true"/> if the subtree where the root is <paramref name="containingNode"/>
            contains <paramref name="containedNode"/> (in other words, <paramref name="containingNode"/>
            is an ancestor of <paramref name="containedNode"/> or both nodes are equal); 
            otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="containingNode"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.ClearLastPose(DigitalRune.Graphics.SceneGraph.SceneNode,System.Boolean)">
            <summary>
            Clears the <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.LastPoseWorld"/> property of the current scene node (and its 
            descendants).
            </summary>
            <param name="sceneNode">The scene node.</param>
            <param name="recursive">
            If set to <see langword="true"/> this method is executed recursively on the specified node 
            and all descendants nodes; otherwise, this method is executed only on the specified node.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sceneNode"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.ClearLastScale(DigitalRune.Graphics.SceneGraph.SceneNode,System.Boolean)">
            <summary>
            Clears the <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.LastScaleWorld"/> property of the current scene node (and 
            its descendants).
            </summary>
            <param name="sceneNode">The scene node.</param>
            <param name="recursive">
            If set to <see langword="true"/> this method is executed recursively on the specified node 
            and all descendants nodes; otherwise, this method is executed only on the specified node.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sceneNode"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.SetLastPose(DigitalRune.Graphics.SceneGraph.SceneNode,System.Boolean)">
            <summary>
            Sets <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.LastPoseWorld"/> to the current 
            <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.PoseWorld"/>.
            </summary>
            <param name="sceneNode">The scene node.</param>
            <param name="recursive">
            If set to <see langword="true"/> this method is executed recursively on the specified node 
            and all descendants nodes; otherwise, this method is executed only on the specified node.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sceneNode"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.SetLastScale(DigitalRune.Graphics.SceneGraph.SceneNode,System.Boolean)">
            <summary>
            Sets <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.LastScaleWorld"/> to the current 
            <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.ScaleWorld"/>.
            </summary>
            <param name="sceneNode">The scene node.</param>
            <param name="recursive">
            If set to <see langword="true"/> this method is executed recursively on the specified node 
            and all descendants nodes; otherwise, this method is executed only on the specified node.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sceneNode"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetSubtreeAabb(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <summary>
            Gets the AABB of the current subtree.
            </summary>
            <param name="sceneNode">The scene node (= root of subtree).</param>
            <returns>
            The AABB of the subtree rooted at <paramref name="sceneNode"/>, or <see langword="null"/> if
            the subtree is empty.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetSubtreeAabbInternal(DigitalRune.Graphics.SceneGraph.SceneNode,System.Nullable{DigitalRune.Geometry.Shapes.Aabb}@)">
            <summary>
            Gets the AABB of the current subtree.
            </summary>
            <param name="sceneNode">The scene node (= root of subtree).</param>
            <param name="aabb">
            The AABB of the subtree rooted at <paramref name="sceneNode"/>, or <see langword="null"/> if
            the subtree is empty. If the input parameter is non-null, the method grows the specified 
            AABB to include the subtree.
            </param>
            <returns>
            <see langword="true"/> if the extent of the current subtree is infinite in one or more 
            dimensions; otherwise, <see langword="false"/> if the subtree is empty or has finite size.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.SupportsInstanceAlpha(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <summary>
            Determines whether the opacity of the scene node can be changed using 
            <see cref="M:DigitalRune.Graphics.SceneGraph.SceneHelper.SetInstanceAlpha(DigitalRune.Graphics.SceneGraph.SceneNode,System.Single)"/>.
            </summary>
            <param name="node">The scene node.</param>
            <returns>
            <see langword="true"/> if the scene node has an alpha parameter that can be changed using
            <see cref="M:DigitalRune.Graphics.SceneGraph.SceneHelper.SetInstanceAlpha(DigitalRune.Graphics.SceneGraph.SceneNode,System.Single)"/>; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.SetInstanceAlpha(DigitalRune.Graphics.SceneGraph.SceneNode,System.Single)">
            <summary>
            Sets the opacity (alpha) of a scene node - see remarks.
            </summary>
            <param name="node">The scene node.</param>
            <param name="alpha">The alpha value.</param>
            <remarks>
            This method can be called for all types of <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/>s. If the node is a
            <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode"/>, the method sets the 
            <see cref="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.InstanceAlpha"/> effect parameter bindings in 
            the material instances. Currently, this method does nothing for all other types of scene 
            nodes.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.SceneNode">
            <summary>
            Represents an object in a 3D scene.
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/> usually represents an instance of a graphics object in a 3D scene. 
            See derived classes such as <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode"/>, <see cref="T:DigitalRune.Graphics.SceneGraph.CameraNode"/>, 
            <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/>, etc.
            </para>
            <para>
            A scene node can have a transformation (see <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.ScaleLocal"/>/<see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.PoseLocal"/>,
            <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.ScaleWorld"/>/<see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.PoseWorld"/>), a bounding shape (see <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.Shape"/>), 
            a parent and children (see <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.Parent"/>, <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.Children"/>). 
            </para>
            <para>
            <strong>Scene Graph:</strong><br/>
            The scene node hierarchy, defined by the properties <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.Parent"/> and 
            <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.Children"/>, is a tree (a graph without cycles). A scene node can only have zero or
            one parent - it cannot be the child of multiple other nodes. Scene nodes are attached to their
            parent: When the parent node is transformed (rotated or translated) in a scene, all descendant
            nodes move together with the parent node.
            </para>
            <para>
            <strong>Local Transformation vs. World Transformation:</strong><br/>
            <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.ScaleLocal"/> and <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.PoseLocal"/> describe the local transformation of a 
            node relative to its parent node. <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.ScaleWorld"/> and <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.PoseWorld"/> 
            describe the absolute transformation of a node in world space.
            </para>
            <para>
            The transformation can be set either in local space (using <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.ScaleLocal"/> and 
            <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.PoseLocal"/>) or in world space (using <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.PoseWorld"/>). The other 
            properties will be updated automatically. (Note: <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.ScaleWorld"/> cannot be set 
            directly - the property is read-only.)
            </para>
            <para>
            The local transformation is the dominant transformation: When a scene node is detached from 
            its parent and attached to another scene node, it will be placed relative to the new parent. 
            The local transformation will remain the same, but the world transformation will change - 
            except when the parent's transformation is the identity transform.
            </para>
            <para>
            <strong>Non-uniform Scaling:</strong><br/>
            Non-uniform scaling of scene nodes or subtrees is supported, but it should be used with care. 
            Non-uniform scalings can be expensive because they require special treatment. (Imagine a scene
            node which has a bounding sphere. When the node is scaled non-uniformly, the sphere becomes an
            ellipsoid. An ellipsoid requires a different collision algorithm than a simple sphere...)
            </para>
            <para>
            <strong>No Shearing:</strong><br/>
            Certain combinations of non-uniform scalings and rotations can create shear transformations. 
            Shearing complicates the scene management and prevents certain optimizations. Shearing is 
            therefore not supported! The scene graph automatically eliminates any shearing.
            </para>
            <para>
            <para>
            <strong>Transformation of Previous Frame:</strong><br/>
            A scene node additionally has two optional properties: <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.LastScaleWorld"/> and
            <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.LastPoseWorld"/>. These properties define the scene node's transformation of the 
            last frame that was rendered. This information is required by certain effects, such as object
            motion blur or camera motion blur. <strong>Important:</strong> These properties are not set 
            automatically! <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.LastScaleWorld"/> and <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.LastPoseWorld"/> need to be updated
            by the application logic whenever the transformation of the scene node is changed.
            </para>
            <strong>Bounding Shape:</strong><br/>
            The property <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.Shape"/> contains the bounding shape of the scene node. The 
            bounding shape is used by the <see cref="T:DigitalRune.Graphics.SceneGraph.Scene"/> for frustum culling and other optimizations.
            Be aware that the bounding shape of a scene node is <strong>not</strong> a hierarchical 
            bounding shape. It defines only the bounds of the current node. The bounding shape does 
            <strong>not</strong> include the bounds of the children!
            </para>
            <para>
            The <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.Shape"/> can be set to <see cref="F:DigitalRune.Geometry.Shapes.Shape.Infinite"/>. In this 
            case the scene node is never culled during frustum culling and is always visible.
            </para>
            <para>
            Some scene nodes have an <see cref="F:DigitalRune.Geometry.Shapes.Shape.Empty"/> bounding shape. These 
            scene nodes are ignored in scene queries. I.e. they do not show up in the query results!
            Newly created scene nodes have an <see cref="F:DigitalRune.Geometry.Shapes.Shape.Empty"/> bounding shape.
            The <see cref="T:DigitalRune.Graphics.SceneGraph.Scene"/> and <see cref="T:DigitalRune.Graphics.SceneGraph.ModelNode"/> also have an 
            <see cref="F:DigitalRune.Geometry.Shapes.Shape.Empty"/> shape. (These types of nodes are just used to group 
            other nodes in the scene graph. They can be ignored during rendering.)
            </para>
            <para>
            The root of a scene hierarchy is usually the <see cref="T:DigitalRune.Graphics.SceneGraph.Scene"/>. However, 
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/> objects can also be used independently from a <see cref="T:DigitalRune.Graphics.SceneGraph.Scene"/> 
            object. For example, when a <see cref="T:DigitalRune.Graphics.SceneGraph.ModelNode"/> is loaded the model hierarchy is also 
            defined as a tree of scene nodes. <see cref="T:DigitalRune.Graphics.SceneGraph.ModelNode"/>s can be placed inside a 
            <see cref="T:DigitalRune.Graphics.SceneGraph.Scene"/>, but they can also be used and rendered independently from a 
            <see cref="T:DigitalRune.Graphics.SceneGraph.Scene"/> object.
            </para>
            <para>
            <strong>Tree Traversal:</strong><br/>
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneHelper"/> provides various helper methods to traverse the scene tree using 
            LINQ: See 
            <see cref="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetRoot(DigitalRune.Graphics.SceneGraph.SceneNode)"/>, 
            <see cref="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetAncestors(DigitalRune.Graphics.SceneGraph.SceneNode)"/>, 
            <see cref="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetSelfAndAncestors(DigitalRune.Graphics.SceneGraph.SceneNode)"/>, 
            <see cref="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetChildren(DigitalRune.Graphics.SceneGraph.SceneNode)"/>, 
            <see cref="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetDescendants(DigitalRune.Graphics.SceneGraph.SceneNode)"/>, 
            <see cref="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetSubtree(DigitalRune.Graphics.SceneGraph.SceneNode)"/>, 
            <see cref="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetLeaves(DigitalRune.Graphics.SceneGraph.SceneNode)"/>
            </para>
            <para>
            <strong>Cloning:</strong><br/>
            Scene nodes are cloneable. <see cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.Clone"/> makes a copy of the current scene node and 
            recursively clones all children. The purpose of <see cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.Clone"/> is to replicate a single 
            scene node or an entire tree of scene nodes in a scene. For example, by repeatedly calling 
            <see cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.Clone"/> on a <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode"/> multiple copies ("instances") of a 
            <see cref="T:DigitalRune.Graphics.Mesh"/> object can be placed within a scene.
            </para>
            <para>
            A scene node contains <i>instance data</i>, which is specific to a certain scene node object 
            and <i>shared data</i>, which can be shared by multiple scene nodes. For example, a 
            <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode"/> contains <see cref="P:DigitalRune.Graphics.SceneGraph.MeshNode.MaterialInstances"/>, which are unique for
            each mesh node, and a <see cref="P:DigitalRune.Graphics.SceneGraph.MeshNode.Mesh"/>, which can be shared by multiple mesh nodes.
            By cloning a scene node all instance data is duplicated (deep copy), but the shared data is 
            only copied by reference (shallow copy). So, when a <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode"/> is cloned, the 
            original and the cloned mesh node will have a unique set of material instances 
            (<see cref="P:DigitalRune.Graphics.SceneGraph.MeshNode.MaterialInstances"/>), but both will share the same 
            <see cref="P:DigitalRune.Graphics.SceneGraph.MeshNode.Mesh"/>.
            </para>
            <para>
            Any object stored in <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.UserData"/> is copied per reference (shallow copy). 
            <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.SceneData"/> and <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.RenderData"/> are never copied when the scene node
            is cloned.
            </para>
            <para>
            <strong>Scene Node Sorting:</strong><br/>
            In many cases scene nodes need to be sorted. For example: 
            <list type="bullet">
            <item>
            <description>
            When rendering opaque objects the scene nodes need to be sorted front-to-back for efficient 
            rendering.
            </description>
            </item>
            <item>
            <description>
            When rendering transparent objects the scene nodes need to be sorted back-to-front for correct
            alpha transparency.
            </description>
            </item>
            <item>
            <description>
            When multiple light shine on an object, it can be helpful to sort the lights by their light
            contribution in order to identify the lights that should be rendered.
            </description>
            </item>
            <item>
            <description>
            Etc.
            </description>
            </item>
            </list>
            The property <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.SortTag"/> can be used for sorting scene nodes. For example, when 
            sorting scene nodes by distance, the distance can be computed and stored in 
            <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.SortTag"/>.
            </para>
            <para>
            <strong>Scene Node Disposal (Potential Memory Leaks!)</strong><br/>
            Scene nodes implement <see cref="T:System.IDisposable"/>. The <see cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.Dispose(System.Boolean)"/> method should
            be called when the scene node is no longer needed. This is necessary in order to prevent 
            potential memory leaks. Once the method has been called, the scene node is no longer usable.
            Reusing a previously disposed scene node may result in undefined behavior!
            </para>
            <para>
            When calling <see cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.Dispose(System.Boolean)"/>, the parameter determines whether data objects (such 
            as vertex buffers, index buffers, etc.) are disposed or preserved. Disposing scene nodes 
            including data objects can be dangerous because resources might be shared and still used by 
            other scene nodes. It is therefore recommended to pass <see langword="false"/> as parameter - 
            unless it is certain that the resources are no longer needed.
            </para>
            <para>
            Any data stored in <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.RenderData"/>, <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.SceneData"/>, or 
            <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.UserData"/> is disposed together with the scene node.
            </para>
            </remarks>
            <seealso cref="T:DigitalRune.Graphics.SceneGraph.IScene"/>
            <seealso cref="T:DigitalRune.Graphics.SceneGraph.ISceneQuery"/>
            <seealso cref="T:DigitalRune.Graphics.SceneGraph.Scene"/>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.Name">
            <summary>
            Gets or sets the name of this scene node.
            </summary>
            <value>The name of the scene node. The default value is <see langword="null"/>.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.Parent">
            <summary>
            Gets the parent scene node.
            </summary>
            <value>The parent scene node.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.Children">
            <summary>
            Gets or sets the children of this scene node.
            </summary>
            <value>
            The collection of children of the scene node. The default value is <see langword="null"/> -
            see remarks. Null entries are not allowed in the children collection.
            </value>
            <remarks>
            <para>
            The property is <see langword="null"/> by default to minimize the memory consumption of the 
            scene node. If the value is <see langword="null"/>, a new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNodeCollection"/>
            needs to be set before any scene nodes can be attached to the current node.
            </para>
            <example>
            The following example shows how to attach a scene node to another node.
            <code lang="csharp">
            <![CDATA[
            var node = new SceneNode();
            var childNode = new SceneNode();
            
            // First initialize the Children collection. (The property is null by default.)
            node.Children = new SceneNodeCollection();
            
            // Now attach the childNode to node.
            node.Children.Add(childNode);
            ]]>
            </code>
            </example>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.IsDisposed">
            <summary>
            Gets a value indicating whether this scene node has been disposed of.
            </summary>
            <value>
            <see langword="true"/> if this scene node has been disposed of; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.IsDirty">
            <summary>
            Gets or sets a value indicating whether this scene node is dirty. (See remarks.)
            </summary>
            <value>
            <see langword="true"/> if this scene node is dirty; otherwise, 
            <see langword="false"/>. The default value depends on the scene node type.
            </value>
            <remarks>
            The <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.IsDirty"/> flag is a general purpose flag that can be used in derived types
            to indicate that an update is required. The base class <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/> automatically
            sets the flag when the <see cref="T:DigitalRune.Geometry.Pose"/> or <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.Shape"/> changes, but it does not
            use the flag otherwise.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this scene node is enabled. (May override children - 
            see remarks.)
            </summary>
            <value>
            <see langword="true"/> if this scene node is enabled; otherwise, <see langword="false"/>.
            The default value is <see langword="true"/>.
            </value>
            <remarks>
            <para>
            The <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.IsEnabled"/> flag applies to the current scene node and its children: A scene
            node is only enabled, if its <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.IsEnabled"/> flag is <see langword="true"/> and
            all ancestors are enabled. When a parent node is disabled, all descendant nodes are 
            considered disabled!
            </para>
            <para>
            Disabled scene nodes are ignored in scene queries (see <see cref="T:DigitalRune.Graphics.SceneGraph.ISceneQuery"/>) and do not
            show up in the query results.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.ActualIsEnabled">
            <summary>
            Gets a value indicating whether this scene node is actually enabled. (The method checks the 
            current scene node and its ancestors.)
            </summary>
            <value>
            <see langword="true"/> if this scene node and its ancestors are enabled; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.IsStatic">
            <summary>
            Gets or sets a value indicating whether this scene node is static (immobile).
            </summary>
            <value>
            <see langword="true"/> if this scene node is static (immobile); otherwise, 
            <see langword="false"/>. The default value is <see langword="false"/>.
            </value>
            <remarks>
            Scene nodes can be marked as static, which enables certain effects and optimizations. Once a
            scene node is marked as static, its <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.PoseWorld"/> and <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.ScaleWorld"/> 
            should not be modified. It is possible to move static scene nodes, but it may a cause a 
            performance hit.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.IsRenderable">
            <summary>
            Gets or sets a value indicating whether this scene node can be rendered with a 
            <see cref="T:DigitalRune.Graphics.Rendering.SceneNodeRenderer"/>.
            </summary>
            <value>
            <see langword="true"/> if this scene node can be rendered; otherwise, 
            <see langword="false"/>. The default value depends on the scene node type.
            </value>
            <remarks>
            The property <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.IsRenderable"/> determines whether an object can be rendered. 
            Renderers should ignore the scene node if this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.CastsShadows">
            <summary>
            Gets or sets a value indicating whether this scene node blocks the light and casts shadows.
            </summary>
            <value>
            <see langword="true"/> if this scene node casts shadows; otherwise, <see langword="false"/>.
            The default value depends on the scene node type.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.IsShadowCasterCulled">
            <summary>
            Gets or sets a value indicating whether the occlusion culling determined that this scene 
            node does not need to be rendered into the shadow map of the directional light.
            </summary>
            <value>
            <see langword="true"/> if this scene node does not need to be rendered into the shadow map
            of the directional light; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            The <see cref="T:DigitalRune.Graphics.Rendering.OcclusionBuffer"/> can determine if shadow caster is in the shadow of another
            shadow caster. If this is the case, <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.IsShadowCasterCulled"/> is set to 
            <see langword="true"/> and the scene node does not need to be rendered into the shadow map.
            This is only valid for the directional light which set during occlusion culling.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.UserFlags">
            <summary>
            Gets or sets a 16-bit value which can be used to store user-defined information or flags.
            </summary>
            <value>A 16-bit value containing user-defined information.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.MaxDistance">
            <summary>
            Gets or sets the maximum distance up to which the scene node is rendered. (Needs to be
            normalized - see remarks.)
            </summary>
            <value>
            The <i>view-normalized</i> distance. The default value is 0, which means that distance
            culling is disabled and the scene node is visible from any distance.
            </value>
            <remarks>
            <para>
            The <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.MaxDistance"/> determines the distance up to which the scene node is visible.
            The value stored in this property is a <i>view-normalized distance</i> as described here:
            <see cref="M:DigitalRune.Graphics.GraphicsHelper.GetViewNormalizedDistance(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.SceneGraph.CameraNode)"/>. The method
            <see cref="M:DigitalRune.Graphics.GraphicsHelper.GetViewNormalizedDistance(System.Single,DigitalRune.Mathematics.Algebra.Matrix44F)"/> can be used to
            convert a distance to a view-normalized distance. The resulting value is independent of the
            current field-of-view and can be used for "distance culling".
            </para>
            <para>
            <strong>Important:</strong> The <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.MaxDistance"/> only affects the current scene
            node. It does not affect the visibility of child nodes.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.Proxy">
            <summary>
            Gets or sets the proxy node.
            </summary>
            <value>The proxy.</value>
            <remarks>
            <para>
            In certain cases scene nodes are referenced by other scene nodes, but they are not directly 
            registered in the scene. In such cases the scene node that is registered within the scene is
            called the <i>proxy node</i>. The scene node that is referenced by the proxy node is not 
            directly visible within the scene graph.
            </para>
            <para>
            Example: The <see cref="T:DigitalRune.Graphics.SceneGraph.LodGroupNode"/> is a proxy node. It contains a scene node or tree of 
            scene nodes for each level of detail. Only the <see cref="T:DigitalRune.Graphics.SceneGraph.LodGroupNode"/> is registered within 
            the scene. The individual levels of detail are referenced by the <see cref="T:DigitalRune.Graphics.SceneGraph.LodGroupNode"/>, but
            they do not show up in the scene graph.
            </para>
            <para>
            Each scene node has a property <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.Proxy"/>. This property is usually automatically 
            set by the proxy node. 
            </para>
            <para>
            <strong>Scene Queries with Proxy Nodes:</strong><br/>
            When a scene query is executed, it always uses the proxy node if one is set. Scene nodes 
            that are only referenced are ignored by the scene query, only the proxy nodes are included 
            in the query results.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.LastFrame">
            <summary>
            Gets or sets the number of the last frame in which the scene node was rendered.
            </summary>
            <value>The number of the frame in which the scene node was rendered.</value>
            <remarks>
            The property <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.LastFrame"/> can be used to determine when the scene node was 
            rendered the last time. Renderers need to update this property when they render the scene 
            node. The application logic can read this property and compare it with
            <see cref="P:DigitalRune.Graphics.IGraphicsService.Frame"/> to see if an object is visible and needs to be 
            updated in the next frame.
            </remarks>
            <seealso cref="P:DigitalRune.Graphics.IGraphicsService.Frame"/>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.RenderData">
            <summary>
            Gets or sets the cached renderer data.
            </summary>
            <value>The cached renderer data.</value>
            <remarks>
            <para>
            This property is not used by the scene node itself; it is reserved for use by a renderer 
            that renders this scene node. The renderer can cache data in this property.
            </para>
            <para>
            The <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.RenderData"/> is <strong>not</strong> cloned or copied when the scene node is
            being cloned. If the object implements <see cref="T:System.IDisposable"/> it will be disposed
            together with the scene node.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.SceneData">
            <summary>
            Gets or sets scene data.
            </summary>
            <value>The scene data.</value>
            <remarks>
            <para>
            This property is not used by the scene node itself. It is reserved for a "scene" which 
            manages the scene nodes. In this property the scene can store additional data with the scene
            node; for example, culling information.
            </para>
            <para>
            The <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.SceneData"/> is <strong>not</strong> cloned or copied when the scene node is
            being cloned. If the object implements <see cref="T:System.IDisposable"/> it will be disposed
            together with the scene node.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.SortTag">
            <summary>
            Gets or sets the sort tag.
            </summary>
            <value>The sort tag.</value>
            <remarks>
            <para>
            This property that can be used for sorting scene nodes. For example, when sorting scene 
            nodes by distance, the distance can be computed and stored in <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.SortTag"/>. The 
            sorting should occur immediately after assigning the sort tag. (Many renderers of 
            DigitalRune Graphics internally also use the sort tag. Hence, the property may be 
            overwritten by the graphics engine.)
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.UserData">
            <summary>
            Gets or sets user-defined data.
            </summary>
            <value>User-defined data.</value>
            <remarks>
            <para>
            This property is intended for application-specific data and is not used by the scene graph
            itself.
            </para>
            <para>
            Any object stored in <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.UserData"/> is copied per reference (shallow copy) when the
            scene node is cloned. If the object implements <see cref="T:System.IDisposable"/> it will be disposed
            together with the scene node.
            </para>
            </remarks>
        </member>
        <member name="E:DigitalRune.Graphics.SceneGraph.SceneNode.SceneChanged">
            <summary>
            Occurs when the local subtree changed.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.System#IDisposable#Dispose">
            <summary>
            Releases all resources used by the scene node and all descendant nodes.
            </summary>
            <remarks>
            This method calls the <see cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.Dispose(System.Boolean)"/> method, passing in <see langword="true"/>
            to dispose scene nodes including data objects.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the scene node and all descendant nodes.
            </summary>
            <param name="disposeData">
            <see langword="true"/> to dispose scene nodes including data objects; 
            <see langword="false"/> to dispose only scene nodes but preserve the data objects.
            </param>
            <remarks>
            <para>
            Scene nodes can share data objects. The parameter <paramref name="disposeData"/> determines
            whether data objects are disposed or preserved when the scene node is disposed. For example, 
            multiple <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode"/>s can share the same <see cref="T:DigitalRune.Graphics.Mesh"/>. When a 
            <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode"/> is disposed and <paramref name="disposeData"/> is 
            <see langword="true"/> the <see cref="T:DigitalRune.Graphics.Mesh"/> is disposed. All resources (vertex buffers, 
            index buffers, etc.) are released and the mesh is no longer usable.
            </para>
            <para>
            This method calls the virtual <see cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.Dispose(System.Boolean,System.Boolean)" /> method and then suppresses
            finalization of the instance.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.Dispose(System.Boolean,System.Boolean)">
            <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> class
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <see langword="true" /> to release both managed and unmanaged resources;
            <see langword="false" /> to release only unmanaged resources.
            </param>
            <param name="disposeData">
            <see langword="true"/> to dispose scene nodes including data objects; 
            <see langword="false"/> to dispose only scene nodes but preserve the data objects.
            </param>
            <remarks>
            Scene nodes can share data objects. The parameter <paramref name="disposeData"/> determines
            whether data objects are disposed or preserved when the scene node is disposed. For example, 
            multiple <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode"/>s can share the same <see cref="T:DigitalRune.Graphics.Mesh"/>. When a 
            <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode"/> is disposed and <paramref name="disposeData"/> is 
            <see langword="true"/> the <see cref="T:DigitalRune.Graphics.Mesh"/> is disposed. All resources (vertex buffers, 
            index buffers, etc.) are released and the mesh is no longer usable.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.OnParentChanged(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.SceneGraph.SceneNode)">
            <summary>
            Called when <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.Parent"/> was changed.
            </summary>
            <param name="oldParent">The old parent.</param>
            <param name="newParent">The new parent.</param>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.OnSceneChanged(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.SceneGraph.SceneChanges)">
            <summary>
            Calls <see cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.OnSceneChanged(DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs)"/>.
            </summary>
            <param name="sceneNode">The scene node that was added/removed/modified.</param>
            <param name="changes">The changes.</param>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.OnSceneChanged(DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs)">
            <summary>
            Raises the <see cref="E:DigitalRune.Graphics.SceneGraph.SceneNode.SceneChanged"/> event.
            </summary>
            <param name="eventArgs">
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs"/> object that provides the arguments for the event.
            </param>
            <remarks>
            <para>
            This method is called when a change in the local subtree occurred. For example, when a scene
            node was added/removed, or a scene node's pose or shape changed.
            </para>
            <para>
            <strong>Notes to Inheritors:</strong> When overriding 
            <see cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.OnSceneChanged(DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs)"/> in a derived class, be sure to call the
            base class's <see cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.OnSceneChanged(DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs)"/> method so that registered 
            delegates receive the event.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.DigitalRune#Geometry#IGeometricObject#Clone">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.Clone">
            <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/> that is a clone of the current instance (incl. all 
            children).
            </summary>
            <returns>
            A new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/> that is a clone of the current instance (incl. all children).
            </returns>
            <remarks>
            <para>
            See class documentation of <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/> (section "Cloning") for more information.
            </para>
            <para>
            <strong>Notes to Inheritors:</strong> The method <see cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.Clone"/> calls 
            <see cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.CreateInstanceCore"/> which is responsible for creating a new instance of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/> derived class and <see cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)"/> to create a copy of the 
            current instance. Classes that derive from <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/> need to implement 
            <see cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.CreateInstanceCore"/> and <see cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.CreateInstance">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/> class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            This is a private method, and the actual object-specific implementations for the behavior 
            are dependent on the override implementation of the <see cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.CreateInstanceCore"/> method, 
            which this method calls internally. 
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cannot clone <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/>. A derived class does not implement 
            <see cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.CreateInstanceCore"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/> derived class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            <para>
            Do not call this method directly (except when calling base in an implementation). This 
            method is called internally by the <see cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.Clone"/> method whenever a new instance of the
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/> is created. 
            </para>
            <para>
            <strong>Notes to Inheritors:</strong> Every <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/> derived class must 
            implement this method. A typical implementation is to simply call the default constructor 
            and return the result. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/>.
            </summary>
            <param name="source">The object to clone.</param>
            <remarks>
            <strong>Notes to Inheritors:</strong> Every <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/> derived class must 
            implement this method. A typical implementation is to call <c>base.CloneCore(this)</c> to 
            copy all properties of the base class and then copy all properties of the derived class.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.Aabb">
            <summary>
            Gets the axis-aligned bounding box (AABB) in world space.
            </summary>
            <value>The axis-aligned bounding box (AABB) in world space.</value>
            <remarks>
            The AABB is automatically determined based on <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.Shape"/> and 
            <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.PoseWorld"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.DigitalRune#Geometry#IGeometricObject#Scale">
            <summary>
            Gets the total effective scale (which incorporates the scale factors of parent scene nodes).
            </summary>
            <value>
            The total effective scale (which incorporates the scale factors of parent scene nodes).
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.DigitalRune#Geometry#IGeometricObject#Pose">
            <summary>
            Gets the pose (position and orientation) in world space.
            </summary>
            <value>The pose (position and orientation) in world space.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.ScaleWorld">
            <summary>
            Gets the total effective scale (which incorporates the scale factors of parent scene nodes).
            </summary>
            <value>
            The total effective scale (which incorporates the scale factors of parent scene nodes).
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.PoseWorld">
            <summary>
            Gets or sets the pose (position and orientation) in world space.
            </summary>
            <value>The pose (position and orientation) in world space.</value>
            <remarks>
            <para>
            Changing this property raises the <see cref="E:DigitalRune.Geometry.IGeometricObject.PoseChanged"/> event.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.ScaleLocal">
            <summary>
            Gets or sets the scale relative to the parent scene node. 
            </summary>
            <value>The scale relative to the parent scene node.</value>
            <remarks>
            <para>
            All scale factors should be positive. Zero or negative scale factors can lead to unexpected
            results.
            </para>
            <para>
            Changing this property raises the <see cref="E:DigitalRune.Geometry.IGeometricObject.ShapeChanged"/> event.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.PoseLocal">
            <summary>
            Gets or sets the pose (position and orientation) relative to the parent scene node.
            </summary>
            <value>The pose (position and orientation) relative to the parent scene node.</value>
            <remarks>
            <para>
            Changing this property raises the <see cref="E:DigitalRune.Geometry.IGeometricObject.PoseChanged"/> event.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.LastScaleWorld">
            <summary>
            Gets or sets the <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.ScaleWorld"/> of the last frame.
            </summary>
            <value>
            <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.ScaleWorld"/> of the last frame in world space. Can be <see langword="null"/>.
            </value>
            <remarks>
            <para>
            <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.LastScaleWorld"/> and <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.LastPoseWorld"/> are optional properties. These 
            properties define the scene node's transformation of the last frame that was rendered. This 
            information is required by certain effects, such as object motion blur or camera motion 
            blur. 
            </para>
            <para>
            <strong>Important:</strong> These properties are not updated automatically! 
            <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.LastScaleWorld"/> and <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.LastPoseWorld"/> need to be set by the 
            application logic whenever the transformation of the scene node is changed.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.LastPoseWorld">
            <summary>
            Gets or sets the <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.PoseWorld"/> of the last frame.
            </summary>
            <value>
            <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.PoseWorld"/> of the last frame in world space. Can be <see langword="null"/>.
            </value>
            <inheritdoc cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.LastScaleWorld"/>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.Shape">
            <summary>
            Gets (or sets) the bounding shape of this scene node.
            </summary>
            <value>
            The bounding shape. The bounding shape contains only the current node - it does not include 
            the bounds of the children!
            </value>
            <remarks>
            <para>
            This property can be used as a bounding shape for frustum culling and similar operations. A 
            suitable bounding shape must be set manually. The default value is 
            <see cref="F:DigitalRune.Geometry.Shapes.Shape.Empty"/>.
            </para>
            <para>
            Changing this property raises the <see cref="E:DigitalRune.Geometry.IGeometricObject.ShapeChanged"/> event.
            </para>
            <para>
            <strong>Important:</strong> The <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/> implements the interface 
            <see cref="T:DigitalRune.Geometry.IGeometricObject"/>. An <see cref="T:DigitalRune.Geometry.IGeometricObject"/> instance registers event 
            handlers for the <see cref="E:DigitalRune.Geometry.Shapes.Shape.Changed"/> event of the 
            contained <see cref="T:DigitalRune.Geometry.Shapes.Shape"/>. Therefore, a 
            <see cref="T:DigitalRune.Geometry.Shapes.Shape"/> will have an indirect reference to the 
            <see cref="T:DigitalRune.Geometry.IGeometricObject"/>. This is no problem if the geometric object exclusively owns 
            the shape. However, this could lead to problems ("life extension bugs" a.k.a. "memory 
            leaks") when multiple geometric objects share the same shape: One geometric object is no 
            longer used, but it cannot be collected by the garbage collector because the shape still 
            holds a reference to the object.
            </para>
            <para>
            Therefore, when <see cref="T:DigitalRune.Geometry.Shapes.Shape"/>s are shared between multiple 
            <see cref="T:DigitalRune.Geometry.IGeometricObject"/>s: Always set the shape to 
            <see cref="F:DigitalRune.Geometry.Shapes.Shape.Empty"/> or 
            <see cref="F:DigitalRune.Geometry.Shapes.Shape.Infinite"/> when the 
            <see cref="T:DigitalRune.Geometry.IGeometricObject"/> is no longer used. Those are special immutable shapes that 
            never raises any <see cref="E:DigitalRune.Geometry.Shapes.Shape.Changed"/> events. Setting 
            the shape to <see cref="F:DigitalRune.Geometry.Shapes.Shape.Empty"/> or 
            <see cref="F:DigitalRune.Geometry.Shapes.Shape.Infinite"/> ensures that the internal event 
            handlers are unregistered and the objects can be garbage-collected properly.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="E:DigitalRune.Graphics.SceneGraph.SceneNode.DigitalRune#Geometry#IGeometricObject#PoseChanged">
            <summary>
            Occurs when the pose was changed.
            </summary>
        </member>
        <member name="E:DigitalRune.Graphics.SceneGraph.SceneNode.ShapeChanged">
            <summary>
            Occurs when the <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.Shape"/> or <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.ScaleWorld"/> was changed.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.Invalidate">
            <summary>
            Invalidates this scene node and all children.
            </summary>
            <remarks>
            When a scene node is invalid, its world pose needs to be recomputed when it is retrieved the
            next time.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.InvalidateChildren">
            <summary>
            Invalidates the children of this scene nodes.
            </summary>
            <remarks>
            When a scene node is invalid, its world pose needs to be recomputed when it is retrieved the
            next time.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.UpdatePoseLocalFromWorld">
            <summary>
            Calculates the local pose based on the current world pose.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.UpdatePoseWorldFromLocal">
            <summary>
            Calculates the world pose based on the current local pose.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.OnPoseChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:DigitalRune.Geometry.IGeometricObject.PoseChanged"/> event.
            </summary>
            <param name="eventArgs">
            <see cref="T:System.EventArgs"/> object that provides the arguments for the event.
            </param>
            <remarks>
            <strong>Notes to Inheritors:</strong> When overriding <see cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.OnPoseChanged(System.EventArgs)"/> 
            in a derived class, be sure to call the base class' <see cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.OnPoseChanged(System.EventArgs)"/> 
            method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.OnShapeChanged(System.Object,DigitalRune.Geometry.Shapes.ShapeChangedEventArgs)">
            <summary>
            Called when the shape stored in <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.Shape"/> has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">
            The <see cref="T:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.OnShapeChanged(DigitalRune.Geometry.Shapes.ShapeChangedEventArgs)">
            <summary>
            Raises the <see cref="E:DigitalRune.Graphics.SceneGraph.SceneNode.ShapeChanged"/> event.
            </summary>
            <param name="eventArgs">
            <see cref="T:System.EventArgs"/> object that provides the arguments for the event.
            </param>
            <remarks>
            <strong>Notes to Inheritors:</strong> When overriding 
            <see cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.OnShapeChanged(DigitalRune.Geometry.Shapes.ShapeChangedEventArgs)"/> in a derived class, be sure to call the 
            base class' <see cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.OnShapeChanged(DigitalRune.Geometry.Shapes.ShapeChangedEventArgs)"/> method so that registered 
            delegates receive the event.
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.SceneNodeCollection">
            <summary>
            Manages a collection of scene nodes as the children of another scene node.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SceneNodeCollection.Parent">
            <summary>
            Gets (or sets) the parent which owns this child collection.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneNodeCollection.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNodeCollection"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNodeCollection"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneNodeCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNodeCollection" /> class with the specified
            initial capacity
            </summary>
            <param name="capacity">The number of elements that the new list can initially store.</param>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneNodeCollection.GetParent(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneNodeCollection.SetParent(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.SceneGraph.SceneNode)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.SceneNodeFlags">
            <summary>
            Flags used in scene nodes.
            </summary>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.IScene">
            <summary>
            Manages a collection of 3D objects represented by scene nodes (a.k.a the "scene graph"). 
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Graphics.SceneGraph.IScene"/> manages a collection of <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/>s. A scene node 
            usually represents an instance of a graphics object (a mesh, a camera, a light, etc.). 
            </para>
            <para>
            A scene has two important purposes:
            <list type="bullet">
            <item>
            <term>
            Scene Graph
            </term>
            <description>
            The main purpose is to organize the objects in a 3D scene. Graphics objects (such as meshes,
            cameras, lights, etc.) are represented by scene nodes. Scene nodes are organized in a 
            hierarchy: Each scene node can have a <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.Parent"/> and zero or more 
            <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.Children"/>. The resulting hierarchy is a tree (a graph without cycles) -
            usually called the <i>scene graph</i>. See class <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/> to find out more on
            how to place objects within a scene.
            </description>
            </item>
            <item>
            <term>
            Scene Queries
            </term>
            <description>
            The second purpose is to execute queries against the scene. For example, when rendering a 
            scene it is important to quickly access all scene nodes that are within the camera frustum.
            When an object is lit, it is important to quickly get all lights that affect the object. A
            scene query is run by calling the method <see cref="M:DigitalRune.Graphics.SceneGraph.IScene.Query``1(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)"/>. The type parameter of the 
            method specifies the type of the query. See method <see cref="M:DigitalRune.Graphics.SceneGraph.IScene.Query``1(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)"/> and interface
            <see cref="T:DigitalRune.Graphics.SceneGraph.ISceneQuery"/> for more information.
            </description>
            </item>
            </list>
            </para>
            <para>
            The scene graph is the organization of the scene nodes that is visible to the application 
            logic. But internally, a scene can organize scene nodes in a way which is optimal for 
            rendering. Different types of scenes might require different implementations: For example, 
            indoor levels, outdoor levels, top-down views, side-scrolling games, etc. might require
            different data structures in order to enable efficient queries. Therefore, different 
            applications can use different implementations of <see cref="T:DigitalRune.Graphics.SceneGraph.IScene"/>.
            </para>
            <para>
            The default implementation <see cref="T:DigitalRune.Graphics.SceneGraph.Scene"/> internally uses a <see cref="T:DigitalRune.Geometry.Collisions.CollisionDomain"/>
            with a <see cref="T:DigitalRune.Geometry.Partitioning.DualPartition`1"/> to accelerate scene queries.
            </para>
            </remarks>
            <seealso cref="T:DigitalRune.Graphics.SceneGraph.ISceneQuery"/>
            <seealso cref="T:DigitalRune.Graphics.SceneGraph.Scene"/>
            <seealso cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.IScene.Children">
            <summary>
            Gets the scene nodes.
            </summary>
            <value>The scene nodes.</value>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.IScene.HaveContact(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.SceneGraph.SceneNode)">
            <summary>
            Determines whether bounding shapes of two scene nodes overlap.
            </summary>
            <param name="nodeA">The first scene node.</param>
            <param name="nodeB">The second scene node.</param>
            <returns>
            <see langword="true"/> if the bounding shape of the scene nodes overlap; 
            <see langword="false"/> if the two nodes do not touch.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.IScene.Query``1(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <summary>
            Gets the scene nodes that touch the specified reference node.
            </summary>
            <typeparam name="T">
            The type of query (see <see cref="T:DigitalRune.Graphics.SceneGraph.ISceneQuery"/>) that should be executed.
            </typeparam>
            <param name="referenceNode">
            The reference node. Must not be <see langword="null"/>.
            </param>
            <param name="context">The render context.</param>
            <returns>The <see cref="T:DigitalRune.Graphics.SceneGraph.ISceneQuery"/> object containing the result of the query.</returns>
            <remarks>
            <para>
            This method can be used to query scene nodes, e.g. all scene nodes that touch the camera
            frustum, or all lights that shine on the reference node. This method performs efficient
            culling, e.g. if the reference node is a camera node it uses frustum culling to quickly
            find all nodes that touch the camera frustum and to reject nodes outside of the frustum.
            </para>
            <para>
            Disabled scene nodes (see property <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.IsEnabled"/>) are ignored in scene
            queries and should not show up in query results.
            </para>
            <para>
            The scene caches the most recent results of each query type: If <see cref="M:DigitalRune.Graphics.SceneGraph.IScene.Query``1(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)"/> is
            called several times per frame for the same query type and reference node, then only the
            first call performs work and the other calls return the cached result of the first call. If
            the method is called again with the same query type but a different reference node, then the
            cache is cleared and the new query is executed. This also means that the result of the first
            call is no longer available.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="referenceNode"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.Scene">
            <summary>
            Manages a scene of 3D objects represented by scene nodes (a.k.a the "scene graph"). 
            </summary>
            <remarks>
            <para>
            See <see cref="T:DigitalRune.Graphics.SceneGraph.IScene"/> for general information about scenes. The <see cref="T:DigitalRune.Graphics.SceneGraph.Scene"/> is the 
            default implementation of <see cref="T:DigitalRune.Graphics.SceneGraph.IScene"/>. It internally uses a 
            <see cref="T:DigitalRune.Geometry.Collisions.CollisionDomain"/> to accelerate scene queries 
            (such as frustum culling).
            </para>
            <para>
            A <see cref="T:DigitalRune.Graphics.SceneGraph.Scene"/> is derived from <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/> and therefore provides the same
            helper methods for manipulation and traversal. But a <see cref="T:DigitalRune.Graphics.SceneGraph.Scene"/> object can only be 
            the root node of the scene graph - it cannot be attached to another scene node. See 
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/> for more details regarding the scene hierarchy.
            </para>
            <para>
            <strong>Scene Transformations:</strong><br/>
            A <see cref="T:DigitalRune.Graphics.SceneGraph.Scene"/> is derived from <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/> and therefore also has a 
            transformation (see <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.ScaleLocal"/>/<see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.PoseLocal"/> or 
            <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.ScaleWorld"/>/<see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.PoseWorld"/>) and a bounding shape 
            (see <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.Shape"/>). The bounding shape is always empty (see 
            <see cref="T:DigitalRune.Geometry.Shapes.EmptyShape"/>) - it is not used. Since a <see cref="T:DigitalRune.Graphics.SceneGraph.Scene"/> is always the root of 
            a 3D scene <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.PoseLocal"/> and <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.PoseWorld"/> are always 
            identical. The default scale is <see cref="F:DigitalRune.Mathematics.Algebra.Vector3F.One"/>, the default position is 
            <see cref="F:DigitalRune.Mathematics.Algebra.Vector3F.Zero"/> and the default orientation is <see cref="F:DigitalRune.Mathematics.Algebra.QuaternionF.Identity"/>.
            By setting a different values the entire scene is moved or rotated in world space.
            </para>
            <para>
            <strong>Scene Queries and Scene Node Filtering:</strong><br/>
            <see cref="M:DigitalRune.Graphics.SceneGraph.Scene.Query``1(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)"/> can be used to query all scene nodes that touch a given reference node:
            For example, to get all mesh nodes within the camera frustum, or all light nodes that affect a
            mesh node. <see cref="M:DigitalRune.Graphics.SceneGraph.Scene.Query``1(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)"/> uses <see cref="P:DigitalRune.Graphics.SceneGraph.Scene.Filter"/> to further filter the query 
            result. See <see cref="P:DigitalRune.Graphics.SceneGraph.Scene.Filter"/> for more information.
            </para>
            <para>
            <strong>Scene Node Groups:</strong><br/>
            <see cref="M:DigitalRune.Graphics.SceneGraph.Scene.GetGroup(DigitalRune.Graphics.SceneGraph.SceneNode)"/> and <see cref="M:DigitalRune.Graphics.SceneGraph.Scene.SetGroup(DigitalRune.Graphics.SceneGraph.SceneNode,System.Int32)"/> can be used to put scene nodes into groups,
            where a group is simply an integer ID. This group can be used for filtering. Per default, 
            meshes are in group 1, lights are in group 2, cameras are in group 3, all other objects are 
            in group 0. The default grouping can be changed by overriding <see cref="M:DigitalRune.Graphics.SceneGraph.Scene.GetDefaultGroup(DigitalRune.Graphics.SceneGraph.SceneNode)"/>.
            The default groups and <see cref="P:DigitalRune.Graphics.SceneGraph.Scene.Filter"/> settings are: 
            </para>
            <list type="table">
            <listheader><term>Group</term><description>Scene Nodes</description></listheader>
            <item>
            <term>0</term>
            <description>
            Scene nodes which can touch all other nodes including scene nodes of the same type. This is 
            the default group for custom scene node types derived from <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/>.
            </description>
            </item>
            <item>
            <term>1</term>
            <description>
            <see cref="T:DigitalRune.Graphics.SceneGraph.CameraNode"/>
            </description>
            </item>
            <item>
            <term>2</term>
            <description>
            <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode"/>
            </description>
            </item>
            <item>
            <term>3</term>
            <description>  
            Scene nodes which can be rendered: <see cref="T:DigitalRune.Graphics.SceneGraph.BillboardNode"/>, <see cref="T:DigitalRune.Graphics.SceneGraph.FogNode"/>,
            <see cref="T:DigitalRune.Graphics.SceneGraph.LensFlareNode"/>, <see cref="T:DigitalRune.Graphics.SceneGraph.FigureNode"/>, <see cref="T:DigitalRune.Graphics.SceneGraph.ParticleSystemNode"/>,
            <see cref="T:DigitalRune.Graphics.SceneGraph.SpriteNode"/><br/>
            Nodes in this group can only touch cameras (group 1).
            </description>
            </item>
            <item>
            <term>4</term>
            <description>
            Scene nodes which can be rendered and lit: <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode"/><br/>
            Nodes in this group can only touch cameras (group 1) and lights (group 2).
            </description>
            </item>
            </list>
            <para>
            <strong>Cloning:</strong><br/>
            A <see cref="T:DigitalRune.Graphics.SceneGraph.Scene"/> cannot be cloned. Calling <see cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.Clone"/> will raise an 
            exception.
            </para>
            </remarks>
            <seealso cref="T:DigitalRune.Graphics.SceneGraph.IScene"/>
            <seealso cref="T:DigitalRune.Graphics.SceneGraph.ISceneQuery"/>
            <seealso cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.Scene.AttachedSceneData">
            Additional data stored in SceneNode.SceneData.
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.Scene.Filter">
            <summary>
            Gets or sets a filter which is used in <see cref="M:DigitalRune.Graphics.SceneGraph.Scene.Query``1(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)"/>.
            </summary>
            <value>
            The filter which decides which scene nodes can touch each other. 
            </value>
            <remarks>
            <para>
            The default value is a <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter"/> that disables collisions
            between two objects of group 1 (two mesh nodes) and two objects of group 3 (two camera 
            nodes). If you do not use the default group IDs (see <see cref="M:DigitalRune.Graphics.SceneGraph.Scene.GetDefaultGroup(DigitalRune.Graphics.SceneGraph.SceneNode)"/>) or if
            your rendering pipeline has different requirements, this filter must be changed.
            </para>
            <para>
            Changing the filter or the settings of a filter invalidates the currently cached collision 
            data. For performance reasons it is not recommended to change the filter at runtime after
            the scene has been loaded.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.Scene.EnableMultithreading">
            <summary>
            Gets or sets a value indicating whether multithreading is enabled.
            </summary>
            <value>
            <see langword="true"/> if multithreading is enabled; otherwise, <see langword="false"/>. The
            default value is <see langword="true"/> if the current system has more than one CPU cores.
            </value>
            <remarks>
            <para>
            When multithreading is enabled the scene will distribute the workload across multiple
            processors (CPU cores) to improve the performance. 
            </para>
            <para>
            Multithreading adds an additional overhead, therefore it should only be enabled if the 
            current system has more than one CPU core and if the other cores are not fully utilized by
            the application. Multithreading should be disabled if the system has only one CPU core or if
            all other CPU cores are busy. In some cases it might be necessary to run a benchmark of the
            application and compare the performance with and without multithreading to decide whether
            multithreading should be enabled or not.
            </para>
            <para>
            The scene internally uses the class <see cref="T:DigitalRune.Threading.Parallel"/> for parallelization.
            <see cref="T:DigitalRune.Threading.Parallel"/> is a static class that defines how many worker threads are created, 
            how the workload is distributed among the worker threads and more. (See 
            <see cref="T:DigitalRune.Threading.Parallel"/> to find out more on how to configure parallelization.)
            </para>
            </remarks>
            <seealso cref="T:DigitalRune.Threading.Parallel"/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.Scene.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.Scene"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.Scene.Dispose(System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.Scene.CreateInstanceCore">
            <summary>
            Not supported.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.Scene.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <summary>
            Not supported.
            </summary>
            <param name="source">The object to clone.</param>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.Scene.OnParentChanged(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.SceneGraph.SceneNode)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.Scene.GetAttachedSceneData(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <summary>
            Gets the <see cref="T:DigitalRune.Graphics.SceneGraph.Scene.AttachedSceneData"/> of scene node. If the scene node does not contain 
            scene data, a new <see cref="T:DigitalRune.Graphics.SceneGraph.Scene.AttachedSceneData"/> object is created and stored in the scene 
            node.
            </summary>
            <param name="sceneNode">The scene node.</param>
            <returns>The attached scene data.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.Scene.GetGroup(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <summary>
            Gets the group ID of a scene node.
            </summary>
            <param name="sceneNode">The scene node.</param>
            <returns>The group ID.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sceneNode"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.Scene.SetGroup(DigitalRune.Graphics.SceneGraph.SceneNode,System.Int32)">
            <summary>
            Sets the group ID of a scene node.
            </summary>
            <param name="sceneNode">The scene node.</param>
            <param name="group">The group ID.</param>
            <remarks>
            The group is usually used for internal optimization. It is not allowed to change the group 
            of a scene node that has already been added to the scene. The group must be set BEFORE the 
            scene node is added to the scene graph.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sceneNode"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:DigitalRune.Graphics.GraphicsException">
            The group of the scene node cannot be changed because the scene node has already been added
            to a scene.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.Scene.GetDefaultGroup(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <summary>
            Called when the default group of a new scene node is set.
            </summary>
            <param name="sceneNode">The scene node.</param>
            <returns>The default group of a scene node.</returns>
            <remarks>
            <para>
            Derived classes can override this method to change the default groups. The groups are used
            by the <see cref="P:DigitalRune.Graphics.SceneGraph.Scene.Filter"/> to determine which scene nodes can touch each other. See remarks
            of the <see cref="T:DigitalRune.Graphics.SceneGraph.Scene"/> class for more information.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.Scene.GetCollisionObject(DigitalRune.Graphics.SceneGraph.SceneNode,System.Boolean)">
            <summary>
            Gets the collision object from the <see cref="T:DigitalRune.Graphics.SceneGraph.Scene.AttachedSceneData" />. If none exists, a new
            collision object is created.
            </summary>
            <param name="sceneNode">The scene node.</param>
            <param name="updateEnabledFlag">
            <see langword="true"/> to update the collision objects <see cref="P:DigitalRune.Geometry.Collisions.CollisionObject.Enabled"/>
            flag.
            </param>
            <returns>The collision object.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sceneNode" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.Scene.OnSceneChanged(DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.Scene.Update(System.TimeSpan)">
            <summary>
            Updates the scene.
            </summary>
            <param name="deltaTime">The time step size in seconds.</param>
            <remarks>
            A scene needs to be updated once per frame. The method recomputes the internal information
            that is used for scene queries (such as frustum culling) and may perform other
            optimizations.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.Scene.HaveContact(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.SceneGraph.SceneNode)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.Scene.Query``1(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.Scene.GetSceneNodes(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Geometry.Partitioning.IPairFilter{DigitalRune.Graphics.SceneGraph.SceneNode},System.Collections.Generic.List{DigitalRune.Graphics.SceneGraph.SceneNode})">
            <summary>
            Recursively gets all scene nodes and adds them to the specified collection in depth-first
            order. (Scene node filtering is applied, EmptyShapes are ignored.)
            </summary>
            <param name="node">The root node.</param>
            <param name="referenceNode">The reference node.</param>
            <param name="filter">The scene node filter.</param>
            <param name="list">The collection to which all scene nodes are added.</param>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.SceneCollisionObjectFilter">
            <summary>
            Filters collision objects by forwarding to a filter that works on scene nodes.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SceneCollisionObjectFilter.SceneNodeFilter">
            <summary>
            Gets or sets the scene node filter.
            </summary>
            <value>The scene node filter.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="E:DigitalRune.Graphics.SceneGraph.SceneCollisionObjectFilter.Changed">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneCollisionObjectFilter.#ctor(DigitalRune.Geometry.Partitioning.IPairFilter{DigitalRune.Graphics.SceneGraph.SceneNode})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneCollisionObjectFilter"/> class.
            </summary>
            <param name="filter">The filter.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="filter"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneCollisionObjectFilter.Filter(DigitalRune.Collections.Pair{DigitalRune.Geometry.Collisions.CollisionObject})">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter">
            <summary>
            Filters collisions between scene nodes using their group IDs.
            </summary>
            <remarks>
            <para>
            This filter uses the scene node groups (see <see cref="M:DigitalRune.Graphics.SceneGraph.Scene.SetGroup(DigitalRune.Graphics.SceneGraph.SceneNode,System.Int32)"/> and 
            <see cref="M:DigitalRune.Graphics.SceneGraph.Scene.GetGroup(DigitalRune.Graphics.SceneGraph.SceneNode)"/>) to decide if a pair of scene nodes can "collide".
            Per default all collisions are enabled. <see cref="M:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.Set(System.Int32,System.Int32,System.Boolean)"/> can be used to disable collisions
            between two groups.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.Scene">
            <summary>
            Gets or sets the scene.
            </summary>
            <value>The scene.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.MaxNumberOfGroups">
            <summary>
            The maximum number of supported scene node groups.
            </summary>
            <remarks>
            Scene node group numbers must be in the range 0 - (<see cref="P:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.MaxNumberOfGroups"/> - 1).
            This limit can be changed in the constructor.
            </remarks>
        </member>
        <member name="E:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.Changed">
            <summary>
            Occurs when the filter rules were changed.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.#ctor(DigitalRune.Graphics.SceneGraph.Scene)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter"/> class.
            </summary>
            <param name="scene">The scene.</param>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.#ctor(DigitalRune.Graphics.SceneGraph.Scene,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter"/> class.
            </summary>
            <param name="scene">The scene.</param>
            <param name="maxNumberOfGroups">
            The maximum number of groups (see <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.MaxNumberOfGroups"/>).
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="scene"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxNumberOfGroups"/> is negative.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.Reset">
            <summary>
            Resets this filter. All collisions will be enabled.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.Set(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Enables or disables collisions between a pair of scene node groups.
            </summary>
            <param name="groupA">The first group.</param>
            <param name="groupB">The second group.</param>
            <param name="collisionsEnabled">
            If set to <see langword="true"/> collisions between scene nodes in <paramref name="groupA"/> 
            and scene nodes in <paramref name="groupB"/> are enabled. 
            Use <see langword="false"/> to disable collisions.
            </param>
            <remarks>
            To disable collisions for objects within one group, this method can be called with 
            <paramref name="groupA"/> == <paramref name="groupB"/>.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="groupA"/> is out of range.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="groupB"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.Get(System.Int32,System.Int32)">
            <summary>
            Returns <see langword="true"/> if collisions between two scene node groups are enabled.
            </summary>
            <param name="groupA">The first scene node group.</param>
            <param name="groupB">The second scene node group.</param>
            <returns>
            <see langword="true"/> if collisions with the between <paramref name="groupA"/> and 
            <paramref name="groupB"/> are enabled; otherwise <see langword="false"/>.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="groupA"/> or <paramref name="groupB"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.Filter(DigitalRune.Collections.Pair{DigitalRune.Graphics.SceneGraph.SceneNode})">
            <summary>
            Determines whether the given <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode"/>s can collide.
            </summary>
            <param name="pair">The pair of collision objects.</param>
            <returns>
            <see langword="true"/> if the pair of collision objects can collide; otherwise, 
            <see langword="false"/> if the objects cannot collide.
            </returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.OnChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.Changed"/> event.
            </summary>
            <param name="eventArgs">
            <see cref="T:System.EventArgs"/> object that provides the arguments for the event.
            </param>
            <remarks>
            <strong>Notes to Inheritors:</strong> When overriding <see cref="M:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.OnChanged(System.EventArgs)"/> in a derived
            class, be sure to call the base class's <see cref="M:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.OnChanged(System.EventArgs)"/> method so that registered
            delegates receive the event.
            </remarks>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.CloudLayerNode">
            <summary>
            Renders a cloud layer into the distant sky.
            </summary>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Graphics.SceneGraph.CloudLayerNode"/> is a <see cref="T:DigitalRune.Graphics.SceneGraph.SkyNode"/> that renders a distant layer of 
            clouds. <see cref="T:DigitalRune.Graphics.SceneGraph.CloudLayerNode"/> are rendered by the <see cref="T:DigitalRune.Graphics.Rendering.SkyRenderer"/>. The clouds
            are alpha-blended over the background. (The renderer does not draw the background sky, only 
            clouds.) 
            </para>
            <para>
            Clouds are defined by a <see cref="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.CloudMap"/>, which provides a cloud texture. The cloud 
            texture stores the transmittance of the sky (see <see cref="P:DigitalRune.Graphics.CloudMap.Texture"/> for
            more information). It is possible to use user-defined textures (see 
            <see cref="T:DigitalRune.Graphics.UserDefinedCloudMap"/>), or dynamically generate clouds at runtime (see 
            <see cref="T:DigitalRune.Graphics.LayeredCloudMap"/>).
            </para>
            <para>
            The clouds are projected into the sky. The property <see cref="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.SkyCurvature"/> can be used to 
            blend between a paraboloid projection (<see cref="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.SkyCurvature"/> = 1) or a planar projection 
            (<see cref="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.SkyCurvature"/> = 0). A paraboloid projection makes optimal use of the texture
            resolution. Therefore, high values like 0.9, should be used for <see cref="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.SkyCurvature"/>. If
            a true paraboloid projection is used (<see cref="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.SkyCurvature"/> = 1), then the texture fills
            the whole sky without any tiling. If the <see cref="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.SkyCurvature"/> is less than 1, then the 
            texture does not cover the whole sky and tiling (texture wrapping) is used to fill the sky. If
            the cloud texture is not a seamlessly tiling texture, then <see cref="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.TextureMatrix"/> must be 
            used to change the scale of the texture and hide the seams.
            </para>
            <para>
            The clouds are lit by <see cref="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.SunLight"/> and <see cref="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.AmbientLight"/>. A forward
            scattering effect is visible in the <see cref="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.SunDirection"/>. 
            <see cref="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.ForwardScatterExponent"/>, <see cref="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.ForwardScatterScale"/> and 
            <see cref="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.ForwardScatterOffset"/> define the range and strength of this effect. The clouds 
            are also lit in other directions and <see cref="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.NumberOfSamples"/>/
            <see cref="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.SampleDistance"/> define the quality of the lighting effect.
            </para>
            <para>
            Clouds can be faded out to disappear near the horizon. <see cref="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.HorizonFade"/> defines the
            height where clouds start to fade out.
            </para>
            <para>
            <strong>Cloning:</strong> When a <see cref="T:DigitalRune.Graphics.SceneGraph.CloudLayerNode"/> is cloned the 
            <see cref="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.CloudMap"/> is copied by reference (shallow copy). The original and the cloned
            node will reference the same <see cref="T:DigitalRune.Graphics.CloudMap"/> instance.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.CloudMap">
            <summary>
            Gets or sets the cloud map that provides the cloud texture.
            </summary>
            <value>The cloud map that provides the cloud texture.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.SkyCurvature">
            <summary>
            Gets or sets the sky curvature.
            </summary>
            <value>
            The sky curvature in the range [0, 1]. If this value is 0, the clouds are projected onto a
            plane in the sky (with a lot of foreshortening near the horizon). If this value is 1, the
            clouds are projected onto a hemisphere in the sky (no foreshortening near the horizon). The
            default value is 0.9.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.TextureMatrix">
            <summary>
            Gets or sets the matrix used to transform the cloud texture.
            </summary>
            <value>
            The matrix used to transform the texture coordinates. The default value is 
            <see cref="F:DigitalRune.Mathematics.Algebra.Matrix33F.Identity"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.SunDirection">
            <summary>
            Gets or sets the direction to the sun.
            </summary>
            <value>The direction to the sun. This vector is automatically normalized.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.SunLight">
            <summary>
            Gets or sets the sun light intensity used to shade the clouds.
            </summary>
            <value>The intensity of the sun light.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.AmbientLight">
            <summary>
            Gets or sets the ambient light intensity used to shade the clouds.
            </summary>
            <value>The intensity of the ambient light used to shade the clouds.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.NumberOfSamples">
            <summary>
            Gets or sets the number of samples used to compute cloud lighting in the shader.
            </summary>
            <value>
            The number of samples used to compute cloud lighting in the shader. The default value is 8.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.SampleDistance">
            <summary>
            Gets or sets the sample distance for cloud lighting.
            </summary>
            <value>The sample distance for cloud lighting. The default value is 0.004.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.ForwardScatterExponent">
            <summary>
            Gets or sets the forward scatter exponent used to define the range of the forward scatter 
            effect.
            </summary>
            <value>The forward scatter exponent. The default value is 5.</value>
            <remarks>
            <para>
            When a cloud is in front of the sun, a lot of light is scattered forward to the observer.
            Forward scattering can be used to create a nice glow in the sun direction and rim lights 
            ("silver linings") at the cloud borders. 
            </para>
            <para>
            The <see cref="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.ForwardScatterExponent"/> defines the angular range of the forward scatter 
            effect. If <see cref="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.ForwardScatterExponent"/> is large, the effect is limited to areas 
            near the sun. If <see cref="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.ForwardScatterExponent"/> is small, the effect is visible in a 
            larger area.
            </para>
            <para>
            <see cref="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.ForwardScatterScale"/> scales the intensity of the scattered sun light when 
            looking straight at the sun. <see cref="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.ForwardScatterOffset"/> defines how bright the dark 
            cloud parts are when looking straight at the sun.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.ForwardScatterScale">
            <summary>
            Gets or sets the forward scatter exponent used to define the intensity of forward scattered 
            sun light.
            </summary>
            <value>
            The forward scatter scale. The default value is 1.
            </value>
            <inheritdoc cref="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.ForwardScatterExponent"/>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.ForwardScatterOffset">
            <summary>
            Gets or sets the forward scatter offset used to define the brightness of dark cloud parts 
            when looking straight at the sun.
            </summary>
            <value>The forward scatter offset. The default value is 0.5.</value>
            <inheritdoc cref="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.ForwardScatterExponent"/>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.HorizonFade">
            <summary>
            Gets or sets a value which determines where the clouds start to fade out towards the 
            horizon.
            </summary>
            <value>
            A value which determines where the clouds start to fade out towards the horizon. If this
            value is 0, clouds do not fade out towards the horizon. If this value is 1, clouds start to 
            fade out at the zenith. The default value is 0.05. 
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.HorizonBias">
            <summary>
            Gets or sets the horizon bias which moves the horizon down.
            </summary>
            <value>
            The horizon bias. Positive values move the horizon down. The default value is 0.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.Alpha">
            <summary>
            Gets or sets the opacity of the clouds.
            </summary>
            <value>The opacity of the clouds. The default value is 1.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.SunQuerySize">
            <summary>
            Gets or sets the size of the <see cref="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.SunOcclusion"/> query.
            </summary>
            <value>The size of the <see cref="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.SunOcclusion"/> query. The default value is 0.05.</value>
            <inheritdoc cref="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.SunOcclusion"/>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.SunOcclusion">
            <summary>
            Gets the sun occlusion.
            </summary>
            <value>The sun occlusion.</value>
            <remarks>
            <para>
            If <see cref="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.SunQuerySize"/> is greater than 0, then a hardware occlusion query is used to 
            compute how much of the sun is occluded by clouds. The query size is the approximate size of
            the sun on screen. This value is used in the occlusion query to determine the visibility of 
            the sun. The query size is the height of the sun relative to the viewport. Example: 
            <c>QuerySize = 0.1</c> means that the light source is approximately 1/10 of the viewport.
            </para>
            <para>
            The resulting occlusion value is stored in <see cref="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.SunOcclusion"/>. An occlusion value
            of 0 means the sun is not occluded by clouds. An occlusion value of 1 means the sun is 
            totally hidden by clouds. This information can be used to change the intensity of sun lens 
            flares and similar effects that depend on the visibility of the sun.
            </para>
            <para>
            Hardware occlusion queries usually require one or more frames to complete. This means that 
            the value stored in <see cref="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.SunOcclusion"/> may be one or more frames old.
            </para>
            <para>
            The <see cref="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.SunOcclusion"/> is not computed in Reach graphics profile. (The occlusion
            value is always 0.)
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.CloudLayerNode.#ctor(DigitalRune.Graphics.CloudMap)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.CloudLayerNode" /> class.
            </summary>
            <param name="cloudMap">The cloud map.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cloudMap"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.CloudLayerNode.Dispose(System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.CloudLayerNode.Clone">
            <inheritdoc cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.Clone"/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.CloudLayerNode.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.CloudLayerNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.CloudLayerNode.GetTextureCoordinates(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets the texture coordinates of the cloud texture in the specified direction.
            </summary>
            <param name="direction">The normalized direction.</param>
            <returns>
            The texture coordinates of the cloud texture. (The result is undefined if 
            <paramref name="direction"/> does not point towards the sky.)
            </returns>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.GradientSkyNode">
            <summary>
            Renders the sky using simple color gradients.
            </summary>
            <remarks>
            This class represents a sky. Only the top hemisphere is rendered. The sky colors are 
            determined by a color gradient which is defined with the following properties: 
            <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.FrontColor"/>, <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.ZenithColor"/>, <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.BackColor"/>, 
            <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.GroundColor"/>, <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.FrontZenithShift"/>, <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.BackZenithShift"/>, 
            <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.FrontGroundShift"/>, <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.BackGroundShift"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.SunDirection">
            <summary>
            Gets or sets the direction to the sun.
            </summary>
            <value>The direction to the sun. This vector is automatically normalized.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.FrontColor">
            <summary>
            Gets or sets the color of the horizon below the sun.
            </summary>
            <value>The color of the horizon below the sun (using premultiplied alpha).</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.BackColor">
            <summary>
            Gets or sets the color of the horizon opposite the sun.
            </summary>
            <value>The color of the horizon opposite the sun (using premultiplied alpha).</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.ZenithColor">
            <summary>
            Gets or sets the color at the zenith.
            </summary>
            <value>The color at the zenith (using premultiplied alpha).</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.GroundColor">
            <summary>
            Gets or sets the color at the ground.
            </summary>
            <value>The color at the ground (using premultiplied alpha).</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.FrontZenithShift">
            <summary>
            Gets or sets the relative height where the sky color is the average of the
            <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.FrontColor"/> and the <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.ZenithColor"/>.
            </summary>
            <value>
            The relative height where the sky color is the average of the <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.FrontColor"/> and
            the <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.ZenithColor"/>, in the range [0, 1]. The default value is 0.5.
            </value>
            <remarks>
            <para>
            The sky color in the direction of the sun is created by interpolating the 
            <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.FrontColor"/> and the <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.ZenithColor"/>. If this value is 0.5, the
            average color of the gradient (= average of <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.FrontColor"/> and 
            <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.ZenithColor"/>) is in the middle. If this value is less than 0.5, then the
            average color is shifted down to the horizon. If this value is greater than 0.5, then the
            average color is shifted up to the zenith.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.BackZenithShift">
            <summary>
            Gets or sets the relative height where the sky color is the average of the
            <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.BackColor"/> and the <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.ZenithColor"/>.
            </summary>
            <value>
            The relative height where the sky color is the average of the <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.BackColor"/> and
            the <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.ZenithColor"/>, in the range [0, 1]. The default value is 0.5.
            </value>
            <remarks>
            <para>
            The sky color opposite to the sun is created by interpolating the <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.BackColor"/> 
            and the <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.ZenithColor"/>. If this value is 0.5, the average color of the gradient
            (= average of <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.BackColor"/> and the <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.ZenithColor"/>) is in the middle.
            If this value is less than 0.5, then the average color is shifted down to the horizon. If
            this value is greater than 0.5, then the average color is shifted up to the zenith.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.FrontGroundShift">
            <summary>
            Gets or sets the relative height where the sky color is the average of the
            <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.FrontColor"/> and the <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.GroundColor"/>.
            </summary>
            <value>
            The relative height where the sky color is the average of the <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.FrontColor"/> and
            the <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.GroundColor"/>, in the range [0, 1]. The default value is 0.5.
            </value>
            <remarks>
            <para>
            The sky color in the direction of the sun is created by interpolating the 
            <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.FrontColor"/> and the <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.GroundColor"/>. If this value is 0.5, the
            average color of the gradient (= average of <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.FrontColor"/> and 
            <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.GroundColor"/>) is in the middle. If this value is less than 0.5, then the
            average color is shifted up to the horizon. If this value is greater than 0.5, then the
            average color is shifted down to the ground.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.BackGroundShift">
            <summary>
            Gets or sets the relative height where the sky color is the average of the
            <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.BackColor"/> and the <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.GroundColor"/>.
            </summary>
            <value>
            The relative height where the sky color is the average of the <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.BackColor"/> and
            the <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.GroundColor"/>, in the range [0, 1]. The default value is 0.5.
            </value>
            <remarks>
            <para>
            The sky color opposite to the sun is created by interpolating the <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.BackColor"/> 
            and the <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.GroundColor"/>. If this value is 0.5, the average color of the gradient
            (= average of <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.BackColor"/> and <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.GroundColor"/>) is in the middle. If
            this value is less than 0.5, then the average color is shifted up to the horizon. If this
            value is greater than 0.5, then the average color is shifted down to the ground.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.SceneGraph.GradientSkyNode.CieSkyParameters">
            <summary>
            The parameters of the CIE sky luminance distribution.
            </summary>
            <remarks>
            The CIE sky model defines how the luminance is distributed across the sky depending on the
            sun direction. When <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.CieSkyStrength"/> is greater than 0, this luminance 
            distribution is used to attenuate the sky pixels to create a realistic sky brightness.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.CieSkyStrength">
            <summary>
            Gets or sets the strength of the CIE sky luminance distribution (see 
            <see cref="F:DigitalRune.Graphics.SceneGraph.GradientSkyNode.CieSkyParameters"/>).
            </summary>
            <value>
            The strength of the CIE sky luminance distribution in the range [0, 1]. The default value is
            0.
            </value>
            <remarks>
            If this value is 1, the original CIE sky luminance distribution is used (see
            <see cref="F:DigitalRune.Graphics.SceneGraph.GradientSkyNode.CieSkyParameters"/>). This makes only sense if the render pipeline uses HDR. For
            LDR the effect of the CIE sky luminance distribution should be lessened using lower values
            for <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.CieSkyStrength"/>. If <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.CieSkyStrength"/> is 0, then the CIE
            luminance distribution is not applied.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.GradientSkyNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.GradientSkyNode" /> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.GradientSkyNode.Clone">
            <inheritdoc cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.Clone"/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.GradientSkyNode.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.GradientSkyNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode">
            <summary>
            Renders the sky using lookup textures which contain color gradients.
            </summary>
            <remarks>
            <para>
            This class represents a sky. Only the top hemisphere is rendered. The sky colors are 
            determined by two lookup textures: <see cref="P:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode.FrontTexture"/> and <see cref="P:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode.BackTexture"/>. 
            The <see cref="P:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode.FrontTexture"/> determines the sky colors in the direction of the sun. The 
            <see cref="P:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode.BackTexture"/> determines the sky colors opposite to the sun.
            </para>
            <para>
            The lookup texture are used like this: The columns of the textures represent the sky colors of
            a specific time of the day. The first column is for the hour 0 (midnight). The middle column
            is for the hour 12 (noon). The last column is for the hour 24 (midnight). Each column contains
            the sky colors. The bottom color is the horizon color. The top color is the zenith color.
            </para>
            <para>
            To render the sky, the <see cref="P:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode.TimeOfDay"/> is used to determine which column of the
            textures should be sampled. Then the gradient of the <see cref="P:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode.FrontTexture"/> is used to
            render the sky in the direction of the sun. The gradient of the <see cref="P:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode.BackTexture"/> is
            used to render the sky opposite to the sun. The other sky colors are interpolated from both
            gradients.
            </para>
            <para>
            To avoid artifacts in the zenith, the colors of the top row of both textures should be
            identical.
            </para>
            <para>
            <strong>Cloning:</strong> When a <see cref="T:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode"/> is cloned the lookup 
            textures are not duplicated. The textures are copied by reference (shallow copy). The original
            <see cref="T:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode"/> and the cloned instance will reference the same textures.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode.SunDirection">
            <summary>
            Gets or sets the direction to the sun.
            </summary>
            <value>The direction to the sun. This vector is automatically normalized.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode.TimeOfDay">
            <summary>
            Gets or sets the time of day.
            </summary>
            <value>The time of day.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode.FrontTexture">
            <summary>
            Gets or sets the gradient lookup texture for the side facing to the sun.
            </summary>
            <value>
            The gradient lookup texture for the side facing to the sun (using premultiplied alpha).
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode.BackTexture">
            <summary>
            Gets or sets the gradient lookup texture for the side opposite to the sun.
            </summary>
            <value>
            The gradient lookup texture for the side opposite to the sun (using premultiplied alpha).
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode.Color">
            <summary>
            Gets or sets the tint color of the sky.
            </summary>
            <value>
            The tint color (using premultiplied alpha) which is multiplied to the color (and alpha) 
            from the gradient textures. The default value is opaque white (1, 1, 1, 1).
            </value>
            <remarks>
            This property can be used to tint the sky, change the brightness or change its opacity.
            </remarks>
        </member>
        <member name="F:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode.CieSkyParameters">
            <summary>
            The parameters of the CIE sky luminance distribution.
            </summary>
            <remarks>
            The CIE sky model defines how the luminance is distributed across the sky depending on the
            sun direction. When <see cref="P:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode.CieSkyStrength"/> is greater than 0, this luminance 
            distribution is used to attenuate the sky pixels to create a realistic sky brightness.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode.CieSkyStrength">
            <summary>
            Gets or sets the strength of the CIE sky luminance distribution (see 
            <see cref="F:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode.CieSkyParameters"/>).
            </summary>
            <value>
            The strength of the CIE sky luminance distribution in the range [0, 1]. The default value is
            0.
            </value>
            <remarks>
            If this value is 1, the original CIE sky luminance distribution is used (see 
            <see cref="F:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode.CieSkyParameters"/>). This makes only sense if the render pipeline uses HDR. For
            LDR the effect of the CIE sky luminance distribution should be lessened using lower values
            for <see cref="P:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode.CieSkyStrength"/>. If <see cref="P:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode.CieSkyStrength"/> is 0, then the CIE 
            luminance distribution is not applied.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode" /> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode.Clone">
            <inheritdoc cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.Clone"/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode">
            <summary>
            Renders the sky using atmospheric scattering.
            </summary>
            <remarks>
            <para>
            This shader computes atmospheric scattering on the GPU, which is expensive. It is not 
            recommended to render the <see cref="T:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode"/> every frame. It is better to render 
            the sky into a cube map and update the cube map when necessary. 
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.SunDirection">
            <summary>
            Gets or sets the direction to the sun.
            </summary>
            <value>The direction to the sun. This vector is automatically normalized.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.SunColor">
            <summary>
            Gets or sets the color of the sun light (outside the atmosphere).
            </summary>
            <value>
            The color of the sun light (outside the atmosphere). The default value is (1, 1, 1).
            Non-white sun colors can be used for dramatic effects or alien planet.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.SunIntensity">
            <summary>
            Gets or sets the intensity of the sun light.
            </summary>
            <value>The intensity of the sun light.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.PlanetRadius">
            <summary>
            Gets or sets the radius of the planet ground level.
            </summary>
            <value>The planet ground radius in [m]. The default value is 6360e3 m.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.AtmosphereHeight">
            <summary>
            Gets or sets the height of the atmosphere.
            </summary>
            <value>
            The height of the atmosphere (= the distance from the ground to the "top" of the atmosphere)
            in [m].
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.ObserverAltitude">
            <summary>
            Gets or sets the altitude (height above the ground) of the observer.
            </summary>
            <value>The observer altitude in [m].</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.ScaleHeight">
            <summary>
            Gets or sets the scale height which is the altitude (height above ground) where the average
            atmospheric density is found.
            </summary>
            <value>The scale height in [m].</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.NumberOfSamples">
            <summary>
            Gets or sets the number of samples used to compute the atmospheric scattering in the shader.
            </summary>
            <value>
            The number of samples used to compute the atmospheric scattering in the shader. The default
            value is 5.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.BetaRayleigh">
            <summary>
            Gets or sets the scatter/extinction coefficients for Rayleigh scattering.
            </summary>
            <value>The scatter/extinction coefficients for Rayleigh scattering.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.BetaMie">
            <summary>
            Gets or sets the scatter/extinction coefficients for Mie scattering.
            </summary>
            <value>The scatter/extinction coefficients for Mie scattering.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.GMie">
            <summary>
            Gets or sets the scattering symmetry constant g for Mie scattering.
            </summary>
            <value>
            The scattering symmetry constant g for Mie scattering in the range ]-1, 1[. 
            The default value is 0.75.
            </value>
            <remarks>
            Positive values create forward scattering. Negative values create backward scattering. g is
            usually in [0.75, 0.999].
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.Transmittance">
            <summary>
            Gets or sets the transmittance of the sky.
            </summary>
            <value>The transmittance of the sky. The default value is 1.</value>
            <remarks>
            <para>
            The transmittance defines how much light from outside the atmosphere is attenuated. If the
            transmittance is 1, then sky colors are added to the lights from outer space. If the
            transmittance is 0, then the sky colors replace the colors from outer space. 
            </para>
            <para>
            The actual sky transmittance is computed in the shader. The value of 
            <see cref="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.Transmittance"/> is combined with the computed value from the shader.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.BaseHorizonColor">
            <summary>
            Gets or sets the color at the horizon when there is no sunlight.
            </summary>
            <value>
            The color at the horizon when there is no sunlight.
            The default value is (0, 0, 0).
            </value>
            <remarks>
            <see cref="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.BaseHorizonColor"/>, <see cref="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.BaseZenithColor"/> and 
            <see cref="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.BaseColorShift"/> create a color gradient in the sky which is added to the 
            result of the atmospheric scattering computations. These properties basically define the
            color of the sky in sunless nights: 
            The sky at the horizon will have the <see cref="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.BaseHorizonColor"/>. The zenith will
            have the <see cref="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.BaseZenithColor"/>. All other base sky colors are interpolated 
            between those two colors. <see cref="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.BaseColorShift"/> determines where the sky color
            is exactly the average of both colors. If <see cref="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.BaseColorShift"/> is 0.5, the average 
            color of the gradient is in the middle of the top hemisphere. If this value is less than 
            0.5, then the average color is shifted down to the horizon. If this value is greater than 
            0.5, then the average color is shifted up to the zenith.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.BaseZenithColor">
            <summary>
            Gets or sets the color at the zenith when there is no sunlight.
            </summary>
            <value>
            The color at the zenith when there is no sunlight.
            The default value is (0, 0, 0).
            </value>
            <inheritdoc cref="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.BaseHorizonColor"/>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.BaseColorShift">
            <summary>
            Gets or sets the relative height where the base sky color is the average of the
            <see cref="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.BaseHorizonColor"/> and the <see cref="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.BaseZenithColor"/>.
            </summary>
            <value>
            The relative height where the base sky color is the average of the 
            <see cref="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.BaseHorizonColor"/> and the <see cref="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.BaseZenithColor"/>, in the range [0, 1]. 
            The default value is 0.5.
            </value>
            <inheritdoc cref="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.BaseHorizonColor"/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode" /> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.Clone">
            <inheritdoc cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.Clone"/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.GetTransmittance(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets the transmittance for a specified view direction.
            </summary>
            <param name="viewDirection">The view direction.</param>
            <returns>The transmittance.</returns>
            <remarks>
            This method assumes that the observer is looking into the sky. It returns 0 below the
            horizon.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.GetSunlight">
            <summary>
            Gets the sunlight.
            </summary>
            <returns>The intensity of the direct sunlight.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.GetAmbientLight(System.Int32)">
            <summary>
            Approximates the ambient light by sampling the sky.
            </summary>
            <param name="numberOfSamples">The number of samples.</param>
            <returns>The ambient light created by the sky.</returns>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.GetFogColor(System.Int32)">
            <overloads>
            <summary>
            Approximates the <see cref="T:DigitalRune.Graphics.Fog"/> color by sampling the sky horizon colors.
            </summary>
            </overloads>
            <summary>
            Approximates the <see cref="T:DigitalRune.Graphics.Fog"/> color by sampling the sky horizon colors.
            </summary>
            <param name="numberOfSamples">The number of samples.</param>
            <returns>The fog color.</returns>
            <remarks>
            You might need to desaturate the fog color.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.GetFogColor(System.Int32,System.Single)">
            <summary>
            Approximates the <see cref="T:DigitalRune.Graphics.Fog" /> color by sampling the sky horizon colors.
            </summary>
            <param name="numberOfSamples">The number of samples.</param>
            <param name="elevation">
            The elevation angle at which to sample. The angle is specified in radians and is usually
            in the range [0, π/2]. Use 0 to sample exactly at the horizon. Use positive values to sample 
            above the horizon.
            </param>
            <returns>The fog color.</returns>
            <remarks>You might need to desaturate the fog color.</remarks>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.SkyNode">
            <summary>
            Renders graphics in the background, such as distant mountains, sky, stars, etc.
            </summary>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SkyNode.DrawOrder">
            <summary>
            Gets or sets the draw order.
            </summary>
            <value>
            The draw order. The value must be in the range [0, 65535]. The default value is 0.
            </value>
            <remarks>
            This property defines the order in which <see cref="T:DigitalRune.Graphics.SceneGraph.SkyNode"/>s should be drawn.
            Nodes with a lower <see cref="P:DigitalRune.Graphics.SceneGraph.SkyNode.DrawOrder"/> should be drawn first. Nodes with a higher
            <see cref="P:DigitalRune.Graphics.SceneGraph.SkyNode.DrawOrder"/> should be drawn last. This means that usually nodes with a higher
            draw order cover nodes with a lower draw order.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is out of range.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SkyNode.Shape">
            <summary>
            Gets or sets the bounding shape of this scene node.
            </summary>
            <value>
            The bounding shape. The bounding shape contains only the current node - it does not include 
            the bounds of the children! The default value is an 
            <see cref="F:DigitalRune.Geometry.Shapes.Shape.Infinite"/> shape.
            </value>
            <inheritdoc cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.Shape"/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SkyNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SkyNode" /> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SkyNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.SkyObjectNode">
            <summary>
            Represents sky objects, like the sun and the moon.
            </summary>
            <remarks>
            <para>
            This class can render a texture, like a moon texture, and shade this texture to create moon
            phases. For correct shading, the object in the texture must be round and fill the entire
            texture (or the entire tile of a packed texture).
            </para>
            <para>
            This class can further render two glows, where each glow is very similar to a specular Phong
            highlight. The shape of the glow is defined using an exponent, similar to the specular
            exponent of Phong-shaded materials. A glow with a high exponent can be used to draw a sun
            disk. 
            </para>
            <para>
            The position on the sky is defined by the orientation (see <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.PoseWorld"/>) 
            of this scene node. The object will be drawn in the forward direction (-z) of this node. The
            glows are defined by the properties <see cref="P:DigitalRune.Graphics.SceneGraph.SkyObjectNode.GlowColor0"/>, <see cref="P:DigitalRune.Graphics.SceneGraph.SkyObjectNode.GlowExponent0"/>,
            <see cref="P:DigitalRune.Graphics.SceneGraph.SkyObjectNode.GlowColor1"/>, <see cref="P:DigitalRune.Graphics.SceneGraph.SkyObjectNode.GlowExponent1"/> and <see cref="P:DigitalRune.Graphics.SceneGraph.SkyObjectNode.GlowCutoffThreshold"/>.
            To disable a glow, set its glow color to 0. All other properties are only used to define the
            appearance of the texture. To render only glows, set the <see cref="P:DigitalRune.Graphics.SceneGraph.SkyObjectNode.Texture"/> to 
            <see langword="null"/>.
            </para>
            <para>
            Usage examples: To render a moon or a planet, use a moon texture and a single glow. To render
            a sun, use two glows - one glow with a high exponent to create the sun disk and one glow with
            a low exponent for a huge highlight. To render any other texture into the sky, use a texture
            without glows and without a <see cref="P:DigitalRune.Graphics.SceneGraph.SkyObjectNode.SunLight"/> to avoid moon-phase-like shading.
            </para>
            <para>
            <strong>Cloning:</strong> When a <see cref="T:DigitalRune.Graphics.SceneGraph.SkyObjectNode"/> is cloned the 
            <see cref="P:DigitalRune.Graphics.SceneGraph.SkyObjectNode.Texture"/> is not duplicated. The <see cref="P:DigitalRune.Graphics.SceneGraph.SkyObjectNode.Texture"/> is copied by reference
            (shallow copy). The original <see cref="T:DigitalRune.Graphics.SceneGraph.SkyObjectNode"/> and the cloned instance will
            reference the same <see cref="P:DigitalRune.Graphics.SceneGraph.SkyObjectNode.Texture"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SkyObjectNode.AngularDiameter">
            <summary>
            Gets or sets the size of the object using its angular diameter.
            </summary>
            <value>The angular diameter of the object in x and y (specified in radians).</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SkyObjectNode.Texture">
            <summary>
            Gets or sets the texture.
            </summary>
            <value>The texture (using premultiplied alpha).</value>
            <remarks>
            If the object should be shaded to create "moon phases", then the object in the texture must
            round and fill the entire tile of the packed texture. The texels outside the circle must be
            transparent.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SkyObjectNode.Alpha">
            <summary>
            Gets or sets the opacity of the rendered texture.
            </summary>
            <value>The opacity of the rendered texture. The default value is 1.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SkyObjectNode.SunDirection">
            <summary>
            Gets or sets the direction to the sun, used to shade the object to create "moon phases".
            </summary>
            <value>The direction to the sun. This vector is automatically normalized.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SkyObjectNode.SunLight">
            <summary>
            Gets or sets the sun light intensity used to shade the object to create "moon phases".
            </summary>
            <value>
            The intensity of the sun light. If this value is (0, 0, 0), the texture is rendered without
            "moon phases". The default value is (1, 1, 1).
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SkyObjectNode.AmbientLight">
            <summary>
            Gets or sets the ambient light intensity used for the texture.
            </summary>
            <value>
            The intensity of the ambient light used to shade the texture. The ambient light has the same
            effect as a tint color.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SkyObjectNode.LightWrap">
            <summary>
            Gets or sets the light wrap parameter.
            </summary>
            <value>The light wrap parameter in the range [0, 1]. The default value is 0.1.</value>
            <remarks>
            If this value is 0, then the sun light only lights the hemisphere of the moon/planet which
            is visible from the sun. If this value is greater than 0, then the light also lights part of
            the back side of the moon/planet. If this value is 1, then the sun light reaches back all
            the way to the point opposite of the sun.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SkyObjectNode.LightSmoothness">
            <summary>
            Gets or sets the smoothness of the light shading.
            </summary>
            <value>The light smoothness in the range [0, 1]. The default value is 1.</value>
            <remarks>
            If this value is 0, then the shading of the moon/planet is physically-based. This can lead
            to a hard border between the dark and the light side. If this value is greater than 0, the
            dark/light transition is softened.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SkyObjectNode.GlowColor0">
            <summary>
            Gets or sets the color of the first glow.
            </summary>
            <value>The color of the first glow.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SkyObjectNode.GlowExponent0">
            <summary>
            Gets or sets the exponent of the first glow.
            </summary>
            <value>The exponent of the first glow.</value>
            <remarks>
            This value is like the specular power/exponent of materials with specular Phong shading.
            Higher values create sharper, smaller highlights. Lower values create smooth, large 
            highlights.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SkyObjectNode.GlowColor1">
            <summary>
            Gets or sets the color of the second glow.
            </summary>
            <value>The color of the second glow.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SkyObjectNode.GlowExponent1">
            <summary>
            Gets or sets the exponent of the second glow.
            </summary>
            <value>The exponent of the second glow.</value>
            <inheritdoc cref="P:DigitalRune.Graphics.SceneGraph.SkyObjectNode.GlowExponent0"/>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SkyObjectNode.GlowCutoffThreshold">
            <summary>
            Gets or sets the cutoff threshold for glows.
            </summary>
            <value>The glow cutoff threshold. The default value is 0.001.</value>
            <remarks>
            Mathematically, each highlight has an infinite size. As an optimization, the highlight is
            cut off when its intensity reaches a small value - controlled by the 
            <see cref="P:DigitalRune.Graphics.SceneGraph.SkyObjectNode.GlowCutoffThreshold"/>. For example, if the <see cref="P:DigitalRune.Graphics.SceneGraph.SkyObjectNode.GlowCutoffThreshold"/>is
            0.01, then the glow is cut off where its intensity reaches less than 1% of its maximum 
            intensity. 
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SkyObjectNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SkyObjectNode" /> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SkyObjectNode.Clone">
            <inheritdoc cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.Clone"/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SkyObjectNode.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SkyObjectNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.SkyboxNode">
            <summary>
            Represents a cube map ("skybox") that is into the background of the current render target.
            </summary>
            <remarks>
            <para>
            A "skybox" is a cube map that is used as the background of a scene. 
            </para>
            <para>
            <strong>Cloning:</strong> When a <see cref="T:DigitalRune.Graphics.SceneGraph.SkyboxNode"/> is cloned the <see cref="P:DigitalRune.Graphics.SceneGraph.SkyboxNode.Texture"/> 
            is not duplicated. The <see cref="P:DigitalRune.Graphics.SceneGraph.SkyboxNode.Texture"/> and the <see cref="P:DigitalRune.Graphics.SceneGraph.SkyboxNode.Encoding"/> are copied by 
            reference (shallow copy). The original <see cref="T:DigitalRune.Graphics.SceneGraph.SkyboxNode"/> and the cloned instance will 
            reference the same instances.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SkyboxNode.Texture">
            <summary>
            Gets or sets the cube map texture.
            </summary>
            <value>The cube map texture (using premultiplied alpha).</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SkyboxNode.Color">
            <summary>
            Gets or sets the tint color.
            </summary>
            <value>The tint color. The default value is white (1, 1, 1).</value>
            <remarks>
            <para>
            The color values of the <see cref="P:DigitalRune.Graphics.SceneGraph.SkyboxNode.Texture"/> are multiplied with this value. This can be
            used to tint a skybox, change its brightness or fade it in/out.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SkyboxNode.Alpha">
            <summary>
            Gets or sets the opacity of the skybox.
            </summary>
            <value>The opacity of the skybox. The default value is 1 (opaque).</value>
            <remarks>
            <para>
            The alpha values of the <see cref="P:DigitalRune.Graphics.SceneGraph.SkyboxNode.Texture"/> are multiplied with this value. This can be
            used to fade in/out a skybox.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SkyboxNode.EnableAlphaBlending">
            <summary>
            Gets or sets a value indicating whether alpha blending is enabled.
            </summary>
            <value>
            <see langword="true"/> if alpha blending is enabled; otherwise, <see langword="false"/>.
            The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SkyboxNode.Encoding">
            <summary>
            Gets or sets the color encoding used by the cube map texture.
            </summary>
            <value>
            The color encoding used by the <see cref="P:DigitalRune.Graphics.SceneGraph.SkyboxNode.Texture"/>. The default value is 
            <see cref="F:DigitalRune.Graphics.ColorEncoding.SRgb"/>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SkyboxNode.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SkyboxNode"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SkyboxNode"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SkyboxNode.#ctor(Microsoft.Xna.Framework.Graphics.TextureCube)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SkyboxNode" /> class.
            </summary>
            <param name="texture">The cube map texture (using premultiplied alpha).</param>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SkyboxNode.Clone">
            <inheritdoc cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.Clone"/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SkyboxNode.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SkyboxNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.StarfieldNode">
            <summary>
            Represents a set of stars.
            </summary>
            <remarks>
            <para>
            This class renders a list of stars (see property <see cref="P:DigitalRune.Graphics.SceneGraph.StarfieldNode.Stars"/>). Each star is rendered 
            using a billboard projected onto the far plane. Anti-aliasing in the shader is used to get 
            smooth dots.
            </para>
            <para>
            <strong>Cloning:</strong> When a <see cref="T:DigitalRune.Graphics.SceneGraph.StarfieldNode"/> is cloned the <see cref="P:DigitalRune.Graphics.SceneGraph.StarfieldNode.Stars"/> 
            property is copied by reference (shallow copy). The original <see cref="T:DigitalRune.Graphics.SceneGraph.StarfieldNode"/> and 
            the cloned instance will reference the same list of stars.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.StarfieldNode.Color">
            <summary>
            Gets the tint color.
            </summary>
            <value>
            The tint color which is multiplied with the star colors. The default value is (1, 1, 1).
            </value>
            <remarks>
            This color can be used to change the color or the brightness of the stars.
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.StarfieldNode.Stars">
            <summary>
            Gets or sets the stars.
            </summary>
            <value>The stars.</value>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.StarfieldNode.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.StarfieldNode"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.StarfieldNode"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.StarfieldNode.#ctor(System.Collections.Generic.IList{DigitalRune.Graphics.Star})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.StarfieldNode" /> class with the given set of
            stars.
            </summary>
            <param name="stars">The stars.</param>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.StarfieldNode.Clone">
            <inheritdoc cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.Clone"/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.StarfieldNode.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.StarfieldNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.SpriteNode">
            <summary>
            Represents a 2D sprite in a scene.
            </summary>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Graphics.SceneGraph.SpriteNode"/> positions a <see cref="P:DigitalRune.Graphics.SceneGraph.SpriteNode.Sprite"/> in a 3D scene. Sprites are 
            positioned in world space, but rendered in screen space. That means, the position of the scene
            node is projected into the current viewport and the 2D sprite is rendered at the resulting
            pixel position. The orientation of the scene node is irrelevant, it has no influence on how
            the sprite is rendered.
            </para>
            <para>
            <strong>Hit Testing:</strong><br/>
            The properties <see cref="P:DigitalRune.Graphics.SceneGraph.SpriteNode.LastBounds"/>, <see cref="P:DigitalRune.Graphics.SceneGraph.SpriteNode.LastDepth"/>, and 
            <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.LastFrame"/> can be used for simple hit testing, i.e. to check whether a
            pixel position hits the sprite. Hit testing against <see cref="P:DigitalRune.Graphics.SceneGraph.SpriteNode.LastBounds"/> and 
            <see cref="P:DigitalRune.Graphics.SceneGraph.SpriteNode.LastDepth"/> has the following limitations:
            </para>
            <list type="bullet">
            <item>
            <description>
            No occlusion: It is not possible to check whether the sprite was occluded by other objects. 
            Hit testing against the <see cref="P:DigitalRune.Graphics.SceneGraph.SpriteNode.LastBounds"/> may return a hit even when the sprite is
            occluded by other geometry.
            </description>
            </item>
            <item>
            <description>
            No rotations: The property <see cref="P:DigitalRune.Graphics.SceneGraph.SpriteNode.LastBounds"/> stores the unrotated bounding box. I.e.
            hit testing against rotated sprites does not work.
            </description>
            </item>
            <item>
            <description>
            No transparency: Transparent parts of the sprite count as a hit.
            </description>
            </item>
            </list>
            </remarks>
            <example>
            <para>
            The following method can be used to make a hit test against the sprite node:
            </para>
            <code lang="csharp">
            <![CDATA[
            // Test whether a mouse position hits the sprite.
            public static bool HitTest(IGraphicsService graphicsService, SpriteNode node, Point p)
            {
              // Disabled nodes can be ignored.
              if (!node.IsEnabled)
                return false;
            
              // node.LastBounds is only valid if the sprite node was rendered in the last frame.
              if (node.LastFrame != graphicsService.Frame)
                return false;
            
              return node.LastBounds.Contains(p);
            }
            ]]>
            </code>
            <para>
            If multiple sprite nodes are hit, the property <see cref="P:DigitalRune.Graphics.SceneGraph.SpriteNode.LastDepth"/> can be used to sort the
            resulting sprite nodes by distance to the viewer.
            </para>
            </example>
            <seealso cref="T:DigitalRune.Graphics.Sprite"/>
            <seealso cref="T:DigitalRune.Graphics.ImageSprite"/>
            <seealso cref="T:DigitalRune.Graphics.TextSprite"/>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SpriteNode.Sprite">
            <summary>
            Gets or sets the sprite.
            </summary>
            <value>The sprite.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SpriteNode.AnimationTime">
            <summary>
            Gets or sets the normalized animation time.
            </summary>
            <value>
            The normalized animation time where 0 marks the start of the animation and 1 marks the end 
            of the animation. The default value is 0.
            </value>
            <remarks>
            An <see cref="T:DigitalRune.Graphics.ImageSprite"/> can contain multiple animation frames. The normalized animation 
            time determines the current frame. (See <see cref="T:DigitalRune.Graphics.PackedTexture"/> for more information.)
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative or greater than 1.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SpriteNode.Color">
            <summary>
            Gets or sets the tint color.
            </summary>
            <value>The tint color (non-premultiplied). The default value is white (1, 1, 1).</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SpriteNode.Alpha">
            <summary>
            Gets or sets the opacity of the sprite.
            </summary>
            <value>The opacity. The default value is 1 (opaque).</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SpriteNode.Origin">
            <summary>
            Gets or sets the 2D origin of the sprite relative to the scene node.
            </summary>
            <value>
            The 2D origin of the sprite relative to the scene node. (0, 0) is the upper-left corner of 
            the sprite and (1, 1) is the lower-right corner of the sprite. The default value is (0, 0).
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SpriteNode.Rotation">
            <summary>
            Gets or sets the angle (in radians) to rotate the sprite clockwise.
            </summary>
            <value>
            The angle (in radians) to rotate the sprite clockwise around its origin. The default value 
            is 0.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SpriteNode.Scale">
            <summary>
            Gets or sets the 2D scale of the sprite. 
            </summary>
            <value>
            The 2D scale of the sprite. The default value is (1, 1).
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SpriteNode.LastBounds">
            <summary>
            Gets the location and size in pixel at which the sprite was rendered.
            </summary>
            <value>The 2D bounding box of the sprite in pixel.</value>
            <remarks>
            <para>
            The properties <see cref="P:DigitalRune.Graphics.SceneGraph.SpriteNode.LastBounds"/> and <see cref="P:DigitalRune.Graphics.SceneGraph.SpriteNode.LastDepth"/> are updated every time
            the sprite node is rendered. The property <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.LastFrame"/> indicates at
            which frame the sprite node was rendered last.
            </para>
            <para>
            <strong>Note:</strong> The property <see cref="P:DigitalRune.Graphics.SceneGraph.SpriteNode.LastBounds"/> stores the unrotated bounding
            box.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.SpriteNode.LastDepth">
            <summary>
            Gets the depth at which the sprite was rendered.
            </summary>
            <value>The depth of the sprite in the range [0, 1].</value>
            <inheritdoc cref="P:DigitalRune.Graphics.SceneGraph.SpriteNode.LastBounds"/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SpriteNode.#ctor(DigitalRune.Graphics.Sprite)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SpriteNode"/> class.
            </summary>
            <param name="sprite">The sprite.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sprite"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SpriteNode.Clone">
            <inheritdoc cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.Clone"/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SpriteNode.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.SpriteNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.TerrainNode">
            <summary>
            Represents an instance of a height-field-based terrain.
            (Not available on these platforms: Xbox 360, mobile platforms)
            </summary>
            <remarks>
            <para>
            This type is not available on the following platforms: Xbox 360, mobile platforms
            </para>
            <para>
            The <see cref="T:DigitalRune.Graphics.SceneGraph.TerrainNode"/> represents a terrain in the <see cref="T:DigitalRune.Graphics.SceneGraph.Scene"/>. The terrain
            itself is defined by <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.Terrain"/>.
            </para>
            <para>
            <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.Terrain"/>s can be shared, i.e. multiple <see cref="T:DigitalRune.Graphics.SceneGraph.TerrainNode"/>s can reference
            the same <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.Terrain"/> instance.
            </para>
            <para>
            <strong>Material:</strong><br/>
            The terrain node is rendered using a <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.Material"/> (similar to a normal
            <see cref="T:DigitalRune.Graphics.Mesh"/>). If no custom material is set, a default material is used. The default
            material supports the render passes "GBuffer" and "Material" used in the deferred lighting
            samples.
            </para>
            <para>
            <strong>Clipmaps:</strong><br/>
            The default material renders the terrain using height and material information stored in
            clipmaps. <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.BaseClipmap"/> stores information at the terrain vertex level. It usually
            provides height, normal and hole information which define the terrain mesh.
            <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailClipmap"/> stores more detailed information which is used to shade the
            terrain. It usually stores detail normals (for normal mapping), diffuse colors, specular
            colors, heights (for parallax occlusion mapping) and other material information.
            </para>
            <para>
            <strong>Renderers:</strong><br/>
            Terrain clipmaps are created and updated (when the camera has moved) by the
            <see cref="T:DigitalRune.Graphics.Rendering.TerrainClipmapRenderer"/>. The <see cref="T:DigitalRune.Graphics.Rendering.TerrainRenderer"/> renders
            <see cref="T:DigitalRune.Graphics.SceneGraph.TerrainNode"/>s to the screen.
            </para>
            <para>
            <strong>Level of detail (LOD):</strong><br/>
            When the terrain is rendered, the terrain mesh and texture resolution depends on the distance
            from the camera. When the <see cref="T:DigitalRune.Graphics.Rendering.TerrainRenderer"/> renders the terrain, it uses the
            <see cref="P:DigitalRune.Graphics.RenderContext.LodCameraNode"/> in the <see cref="T:DigitalRune.Graphics.RenderContext"/>. (If no
            <see cref="P:DigitalRune.Graphics.RenderContext.LodCameraNode"/> is set, the normal
            <see cref="P:DigitalRune.Graphics.RenderContext.CameraNode"/> of the render context is used. 
            </para>
            <para>
            A terrain node should only be rendered for a single camera node because the renderer might
            cache camera-dependent LOD data. If a scene contains two camera nodes (e.g. for 2 player
            split screen rendering), the <see cref="P:DigitalRune.Graphics.RenderContext.LodCameraNode"/> should be one of these
            two cameras. It could also be a "virtual" camera, which is e.g. between both player cameras.
            Switching the cameras within one frame would be inefficient.
            </para>
            <para>
            Alternatively, each camera could use a separate <see cref="T:DigitalRune.Graphics.SceneGraph.TerrainNode"/>. When the image of
            a camera is rendered only one terrain node should be rendered. Several terrain nodes can
            reference the same <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.Terrain"/> instance. 
            </para>
            <para>
            <strong>Terrain shadows:</strong><br/>
            Terrain nodes can be rendered into the shadow maps. <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.CastsShadows"/> is
            <see langword="true"/> by default. When using the standard <see cref="T:DigitalRune.Graphics.SceneGraph.ShadowCasterQuery"/>,
            terrain nodes are only rendered into the shadow maps of <see cref="T:DigitalRune.Graphics.DirectionalLight"/>s.
            </para>
            <para>
            <strong>Cloning:</strong><br/>
            When a <see cref="T:DigitalRune.Graphics.SceneGraph.TerrainNode"/> is cloned the properties <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.Terrain"/> and
            <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.Material"/> are copied by reference (shallow copy). The original and the cloned
            node will reference the same instances.
            </para>
            </remarks>
            <seealso cref="T:DigitalRune.Graphics.Terrain"/>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.TerrainNode.Terrain">
            <summary>
            Gets or sets the terrain definition.
            </summary>
            <value>The terrain definition.</value>
            <remarks>
            <para>
            Multiple <see cref="T:DigitalRune.Graphics.SceneGraph.TerrainNode"/>s can reference the same <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.Terrain"/> instance.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.TerrainNode.BaseClipmap">
            <summary>
            Gets or sets the base clipmap which stores geometry information at the terrain mesh vertex
            level.
            </summary>
            <value>
            The base clipmap which stores geometry information at the terrain mesh vertex level.
            </value>
            <remarks>
            <see cref="T:DigitalRune.Graphics.SceneGraph.TerrainNode"/> for more information.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailClipmap">
            <summary>
            Gets or sets the detail clipmap which stores material information used to shade the terrain.
            </summary>
            <value>
            The detail clipmap which stores material information used to shade the terrain.
            </value>
            <remarks>
            <see cref="T:DigitalRune.Graphics.SceneGraph.TerrainNode"/> for more information.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.TerrainNode.Material">
            <summary>
            Gets or sets the terrain material.
            </summary>
            <value>The terrain material.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.TerrainNode.MaterialInstance">
            <summary>
            Gets the material instance.
            </summary>
            <value>The material instance.</value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.TerrainNode.HoleThreshold">
            <summary>
            Gets or sets the threshold used to check for holes.
            </summary>
            <value>The threshold used to check for holes. The default value is 0.3.</value>
            <remarks>
            <para>
            Holes are usually marked using 0 values in the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.BaseClipmap"/>. Solid terrain
            parts have a value of 1. However, in the distance the terrain geometry is downsampled, which
            also means that the hole values are averaged. <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.HoleThreshold"/> is used to decide
            when a value still counts as a hole. A hole threshold of 0 disables holes.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailFadeRange">
            <summary>
            Gets or sets the detail fade range which defines the transition between two clipmap levels
            of the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailClipmap"/>.
            </summary>
            <value>The detail fade range in the range [0, 1]. The default value is 0.3.</value>
            <remarks>
            To hide transitions between clipmap levels of the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailClipmap"/>, the lower
            clipmap level fades to the higher clipmap level. <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailFadeRange"/> defines the
            range over which this transition occurs. If this value is 0, then there is no transition.
            The smoothest transition is created by setting the value to 1, but this wastes a lot of
            texture resolution. Small values like 0.3 are usually better.
            </remarks>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.TerrainNode.#ctor(DigitalRune.Graphics.Terrain,DigitalRune.Graphics.Material)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.TerrainNode"/> class.
            </summary>
            <param name="terrain">The terrain.</param>
            <param name="material">The material.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="terrain"/> or <paramref name="material"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.TerrainNode.Dispose(System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.TerrainNode.Clone">
            <inheritdoc cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.Clone"/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.TerrainNode.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.TerrainNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Graphics.SceneGraph.WaterNode">
            <summary>
            Represents a body of water, e.g. a lake, river or an infinite ocean.
            </summary>
            <remarks>
            <para>
            The appearance (color, reflection, refraction, etc.) of the water is defined by the
            property <see cref="P:DigitalRune.Graphics.SceneGraph.WaterNode.Water"/>. 
            </para>
            <para>
            The <see cref="P:DigitalRune.Graphics.SceneGraph.WaterNode.Volume"/> defines the surface and the underwater volume. If 
            <see cref="P:DigitalRune.Graphics.SceneGraph.WaterNode.Volume"/> is  <see langword="null"/>, an infinite water plane (e.g. for an ocean) 
            is created. The top surface of the water volume should go through the local origin of the
            <see cref="T:DigitalRune.Graphics.SceneGraph.WaterNode"/>. This is expected for depth-based water color computations.
            </para>
            <para>
            The water supports planar reflections (see <see cref="P:DigitalRune.Graphics.SceneGraph.WaterNode.PlanarReflection"/>) and cube map/skybox
            reflections (see <see cref="P:DigitalRune.Graphics.SceneGraph.WaterNode.SkyboxReflection"/>). The water can flow into user-defined
            directions, defined in <see cref="P:DigitalRune.Graphics.SceneGraph.WaterNode.Flow"/>. The water surface can also be displaced using a
            displacement map to create waves (see <see cref="P:DigitalRune.Graphics.SceneGraph.WaterNode.Waves"/>).
            </para>
            <para>
            <see cref="T:DigitalRune.Graphics.SceneGraph.WaterNode"/>s are rendered by the <see cref="T:DigitalRune.Graphics.Rendering.WaterRenderer"/>.
            </para>
            <para>
            <strong>Cloning:</strong> When a <see cref="T:DigitalRune.Graphics.SceneGraph.WaterNode"/> is cloned the properties 
            <see cref="P:DigitalRune.Graphics.SceneGraph.WaterNode.Water"/>, <see cref="P:DigitalRune.Graphics.SceneGraph.WaterNode.Volume"/>, <see cref="P:DigitalRune.Graphics.SceneGraph.WaterNode.PlanarReflection"/>,
            <see cref="P:DigitalRune.Graphics.SceneGraph.WaterNode.SkyboxReflection"/>, <see cref="P:DigitalRune.Graphics.SceneGraph.WaterNode.Flow"/> and <see cref="P:DigitalRune.Graphics.SceneGraph.WaterNode.Waves"/> are copied by
            reference (shallow copy). The original and the cloned node will reference the same instances.
            </para>
            </remarks>
            <seealso cref="T:DigitalRune.Graphics.Water"/>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.WaterNode.Water">
            <summary>
            Gets or sets the water properties.
            </summary>
            <value>The water properties.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.WaterNode.EnableUnderwaterEffect">
            <summary>
            Gets or sets a value indicating whether an underwater effect should be displayed
            if the camera is underwater.
            </summary>
            <value>
            <see langword="true" /> if an underwater effect is displayed when the camera is underwater; 
            otherwise, <see langword="false" />. The default value is <see langword="false"/>.
            </value>
            <remarks>
            <para>
            Set this property to <see langword="true"/> if the player can dive into the water. If this
            value is <see langword="false"/>, the objects under the water surface are rendered normally
            when the camera peeks under the water surface. To check if an object is underwater, use
            the <see cref="M:DigitalRune.Graphics.SceneGraph.WaterNode.IsUnderwater(DigitalRune.Mathematics.Algebra.Vector3F)"/> method.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.WaterNode.Volume">
            <summary>
            Gets or sets the shape which defines the water volume.
            </summary>
            <value>
            The shape which defines the water volume. Can be <see langword="null"/> to create an
            infinite ocean plane. The default value is <see langword="null"/>.
            </value>
            <remarks>
            <para>
            If this value is <see langword="null"/> (default), then an infinite plane of water is
            rendered. The water plane is horizontal in world space and goes through the local origin of
            the <see cref="T:DigitalRune.Graphics.SceneGraph.WaterNode"/>.
            </para>
            <para>
            If the <see cref="P:DigitalRune.Graphics.SceneGraph.WaterNode.Volume"/> is set to a shape, then the water is only rendered in the shape.
            The shape defines the water surface as well as the underwater volume. Examples:
            </para>
            <list type="bullet">
            <item>
            <description>
            A <see cref="T:DigitalRune.Geometry.Shapes.RectangleShape"/> can be used to define a swimming pool without an underwater
            effect.
            </description>
            </item>
            <item>
            <description>
             A <see cref="T:DigitalRune.Geometry.Shapes.BoxShape"/> can be used to define a swimming pool with an underwater effect-
             which means, a special effect is rendered when the player is diving in the swimming pool.
            </description>
            </item>
            <item>
            <description>
            A <see cref="T:DigitalRune.Geometry.Shapes.TriangleMeshShape"/> can be used to define a complex meandering river.
            </description>
            </item>
            </list>
            <para>
            The top surface of the water volume should go through the local origin of the
            <see cref="T:DigitalRune.Graphics.SceneGraph.WaterNode"/>. This is expected for depth-based water color computations.
            </para>
            <para>
            If the water should be rendered with displacement mapping (see <see cref="P:DigitalRune.Graphics.SceneGraph.WaterNode.Waves"/>), then the
            <see cref="P:DigitalRune.Graphics.SceneGraph.WaterNode.Volume"/> must be a shape with a tessellated surface because the displacement is
            applied to vertices. This means, that waves will not work with a simple
            <see cref="T:DigitalRune.Geometry.Shapes.RectangleShape"/>. You have to specify a <see cref="T:DigitalRune.Geometry.Shapes.TriangleMeshShape"/> with a
            sufficient level of tessellation on the top side of the shape. If the <see cref="P:DigitalRune.Graphics.SceneGraph.WaterNode.Volume"/> is
            <see langword="null"/>, the renderer will automatically use a tessellated mesh (e.g. a
            projected grid) if required.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.WaterNode.ExtraHeight">
            <summary>
            Gets or sets the extra height added to the bounding shape.
            </summary>
            <value>The extra height added to the bounding shape. The default value is 0.</value>
            <remarks>
            <para>
            This value is only relevant if displacement mapping (see <see cref="P:DigitalRune.Graphics.SceneGraph.WaterNode.Waves"/>) is applied to
            the water. This property must specify the max wave height above the water surface (defined
            by <see cref="P:DigitalRune.Graphics.SceneGraph.WaterNode.Volume"/>). The best way to set this property is to visualize the bounding
            shape (<see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.Shape"/>) of the scene node and increase the
            <see cref="P:DigitalRune.Graphics.SceneGraph.WaterNode.ExtraHeight"/> until all waves are within the bounding shape.
            </para>
            <para>
            If the this value is not set properly, then bounding shape of the water used for view
            frustum culling might be too small, and the water might be culled even if some waves should
            be visible.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.WaterNode.PlanarReflection">
            <summary>
            Gets or sets the planar reflection.
            </summary>
            <value>The planar reflection.</value>
            <remarks>
            Usually, you will want to set a <see cref="P:DigitalRune.Graphics.SceneGraph.WaterNode.PlanarReflection"/> or a
            <see cref="P:DigitalRune.Graphics.SceneGraph.WaterNode.SkyboxReflection"/>, but not both. If both are set then the renderer can choose
            one of them, or combine them (e.g. to blend to the skybox if some reflected rays are not
            inside the planar reflection texture).
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.WaterNode.SkyboxReflection">
            <summary>
            Gets or sets the skybox that is reflected.
            </summary>
            <value>The skybox that is reflected.</value>
            <inheritdoc cref="P:DigitalRune.Graphics.SceneGraph.WaterNode.PlanarReflection"/>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.WaterNode.Flow">
            <summary>
            Gets or sets the water flow used to define water movement.
            </summary>
            <value>
            The water flow, used to define water movement. The default value is <see langword="null"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.WaterNode.Waves">
            <summary>
            Gets or sets the maps used to displace the water surface.
            </summary>
            <value>
            The maps used to displace the water surface. The default value is
            <see langword="null"/>.
            </value>
            <remarks>
            <para>
            The class <see cref="T:DigitalRune.Graphics.WaterWaves"/> is used to define a displacement map and a normal map
            which are applied to the water surface. The displacement map is used to move vertices,
            therefore the water <see cref="P:DigitalRune.Graphics.SceneGraph.WaterNode.Volume"/> must have a tessellated surface. See also
            <see cref="P:DigitalRune.Graphics.SceneGraph.WaterNode.Volume"/>.
            </para>
            <para>
            <strong>Important: <see cref="P:DigitalRune.Graphics.SceneGraph.WaterNode.ExtraHeight"/></strong><br/>
            When a displacement mapping is used, the property <see cref="P:DigitalRune.Graphics.SceneGraph.WaterNode.ExtraHeight"/> must be set to a
            value which is larger than the max wave displacement. See <see cref="P:DigitalRune.Graphics.SceneGraph.WaterNode.ExtraHeight"/> for
            more details.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Graphics.SceneGraph.WaterNode.DepthBufferWriteEnable">
            <summary>
            Gets or sets a value indicating whether the water surface is rendered into the depth buffer.
            </summary>
            <value>
            <see langword="true"/> if the water surface is rendered into the depth buffer; otherwise,
            <see langword="false"/> if the water does not change the depth buffer. The default value is
            <see langword="false"/>.
            </value>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.WaterNode.#ctor(DigitalRune.Graphics.Water,DigitalRune.Geometry.Shapes.Shape)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.WaterNode" /> class.
            </summary>
            <param name="water">The water.</param>
            <param name="volume">
            The water volume. Can be <see langword="null"/>, see <see cref="P:DigitalRune.Graphics.SceneGraph.WaterNode.Volume"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="water"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.WaterNode.Dispose(System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.WaterNode.Clone">
            <inheritdoc cref="M:DigitalRune.Graphics.SceneGraph.SceneNode.Clone"/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.WaterNode.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.WaterNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Graphics.SceneGraph.WaterNode.IsUnderwater(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Determines whether the specified world space position is underwater.
            </summary>
            <param name="position">The position in world space.</param>
            <returns>
            <see langword="true"/> if the position is underwater; otherwise, <see langword="false"/>
            </returns>
            <remarks>
            A position is underwater if it is inside the <see cref="T:DigitalRune.Geometry.Shapes.Shape"/> of this node.
            </remarks>
        </member>
        <member name="T:DigitalRune.Storages.StorageContentManager">
            <summary>
            Extends the XNA <see cref="T:Microsoft.Xna.Framework.Content.ContentManager"/> and loads assets from any <see cref="T:DigitalRune.Storages.IStorage"/>
            location.
            </summary>
        </member>
        <member name="P:DigitalRune.Storages.StorageContentManager.Storage">
            <summary>
            Gets the storage that provides the content.
            </summary>
            <value>The storage that provides the content.</value>
        </member>
        <member name="M:DigitalRune.Storages.StorageContentManager.#ctor(System.IServiceProvider)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Storages.StorageContentManager"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Storages.StorageContentManager"/> class reading content
            from the <see cref="T:DigitalRune.Storages.IStorage"/> service.
            </summary>
            <param name="serviceProvider">
            The service provider the <seealso cref="T:Microsoft.Xna.Framework.Content.ContentManager"/> should use to locate services.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="serviceProvider"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Storages.StorageContentManager.#ctor(System.IServiceProvider,DigitalRune.Storages.IStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Storages.StorageContentManager"/> class reading content
            from the specified storage.
            </summary>
            <param name="serviceProvider">
            The service provider the <seealso cref="T:Microsoft.Xna.Framework.Content.ContentManager"/> should use to locate services.
            </param>
            <param name="storage">
            The storage that provides the content. (If this parameter is <see langword="null"/>, the 
            <see cref="T:DigitalRune.Storages.StorageContentManager"/> automatically looks for the <see cref="T:DigitalRune.Storages.IStorage"/>
            service.)
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="serviceProvider"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Storages.StorageContentManager.#ctor(System.IServiceProvider,DigitalRune.Storages.IStorage,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Storages.StorageContentManager"/> class.
            </summary>
            <param name="serviceProvider">
            The service provider the <seealso cref="T:Microsoft.Xna.Framework.Content.ContentManager"/> should use to locate services.
            </param>
            <param name="storage">
            The storage that provides the content. (If this parameter is <see langword="null"/>, the 
            <see cref="T:DigitalRune.Storages.StorageContentManager"/> automatically looks for the <see cref="T:DigitalRune.Storages.IStorage"/>
            service.)
            </param>
            <param name="rootDirectory">
            The root directory to search for content. Can be <see langword="null"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="serviceProvider"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Storages.StorageContentManager.OpenStream(System.String)">
            <summary>
            Opens a stream for reading the specified asset. Derived classes can replace this to
            implement pack files or asset compression.
            </summary>
            <param name="assetName">The name of the asset being read.</param>
            <returns>The opened stream.</returns>
        </member>
        <member name="T:DigitalRune.Storages.TitleStorage">
            <summary>
            Provides access to the title's default storage location. (Only available in the XNA-compatible
            build.)
            </summary>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Graphics.dll.
            </remarks>
        </member>
        <member name="P:DigitalRune.Storages.TitleStorage.DirectorySeparator">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Storages.TitleStorage.RootDirectory">
            <summary>
            Gets the root directory relative to the title container.
            </summary>
            <value>The root directory relative to the title container.</value>
            <remarks>
            All file access is relative to this root directory.
            </remarks>
        </member>
        <member name="M:DigitalRune.Storages.TitleStorage.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Storages.TitleStorage"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Storages.TitleStorage"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Storages.TitleStorage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Storages.TitleStorage"/> class using the specified
            directory as the root directory.
            </summary>
            <param name="rootDirectory">The root directory to search for content.</param>
        </member>
        <member name="M:DigitalRune.Storages.TitleStorage.GetRealPath(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Storages.TitleStorage.OpenFile(System.String)">
            <inheritdoc/>
        </member>
    </members>
</doc>
